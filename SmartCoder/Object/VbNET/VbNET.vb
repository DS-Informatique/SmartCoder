Imports System.ComponentModel
Imports System.Drawing
Imports System.IO
Imports System.Text.RegularExpressions
Imports System.Windows.Forms
Imports System.Xml.Serialization

Public Class VbNET
#Region "<Schema>"
#Region "|1| [Property]"

#End Region
#Region "|2| [Enumeration]"
#Region "|02.00| <Enumeration> [AccessModifiers]{6}"
    Public Enum AccessModifiers
        ''' <summary>
        ''' Specifies that one or more declared programming elements are accessible only from within the assembly that
        ''' contains their declaration.
        '''[Remarks]
        ''' In many cases, you want programming elements such as classes and structures to be used by the entire
        ''' assembly, not only by the component that declares them. However, you might not want them to be accessible
        ''' by code outside the assembly (for example, if the application is proprietary). If you want to limit access to an
        ''' element in this way, you can declare it by using the Friend modifier.
        ''' 
        ''' Code in other classes, structures, and modules that are compiled to the same assembly can access all the
        ''' Friend elements in that assembly.
        ''' 
        ''' Friend access is often the preferred level for an application's programming elements, and Friend is the
        ''' default access level of an interface, a module, a class, or a structure.
        ''' 
        ''' You can use Friend only at the module, interface, or namespace level. Therefore, the declaration context for a
        ''' Friend element must be a source file, a namespace, an interface, a module, a class, or a structure; it can't be a
        ''' procedure.
        ''' [/Remarks]
        ''' [Note]
        ''' You can also use the Protected Friend access modifier, which makes a class member accessible from within that class,
        ''' from derived classes, and from the same assembly in which the class is defined. To restrict access to a member from
        ''' within its class and from derived classes in the same assembly, you use the Private Protected access modifier.
        ''' [/Note]
        ''' </summary>
        [Friend]
        ''' <summary>
        ''' Specifies that one or more declared programming elements are accessible only from within their declaration
        ''' context, including from within any contained types.
        ''' [Remarks]
        ''' If a programming element represents proprietary functionality, or contains confidential data, you usually
        ''' want to limit access to it as strictly as possible. You achieve the maximum limitation by allowing only the
        ''' module, class, or structure that defines it to access it. To limit access to an element in this way, you can
        ''' declare it with Private .
        ''' [/Remarks]
        ''' [Note]
        ''' You can also use the Private Protected access modifier, which makes a member accessible from within that class and
        ''' from derived classes located in its containing assembly.
        ''' [/Note]
        ''' [Rules]
        ''' Declaration Context. You can use Private only at module level. This means the declaration context for
        ''' a Private element must be a module, class, or structure, and cannot be a source file, namespace,
        ''' interface, or procedure.
        ''' [/Rules]
        ''' [Behavior]
        '''     >Access Level. All code within a declaration context can access its Private elements. This includes
        '''     code within a contained type, such as a nested class or an assignment expression in an enumeration.
        '''     No code outside of the declaration context can access its Private elements.
        '''     
        '''     >Access Modifiers. The keywords that specify access level are called access modifiers. For a
        '''     comparison of the access modifiers, see Access levels in Visual Basic.
        ''' [/Behavior]
        ''' [Usage]
        ''' Class Statement
        ''' Const Statement
        ''' Declare Statement
        ''' Delegate Statement
        ''' Dim Statement
        ''' Enum Statement
        ''' Event Statement
        ''' Function Statement
        ''' Interface Statement
        ''' Property Statement
        ''' Structure Statement
        ''' Sub Statement
        ''' [/Usage]
        ''' </summary>
        [Private]
        ''' <summary>
        ''' A member access modifier that specifies that one or more declared programming elements are accessible
        ''' only from within their own Class Or from a derived Class.
        ''' [Remarks]
        ''' Sometimes a programming element declared in a class contains sensitive data or restricted code, and you
        ''' want to limit access to the element. However, if the class is inheritable and you expect a hierarchy of derived
        ''' classes, it might be necessary for these derived classes to access the data or code. In such a case, you want the
        ''' element to be accessible both from the base class and from all derived classes. To limit access to an element in
        ''' this manner, you can declare it with Protected .
        ''' [/Remarks]
        ''' [Note]
        ''' The Protected access modifier can be combined with two other modifiers:
        '''     >The Protected Friend modifier makes a class member accessible from within that class, from derived classes, and
        '''     from the same assembly in which the class is defined.
        '''     
        '''     >The Private Protected modifier makes a class member accessible by derived types, but only within its containing
        '''     assembly.
        ''' [/Note]
        ''' [Rules]
        ''' Declaration Context. You can use Protected only at the class level. This means the declaration context
        ''' for a Protected element must be a class, and cannot be a source file, namespace, interface, module,
        ''' structure, or procedure.
        ''' [/Rules]
        ''' [Behavior]
        '''     >Access Level. All code in a class can access its elements. Code in any class that derives from a base
        '''     class can access all the Protected elements of the base class. This is true for all generations of
        '''     derivation. This means that a class can access Protected elements of the base class of the base class,
        '''     and so on.
        '''     Protected access is not a superset or subset of friend access.
        '''     
        '''     >Access Modifiers. The keywords that specify access level are called access modifiers. For a
        '''     comparison of the access modifiers, see Access levels in Visual Basic.
        '''     
        ''' [/Behavior]
        ''' [Usage]
        ''' The Protected modifier can be used in these contexts:
        ''' Class Statement
        ''' Const Statement
        ''' Declare Statement
        ''' Delegate Statement
        ''' Dim Statement
        ''' Enum Statement
        ''' Event Statement
        ''' Function Statement
        ''' Interface Statement
        ''' Property Statement
        ''' Structure Statement
        ''' Sub Statement
        ''' [/Usage>
        ''' </summary>
        [Protected]
        ''' <summary>
        ''' Specifies that one or more declared programming elements have no access restrictions.
        ''' [Remarks]
        ''' If you are publishing a component or set of components, such as a class library, you usually want the
        ''' programming elements to be accessible by any code that interoperates with your assembly. To confer such
        ''' unlimited access on an element, you can declare it with Public .
        ''' 
        ''' Public access is the normal level for a programming element when you do not need to limit access to it.
        ''' Note that the access level of an element declared within an interface, module, class, or structure defaults to
        ''' Public if you do not declare it otherwise.
        ''' [/Remarks]
        ''' [Rules]
        ''' Declaration Context. You can use Public only at module, interface, or namespace level. This means
        ''' the declaration context for a Public element must be a source file, namespace, interface, module, class,
        ''' or structure, and cannot be a procedure.
        ''' [/Rules]
        ''' [Behavior]
        '''     >Access Level. All code that can access a module, class, or structure can access its Public elements.
        '''     
        '''     >Default Access. Local variables inside a procedure default to public access, and you cannot use any 
        '''     access modifiers on them.
        '''     
        '''     >Access Modifiers. The keywords that specify access level are called access modifiers. For a
        '''     comparison of the access modifiers, see Access levels in Visual Basic.
        ''' [/Behavior]
        ''' [Usage]
        ''' The Public modifier can be used in these contexts:
        ''' Class Statement
        ''' Const Statement
        ''' Declare Statement
        ''' Delegate Statement
        ''' Dim Statement
        ''' Enum Statement
        ''' Event Statement
        ''' Function Statement
        ''' Interface Statement
        ''' Module Statement
        ''' Operator Statement
        ''' Property Statement
        ''' Structure Statement
        ''' Sub Statement
        ''' [/Usage]
        ''' </summary>
        [Public]
        ''' <summary>
        ''' Not set
        ''' </summary>
        [Nothing]
        ''' <summary>
        ''' The Protected Friend keyword combination in the declaration statement specifies that the element can be accessed either from derived classes or from within the same assembly, or both. The following code shows a sample Protected Friend declaration.
        ''' You can use Protected Friend only at class level, and only when you declare a member of a class. This means you can declare a protected friend element in a class, but not at the level of a source file or namespace, or inside an interface, module, structure, or procedure.
        ''' </summary>
        [Protected_Friend]
        ''' <summary>
        ''' The Private Protected keyword combination is a member access modifier. A Private Protected member is accessible by all members in its containing class, as well as by types derived from the containing class, but only if they are found in its containing assembly.
        ''' [Only Applicable for: { <see cref="[Structure]"/>]
        ''' </summary>
        [Private_Protected]
    End Enum

#End Region
#Region "|02.01| <Enumeration> [PropertyModifiers]{8}"
    ''' <summary>
    ''' Optional. Can be one of the following:
    ''' </summary>
    Public Enum PropertyModifiers
        ''' <summary>
        ''' Overloading is the practice of supplying more than one Description for a given property or procedure name in the same scope. Redeclaring a property or procedure with a different signature is sometimes called hiding by signature.
        ''' </summary>
        [Overloads] = 0
        ''' <summary>
        ''' Specifies that a property or procedure overrides an identically named property or procedure inherited from a base class.
        ''' </summary>
        [Overrides] = 1
        ''' <summary>
        ''' Specifies that a property or procedure can be overridden by an identically named property or procedure in a derived class.
        ''' </summary>
        [Overridable] = 2
        ''' <summary>
        ''' Specifies that a property or procedure cannot be overridden in a derived class.
        ''' </summary>
        [NotOverridable] = 3
        ''' <summary>
        ''' Specifies that a property or procedure is not implemented in this class and must be overridden in a derived class before it can be used.
        ''' </summary>
        [MustOverride] = 4
        ''' <summary>
        ''' Shadowing and Overriding. Both shadowing and overriding redefine an inherited element, but there are significant differences between the two approaches. For more information, see Shadowing in Visual Basic.
        ''' </summary>
        [MustOverride_Overrides] = 5
        ''' <summary>
        ''' You can use NotOverridable only in a property or procedure declaration statement. You can specify NotOverridable only on a property or procedure that overrides another property or procedure, that is, only in combination with Overrides.
        ''' </summary>
        [NotOverridable_Overrides] = 6
        [Nothing] = 7
    End Enum
#End Region
#Region "|02.02| <Enumeration> [ProcedureModifier]{6}"
    Public Enum ProcedureModifiers
        ''' <summary>
        ''' Specifies that a property or procedure is not implemented in this class and must be overridden in a derived class
        ''' before it can be used.
        ''' [Remarks]
        ''' You can use MustOverride only in a property or procedure declaration statement. The property or procedure that
        ''' specifies MustOverride must be a member of a class, and the class must be marked MustInherit.
        ''' [/Remarks]
        ''' [Rules]
        ''' Incomplete Declaration. When you specify MustOverride , you do not supply any additional lines of
        ''' code For the Property Or procedure, Not even the End Function , End Property , Or End Sub statement.
        ''' 
        ''' Combined Modifiers. You cannot specify MustOverride together with NotOverridable , Overridable , or
        ''' Shared In the same declaration.
        ''' 
        ''' Shadowing and Overriding. Both shadowing and overriding redefine an inherited element, but there
        ''' are significant differences between the two approaches. For more information, see Shadowing In Visual
        ''' Basic.
        ''' 
        ''' Alternate Terms. An element that cannot be used except in an override is sometimes called a pure virtual
        ''' element.
        ''' [/Rules]
        ''' [Usage]
        ''' The MustOverride modifier can be used in these contexts:
        ''' Function Statement
        ''' Property Statement
        ''' Sub Statement
        ''' [/Usage]
        ''' </summary>
        [MustOverride]
        ''' <summary>
        ''' Specifies that a property or procedure cannot be overridden in a derived class.
        ''' [Remarks]
        ''' The NotOverridable modifier prevents a property or method from being overridden in a derived class. The
        ''' Overridable modifier allows a property or method in a class to be overridden in a derived class. For more
        ''' information, see Inheritance Basics.
        ''' 
        ''' If the Overridable or NotOverridable modifier is not specified, the default setting depends on whether the
        ''' property or method overrides a base class property or method. If the property or method overrides a base class
        ''' property or method, the default setting is Overridable ; otherwise, it is NotOverridable .
        ''' 
        ''' An element that cannot be overridden is sometimes called a sealed element.
        ''' You can use NotOverridable only in a property or procedure declaration statement. You can specify
        ''' NotOverridable only on a property or procedure that overrides another property or procedure, that is, only in
        ''' combination with Overrides .
        ''' 
        ''' You cannot specify Overridable or NotOverridable for a Private method.
        ''' You cannot specify NotOverridable together with MustOverride , Overridable , or Shared in the same
        ''' declaration.
        ''' [/Remarks]
        ''' [Usage]
        ''' The NotOverridable modifier can be used in these contexts:
        ''' Function Statement
        ''' Property Statement
        ''' Sub Statement
        ''' [/Usage]
        ''' </summary>
        [NotOverridable]
        ''' <summary>
        ''' Specifies that a property or procedure redeclares one or more existing properties or procedures with the same
        ''' name.
        ''' [Remarks]
        ''' Overloading is the practice of supplying more than one Description for a given property or procedure name in the
        ''' same scope. Redeclaring a property or procedure with a different signature is sometimes called hiding by
        ''' signature.
        ''' [/Remarks]
        ''' [Rules]
        ''' Declaration Context. You can use Overloads only in a property or procedure declaration statement.
        ''' 
        ''' Combined Modifiers. You cannot specify Overloads together with Shadows in the same procedure 
        ''' declaration.
        ''' 
        ''' Required Differences. The signature in this declaration must be different from the signature of every
        ''' property or procedure that it overloads. The signature comprises the property or procedure name
        ''' together with the following:
        '''     >the number of parameters
        '''     >the order of the parameters
        '''     >the data types of the parameters
        '''     >the number of type parameters (for a generic procedure)
        '''     >the return type (only for a conversion operator procedure)
        ''' All overloads must have the same name, but each must differ from all the others in one or more of the
        ''' preceding respects. This allows the compiler to distinguish which version to use when code calls the
        ''' property or procedure.
        ''' 
        ''' Disallowed Differences. Changing one or more of the following is not valid for overloading a property
        ''' or procedure, because they are not part of the signature:
        '''     >whether or not it returns a value (for a procedure)
        '''     >the data type of the return value (except for a conversion operator)
        '''     >the names of the parameters or type parameters
        '''     >the constraints on the type parameters (for a generic procedure)
        '''     >parameter modifier keywords (such as ByRef or Optional )
        '''     >property or procedure modifier keywords (such as Public or Shared )
        '''
        ''' Optional Modifier. You do not have to use the Overloads modifier when you are defining multiple
        ''' overloaded properties or procedures in the same class. However, if you use Overloads in one of the
        ''' declarations, you must use it in all of them.
        ''' 
        ''' Shadowing and Overloading. Overloads can also be used to shadow an existing member, or set of
        ''' overloaded members, in a base class. When you use Overloads in this way, you declare the property or
        ''' method with the same name and the same parameter list as the base class member, and you do not supply
        ''' the Shadows keyword.
        ''' 
        ''' If you use Overrides , the compiler implicitly adds Overloads so that your library APIs work with C# more easily
        ''' [/Rules]
        ''' [Usage]
        ''' The Overloads modifier can be used in these contexts:
        ''' Function Statement
        ''' Operator Statement
        ''' Property Statement
        ''' Sub Statement
        ''' [/Usage]
        ''' 
        ''' 
        ''' </summary>
        [Overloads]
        ''' <summary>
        ''' Specifies that a property or procedure can be overridden by an identically named property or procedure in a
        ''' derived class.
        ''' [Remarks]
        ''' The Overridable modifier allows a property or method in a class to be overridden in a derived class. The
        ''' NotOverridable modifier prevents a property or method from being overridden in a derived class. For more
        ''' information, see Inheritance Basics.
        ''' 
        ''' If the Overridable or NotOverridable modifier is not specified, the default setting depends on whether the
        ''' property or method overrides a base class property or method. If the property or method overrides a base class
        ''' property or method, the default setting is Overridable ; otherwise, it is NotOverridable .
        ''' 
        ''' You can shadow or override to redefine an inherited element, but there are significant differences between the
        ''' two approaches. For more information, see Shadowing in Visual Basic.
        ''' 
        ''' An element that can be overridden is sometimes referred to as a virtual element. If it can be overridden, but
        ''' does not have to be, it is sometimes also called a concrete element.
        ''' You can use Overridable only in a property or procedure declaration statement.
        ''' 
        ''' {Combined Modifiers}
        ''' You cannot specify Overridable or NotOverridable for a Private method.
        ''' You cannot specify Overridable together with MustOverride , NotOverridable , or Shared in the same
        ''' declaration.
        ''' Because an overriding element is implicitly overridable, you cannot combine Overridable with Overrides .
        ''' [/Remarks]
        ''' [Usage]
        ''' The Overridable modifier can be used in these contexts:
        ''' Function Statement
        ''' Property Statement
        ''' Sub Statement
        ''' [/Usage]
        ''' </summary>
        [Overridable]
        ''' <summary>
        ''' Specifies that a property or procedure overrides an identically named property or procedure inherited from a
        ''' base Class.
        ''' [Rules]
        '''     >Declaration Context. You can use Overrides only in a property or procedure declaration statement.
        '''     >Combined Modifiers. You cannot specify Overrides together with Shadows or Shared in the same
        '''         declaration. Because an overriding element Is implicitly Overridable, you cannot combine Overridable
        '''         With Overrides .
        '''     >Matching Signatures. The signature of this declaration must exactly match the signature of the
        '''         property or procedure that it overrides. This means the parameter lists must have the same number of
        '''         parameters, in the same order, with the same data types.
        '''         In addition to the signature, the overriding declaration must also exactly match the following:
        '''            (i) The access level
        '''            (ii) The return type, if any
        '''     >Generic Signatures. For a generic procedure, the signature includes the number of type parameters.
        '''         Therefore, the overriding declaration must match the base class version in that respect as well.
        '''     >Additional Matching. In addition to matching the signature of the base class version, this declaration
        '''         must also match it in the following respects:
        '''             (i)  Access-level modifier (such as Public)
        '''             (ii) Passing mechanism of each parameter (ByVal or ByRef)
        '''             (iii)Constraint lists on each type parameter of a generic procedure
        '''     >Shadowing and Overriding. Both shadowing and overriding redefine an inherited element, but there
        '''         are significant differences between the two approaches. For more information, see Shadowing in Visual
        '''         Basic.
        ''' If you use Overrides , the compiler implicitly adds Overloads so that your library APIs work with C# more
        ''' easily.
        ''' [/Rules]
        ''' [Usage]
        ''' The Overrides modifier can be used in these contexts:
        ''' Function Statement
        ''' Property Statement
        ''' Sub Statement
        ''' [/Usage]
        ''' </summary>
        [Overrides]
        [Nothing]
    End Enum
#End Region
#Region "|02.03| <Enumeration> [DataTypeFormat]{9}"
    Public Enum DataTypeFormat
        [Byte] = 0
        [Integer] = 1
        [Long] = 2
        [SByte] = 3
        [Short] = 4
        [UInteger] = 5
        [ULong] = 6
        [UShort] = 7
        [Nothing] = 8
    End Enum
#End Region

#End Region
#Region "|3| [Structure]"

#End Region
#Region "|4| [Sub]"
#Region "|04.00| <Sub> [Enumeration]{2}"
#Region "|04.00.00| <Sub> <Enumeration> [List_AccessModifier(ListViewObjet|Object)]"
    ''' <summary>
    ''' List AccessModifiers to a ListViewObject.
    ''' </summary>
    ''' <param name="ListviewObject"></param>
    Public Sub List_AccessModifier(ByRef ListviewObject As Object)
        If Not IsNothing(ListviewObject) Then
            Dim Lt As New List(Of ListViewItem)
            Lt = AccessModifiers_ToList()
            For i = 0 To Lt.Count - 1
                Try
                    ListviewObject.items.add(Lt(i))
                Catch ex As Exception

                End Try
            Next
        End If
    End Sub

#End Region
#Region "|04.00.01| <Sub> <Enumeration> [List_ProcedureModifier(ListViewObjet|Object)]"
    ''' <summary>
    ''' List AccessModifiers to a ListViewObject.
    ''' </summary>
    ''' <param name="ListviewObject"></param>
    Public Sub List_ProcedureModifier(ByRef ListviewObject As Object)
        If Not IsNothing(ListviewObject) Then
            Dim Lt As New List(Of ListViewItem)
            Lt = ProcedureModifiers_ToList()
            For i = 0 To Lt.Count - 1
                Try
                    ListviewObject.items.add(Lt(i))
                Catch ex As Exception

                End Try
            Next
        End If
    End Sub
#End Region
#Region "|04.00.02| <Sub> <Enumeration> [List_PropertyModifier(ListViewObjet|Object)]"
    ''' <summary>
    ''' List PropertyModifier to a ListViewObject.
    ''' </summary>
    ''' <param name="ListviewObject"></param>
    Public Sub List_PropertyModifier(ByRef ListviewObject As Object)
        If Not IsNothing(ListviewObject) Then
            Dim Lt As New List(Of ListViewItem)
            Lt = PropertyModifiers_ToList()
            For i = 0 To Lt.Count - 1
                Try
                    ListviewObject.items.add(Lt(i))
                Catch ex As Exception

                End Try
            Next
        End If
    End Sub
#End Region
#End Region
#End Region
#Region "|5| [Function]"
#Region "|05.00| <Function> [AccessModifiers]{3}"
#Region "<05.00.00> <Function> <AccessModifiers> [String_ToAccessModifiers(Str|String)|AccessModifiers]"
    ''' <summary>
    ''' Convert a String to AccessModifiers
    ''' </summary>
    ''' <param name="Str"></param>
    ''' <returns></returns>
    Public Shared Function String_ToAccessModifiers(ByVal Str As String) As AccessModifiers
        Dim Result As New AccessModifiers
        Result = AccessModifiers.Nothing
        If Str = "Public" Then
            Result = AccessModifiers.Public
        ElseIf Str = "Friend" Then
            Result = AccessModifiers.Friend
        ElseIf Str = "" Then
            Result = AccessModifiers.Nothing
        ElseIf Str = "Private" Then
            Result = AccessModifiers.Private
        ElseIf Str = "Protected" Then
            Result = AccessModifiers.Protected
        ElseIf Str = "Protected Friend" Then
            Result = AccessModifiers.Protected_Friend
        ElseIf Str = "Private Protected" Then
            Result = AccessModifiers.Private_Protected
        End If
        Return Result
    End Function

#End Region
#Region "<05.00.01> <Function> <AccessModifiers> [AccessModifiers_ToList()|List(Of ListViewItem)]"
    ''' <summary>
    ''' Enumerate AccessModifiers to a list of ListviewItem compatible with all ListViewObject.
    ''' </summary>
    ''' <returns></returns>
    Public Shared Function AccessModifiers_ToList() As List(Of ListViewItem)
        Dim Result As New List(Of ListViewItem)
        Dim N0 As New ListViewItem("Friend")
        With N0
            .Name = "Friend"
            .Text = .Name
            .Tag = AccessModifiers.Friend
            .ToolTipText = "The Friend keyword in the declaration statement specifies that the element can be accessed from within the same assembly, but not from outside the assembly. The following code shows a sample Friend declaration."
        End With
        Dim N1 As New ListViewItem("")
        With N1
            .Name = "Nothing"
            .Text = .Name
            .Tag = AccessModifiers.Nothing
            .ToolTipText = ""
        End With
        Dim N2 As New ListViewItem("Private")
        With N2
            .Name = "Private"
            .Text = .Name
            .Tag = AccessModifiers.Private
            .ToolTipText = "The Private keyword in the declaration statement specifies that the element can be accessed only from within the same module, class, or structure. The following code shows a sample Private declaration."
        End With
        Dim N3 As New ListViewItem("Protected")
        With N3
            .Name = "Protected"
            .Text = .Name
            .Tag = AccessModifiers.Protected
            .ToolTipText = "The Protected keyword in the declaration statement specifies that the element can be accessed only from within the same class, or from a class derived from this class. The following code shows a sample Protected declaration."
        End With
        Dim N4 As New ListViewItem("Protected Friend")
        With N4
            .Name = "Protected Friend"
            .Text = .Name
            .Tag = AccessModifiers.Protected_Friend
            .ToolTipText = "The Protected keyword in the declaration statement specifies that the element can be accessed only from within the same class, or from a class derived from this class. The following code shows a sample Protected declaration."
        End With
        Dim N5 As New ListViewItem("Public")
        With N5
            .Name = "Public"
            .Text = .Name
            .Tag = AccessModifiers.Public
            .ToolTipText = "The Public keyword in the declaration statement specifies that the element can be accessed from code anywhere in the same project, from other projects that reference the project, and from any assembly built from the project. The following code shows a sample Public declaration."
        End With
        Dim N6 As New ListViewItem("Private Protected")
        With N6
            .Name = "Private Protected"
            .Text = .Name
            .Tag = AccessModifiers.Private_Protected
            .ToolTipText = "The Private Protected keyword combination is a member access modifier. A Private Protected member is accessible by all members in its containing class, as well as by types derived from the containing class, but only if they are found in its containing assembly."
        End With
        Result.Add(N0)
        Result.Add(N1)
        Result.Add(N2)
        Result.Add(N3)
        Result.Add(N4)
        Result.Add(N5)
        Result.Add(N6)
        Return Result
    End Function

#End Region
#Region "<05.00.02> <Function> <AccessModifiers> [AccessModifiers_ToString()|String]"
    ''' <summary>
    ''' Transform an AccessModifiers Format to String
    ''' </summary>
    ''' <param name="AccessModifier"></param>
    ''' <returns></returns>
    Public Shared Function AccessModifiers_ToString(ByVal AccessModifier As AccessModifiers) As String
        If AccessModifier = AccessModifiers.Friend Then
            Return "Friend "
        ElseIf AccessModifier = AccessModifiers.Nothing Then
            Return ""
        ElseIf AccessModifier = AccessModifiers.Private Then
            Return "Private "
        ElseIf AccessModifier = AccessModifiers.Protected Then
            Return "Protected "
        ElseIf AccessModifier = AccessModifiers.Protected_Friend Then
            Return "Protected Friend "
        ElseIf AccessModifier = AccessModifiers.Public Then
            Return "Public "
        ElseIf AccessModifier = AccessModifiers.Private_Protected Then
            Return "Private Protected "
        Else
            Return Nothing
        End If
    End Function
#End Region
#End Region
#Region "|05.01| <Function> [ProcedureModifiers]{3}"
#Region "<05.01.00> <Function> <ProcedureModifiers> [String_ToProcedureModifiers(Str|String)|ProcedureModifiers]"
    ''' <summary>
    ''' Convert a String to ProcedureModifiers
    ''' </summary>
    ''' <param name="Str"></param>
    ''' <returns></returns>
    Public Shared Function String_ToProcedureModifiers(ByVal Str As String) As ProcedureModifiers
        Dim Result As New ProcedureModifiers
        Result = ProcedureModifiers.Nothing
        If Str = "MustOverride" Then
            Result = ProcedureModifiers.MustOverride
        ElseIf Str = "" Then
            Result = ProcedureModifiers.Nothing
        ElseIf Str = "NotOverridable" Then
            Result = ProcedureModifiers.NotOverridable
        ElseIf Str = "Overloads" Then
            Result = ProcedureModifiers.Overloads
        ElseIf Str = "Overridable" Then
            Result = ProcedureModifiers.Overridable
        ElseIf Str = "Overrides" Then
            Result = ProcedureModifiers.Overrides
        End If
        Return Result
    End Function
#End Region
#Region "<05.01.01> <Function> <ProcedureModifiers> [ProcedureModifiers_ToList()|List(Of ListViewItem)]"
    ''' <summary>
    ''' Enumerate ProcedureModifiers to a list of ListviewItem compatible with all ListViewObject.
    ''' </summary>
    ''' <returns></returns>
    Public Shared Function ProcedureModifiers_ToList() As List(Of ListViewItem)
        Dim Result As New List(Of ListViewItem)
        Dim N0 As New ListViewItem("MustOverride")
        With N0
            .Name = "MustOverride"
            .Text = .Name
            .ToolTipText = "Requires that a derived class override the property or method. When the MustOverride keyword is used, the method Description consists of just the Sub, Function, or Property statement. No other statements are allowed, and specifically there is no End Sub or End Function statement. MustOverride methods must be declared in MustInherit classes.[Rules][Incomplete Declaration]. When you specify MustOverride, you do not supply any additional lines of code for the property or procedure, not even the End Function, End Property, or End Sub statement.
                            [Combined Modifiers]. You cannot specify MustOverride together with NotOverridable, Overridable, or Shared in the same declaration. [Shadowing and Overriding]. Both shadowing and overriding redefine an inherited element, but there are significant differences between the two approaches. For more information, see Shadowing in Visual Basic. [Alternate Terms]. An element that cannot be used except in an override is sometimes called a pure virtual element."
            .Tag = ProcedureModifiers.MustOverride
        End With
        Dim N1 As New ListViewItem("")
        With N1
            .Name = "Nothing"
            .Text = .Name
            .ToolTipText = ""
            .Tag = ProcedureModifiers.Nothing
        End With
        Dim N2 As New ListViewItem("NotOveridable")
        With N2
            .Name = "NotOveridable"
            .Text = .Name
            .ToolTipText = "Prevents a property or method from being overridden in an inheriting class. By default, Public methods are NotOverridable."
            .Tag = ProcedureModifiers.NotOverridable
        End With
        Dim N3 As New ListViewItem("Overloads")
        With N3
            .Name = "Overloads"
            .Text = .Name
            .ToolTipText = "Specifies that a property or procedure redeclares one or more existing properties or procedures with the same name.Declaration Context. You can use Overloads only in a property or procedure declaration statement.
                            Combined Modifiers. You cannot specify Overloads together with Shadows in the same procedure declaration. Required Differences. The signature in this declaration must be different from the signature of every property or procedure that it overloads. The signature comprises the property or procedure name together with the following:
                            the number of parameters the order of the parameters the data types of the parameters the number of type parameters (for a generic procedure) the return type (only for a conversion operator procedure) All overloads must have the same name, but each must differ from all the others in one or more of the preceding respects. This allows the compiler to distinguish which version to use when code calls the property or procedure.
                            Disallowed Differences. Changing one or more of the following is not valid for overloading a property or procedure, because they are not part of the signature:
                            whether or not it returns a value (for a procedure)
                            the data type of the return value (except for a conversion operator)
                            the names of the parameters or type parameters
                            the constraints on the type parameters (for a generic procedure)
                            parameter modifier keywords (such as ByRef or Optional)
                            property or procedure modifier keywords (such as Public or Shared)
                            Optional Modifier. You do not have to use the Overloads modifier when you are defining multiple overloaded properties or procedures in the same class. However, if you use Overloads in one of the declarations, you must use it in all of them.
                            Shadowing and Overloading. Overloads can also be used to shadow an existing member, or set of overloaded members, in a base class. When you use Overloads in this way, you declare the property or method with the same name and the same parameter list as the base class member, and you do not supply the Shadows keyword."
            .Tag = ProcedureModifiers.Overloads
        End With
        Dim N4 As New ListViewItem("Overridable")
        With N4
            .Name = "Overridable"
            .Text = .Name
            .ToolTipText = "Allows a property or method in a class to be overridden in a derived class."
            .Tag = ProcedureModifiers.Overridable
        End With
        Dim N5 As New ListViewItem("Overrides")
        With N5
            .Name = "Overrides"
            .Text = .Name
            .ToolTipText = " Overrides an Overridable property or method defined in the base class."
            .Tag = ProcedureModifiers.Overrides
        End With
        Result.Add(N0)
        Result.Add(N1)
        Result.Add(N2)
        Result.Add(N4)
        Result.Add(N5)
        Return Result
    End Function
#End Region
#Region "<05.01.02> <Function> <ProcedureModifiers> [ProcedureModifiers_ToString()|String]"
    ''' <summary>
    ''' Transform an ProcedureModifiers Format to String
    ''' </summary>
    ''' <param name="Procedure"></param>
    ''' <returns></returns>
    Public Shared Function ProcedureModifiers_ToString(ByVal Procedure As ProcedureModifiers) As String
        If Procedure = ProcedureModifiers.MustOverride Then
            Return "MustOverride "
        ElseIf Procedure = ProcedureModifiers.Nothing Then
            Return ""
        ElseIf Procedure = ProcedureModifiers.NotOverridable Then
            Return "NotOverridable "
        ElseIf Procedure = ProcedureModifiers.Overloads Then
            Return "Overloads "
        ElseIf Procedure = ProcedureModifiers.Overridable Then
            Return "Overridable "
        ElseIf Procedure = ProcedureModifiers.Overrides Then
            Return "Overrides "
        Else
            Return Nothing
        End If
    End Function
#End Region
#End Region
#Region "|05.02| <Function> [PropertyModifiers]{}"
#Region "<05.02.00> <Function> <PropertyModifiers> [String_ToPropertyModifiers(Str|String)|ProcedureModifiers]"
    ''' <summary>
    ''' Convert a String to PropertyModifiers
    ''' </summary>
    ''' <param name="Str"></param>
    ''' <returns></returns>
    Public Shared Function String_ToPropertyModifiers(ByVal Str As String) As PropertyModifiers
        Dim Result As New PropertyModifiers
        Result = PropertyModifiers.Nothing
        If Str = "MustOverride" Then
            Result = PropertyModifiers.MustOverride
        ElseIf Str = "MustOverride Overrides" Then
            Result = PropertyModifiers.MustOverride_Overrides
        ElseIf Str = "NotOverridable" Then
            Result = PropertyModifiers.NotOverridable
        ElseIf Str = "NotOverridable Overrides" Then
            Result = PropertyModifiers.NotOverridable_Overrides
        ElseIf Str = "Overloads" Then
            Result = PropertyModifiers.Overloads
        ElseIf Str = "Overridable" Then
            Result = PropertyModifiers.Overridable
        ElseIf Str = "Overrides" Then
            Result = PropertyModifiers.Overrides
        ElseIf Str = "" Then
            Result = PropertyModifiers.Nothing
        End If
        Return Result
    End Function
#End Region
#Region "<05.02.01> <Function> <PropertyModifiers> [PropertyModifiers_ToList()|List(Of ListViewItem)]"
    ''' <summary>
    ''' Enumerate PropertyModifiers to a list of ListviewItem compatible with all ListViewObject.
    ''' </summary>
    ''' <returns></returns>
    Public Shared Function PropertyModifiers_ToList() As List(Of ListViewItem)
        Dim Result As New List(Of ListViewItem)
        Dim N0 As New ListViewItem("MustOverride")
        With N0
            .Name = "MustOverride"
            .Text = .Name
            .ToolTipText = "Requires that a derived class override the property or method. When the MustOverride keyword is used, the method Description consists of just the Sub, Function, or Property statement. No other statements are allowed, and specifically there is no End Sub or End Function statement. MustOverride methods must be declared in MustInherit classes.[Rules][Incomplete Declaration]. When you specify MustOverride, you do not supply any additional lines of code for the property or procedure, not even the End Function, End Property, or End Sub statement.
                            [Combined Modifiers]. You cannot specify MustOverride together with NotOverridable, Overridable, or Shared in the same declaration. [Shadowing and Overriding]. Both shadowing and overriding redefine an inherited element, but there are significant differences between the two approaches. For more information, see Shadowing in Visual Basic. [Alternate Terms]. An element that cannot be used except in an override is sometimes called a pure virtual element."
            .Tag = PropertyModifiers.MustOverride
        End With
        Dim N1 As New ListViewItem("")
        With N1
            .Name = "Nothing"
            .Text = .Name
            .ToolTipText = ""
            .Tag = PropertyModifiers.Nothing
        End With
        Dim N2 As New ListViewItem("NotOveridable")
        With N2
            .Name = "NotOveridable"
            .Text = .Name
            .ToolTipText = "Prevents a property or method from being overridden in an inheriting class. By default, Public methods are NotOverridable."
            .Tag = PropertyModifiers.NotOverridable
        End With
        Dim N3 As New ListViewItem("Overloads")
        With N3
            .Name = "Overloads"
            .Text = .Name
            .ToolTipText = "Specifies that a property or procedure redeclares one or more existing properties or procedures with the same name.Declaration Context. You can use Overloads only in a property or procedure declaration statement.
                            Combined Modifiers. You cannot specify Overloads together with Shadows in the same procedure declaration. Required Differences. The signature in this declaration must be different from the signature of every property or procedure that it overloads. The signature comprises the property or procedure name together with the following:
                            the number of parameters the order of the parameters the data types of the parameters the number of type parameters (for a generic procedure) the return type (only for a conversion operator procedure) All overloads must have the same name, but each must differ from all the others in one or more of the preceding respects. This allows the compiler to distinguish which version to use when code calls the property or procedure.
                            Disallowed Differences. Changing one or more of the following is not valid for overloading a property or procedure, because they are not part of the signature:
                            whether or not it returns a value (for a procedure)
                            the data type of the return value (except for a conversion operator)
                            the names of the parameters or type parameters
                            the constraints on the type parameters (for a generic procedure)
                            parameter modifier keywords (such as ByRef or Optional)
                            property or procedure modifier keywords (such as Public or Shared)
                            Optional Modifier. You do not have to use the Overloads modifier when you are defining multiple overloaded properties or procedures in the same class. However, if you use Overloads in one of the declarations, you must use it in all of them.
                            Shadowing and Overloading. Overloads can also be used to shadow an existing member, or set of overloaded members, in a base class. When you use Overloads in this way, you declare the property or method with the same name and the same parameter list as the base class member, and you do not supply the Shadows keyword."
            .Tag = PropertyModifiers.Overloads
        End With
        Dim N4 As New ListViewItem("Overridable")
        With N4
            .Name = "Overridable"
            .Text = .Name
            .ToolTipText = "Allows a property or method in a class to be overridden in a derived class."
            .Tag = PropertyModifiers.Overridable
        End With
        Dim N5 As New ListViewItem("Overrides")
        With N5
            .Name = "Overrides"
            .Text = .Name
            .ToolTipText = " Overrides an Overridable property or method defined in the base class."
            .Tag = PropertyModifiers.Overrides
        End With
        Dim N6 As New ListViewItem("MustOverride Overrides")
        With N6
            .Name = "MustOverride Overrides"
            .Text = .Name
            .ToolTipText = ""
            .Tag = PropertyModifiers.MustOverride_Overrides
        End With
        Dim N7 As New ListViewItem("NotOverridable Overrides")
        With N7
            .Name = "NotOverridable Overrides"
            .Text = .Name
            .ToolTipText = ""
            .Tag = PropertyModifiers.NotOverridable_Overrides
        End With
        Result.Add(N0)
        Result.Add(N1)
        Result.Add(N2)
        Result.Add(N4)
        Result.Add(N5)
        Result.Add(N6)
        Result.Add(N7)
        Return Result
    End Function
#End Region
#Region "<05.02.02> <Function> <PropertyModifiers> [PropertyModifiers_ToString()|String]"
    ''' <summary>
    ''' Transform an PropertyModifiers Format to String
    ''' </summary>
    ''' <param name="Prop"></param>
    ''' <returns></returns>
    Public Shared Function PropertyModifiers_ToString(ByVal Prop As PropertyModifiers) As String
        If Prop = PropertyModifiers.MustOverride Then
            Return "MustOverride "
        ElseIf Prop = PropertyModifiers.Nothing Then
            Return ""
        ElseIf Prop = PropertyModifiers.NotOverridable Then
            Return "NotOverridable "
        ElseIf Prop = PropertyModifiers.Overloads Then
            Return "Overloads "
        ElseIf Prop = PropertyModifiers.Overridable Then
            Return "Overridable "
        ElseIf Prop = PropertyModifiers.Overrides Then
            Return "Overrides "
        ElseIf Prop = PropertyModifiers.MustOverride_Overrides Then
            Return "MustOverride Overrides "
        ElseIf Prop = PropertyModifiers.NotOverridable_Overrides Then
            Return "NotOverridable Overrides "
        Else
            Return Nothing
        End If
    End Function
#End Region
#End Region
#Region "|05.03| <Function> [DataBase]"
#Region "|05.03.00| <Function> <DataBase> [Convert_DataBase(Db|DataBase)|Class]"
    Public Function Convert_DataBase(ByRef Db As DataBase) As VbNET.[Class]
        Dim Result As New VbNET.Class
        If Not IsNothing(Db) Then
            Result = New [Class]("Db_" & Db.Name)
#Region "<|Namespace|>Result<|Class|>"
            If Db.HasFinishImporting = False Then
                Db.GetTables()
            End If

#Region "|Namespace| |1| [Property]"
#Region "|Namespace| |01.00| <Property> [DataSource|DataBase]"
            Dim P_DataSource As New VbNET.Property("DataSource",
                                                 "DataBase",
                                                 "Connection",
                                                 False,
                                                 0,
                                                 Db.Target,
                                                 True,
                                                 False,
                                                 False,
                                                 False,
                                                 False,
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_DataSource",
                                                 "DataBase",
                                                 AccessModifiers.Private,
                                                 "",
                                                 "",
                                                 True,
                                                 "DataBase",
                                                 Nothing,
                                                 True,
                                                 "Store the connection path to the database.",
                                                 New Attributelist("Info", "Store the connection path to the database.", Db.Target, True, False, "", "", False, "", "", False),
                                                 ,,,,,,,,,,, " ",,,)
            P_DataSource.SetStatement = " If Not IsNothing(Value) Then " & vbNewLine
            For Each T As Table In Db.Tables
                'Formating all Tables Information
                P_DataSource.SetStatement += "     With Active_" & T.TableName & vbNewLine &
                "       .FilePath = Value.FilePath" & vbNewLine &
                "       .Password = Value.Password" & vbNewLine &
                "       .Line = Value.Line" & vbNewLine &
                "       .UseSQL = IIF(Value.DataBaseType = DataBaseType.Sql,True,False)" & vbNewLine &
                "    End With" & vbNewLine &
                "    " & T.TableName & ".TableName = " & Space & T.TableName & Space & vbNewLine &
                "    " & T.TableName & ".Table = New Table(" & T.TableName & ".TableName , Value.FilePath, Value.Password)" & vbNewLine &
                " End If " & vbNewLine &
                " My" & T.TableName & " = New List(Of " & T.TableName & ")" & vbNewLine
            Next
            Result.Add_Property(P_DataSource)
#End Region
#Region "|Namespace| |01.01| <Property> [DataBase|DataBase]"
            Dim P_DataBase As New VbNET.Property("DataBase",
                                                 "DataBase",
                                                 "Connection",
                                                 False,
                                                 0,
                                                 Db.Target,
                                                 True,
                                                 False,
                                                 False,
                                                 False,
                                                 False,
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_DataBase",
                                                 "DataBase",
                                                 AccessModifiers.Private,
                                                 "",
                                                 "",
                                                 True,
                                                 "DataBase",
                                                 Nothing,
                                                 True,
                                                 "Store the connection path to the database.",
                                                 New Attributelist("Info", "Store the connection path to the database.", Db.Target, True, False, "", "", False, "", "", False),
                                                 ,,,,,,,,,,, " ",,,)
            Result.Add_Property(P_DataBase)
#End Region
#End Region



            'Getting Tables
            If Db.HasFinishImporting = False Then
                Db.GetTables()
            End If


#End Region

        End If
        Return Result
    End Function
#End Region
#Region "|05.03.01| <Function> <DataBase> [Convert_Table(Tb|Table)|Class]"
    Public Shared Function Convert_Table(ByRef Tb As Table, Optional ByVal Id As Integer = 0) As VbNET.Class
        Dim Result As New VbNET.Class

        If Not IsNothing(Tb) Then

            Result = New [Class]("[" & Tb.TableName & "]")


            With Result
                .AccessModifier = AccessModifiers.Public
                .ClassName = "[" & Tb.TableName & "]"
                .Name = Tb.TableName
                .Description = "Class created automatically by SmartOffice (c)Copyright " & Now.Year & "."
                .ID = Id
                .ImageIndex = 8
            End With
            'Creating Runtimes  :
            ' - Table           |   Table
            ' - Line            |   String
            ' - FilePath        |   String
            ' - Password        |   String
            ' - UseSQL          |   Boolean
            ' - TableName       |   String
            ' - Con             |   OleDb.OleDbConnection
            ' - Cmd             |   OleDb.OleDbCommand
            ' - OleDbReader     |   OleDb.OleDbDataReader
            ' - OleDbData       |   OleDb.OleDbDataAdapter
            ' - SqlCon          |   SqlClient.SqlConnection
            ' - SqlCmd          |   SqlClient.SqlCommand
            ' - SqlDataReader   |   SqlClient.SqlDataReader
            ' - SqlDbData       |   SqlClient.SqlDataAdapter

            Dim TempMembers As New List(Of VbNET.Enumeration.Member)
            Dim TableClassElementTables As New List(Of VbNET.InnerStatement.ParameterList_Statement)
            Dim TableClassElementParameters As New List(Of VbNET.InnerStatement.ParameterList_Statement)
#Region "|ON | |01| [Property]{NX}"
            'Modification 15/06/2020
#Region "|01.00| [Columns]()"
            Dim Index As Integer = 0
            For Each Column As DataColumn In Tb.DataTable.Columns

                Dim Test As String = Column.DataType.ToString
                Dim P As VbNET.Property = Nothing
                If Test = "System.String" Then
                    P = New VbNET.Property(Column.Caption,
                                                "String",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "String",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as String.")
                    Result.Add_Property(P)
                ElseIf Test = "System.Char" Then
                    P = New VbNET.Property(Column.Caption,
                                                "String",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "String",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as Char.")
                    Result.Add_Property(P)
                ElseIf Test = "System.Decimal" Then
                    P = New VbNET.Property(Column.Caption,
                                                "Long",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "Long",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as Decimal.")
                    Result.Add_Property(P)
                ElseIf Test = "System.Boolean" Then
                    P = New VbNET.Property(Column.Caption,
                                                "Boolean",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "Boolean",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as Boolean.")
                    Result.Add_Property(P)
                ElseIf Test = "System.DateTime" Then
                    P = New VbNET.Property(Column.Caption,
                                                "DateTime",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "DateTime",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as DateTime.")
                    Result.Add_Property(P)
                ElseIf Test = "System.Double" Then
                    P = New VbNET.Property(Column.Caption,
                                                "Double",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "Double",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as Double.")
                    Result.Add_Property(P)
                ElseIf Test = "System.Int64" Then
                    P = New VbNET.Property(Column.Caption,
                                                "ULong",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "ULong",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as ULong.")
                    Result.Add_Property(P)
                ElseIf Test = "System.Int32" Then
                    P = New VbNET.Property(Column.Caption,
                                                "Integer",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "Integer",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as Integer.")
                    Result.Add_Property(P)
                ElseIf Test = "System.Int16" Then
                    P = New VbNET.Property(Column.Caption,
                                                "Double",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "Double",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as Double.")
                    Result.Add_Property(P)
                ElseIf Test = "System.Byte[]" Then
                    P = New VbNET.Property(Column.Caption,
                                                "Byte()",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "Byte()",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as Byte.")
                    Result.Add_Property(P)
                ElseIf Test = "System.SByte" Then
                    P = New VbNET.Property(Column.Caption,
                                                "Byte()",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "Byte()",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as Byte.")
                    Result.Add_Property(P)
                ElseIf Test = "System.Single" Then
                    P = New VbNET.Property(Column.Caption,
                                                "Single",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "Single",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as Single.")
                    Result.Add_Property(P)
                ElseIf Test = "System.TimeSpan" Then
                    P = New VbNET.Property(Column.Caption,
                                                "TimeSpan",
                                                "Columns",
                                                True,
                                                Index,
                                                ,,,,,,,,
                                                "_" & Column.Caption,
                                                "TimeSpan",
                                                AccessModifiers.Private,
                                                ,
                                                ,,,, True, "The " & Column.Caption & " as TimeSpan.")
                    Result.Add_Property(P)
                End If
                Dim M = New Enumeration.Member(P.Name, Index, P.Description)
                Dim Pa As New VbNET.InnerStatement.ParameterList_Statement(P.Name, P.ReturnType, P.DefaultValue, True, False, False, False, P.Description)
                TableClassElementParameters.Add(Pa)
                TempMembers.Add(M)
                Index += 1
                TableClassElementTables.Add(Pa)
            Next
#End Region
#Region "|01.01| [Connection](5)"
#Region "|01.01.00| <Property> <Connection> [DataBase|String]"
            Dim P_01_01_00 As New VbNET.Property("DataBase",
                                                 "String",
                                                 "Connection",
                                                 True, 'Required
                                                 0, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 False, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_DataBase",
                                                 "String",
                                                 AccessModifiers.Private,
                                                 "", 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "String", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) The FilePath to the DataBase.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "This parameter is crucial to establish the connection to the database.", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            'Result.Add_Property(P_01_01_00)
#End Region
#Region "|01.01.01| <Property> <Connection> [Password|String]"
            Dim P_01_01_01 As New VbNET.Property("Password",
                                                 "String",
                                                 "Connection",
                                                 True, 'Required
                                                 1, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 False, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_Password",
                                                 "String",
                                                 AccessModifiers.Private,
                                                 "", 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "String", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) The Password to the DataBase.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "This parameter is crucial to establish the connection to the database.", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            ' Result.Add_Property(P_01_01_01)
#End Region
#Region "|01.01.02| <Property> <Connection> [TableName|String]"
            Dim P_01_01_02 As New VbNET.Property("TableName",
                                                 "String",
                                                 "Connection",
                                                 True, 'Required
                                                 2, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 False, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_TableName",
                                                 "String",
                                                 AccessModifiers.Private,
                                                 "", 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "String", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) The Table Name of the DataBase.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "This parameter is crucial to read the table from the database.", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            ' Result.Add_Property(P_01_01_02)
#End Region
#Region "|01.01.03| <Property> <Connection> [Line|String]"
            Dim P_01_01_03 As New VbNET.Property("Line",
                                                 "String",
                                                 "Connection",
                                                 True, 'Required
                                                 3, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 False, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_Line",
                                                 "String",
                                                 AccessModifiers.Private,
                                                 "", 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "String", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) The Connection Line to the DataBase.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "This parameter is crucial to read the table from the database.", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            ' Result.Add_Property(P_01_01_03)
#End Region
#Region "|01.01.04| <Property> <Connection> [UseSql|Boolean]"
            Dim P_01_01_04 As New VbNET.Property("UseSql",
                                                 "Boolean",
                                                 "Connection",
                                                 True, 'Required
                                                 4, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 False, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_UseSql",
                                                 "Boolean",
                                                 AccessModifiers.Private,
                                                 "", 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "String", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) Determines if the database uses Sql or OleDb types of connection.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "This parameter is crucial to read the table from the database.", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            ' Result.Add_Property(P_01_01_04)
#End Region
#Region "|01.01.05| <Property> <Connection> [Connector|ToolBoxDLL.LineBuilder]"
            Dim Set_01_01_05 As String = ""
            Set_01_01_05 += "      If (Not IsNothing(Value)) Then" & vbNewLine
            Set_01_01_05 += "           If (Not IsNothing(Value.ConnectionLine)) Then" & vbNewLine
            Set_01_01_05 += "               If (Value.ConnectionLine.Length > 1) Then" & vbNewLine
            Set_01_01_05 += "                   If (Value.DataSource.ToLower <> Me.DataBase.ToLower) Then" & vbNewLine
            Set_01_01_05 += "                       Me.DataBase = Value.DataSource" & vbNewLine
            Set_01_01_05 += "                       Me.Password = Value.Password" & vbNewLine
            Set_01_01_05 += "                       Me.Line = Value.ConnectionLine" & vbNewLine
            Set_01_01_05 += "                       Me.TableName = " & Space & Result.ClassName & Space & vbNewLine
            Set_01_01_05 += "                       Me.UseSql = Value.UseSql" & vbNewLine
            Set_01_01_05 += "                   End If '(Value.DataSource.ToLower <> Me.DataSource) " & vbNewLine
            Set_01_01_05 += "               End If '(Value.ConnectionLine.Length > 1) " & vbNewLine
            Set_01_01_05 += "           End If '(Not IsNothing(Value.ConnectionLine))" & vbNewLine
            Set_01_01_05 += "      End If '(Not IsNothing(Value))" & vbNewLine
            Dim P_01_01_05 As New VbNET.Property("Connector",
                                                 "ToolBoxDLL.LineBuilder",
                                                 "Connection",
                                                 False, 'Required
                                                 5, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 False, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_Connector",
                                                 "ToolBoxDLL.LineBuilder",
                                                 AccessModifiers.Private,
                                                 "", 'Get Statement
                                                 Set_01_01_05, 'Set Statement
                                                 True, 'Browsable
                                                 "ToolBoxDLL.LineBuilder", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) The connection tools to the Database.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            ' Result.Add_Property(P_01_01_05)
#End Region
#End Region
#Region "|01.02| [Option](1)"
#Region "|01.02.00| <Property> <Option> [AddingModeEnable|Boolean]"
            Dim P_01_02_00 As New VbNET.Property("AddingModeEnable",
                                                 "Boolean",
                                                 "Option",
                                                 True, 'Required
                                                 0, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 False, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_AddingModeEnable",
                                                 "Boolean",
                                                 AccessModifiers.Private,
                                                 "", 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "Boolean", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) Determines if we are adding a new element or updating an existing element.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            ' Result.Add_Property(P_01_02_00)
#End Region
#End Region
#Region "|01.03| [Serializable](2)"
#Region "|01.03.00| <Property> <Serializable> [SerializeFile|String]"
            Dim P_01_03_00 As New VbNET.Property("SerializeFile",
                                                 "String",
                                                 "Serializable",
                                                 False, 'Required
                                                 0, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 False, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_SerializeFile",
                                                 "String",
                                                 AccessModifiers.Private,
                                                 "", 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "String", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) The SerializeFile as String.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            '   Result.Add_Property(P_01_03_00)
#End Region
#Region "|01.03.01| <Property> <Serializable> [TableList|List(Of [ClassName])"
            Dim P_01_03_01 As New VbNET.Property("TableList",
                                                 "List(Of " & Result.ClassName & ")",
                                                 "Serializable",
                                                 False, 'Required
                                                 0, ' ID
                                                 "", 'DefaultValue
                                                 True, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 False, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_TableList",
                                                 "List(Of " & Result.ClassName & ")",
                                                 AccessModifiers.Private,
                                                 "", 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "List(Of " & Result.ClassName & ")", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) The SerializeFile as " & "List(Of [" & Result.ClassName & " ])", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            '  Result.Add_Property(P_01_03_01)
#End Region
#End Region
#Region "|01.04| [Test](3)"
#Region "|01.04.00| <Property> <Test> [HasSettings|Boolean]"
            Dim Get_01_04_00 As String = ""
            Get_01_04_00 += "      Dim Result As Boolean = False" & vbNewLine
#Region "|Test1: Me.DataBase|"
            Get_01_04_00 += "      " & vbNewLine
            Get_01_04_00 += "      Dim Test1 As Boolean = False  ' Test Me.DataBase" & vbNewLine
            Get_01_04_00 += "      Dim Stat1 As String = Nothing ' The status of the test for Me.DataBase" & vbNewLine
            Get_01_04_00 += "      " & vbNewLine
            Get_01_04_00 += "      If (Not IsNothing(Me.DataBase)) Then" & vbNewLine
            Get_01_04_00 += "          If (Me.DataBase.Length > 1) Then" & vbNewLine
            Get_01_04_00 += "              If (IO.File.Exists(Me.DataBase) = True) Then" & vbNewLine
            Get_01_04_00 += "                  Test1 = True" & vbNewLine
            Get_01_04_00 += "              Else '(IO.File.Exists(Me.DataBase) = False) Then" & vbNewLine
            Get_01_04_00 += "                  Test1 = False" & vbNewLine
            Get_01_04_00 += "                  Stat1 += " & Space & "The selected file does not exist." & Space & vbNewLine
            Get_01_04_00 += "              End If '(IO.File.Exist(Me.DataBase))" & vbNewLine
            Get_01_04_00 += "          Else '((Me.DataBase).Length <= 1)" & vbNewLine
            Get_01_04_00 += "              Test1 = False" & vbNewLine
            Get_01_04_00 += "              Stat1 += " & Space & "The Selected FilePath is too small." & Space & vbNewLine
            Get_01_04_00 += "          End If '((Me.DataBase).Length > 1)" & vbNewLine
            Get_01_04_00 += "      ElseIf (IsNothing(Me.DataBase)) Then" & vbNewLine
            Get_01_04_00 += "          Test1 = False" & vbNewLine
            Get_01_04_00 += "          Stat1 += " & Space & "Me.DataBase is nothing. So it has not been initialised properly." & Space & vbNewLine
            Get_01_04_00 += "      End If '(Not IsNothing(Me.DataBase))" & vbNewLine
#End Region
#Region "|Test2: Me.TableName|"
            Get_01_04_00 += "      " & vbNewLine
            Get_01_04_00 += "      Dim Test2 As Boolean = False  ' Test Me.TableName" & vbNewLine
            Get_01_04_00 += "      Dim Stat2 As String = Nothing ' The status of the test for Me.TableName" & vbNewLine
            Get_01_04_00 += "      " & vbNewLine
            Get_01_04_00 += "      If (Not IsNothing(Me.TableName)) Then" & vbNewLine
            Get_01_04_00 += "          If (Me.TableName.Length > 1) Then" & vbNewLine
            Get_01_04_00 += "                  Test2 = True" & vbNewLine
            Get_01_04_00 += "          Else '((Me.TableName).Length <= 1)" & vbNewLine
            Get_01_04_00 += "              Test2 = False" & vbNewLine
            Get_01_04_00 += "              Stat2 += " & Space & "The TableName is too small." & Space & vbNewLine
            Get_01_04_00 += "          End If '((Me.TableName).Length > 1)" & vbNewLine
            Get_01_04_00 += "      ElseIf (IsNothing(Me.TableName)) Then" & vbNewLine
            Get_01_04_00 += "          Test2 = False" & vbNewLine
            Get_01_04_00 += "          Stat2 += " & Space & "Me.TableName is nothing. So it has not been initialised properly." & Space & vbNewLine
            Get_01_04_00 += "      End If '(Not IsNothing(Me.TableName))" & vbNewLine
#End Region
#Region "|Test3: Me.Line|"
            Get_01_04_00 += "      " & vbNewLine
            Get_01_04_00 += "      Dim Test3 As Boolean = False  ' Test Me.Line" & vbNewLine
            Get_01_04_00 += "      Dim Stat3 As String = Nothing ' The status of the test for Me.Line" & vbNewLine
            Get_01_04_00 += "      " & vbNewLine
            Get_01_04_00 += "      If (Not IsNothing(Me.Line)) Then" & vbNewLine
            Get_01_04_00 += "          If (Me.Line.Length > 1) Then" & vbNewLine
            Get_01_04_00 += "                  Test3 = True" & vbNewLine
            Get_01_04_00 += "          Else '((Me.Line).Length <= 1)" & vbNewLine
            Get_01_04_00 += "              Test3 = False" & vbNewLine
            Get_01_04_00 += "              Stat3 += " & Space & "The Line is too small." & Space & vbNewLine
            Get_01_04_00 += "          End If '((Me.Line).Length > 1)" & vbNewLine
            Get_01_04_00 += "      ElseIf (IsNothing(Me.Line)) Then" & vbNewLine
            Get_01_04_00 += "          Test3 = False" & vbNewLine
            Get_01_04_00 += "          Stat3 += " & Space & "Me.Line is nothing. So it has not been initialised properly." & Space & vbNewLine
            Get_01_04_00 += "      End If '(Not IsNothing(Me.Line))" & vbNewLine
#End Region
#Region "|Final Evaluation|"
            Get_01_04_00 += "      " & vbNewLine
            Get_01_04_00 += "      If ((Test1 = True ) And (Test2 = True) And (Test3 = True)) Then" & vbNewLine
            Get_01_04_00 += "          Result = True" & vbNewLine
            Get_01_04_00 += "      Else 'If ((Test1 = True ) And (Test2 = True) And (Test3 = True)) Then" & vbNewLine
            Get_01_04_00 += "          Result = False" & vbNewLine
            Get_01_04_00 += "      End If '((Test1 = True ) And (Test2 = True) And (Test3 = True)) " & vbNewLine
            Get_01_04_00 += "      Return Result" & vbNewLine
#End Region
            Dim P_01_04_00 As New VbNET.Property("HasSettings",
                                                 "Boolean",
                                                 "Test",
                                                 False, 'Required
                                                 0, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 True, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_HasSettings",
                                                 "Boolean",
                                                 AccessModifiers.Private,
                                                 Get_01_04_00, 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "Boolean", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Get) Evaluates if the configuration have been acquired correctly.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            ' Result.Add_Property(P_01_04_00)
#End Region
#Region "|01.04.01| <Property> <Test> [ConnectionEstablised|Boolean]"
            Dim P_01_04_01 As New VbNET.Property("ConnectionEstablised",
                                                 "Boolean",
                                                 "Test",
                                                 False, 'Required
                                                 1, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 False, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_ConnectionEstablised",
                                                 "Boolean",
                                                 AccessModifiers.Private,
                                                 "", 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "Boolean", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) Evaluate if the connection has been establised.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            '   Result.Add_Property(P_01_04_01)
#End Region
#Region "|01.04.02| <Property> <Test> [HasDataImported|Boolean]"
            Dim Get_01_04_02 As String = ""
            Get_01_04_02 += "      " & vbNewLine
            Get_01_04_02 += "      Dim Result As Boolean = False" & vbNewLine
            Get_01_04_02 += "      If (Not IsNothing(Me.Data)) Then" & vbNewLine
            Get_01_04_02 += "           If (Not IsNothing(Me.Data.Columns)) Then" & vbNewLine
            Get_01_04_02 += "               If (Me.Data.Columns.Count-1 > 0) Then " & vbNewLine
            Get_01_04_02 += "                   Result=True" & vbNewLine
            Get_01_04_02 += "               Else ' (Me.Data.Columns.Count-1 > 0) " & vbNewLine
            Get_01_04_02 += "                   Result=False" & vbNewLine
            Get_01_04_02 += "               End If' (Me.Data.Columns.Count-1 > 0) " & vbNewLine
            Get_01_04_02 += "           Else '(Not IsNothing(Me.Data.Columns)) " & vbNewLine
            Get_01_04_02 += "               Result=False" & vbNewLine
            Get_01_04_02 += "           End If '(Not IsNothing(Me.Data.Columns)) " & vbNewLine
            Get_01_04_02 += "      Else 'If (Not IsNothing(Me.Data)) Then" & vbNewLine
            Get_01_04_02 += "           Result=False" & vbNewLine
            Get_01_04_02 += "      End If '(Not IsNothing(Me.Data))" & vbNewLine
            Get_01_04_02 += "      _HasDataImported = Result" & vbNewLine
            Dim P_01_04_02 As New VbNET.Property("HasDataImported",
                                                 "Boolean",
                                                 "Test",
                                                 False, 'Required
                                                 2, ' ID
                                                 "", 'DefaultValue
                                                 False, 'Shared
                                                 False, 'Shadows
                                                 False, 'WriteOnly
                                                 True, 'ReadOnly
                                                 False, 'Default
                                                 AccessModifiers.Public,
                                                 PropertyModifiers.Nothing,
                                                 "_HasDataImported",
                                                 "Boolean",
                                                 AccessModifiers.Private,
                                                 Get_01_04_02, 'Get Statement
                                                 "", 'Set Statement
                                                 True, 'Browsable
                                                 "Boolean", 'Returns
                                                 , 'ParameterList
                                                 True, 'Enable
                                                 "(Set|Get) Evaluate if the connection has been establised.", 'Summary Description
                                                 , 'AttributeList
                                                 My.Settings.AuthorName, 'Author Name
                                                 My.Settings.AuthorEmail,'Author Email
                                                 My.Settings.AuthorUrl, ' Author Url
                                                 "", 'Contributor Name
                                                 "", 'Contributor Email
                                                 "", 'Contributor Url
                                                 "", 'Summary Usage
                                                 , 'Remark
                                                 , 'Example
                                                 , 'Note
                                                 , 'Published
                                                 , 'Rights
                                                 , 'Title
                                                 ,)
            '   Result.Add_Property(P_01_04_02)
#End Region
#End Region
            'End Modification
#End Region
#Region "|ON | |02| [Enumeration]{1}"
            Dim Enum_Schema As New VbNET.Enumeration("Schema", TempMembers, DataTypeFormat.Nothing, AccessModifiers.Public)
            Enum_Schema.PrintStatement(True)
            Enum_Schema.ParentClass = Result
            Enum_Schema.ParentClass.Add_Enumeration(Enum_Schema)
#End Region
#Region "|ON | |04| [Sub]{5}"
#Region "|ON | |04.00| <Sub> [Clear()]"
            Dim ClearStatement As String = "  With Me" & vbNewLine
            For Each P As VbNET.InnerStatement.ParameterList_Statement In TableClassElementParameters
                If P.ParameterName = "Portfolio" Or P.ParameterName = "DataBase" Then
                    ClearStatement += "        " & P.ParameterName & " = New " & P.ParameterType & vbNewLine

                End If
                If P.ParameterType = "Double" Then
                    If P.DefaultValue <> "" Then
                        If IsNumeric(P.DefaultValue) Then
                            ClearStatement += "        ." & P.ParameterName & " = " & Val(P.DefaultValue) & vbNewLine
                        Else
                            ClearStatement += "        ." & P.ParameterName & " = 0" & vbNewLine
                        End If
                    Else
                        ClearStatement += "        ." & P.ParameterName & " = 0" & vbNewLine

                    End If
                ElseIf P.ParameterType = "Boolean" Then
                    If P.DefaultValue <> "" Then
                        ClearStatement += "        ." & P.ParameterName & " =  " & P.DefaultValue & vbNewLine
                    Else
                        ClearStatement += "        ." & P.ParameterName & " = False" & vbNewLine
                    End If
                ElseIf P.ParameterType = "String" Then
                    If P.DefaultValue <> "" Then
                        ClearStatement += "        ." & P.ParameterName & " = " & Space & Space & vbNewLine ' & P.DefaultValue & vbNewLine '& Space & P.DefaultValue & Space & vbNewLine
                    Else
                        ClearStatement += "        ." & P.ParameterName & " = " & Space & Space & vbNewLine
                    End If
                ElseIf P.ParameterType = "Table" Then
                    ClearStatement += " Dim Db As New DataBase(" & Space & Tb.FilePath & Space & "," & Space & Tb.Password & Space & ")" & vbNewLine
                    ClearStatement += "       " & P.ParameterName & " = New Table(" & Space & Tb.TableName & Space & "," & "Db)" & vbNewLine
                ElseIf P.ParameterType = "Integer" Then
                    If P.DefaultValue <> "" Then
                        If IsNumeric(P.DefaultValue) Then
                            ClearStatement += "        ." & P.ParameterName & " = " & Val(P.DefaultValue) & vbNewLine

                        Else
                            ClearStatement += "        ." & P.ParameterName & " = 0" & vbNewLine
                        End If
                    Else
                        ClearStatement += "        ." & P.ParameterName & " = 0" & vbNewLine

                    End If
                Else
                    If P.DefaultValue.Length > 1 Then
                        ClearStatement += "        ." & P.ParameterName & " = " & P.DefaultValue & vbNewLine
                    Else
                        If P.ParameterType.Contains("OleDbDataReader") Or P.ParameterType.Contains("SqlDataReader") Or P.ParameterType.Contains("ToolBoxDLL.LineBuilder") Then
                            ClearStatement += "        ." & P.ParameterName & " = Nothing" & vbNewLine
                        Else
                            ClearStatement += "         ." & P.ParameterName & " = New " & P.ParameterType & vbNewLine
                        End If

                    End If
                End If
            Next

            ClearStatement += " " & vbNewLine
            ClearStatement += "  'Clearing Variables" & vbNewLine
            ClearStatement += "  With Me" & vbNewLine
            ClearStatement += "     .OleDb_Adaptor = New OleDb.OleDbDataAdapter" & vbNewLine
            ClearStatement += "     .OleDb_Cmd = New OleDb.OleDbCommand" & vbNewLine
            ClearStatement += "     .OleDb_Con = New OleDb.OleDbConnection" & vbNewLine
            ClearStatement += "     .OleDb_DeleteCommand = New OleDb.OleDbCommand" & vbNewLine
            ClearStatement += "     .OleDb_UpdateCommand = New OleDb.OleDbCommand" & vbNewLine
            ClearStatement += "     .OleDb_InsertCommand = New OleDb.OleDbCommand" & vbNewLine
            ClearStatement += "     .OleDb_SelectCommand = New OleDb.OleDbCommand" & vbNewLine
            ClearStatement += " " & vbNewLine
            ClearStatement += "     .Sql_Adaptor = New Sqlclient.SqlDataAdapter" & vbNewLine
            ClearStatement += "     .Sql_Cmd = New Sqlclient.SqlCommand" & vbNewLine
            ClearStatement += "     .Sql_Con = New Sqlclient.SqlConnection" & vbNewLine
            ClearStatement += "     .Sql_DeleteCommand = New Sqlclient.SqlCommand" & vbNewLine
            ClearStatement += "     .Sql_UpdateCommand = New Sqlclient.SqlCommand" & vbNewLine
            ClearStatement += "     .Sql_InsertCommand = New Sqlclient.SqlCommand" & vbNewLine
            ClearStatement += "     .Sql_SelectCommand = New Sqlclient.SqlCommand" & vbNewLine
            ClearStatement += " " & vbNewLine
            ClearStatement += "     .Columns = New List(Of DataColumn)" & vbNewLine
            ClearStatement += "     .Data = New DataTable" & vbNewLine
            ClearStatement += "     .DataSet = New DataSet" & vbNewLine
            ClearStatement += "     .Items = New List(Of VirtualItem)" & vbNewLine
            ClearStatement += "     .OleDb_Parameters = New List(Of OleDb.OleDbParameter)" & vbNewLine
            ClearStatement += "     .Rows = New List(Of DataRow)" & vbNewLine
            ClearStatement += "     .Sql_Parameters = New List(Of SqlClient.SqlParameter)" & vbNewLine
            ClearStatement += "  End With" & vbNewLine

            ' ClearStatement += " FilePath = " & Space & Tb.FilePath & Space & vbNewLine &
            '                   " Password = " & Space & Tb.Password & Space & vbNewLine &
            '                   " TableName = " & Space & Tb.TableName & Space & vbNewLine &
            '                   " UseSQL = " & Tb.UseSQL & vbNewLine
            ' " Table = New Table(TableName,FilePath, Password)" & vbNewLine &

            ClearStatement += " End With"
            Dim Clear As New VbNET.Sub("Clear", ClearStatement, "This will reinitialize the class element.", 0)
            Clear.ParentClass = Result
            Clear.PrintStatement(True)
            Clear.ParentClass.Add_Sub(Clear)
#End Region
#Region "|ON | |04.01| <Sub> [Reset()]"
            Dim ResetStatement As String = ""
#Region "|TableName|"
            ResetStatement += " If (Not IsNothing(TableName)) Then" & vbNewLine
            ResetStatement += "     If (TableName.Length > 1) Then" & vbNewLine
            ResetStatement += "         Me.TableName = TableName " & vbNewLine
            ResetStatement += "     End If '(TableName.Length > 1) " & vbNewLine
            ResetStatement += " End If '(Not IsNothing(TableName)) " & vbNewLine
            ResetStatement += " " & vbNewLine
#End Region
#Region "|FilePath|"
            ResetStatement += " If (Not IsNothing(FilePath)) Then" & vbNewLine
            ResetStatement += "     If (FilePath.Length > 1) Then" & vbNewLine
            ResetStatement += "         If (IO.File.Exists(FilePath) = True) Then" & vbNewLine
            ResetStatement += "             Me.DataBase = FilePath" & vbNewLine
            ResetStatement += "         End If '(IO.File.Exists(FilePath) = True) Then" & vbNewLine
            ResetStatement += "     End If '(FilePath.Length > 1) " & vbNewLine
            ResetStatement += " End If '(Not IsNothing(FilePath)) " & vbNewLine
            ResetStatement += " " & vbNewLine
#End Region
#Region "|Password|"
            ResetStatement += " If (Not IsNothing(Password)) Then" & vbNewLine
            ResetStatement += "     If (Password.Length > 1) Then" & vbNewLine
            ResetStatement += "         Me.Password = Password" & vbNewLine
            ResetStatement += "     End If '(Password.Length > 1) " & vbNewLine
            ResetStatement += " End If '(Not IsNothing(Password)) " & vbNewLine
            ResetStatement += " " & vbNewLine
#End Region
            ResetStatement += " " & vbNewLine
            ResetStatement += " Me.Connector = New ToolBoxDLL.LineBuilder(Me.DataBase,Me.Password)" & vbNewLine
            ResetStatement += " With Me" & vbNewLine
            ResetStatement += "     .Line = Me.Connector.ConnectionLine" & vbNewLine
            ResetStatement += "     .UseSql = Me.Connector.UseSql" & vbNewLine
            ResetStatement += " End With" & vbNewLine
            Dim Reset As New VbNET.Sub("Reset", ResetStatement, "This will reinitialize the variables of this class.", 0)
            Reset.AddParameter("TableName", "String", Result.ClassName, "ByVal", "Please enter a valid table name.")
            Reset.AddParameter("FilePath", "String", "Nothing", "ByVal", "Please emter a valid filepath.")
            Reset.AddParameter("Password", "String", "Nothing", "Optional ByVal", "Please use a valid password.")
            Reset.ParentClass = Result
            Reset.PrintStatement(True)
            Reset.ParentClass.Add_Sub(Reset)
#End Region
#Region "|OFF|X|04.01| <Sub> [InitializeConnection(FilePath|String,[Password]|String)]"
            Dim InitializeConnectionStatement As String = ""
            InitializeConnectionStatement += " Me.Line = New LineInfo(FilePath,Password).Line" & vbNewLine &
          " FilePath = FilePath" & vbNewLine &
          " Password = Password" & vbNewLine &
          " TableName= " & Space & Tb.TableName & Space & vbNewLine
            Dim InitializeConnection As New VbNET.Sub("InitializeConnection", InitializeConnectionStatement, "This will initialise the connection and import the data.", 2)
            InitializeConnection.AddParameter("FilePath", "String", Tb.FilePath, "Byval", "The FilePath must be valid.")
            InitializeConnection.AddParameter("Password", "String", Tb.Password, "Optional Byval", "Optional, this password will be stored in Password settings provided that the FilePath Parameter is conclusive.")
            InitializeConnection.ParentClass = Result
            InitializeConnection.PrintStatement(True)
            '   InitializeConnection.ParentClass.Add_Sub(InitializeConnection)
#End Region
#Region "|ON | |04.02| <Sub> [Add()]"
            Dim AddStatement As String = ""
            Dim iline As String = "                   .Parameters.AddWithValue(" & Space & "@"

            AddStatement += "    Dim Result As String = " & Space & Space & vbNewLine
            AddStatement += "    Dim Test As Boolean = False" & vbNewLine

            AddStatement += "    If (Me.HasSettings = True) Then" & vbNewLine
            AddStatement += "       Dim Str As String = " & Space & Space & vbNewLine
            AddStatement += "       Str = " & Space & "INSERT INTO [" & Tb.TableName & "] (" '& vbNewLine
#Region "Creating SqlCommand"
            Dim TString As String = ""
            For i = 0 To TableClassElementTables.Count - 2
                AddStatement += "`" & TableClassElementTables(i).ParameterName & "`, " '& vbNewLine
                TString += "@" & i & ", " ' & vbNewLine
            Next
            TString += "@" & TableClassElementTables.Count - 1
            AddStatement += "`" & TableClassElementTables(TableClassElementTables.Count - 1).ParameterName & "`) Values (" & TString & ")" & Space & vbNewLine
#End Region
            Dim x As Integer = 0
            AddStatement += "       If (Me.UseSql = True) Then" & vbNewLine
#Region "[Sql]"
            AddStatement += "           If (Open(Str).Result = True) Then" & vbNewLine
            AddStatement += "               With Sql_Cmd" & vbNewLine
#Region "Parameters"
            For x = 0 To TableClassElementTables.Count - 1
                Dim iReturnType As String = ""
                Dim iCondition As String = "IIf(IsNothing("
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementParameters(x)
                iReturnType = TableClassElementTables(x).ParameterType 'Grabing the ReturnType
                If iReturnType.ToLower = "string" Then
                    iCondition += "Me." & P.ParameterName & ")," & Space & Space & ", Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "date" Or iReturnType.ToLower = "datetime" Then
                    iCondition += "Me." & P.ParameterName & "), DateTime.Parse(Now.ToShortDateString & " & Space & " " & Space & "& Now.ToLongTimeString), DateTime.Parse(" & P.ParameterName & ".ToShortDateString & " & Space & " " & Space & " & " & P.ParameterName & ".ToLongTimeString)))"
                ElseIf iReturnType.ToLower = "integer" Or iReturnType.ToLower = "double" Or iReturnType.ToLower = "long" Then
                    iCondition += "Me." & P.ParameterName & "), 0 , Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "boolean" Then
                    iCondition += "Me." & P.ParameterName & "), False , Me." & P.ParameterName & "))"
                Else
                    iCondition += "Me." & P.ParameterName & "), Nothing , Me." & P.ParameterName & "))"
                End If
                AddStatement += iline & x & Space & ", " & iCondition & vbNewLine
            Next
#End Region
            AddStatement += "                   Try" & vbNewLine
            AddStatement += "                       If (.ExecuteNonQuery() >=0) Then" & vbNewLine
            AddStatement += "                           Test = True" & vbNewLine
            AddStatement += "                       Else'(.ExecuteNonQuery<0)" & vbNewLine
            AddStatement += "                           Test = False" & vbNewLine
            AddStatement += "                       End If '(.ExecuteNonQuery)" & vbNewLine
            AddStatement += "                   Catch ex As Exception" & vbNewLine
            AddStatement += "                       Result += ex.Message & vbNewLine" & vbNewLine
            AddStatement += "                   End Try" & vbNewLine
            AddStatement += "               End With 'Sql_Cmd" & vbNewLine
            AddStatement += "               Close()" & vbNewLine
            AddStatement += "               " & vbNewLine
            AddStatement += "           ElseIf (Open(Str).Result = False) Then" & vbNewLine
            AddStatement += "               Result += " & Space & "There is a problem establishing the connection with the DataBase. Check if you have the correct password" & Space & " & VbNewLine " & vbNewLine
            AddStatement += "               Test = False" & vbNewLine
            AddStatement += "           End If '(Open(Str).Result)" & vbNewLine
#End Region
            AddStatement += "       ElseIf (Me.UseSql = False) Then" & vbNewLine
#Region "[OleDb]"
            AddStatement += "           If (Open(Str).Result = True) Then" & vbNewLine
            AddStatement += "               With OleDb_Cmd" & vbNewLine
#Region "Parameters"
            For x = 0 To TableClassElementTables.Count - 1
                Dim iReturnType As String = ""
                Dim iCondition As String = "IIf(IsNothing("
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementParameters(x)
                iReturnType = TableClassElementTables(x).ParameterType 'Grabing the ReturnType
                If iReturnType.ToLower = "string" Then
                    iCondition += "Me." & P.ParameterName & ")," & Space & Space & ", " & "Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "date" Or iReturnType.ToLower = "datetime" Then
                    iCondition += "Me." & P.ParameterName & "), DateTime.Parse(Now.ToShortDateString & " & Space & " " & Space & "& Now.ToLongTimeString), DateTime.Parse(" & "Me." & P.ParameterName & ".ToShortDateString & " & Space & " " & Space & " & " & "Me." & P.ParameterName & ".ToLongTimeString)))"
                ElseIf iReturnType.ToLower = "integer" Or iReturnType.ToLower = "double" Or iReturnType.ToLower = "long" Then
                    iCondition += "Me." & P.ParameterName & "), 0 , " & "Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "boolean" Then
                    iCondition += "Me." & P.ParameterName & "), False , " & "Me." & P.ParameterName & "))"
                Else
                    iCondition += "Me." & P.ParameterName & "), Nothing , " & "Me." & P.ParameterName & "))"
                End If
                AddStatement += iline & x & Space & ", " & iCondition & vbNewLine
            Next
#End Region
            AddStatement += "                   Try" & vbNewLine
            AddStatement += "                       If (.ExecuteNonQuery() >=0) Then" & vbNewLine
            AddStatement += "                           Test = True" & vbNewLine
            AddStatement += "                       Else'(.ExecuteNonQuery<0)" & vbNewLine
            AddStatement += "                           Test = False" & vbNewLine
            AddStatement += "                       End If '(.ExecuteNonQuery)" & vbNewLine
            AddStatement += "                   Catch ex As Exception" & vbNewLine
            AddStatement += "                       Result += ex.Message & vbNewLine" & vbNewLine
            AddStatement += "                   End Try" & vbNewLine
            AddStatement += "               End With 'OleDb_Cmd" & vbNewLine
            AddStatement += "               Close()" & vbNewLine
            AddStatement += "               " & vbNewLine
            AddStatement += "           ElseIf (Open(Str).Result = False) Then" & vbNewLine
            AddStatement += "               Result += " & Space & "There is a problem establishing the connection with the DataBase. Check if you have the correct password" & Space & " & VbNewLine " & vbNewLine
            AddStatement += "               Test = False" & vbNewLine
            AddStatement += "           End If '(Open(Str).Result)" & vbNewLine
#End Region
            AddStatement += "       End If '(Me.UseSql)" & vbNewLine

            AddStatement += "    Else '(Me.HasSettings = False) " & vbNewLine
            AddStatement += "       Result += " & Space & "The connection settings are not properly set. Please use the Reset method to initialise the connector first." & Space & " & VbNewLine " & vbNewLine
            AddStatement += "       Test = False" & vbNewLine
            AddStatement += "    End If '(Me.HasSettings = True) Then" & vbNewLine
            AddStatement += "    If (Test = False) Then" & vbNewLine
            AddStatement += "       Msgbox(Result)" & vbNewLine
            AddStatement += "    End If '(Test = False)" & vbNewLine
            'End
            Dim Add As New VbNET.Sub("Add", AddStatement, "This will add a New row In the table.", 3)
            Add.ParentClass = Result
            Add.PrintStatement(True)
            Add.ParentClass.Add_Sub(Add)
#End Region
#Region "|ON | |04.03| <Sub> [Add2(Full)]"
            Dim AddStatement2 As String = ""
            TString = ""
            AddStatement2 += "    Dim Result As String = " & Space & Space & vbNewLine
            AddStatement2 += "    Dim Test As Boolean = False" & vbNewLine

            AddStatement2 += "    If (Me.HasSettings = True) Then" & vbNewLine
            AddStatement2 += "       Dim Str As String = " & Space & Space & vbNewLine
            AddStatement2 += "       Str = " & Space & "INSERT INTO [" & Tb.TableName & "] (" '& vbNewLine
#Region "Creating SqlCommand"
            For i = 0 To TableClassElementTables.Count - 2
                AddStatement2 += "`" & TableClassElementTables(i).ParameterName & "`, " '& vbNewLine
                TString += "@" & i & ", " '& vbNewLine
            Next
            TString += "@" & TableClassElementTables.Count - 1
            AddStatement2 += "`" & TableClassElementTables(TableClassElementTables.Count - 1).ParameterName & "`) Values (" & TString & ")" & Space & vbNewLine
#End Region
            x = 0
            AddStatement2 += "       With Me" & vbNewLine
            For Each P As InnerStatement.ParameterList_Statement In TableClassElementParameters
                AddStatement2 += "          ." & P.Name & " = [" & P.Name & "]" & vbNewLine
            Next
            AddStatement2 += "       End With' Me" & vbNewLine
            AddStatement2 += "       If (Me.UseSql = True) Then" & vbNewLine
#Region "[Sql]"
            AddStatement2 += "           If (Open(Str).Result = True) Then" & vbNewLine
            AddStatement2 += "               With Sql_Cmd" & vbNewLine
#Region "Parameters"
            For x = 0 To TableClassElementTables.Count - 1
                Dim iReturnType As String = ""
                Dim iCondition As String = "IIf(IsNothing("
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementParameters(x)
                iReturnType = TableClassElementTables(x).ParameterType 'Grabing the ReturnType
                If iReturnType.ToLower = "string" Then
                    iCondition += "Me." & P.ParameterName & ")," & Space & Space & ", " & "Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "date" Or iReturnType.ToLower = "datetime" Then
                    iCondition += "Me." & P.ParameterName & "), DateTime.Parse(Now.ToShortDateString & " & Space & " " & Space & "& Now.ToLongTimeString), DateTime.Parse(" & "Me." & P.ParameterName & ".ToShortDateString & " & Space & " " & Space & " & " & "Me." & P.ParameterName & ".ToLongTimeString)))"
                ElseIf iReturnType.ToLower = "integer" Or iReturnType.ToLower = "double" Or iReturnType.ToLower = "long" Then
                    iCondition += "Me." & P.ParameterName & "), 0 , " & "Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "boolean" Then
                    iCondition += "Me." & P.ParameterName & "), False , " & "Me." & P.ParameterName & "))"
                Else
                    iCondition += "Me." & P.ParameterName & "), Nothing , " & "Me." & P.ParameterName & "))"
                End If
                AddStatement2 += iline & x & Space & ", " & iCondition & vbNewLine
            Next
#End Region
            AddStatement2 += "                   Try" & vbNewLine
            AddStatement2 += "                       If (.ExecuteNonQuery() >=0) Then" & vbNewLine
            AddStatement2 += "                           Test = True" & vbNewLine
            AddStatement2 += "                       Else'(.ExecuteNonQuery<0)" & vbNewLine
            AddStatement2 += "                           Test = False" & vbNewLine
            AddStatement2 += "                       End If '(.ExecuteNonQuery)" & vbNewLine
            AddStatement2 += "                   Catch ex As Exception" & vbNewLine
            AddStatement2 += "                       Result += ex.Message & vbNewLine" & vbNewLine
            AddStatement2 += "                   End Try" & vbNewLine
            AddStatement2 += "               End With 'Sql_Cmd" & vbNewLine
            AddStatement2 += "               Close()" & vbNewLine
            AddStatement2 += "               " & vbNewLine
            AddStatement2 += "           ElseIf (Open(Str).Result = False) Then" & vbNewLine
            AddStatement2 += "               Result += " & Space & "There is a problem establishing the connection with the DataBase. Check if you have the correct password" & Space & " & VbNewLine " & vbNewLine
            AddStatement2 += "               Test = False" & vbNewLine
            AddStatement2 += "           End If '(Open(Str).Result)" & vbNewLine
#End Region
            AddStatement2 += "       ElseIf (Me.UseSql = False) Then" & vbNewLine
#Region "[OleDb]"
            AddStatement2 += "           If (Open(Str).Result = True) Then" & vbNewLine
            AddStatement2 += "               With OleDb_Cmd" & vbNewLine
#Region "Parameters"
            For x = 0 To TableClassElementTables.Count - 1
                Dim iReturnType As String = ""
                Dim iCondition As String = "IIf(IsNothing("
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementParameters(x)
                iReturnType = TableClassElementTables(x).ParameterType 'Grabing the ReturnType
                If iReturnType.ToLower = "string" Then
                    iCondition += "Me." & P.ParameterName & ")," & Space & Space & ", " & "Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "date" Or iReturnType.ToLower = "datetime" Then
                    iCondition += "Me." & P.ParameterName & "), DateTime.Parse(Now.ToShortDateString & " & Space & " " & Space & "& Now.ToLongTimeString), DateTime.Parse(" & "Me." & P.ParameterName & ".ToShortDateString & " & Space & " " & Space & " & " & "Me." & P.ParameterName & ".ToLongTimeString)))"
                ElseIf iReturnType.ToLower = "integer" Or iReturnType.ToLower = "double" Or iReturnType.ToLower = "long" Then
                    iCondition += "Me." & P.ParameterName & "), 0 , " & "Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "boolean" Then
                    iCondition += "Me." & P.ParameterName & "), False , " & "Me." & P.ParameterName & "))"
                Else
                    iCondition += "Me." & P.ParameterName & "), Nothing , " & "Me." & P.ParameterName & "))"
                End If
                AddStatement2 += iline & x & Space & ", " & iCondition & vbNewLine
            Next
#End Region
            AddStatement2 += "                   Try" & vbNewLine
            AddStatement2 += "                       If (.ExecuteNonQuery() >=0) Then" & vbNewLine
            AddStatement2 += "                           Test = True" & vbNewLine
            AddStatement2 += "                       Else'(.ExecuteNonQuery<0)" & vbNewLine
            AddStatement2 += "                           Test = False" & vbNewLine
            AddStatement2 += "                       End If '(.ExecuteNonQuery)" & vbNewLine
            AddStatement2 += "                   Catch ex As Exception" & vbNewLine
            AddStatement2 += "                       Result += ex.Message & vbNewLine" & vbNewLine
            AddStatement2 += "                   End Try" & vbNewLine
            AddStatement2 += "               End With 'OleDb_Cmd" & vbNewLine
            AddStatement2 += "               Close()" & vbNewLine
            AddStatement2 += "               " & vbNewLine
            AddStatement2 += "           ElseIf (Open(Str).Result = False) Then" & vbNewLine
            AddStatement2 += "               Result += " & Space & "There is a problem establishing the connection with the DataBase. Check if you have the correct password" & Space & " & VbNewLine " & vbNewLine
            AddStatement2 += "               Test = False" & vbNewLine
            AddStatement2 += "           End If '(Open(Str).Result)" & vbNewLine
#End Region
            AddStatement2 += "       End If '(Me.UseSql)" & vbNewLine

            AddStatement2 += "    Else '(Me.HasSettings = False) " & vbNewLine
            AddStatement2 += "       Result += " & Space & "The connection settings are not properly set. Please use the Reset method to initialise the connector first." & Space & " & VbNewLine " & vbNewLine
            AddStatement2 += "       Test = False" & vbNewLine
            AddStatement2 += "    End If '(Me.HasSettings = True) Then" & vbNewLine
            AddStatement2 += "    If (Test = False) Then" & vbNewLine
            AddStatement2 += "       Msgbox(Result)" & vbNewLine
            AddStatement2 += "    End If '(Test = False)" & vbNewLine
            'End
            Dim Add2 As New VbNET.Sub("AddFull", AddStatement2, "This will add a New row In the table.", 4)
            For Each P As InnerStatement.ParameterList_Statement In TableClassElementParameters
                Dim px As String = ""
                If P.Optional = True Then
                    px += "Optional " & IIf(P.ByVal = True, "ByVal ", "ByRef ")
                Else
                    If P.ParamArray = True Then
                        px += "ParamArray " & IIf(P.ByVal = True, "ByVal ", "ByRef ")
                    Else
                        px += IIf(P.ByVal = True, "ByVal ", "ByRef ")
                    End If
                End If
                Add2.AddParameter(P.ParameterName, P.ParameterType, P.DefaultValue, px, P.Definition)
            Next
            Add2.ParentClass = Result
            Add2.PrintStatement(True)
            Add2.ParentClass.Add_Sub(Add2)
#End Region
#Region "|On | |04.04| <Sub> [Save()]"
            Dim SaveStatement As String = ""

            TString = ""
            SaveStatement += "    Dim Result As String = " & Space & Space & vbNewLine
            SaveStatement += "    Dim Test As Boolean = False" & vbNewLine

            SaveStatement += "    If (Me.HasSettings = True) Then" & vbNewLine
            SaveStatement += "       Dim Str As String = " & Space & Space & vbNewLine
            SaveStatement += "       Str = " & Space & "UPDATE [" & Tb.TableName & "] SET" '& vbNewLine
#Region "Creating SqlCommand"
            For x = 1 To TableClassElementTables.Count - 1
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementTables(x)
                If (x >= TableClassElementTables.Count - 1) Then
                    SaveStatement += " " & P.ParameterName & " = @" & P.ParameterName & "" '& vbNewLine
                    SaveStatement += " WHERE " & TableClassElementTables(0).ParameterName & " = @" & TableClassElementTables(0).ParameterName & Space & vbNewLine
                Else
                    SaveStatement += " " & P.ParameterName & " = @" & P.ParameterName & "," ' & vbNewLine
                End If
            Next
#End Region
            SaveStatement += "       If (Me.UseSql = True) Then" & vbNewLine
#Region "SQL"

            SaveStatement += "          If (Open(Str).Result = True) Then" & vbNewLine
            SaveStatement += "              With Sql_Cmd" & vbNewLine
#Region "Parameters"
            For x = 0 To TableClassElementTables.Count - 1
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementTables(x)
                Dim iReturnType As String = ""
                Dim iCondition As String = "IIf(IsNothing("
                iReturnType = TableClassElementTables(x).ParameterType 'Grabing the ReturnType
                If iReturnType.ToLower = "string" Then
                    iCondition += "Me." & P.ParameterName & ")," & Space & Space & ", " & "Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "date" Or iReturnType.ToLower = "datetime" Then
                    iCondition += "Me." & P.ParameterName & "), DateTime.Parse(Now.ToShortDateString & " & Space & " " & Space & "& Now.ToLongTimeString), DateTime.Parse(" & "Me." & P.ParameterName & ".ToShortDateString & " & Space & " " & Space & " & " & "Me." & P.ParameterName & ".ToLongTimeString)))"
                ElseIf iReturnType.ToLower = "integer" Or iReturnType.ToLower = "double" Or iReturnType.ToLower = "long" Then
                    iCondition += "Me." & P.ParameterName & "), 0 , " & "Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "boolean" Then
                    iCondition += "Me." & P.ParameterName & "), False , " & "Me." & P.ParameterName & "))"
                Else
                    iCondition += "Me." & P.ParameterName & "), Nothing , " & "Me." & P.ParameterName & "))"
                End If
                SaveStatement += iline & P.ParameterName & Space & ", " & iCondition & vbNewLine
            Next
#End Region
            SaveStatement += "                      Try" & vbNewLine
            SaveStatement += "                          If (.ExecuteNonQuery >= 0) Then" & vbNewLine
            SaveStatement += "                              Test = True" & vbNewLine
            SaveStatement += "                          Else'(.ExecuteNonQuery < 0) Then" & vbNewLine
            SaveStatement += "                              Test = False" & vbNewLine
            SaveStatement += "                          End If '(.ExecuteNonQuery) Then" & vbNewLine
            SaveStatement += "                      Catch ex As Exception" & vbNewLine
            SaveStatement += "                          Result += ex.Message & vbNewLine" & vbNewLine
            SaveStatement += "                      End Try" & vbNewLine
            SaveStatement += "              End With 'Sql_Cmd" & vbNewLine
            SaveStatement += "              Close()" & vbNewLine
            SaveStatement += "          ElseIf (Open(Str).Result = False) Then" & vbNewLine
            SaveStatement += "               Test = False" & vbNewLine
            SaveStatement += "               Result += " & Space & "There is a problem establishing the connection with the DataBase. Check if you have the correct password" & Space & " & VbNewLine " & vbNewLine
            SaveStatement += "          End If '(Open(Str).Result)" & vbNewLine
#End Region
            SaveStatement += "       ElseIf (Me.UseSql = False) Then" & vbNewLine
#Region "OLEDB"

            SaveStatement += "          If (Open(Str).Result = True) Then" & vbNewLine
            SaveStatement += "              With OleDb_Cmd" & vbNewLine
#Region "Parameters"
            For x = 0 To TableClassElementTables.Count - 1
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementTables(x)
                Dim iReturnType As String = ""
                Dim iCondition As String = "IIf(IsNothing("
                iReturnType = TableClassElementTables(x).ParameterType 'Grabing the ReturnType
                If iReturnType.ToLower = "string" Then
                    iCondition += "Me." & P.ParameterName & ")," & Space & Space & ", " & "Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "date" Or iReturnType.ToLower = "datetime" Then
                    iCondition += "Me." & P.ParameterName & "), DateTime.Parse(Now.ToShortDateString & " & Space & " " & Space & "& Now.ToLongTimeString), DateTime.Parse(" & "Me." & P.ParameterName & ".ToShortDateString & " & Space & " " & Space & " & " & "Me." & P.ParameterName & ".ToLongTimeString)))"
                ElseIf iReturnType.ToLower = "integer" Or iReturnType.ToLower = "double" Or iReturnType.ToLower = "long" Then
                    iCondition += "Me." & P.ParameterName & "), 0 , " & "Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "boolean" Then
                    iCondition += "Me." & P.ParameterName & "), False , " & "Me." & P.ParameterName & "))"
                Else
                    iCondition += "Me." & P.ParameterName & "), Nothing , " & "Me." & P.ParameterName & "))"
                End If
                SaveStatement += iline & P.ParameterName & Space & ", " & iCondition & vbNewLine
            Next
#End Region
            SaveStatement += "                      Try" & vbNewLine
            SaveStatement += "                          If (.ExecuteNonQuery >= 0) Then" & vbNewLine
            SaveStatement += "                              Test = True" & vbNewLine
            SaveStatement += "                          Else'(.ExecuteNonQuery < 0) Then" & vbNewLine
            SaveStatement += "                              Test = False" & vbNewLine
            SaveStatement += "                          End If '(.ExecuteNonQuery) Then" & vbNewLine
            SaveStatement += "                      Catch ex As Exception" & vbNewLine
            SaveStatement += "                          Result += ex.Message & vbNewLine" & vbNewLine
            SaveStatement += "                      End Try" & vbNewLine
            SaveStatement += "              End With 'OleDb_Cmd" & vbNewLine
            SaveStatement += "              Close()" & vbNewLine
            SaveStatement += "          ElseIf (Open(Str).Result = False) Then" & vbNewLine
            SaveStatement += "               Test = False" & vbNewLine
            SaveStatement += "               Result += " & Space & "There is a problem establishing the connection with the DataBase. Check if you have the correct password" & Space & " & VbNewLine " & vbNewLine
            SaveStatement += "          End If '(Open(Str).Result)" & vbNewLine
#End Region
            SaveStatement += "       End If '(Me.UseSql)" & vbNewLine
            SaveStatement += "    Else 'If (Me.HasSettings = False) Then" & vbNewLine
            SaveStatement += "       Result += " & Space & "The connection settings are not properly set. Please use the Reset method to initialise the connector first." & Space & " & VbNewLine " & vbNewLine
            SaveStatement += "       Test = False" & vbNewLine
            SaveStatement += "    End If '(Me.HasSettings)" & vbNewLine
            SaveStatement += "    If (Test = False) Then" & vbNewLine
            SaveStatement += "       Msgbox(Result)" & vbNewLine
            SaveStatement += "    End If '(Test = False)" & vbNewLine

            Dim Save As New VbNET.Sub("Save", SaveStatement, "This will update a row In the table.", 5)
            Save.ParentClass = Result
            Save.PrintStatement(True)
            Save.ParentClass.Add_Sub(Save)
#End Region
#Region "|On | |04.05| <Sub> [Save(Full)]"
            Dim SaveStatement2 As String = ""

            TString = ""
            SaveStatement2 += "    Dim Result As String = " & Space & Space & vbNewLine
            SaveStatement2 += "    Dim Test As Boolean = False" & vbNewLine

            SaveStatement2 += "    If (Me.HasSettings = True) Then" & vbNewLine
            SaveStatement2 += "       With Me" & vbNewLine
            For Each P As InnerStatement.ParameterList_Statement In TableClassElementParameters
                SaveStatement2 += "          ." & P.Name & " = [" & P.Name & "]" & vbNewLine
            Next
            SaveStatement2 += "       End With' Me" & vbNewLine

            SaveStatement2 += "       Dim Str As String = " & Space & Space & vbNewLine
            SaveStatement2 += "       Str = " & Space & "UPDATE [" & Tb.TableName & "] SET" '& vbNewLine
#Region "Creating SqlCommand"
            For x = 1 To TableClassElementTables.Count - 1
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementTables(x)
                If (x >= TableClassElementTables.Count - 1) Then
                    SaveStatement2 += " " & P.ParameterName & " = @" & P.ParameterName & "" ' & vbNewLine
                    SaveStatement2 += " WHERE " & TableClassElementTables(0).ParameterName & " = @" & TableClassElementTables(0).ParameterName & Space & vbNewLine
                Else
                    SaveStatement2 += " " & P.ParameterName & " = @" & P.ParameterName & "," ' & vbNewLine
                End If
            Next
#End Region
            SaveStatement2 += "       If (Me.UseSql = True) Then" & vbNewLine
#Region "SQL"

            SaveStatement2 += "          If (Open(Str).Result = True) Then" & vbNewLine
            SaveStatement2 += "              With Sql_Cmd" & vbNewLine
#Region "Parameters"
            For x = 0 To TableClassElementTables.Count - 1
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementTables(x)
                Dim iReturnType As String = ""
                Dim iCondition As String = "IIf(IsNothing("
                iReturnType = TableClassElementTables(x).ParameterType 'Grabing the ReturnType
                If iReturnType.ToLower = "string" Then
                    iCondition += "Me." & P.ParameterName & ")," & Space & Space & ", Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "date" Or iReturnType.ToLower = "datetime" Then
                    iCondition += "Me." & P.ParameterName & "), DateTime.Parse(Now.ToShortDateString & " & Space & " " & Space & "& Now.ToLongTimeString), DateTime.Parse(" & "Me." & P.ParameterName & ".ToShortDateString & " & Space & " " & Space & " & " & "Me." & P.ParameterName & ".ToLongTimeString)))"
                ElseIf iReturnType.ToLower = "integer" Or iReturnType.ToLower = "double" Or iReturnType.ToLower = "long" Then
                    iCondition += "Me." & P.ParameterName & "), 0 , Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "boolean" Then
                    iCondition += "Me." & P.ParameterName & "), False , Me." & P.ParameterName & "))"
                Else
                    iCondition += "Me." & P.ParameterName & "), Nothing , Me." & P.ParameterName & "))"
                End If
                SaveStatement2 += iline & P.ParameterName & Space & ", " & iCondition & vbNewLine
            Next
#End Region
            SaveStatement2 += "                      Try" & vbNewLine
            SaveStatement2 += "                          If (.ExecuteNonQuery >= 0) Then" & vbNewLine
            SaveStatement2 += "                              Test = True" & vbNewLine
            SaveStatement2 += "                          Else'(.ExecuteNonQuery < 0) Then" & vbNewLine
            SaveStatement2 += "                              Test = False" & vbNewLine
            SaveStatement2 += "                          End If '(.ExecuteNonQuery) Then" & vbNewLine
            SaveStatement2 += "                      Catch ex As Exception" & vbNewLine
            SaveStatement2 += "                          Result += ex.Message & vbNewLine" & vbNewLine
            SaveStatement2 += "                      End Try" & vbNewLine
            SaveStatement2 += "              End With 'Sql_Cmd" & vbNewLine
            SaveStatement2 += "              Close()" & vbNewLine
            SaveStatement2 += "          ElseIf (Open(Str).Result = False) Then" & vbNewLine
            SaveStatement2 += "               Test = False" & vbNewLine
            SaveStatement2 += "               Result += " & Space & "There is a problem establishing the connection with the DataBase. Check if you have the correct password" & Space & " & VbNewLine " & vbNewLine
            SaveStatement2 += "          End If '(Open(Str).Result)" & vbNewLine
#End Region
            SaveStatement2 += "       ElseIf (Me.UseSql = False) Then" & vbNewLine
#Region "OLEDB"

            SaveStatement2 += "          If (Open(Str).Result = True) Then" & vbNewLine
            SaveStatement2 += "              With OleDb_Cmd" & vbNewLine
#Region "Parameters"
            For x = 0 To TableClassElementTables.Count - 1
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementTables(x)
                Dim iReturnType As String = ""
                Dim iCondition As String = "IIf(IsNothing("
                iReturnType = TableClassElementTables(x).ParameterType 'Grabing the ReturnType
                If iReturnType.ToLower = "string" Then
                    iCondition += "Me." & P.ParameterName & ")," & Space & Space & ", Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "date" Or iReturnType.ToLower = "datetime" Then
                    iCondition += "Me." & P.ParameterName & "), DateTime.Parse(Now.ToShortDateString & " & Space & " " & Space & "& Now.ToLongTimeString), DateTime.Parse(" & "Me." & P.ParameterName & ".ToShortDateString & " & Space & " " & Space & " & " & "Me." & P.ParameterName & ".ToLongTimeString)))"
                ElseIf iReturnType.ToLower = "integer" Or iReturnType.ToLower = "double" Or iReturnType.ToLower = "long" Then
                    iCondition += "Me." & P.ParameterName & "), 0 , Me." & P.ParameterName & "))"
                ElseIf iReturnType.ToLower = "boolean" Then
                    iCondition += "Me." & P.ParameterName & "), False , Me." & P.ParameterName & "))"
                Else
                    iCondition += "Me." & P.ParameterName & "), Nothing , Me." & P.ParameterName & "))"
                End If
                SaveStatement2 += iline & P.ParameterName & Space & ", " & iCondition & vbNewLine
            Next
#End Region
            SaveStatement2 += "                      Try" & vbNewLine
            SaveStatement2 += "                          If (.ExecuteNonQuery >= 0) Then" & vbNewLine
            SaveStatement2 += "                              Test = True" & vbNewLine
            SaveStatement2 += "                          Else'(.ExecuteNonQuery < 0) Then" & vbNewLine
            SaveStatement2 += "                              Test = False" & vbNewLine
            SaveStatement2 += "                          End If '(.ExecuteNonQuery) Then" & vbNewLine
            SaveStatement2 += "                      Catch ex As Exception" & vbNewLine
            SaveStatement2 += "                          Result += ex.Message & vbNewLine" & vbNewLine
            SaveStatement2 += "                      End Try" & vbNewLine
            SaveStatement2 += "              End With 'OleDb_Cmd" & vbNewLine
            SaveStatement2 += "              Close()" & vbNewLine
            SaveStatement2 += "          ElseIf (Open(Str).Result = False) Then" & vbNewLine
            SaveStatement2 += "               Test = False" & vbNewLine
            SaveStatement2 += "               Result += " & Space & "There is a problem establishing the connection with the DataBase. Check if you have the correct password" & Space & " & VbNewLine " & vbNewLine
            SaveStatement2 += "          End If '(Open(Str).Result)" & vbNewLine
#End Region
            SaveStatement2 += "       End If '(Me.UseSql)" & vbNewLine
            SaveStatement2 += "    Else 'If (Me.HasSettings = False) Then" & vbNewLine
            SaveStatement2 += "       Result += " & Space & "The connection settings are not properly set. Please use the Reset method to initialise the connector first." & Space & " & VbNewLine " & vbNewLine
            SaveStatement2 += "       Test = False" & vbNewLine
            SaveStatement2 += "    End If '(Me.HasSettings)" & vbNewLine
            SaveStatement2 += "    If (Test = False) Then" & vbNewLine
            SaveStatement2 += "       Msgbox(Result)" & vbNewLine
            SaveStatement2 += "    End If '(Test = False)" & vbNewLine

            Dim Save2 As New VbNET.Sub("SaveFull", SaveStatement2, "This will update a row In the table.", 6)
            For Each P As InnerStatement.ParameterList_Statement In TableClassElementParameters
                Dim px As String = ""
                If P.Optional = True Then
                    px += "Optional " & IIf(P.ByVal = True, "ByVal ", "ByRef ")
                Else
                    If P.ParamArray = True Then
                        px += "ParamArray " & IIf(P.ByVal = True, "ByVal ", "ByRef ")
                    Else
                        px += IIf(P.ByVal = True, "ByVal ", "ByRef ")
                    End If
                End If
                Save2.AddParameter(P.ParameterName, P.ParameterType, P.DefaultValue, px, P.Definition)
            Next
            Save2.ParentClass = Result
            Save2.PrintStatement(True)
            Save2.ParentClass.Add_Sub(Save2)
#End Region
#Region "|On | |04.04| <Sub> [Delete()]"
            Dim DeleteStatement As String = ""
            DeleteStatement += "    Dim Result As String = " & Space & Space & vbNewLine
            DeleteStatement += "    Dim Test As Boolean = False" & vbNewLine
            DeleteStatement += "    If (Me.HasSettings = True) Then" & vbNewLine
            DeleteStatement += "       Dim Str As String = " & Space & Space & vbNewLine
            DeleteStatement += "       Str = " & Space & "DELETE FROM [" & Tb.TableName & "] WHERE " & TableClassElementTables(0).ParameterName & " = @" & TableClassElementTables(0).ParameterName & Space & vbNewLine
            DeleteStatement += "       If (Open(Str).Result = True) Then" & vbNewLine
            DeleteStatement += "            If (Me.UseSql = True) Then" & vbNewLine
            DeleteStatement += "                Sql_Cmd.Parameters.AddWithValue(" & Space & "@" & TableClassElementTables(0).ParameterName & Space & ", " & TableClassElementTables(0).ParameterName & ")" & vbNewLine
            DeleteStatement += "                Try" & vbNewLine
            DeleteStatement += "                    If (Sql_Cmd.ExecuteNonQuery() >= 0) Then" & vbNewLine
            DeleteStatement += "                        Test = True" & vbNewLine
            DeleteStatement += "                    Else 'If (Sql_Cmd.ExecuteNonQuery() < 0) Then" & vbNewLine
            DeleteStatement += "                        Test = False" & vbNewLine
            DeleteStatement += "                    End If '(Sql_Cmd.ExecuteNonQuery)" & vbNewLine
            DeleteStatement += "                Catch ex As Exception" & vbNewLine
            DeleteStatement += "                    Result += ex.Message & vbNewLine" & vbNewLine
            DeleteStatement += "                End Try" & vbNewLine
            DeleteStatement += "                Close()" & vbNewLine
            DeleteStatement += "            ElseIf (Me.UseSql = False) Then" & vbNewLine
            DeleteStatement += "                OleDb_Cmd.Parameters.AddWithValue(" & Space & "@" & TableClassElementTables(0).ParameterName & Space & ", " & TableClassElementTables(0).ParameterName & ")" & vbNewLine
            DeleteStatement += "                Try" & vbNewLine
            DeleteStatement += "                    If (OleDb_Cmd.ExecuteNonQuery() >= 0) Then" & vbNewLine
            DeleteStatement += "                        Test = True" & vbNewLine
            DeleteStatement += "                    Else 'If (OleDb_Cmd.ExecuteNonQuery() < 0) Then" & vbNewLine
            DeleteStatement += "                        Test = False" & vbNewLine
            DeleteStatement += "                    End If '(OleDb_Cmd.ExecuteNonQuery)" & vbNewLine
            DeleteStatement += "                Catch ex As Exception" & vbNewLine
            DeleteStatement += "                    Result += ex.Message & vbNewLine" & vbNewLine
            DeleteStatement += "                End Try" & vbNewLine
            DeleteStatement += "                Close()" & vbNewLine
            DeleteStatement += "            End If '(Me.UseSql)" & vbNewLine
            DeleteStatement += "       ElseIf (Open(Str).Result = False) Then" & vbNewLine
            DeleteStatement += "            Result += " & Space & "There is a problem establishing the connection with the DataBase. Check if you have the correct password" & Space & " & VbNewLine " & vbNewLine
            DeleteStatement += "            Test = False" & vbNewLine
            DeleteStatement += "       End If '(Open(Str).Result)" & vbNewLine
            DeleteStatement += "    ElseIf (Me.HasSettings = False) Then" & vbNewLine
            DeleteStatement += "       Result += " & Space & "The connection settings are not properly set. Please use the Reset method to initialise the connector first." & Space & " & VbNewLine " & vbNewLine
            DeleteStatement += "       Test = False" & vbNewLine
            DeleteStatement += "    End If '(Me.HasSettings)" & vbNewLine
            DeleteStatement += "    If (Test = False) Then" & vbNewLine
            DeleteStatement += "       Msgbox(Result)" & vbNewLine
            DeleteStatement += "    End If '(Test = False)" & vbNewLine
            Dim Delete As New VbNET.Sub("Delete", DeleteStatement, "This will Delete a row In the table.", 7)
            Delete.ParentClass = Result
            Delete.PrintStatement(True)
            Delete.ParentClass.Add_Sub(Delete)
#End Region
#Region "|On | |04.05| <Sub> [Import([Format]|Boolean(False)]"
            Dim ImportStatement As String = ""
            ImportStatement += "    Dim Result As New TestCommand(0," & Space & "Import" & Space & "," &
                Space & Tb.TableName & Space & "," &
                Space & "Table" & Space & "," &
                Space & "Import()" & Space & "," &
                Space & "04.05.00" & Space & "," &
                Space & "Start the importation of the data table from the database." & Space & ")" & vbNewLine
            ImportStatement += "    Me.Data = New DataTable" & vbNewLine
            ImportStatement += "    Dim T0 As New TestParameter(" & Space & "Me.Line" & Space & "," &
                Space & "String" & Space & "," & "Me.Line" & ")" & vbNewLine
            ImportStatement += "    Result.AddParameter(T0)" & vbNewLine
            ImportStatement += "    If (Result.Status <> TestCommandStatus.Parameter_Failed) Then" & vbNewLine
            ImportStatement += "        Dim Test0 As New Test(0, Translate(My.Settings.Statement, Sentences.Importation), Translate(My.Settings.Statement, Sentences.Test_if_the_command_has_executed_correctly))" & vbNewLine
            ImportStatement += "        If (Me.UseSql = True) Then" & vbNewLine
            ImportStatement += "            If (Open(" & Space & "SELECT * FROM [" & Tb.TableName & "]" & Space & ").Result = True) Then" & vbNewLine
            ImportStatement += "                Me.Data.Load(Sql_Cmd.ExecuteReader)" & vbNewLine
            ImportStatement += "                Close()" & vbNewLine
            ImportStatement += "            Else '(Open(" & Space & "SELECT * FROM [" & Tb.TableName & "]" & Space & ").Result = False)" & vbNewLine
            ImportStatement += "            End If '(Open(" & Space & "SELECT * FROM [" & Tb.TableName & "]" & Space & ").Result)" & vbNewLine
            ImportStatement += "        Else '(Me.UseSql = False)" & vbNewLine
            ImportStatement += "            If (Me.Connector.Provider.Name = " & Space & "Dbf" & Space & ") Then" & vbNewLine
            ImportStatement += "                If (Open(" & Space & "SELECT * FROM [" & Space & " & IO.Path.GetFileNameWithoutExtension(Me.DataBase) & " & Space & "]" & Space & ").Result = True) Then" & vbNewLine
            ImportStatement += "                    Me.Data.Load(OleDb_Cmd.ExecuteReader)" & vbNewLine
            ImportStatement += "                    Close()" & vbNewLine
            ImportStatement += "                Else 'If (Open(" & Space & "SELECT * FROM [" & Space & " & IO.Path.GetFileNameWithoutExtension(Me.FilePath) & " & Space & "]" & Space & ")" & vbNewLine
            ImportStatement += "                End If '(Open(" & Space & "SELECT * FROM [" & Space & " & IO.Path.GetFileNameWithoutExtension(Me.FilePath) & " & Space & "]" & Space & ")" & vbNewLine
            ImportStatement += "            Else 'If (Me.Connector.Provider.Name = " & Space & "Dbf" & Space & ")" & vbNewLine
            ImportStatement += "                If (Open(" & Space & "SELECT * FROM [" & Tb.TableName & "]" & Space & ").Result = True) Then" & vbNewLine
            ImportStatement += "                    Me.Data.Load(Sql_Cmd.ExecuteReader)" & vbNewLine
            ImportStatement += "                    Close()" & vbNewLine
            ImportStatement += "                Else '(Open(" & Space & "SELECT * FROM [" & Tb.TableName & "]" & Space & ").Result = False)" & vbNewLine
            ImportStatement += "                End If '(Open(" & Space & "SELECT * FROM [" & Tb.TableName & "]" & Space & ").Result)" & vbNewLine
            ImportStatement += "            End If '(Me.Connector.Provider.Name = " & Space & "Dbf" & Space & ")" & vbNewLine
            ImportStatement += "        End If '(Me.UseSql)" & vbNewLine
            ImportStatement += "        If (Me.Data.Columns.Count -1 < 0) Then" & vbNewLine
            ImportStatement += "            Test0.Status = TestStatus.Failed" & vbNewLine
            ImportStatement += "        Else 'If (Me.Data.Columns.Count -1 < 0)" & vbNewLine
            ImportStatement += "            Test0.Status = TestStatus.Passed" & vbNewLine
            ImportStatement += "        End If '(Me.Data.Columns.Count -1 < 0)" & vbNewLine
            ImportStatement += "        Result.AddTest(Test0)" & vbNewLine
            ImportStatement += "        If (Test0.Status = TestStatus.Passed) Then" & vbNewLine
            ImportStatement += "            Result.Status = TestCommandStatus.Passed" & vbNewLine
            ImportStatement += "        Else' If (Test0.Status = TestStatus.Passed)" & vbNewLine
            ImportStatement += "            Result.Status = TestCommandStatus.Failed" & vbNewLine
            ImportStatement += "        End If '(Test0.Status = TestStatus.Passed)" & vbNewLine
            ImportStatement += "    End If '(Result.Status <> TestCommandStatus.Parameter_Failed)" & vbNewLine
            Dim Import As New VbNET.Sub("Import", ImportStatement, "This will initialise the importation of the data.", 0, VbNET.AccessModifiers.Public,,,,,, )
            '  Import.AddParameter("Format", "Boolean", False, "Optional ByVal", "Format the data .")
            Import.ParentClass = Result
            Import.PrintStatement(True)
            Import.ParentClass.Add_Sub(Import)
#End Region
#End Region
#Region "|On | |05| [Function]{6}"
#Region "|On | |05.00| <Function> [Open()]"
            Dim OpenStatement As String = ""
            OpenStatement += "    Dim Result As New ToolBoxDLL.TestBoolean" & vbNewLine
            OpenStatement += "    If (Me.HasSettings = True) Then" & vbNewLine
            OpenStatement += "          Close()" & vbNewLine
            OpenStatement += "          If (Me.UseSql = True) Then" & vbNewLine
            OpenStatement += "              With Me" & vbNewLine
            OpenStatement += "                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)" & vbNewLine
            OpenStatement += "                  .Sql_Cmd = New SqlClient.SqlCommand()" & vbNewLine
            OpenStatement += "                  .Sql_Cmd.CommandText = SqlCommand" & vbNewLine
            OpenStatement += "                  .Sql_Cmd.Connection = .Sql_Con" & vbNewLine
            OpenStatement += "              End With ' Me" & vbNewLine
            OpenStatement += "              Try" & vbNewLine
            OpenStatement += "                  Me.Sql_Con.Open()" & vbNewLine
            OpenStatement += "                  Result.Result = True" & vbNewLine
            OpenStatement += "              Catch ex As Exception" & vbNewLine
            OpenStatement += "                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)" & vbNewLine
            OpenStatement += "                  Result.Result = False" & vbNewLine
            OpenStatement += "              End Try" & vbNewLine
            OpenStatement += "          ElseIf (Me.UseSql = False) Then" & vbNewLine
            OpenStatement += "              With Me" & vbNewLine
            OpenStatement += "                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)" & vbNewLine
            OpenStatement += "                  If (Me.Connector.Provider.Name = " & Space & "Dbf" & Space & ") Then" & vbNewLine
            OpenStatement += "                      Dim Fi As New IO.FileInfo(Me.DataBase)" & vbNewLine
            OpenStatement += "                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)" & vbNewLine
            OpenStatement += "                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)" & vbNewLine
            OpenStatement += "                  Else 'If (Me.Connector.Provider.Name = " & Space & "Dbf" & Space & ")" & vbNewLine
            OpenStatement += "                      .OleDb_Cmd = New OleDb.OleDbCommand()" & vbNewLine
            OpenStatement += "                  End If '(Me.Connector.Provider.Name = " & Space & "Dbf" & Space & ")" & vbNewLine
            OpenStatement += "                  .OleDb_Cmd.CommandText = SqlCommand" & vbNewLine
            OpenStatement += "                  .OleDb_Cmd.Connection = .OleDb_Con" & vbNewLine
            OpenStatement += "              End With ' Me" & vbNewLine
            OpenStatement += "              Try" & vbNewLine
            OpenStatement += "                  Me.OleDb_Con.Open()" & vbNewLine
            OpenStatement += "                  Result.Result = True" & vbNewLine
            OpenStatement += "              Catch ex As Exception" & vbNewLine
            OpenStatement += "                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)" & vbNewLine
            OpenStatement += "                  Result.Result = False" & vbNewLine
            OpenStatement += "              End Try" & vbNewLine
            OpenStatement += "          End If '(Me.UseSql)" & vbNewLine
            OpenStatement += "    ElseIf (Me.HasSettings = False) Then" & vbNewLine
            OpenStatement += "          Result.Result = False" & vbNewLine
            OpenStatement += "          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)" & vbNewLine
            OpenStatement += "    End If '(Me.HasSettings)" & vbNewLine
            OpenStatement += "    Me.ConnectionEstablised = Result.Result" & vbNewLine
            OpenStatement += "    Return Result" & vbNewLine
            Dim Open As New VbNET.Function("Open", OpenStatement, "This will initialise the connection And import the data.", 0, VbNET.AccessModifiers.Public,,,,,, "ToolBoxDLL.TestBoolean")
            Open.AddParameter("SqlCommand", "String", "", "Optional ByVal", "An sql String query To be stored In either Cmd Or SqlCmd.")
            Open.ParentClass = Result
            Open.PrintStatement(True)
            Open.ParentClass.Add_Function(Open)
#End Region
#Region "|On | |05.01| <Function> [Close()]"
            Dim CloseStatement As String = ""
            CloseStatement += "    Dim Result As New ToolBoxDLL.TestBoolean" & vbNewLine
            CloseStatement += "    If (Me.UseSql = True) Then" & vbNewLine
            CloseStatement += "         If (Not IsNothing(Sql_Con)) Then" & vbNewLine
            CloseStatement += "             Sql_Con.Close()" & vbNewLine
            CloseStatement += "             Sql_Con.Dispose()" & vbNewLine
            CloseStatement += "             Sql_Cmd.Dispose()" & vbNewLine
            CloseStatement += "             Result.Result = True" & vbNewLine
            CloseStatement += "         End If '(Not IsNothing(Sql_Con))" & vbNewLine
            CloseStatement += "    ElseIf (Me.UseSql = False) Then" & vbNewLine
            CloseStatement += "         If (Not IsNothing(OleDb_Con)) Then" & vbNewLine
            CloseStatement += "             OleDb_Con.Close()" & vbNewLine
            CloseStatement += "             OleDb_Con.Dispose()" & vbNewLine
            CloseStatement += "             OleDb_Cmd.Dispose()" & vbNewLine
            CloseStatement += "             Result.Result = True" & vbNewLine
            CloseStatement += "         End If '(Not IsNothing(OleDb_Con))" & vbNewLine
            CloseStatement += "    End If '(Me.UseSql)" & vbNewLine
            CloseStatement += "    Return Result" & vbNewLine
            Dim Close As New VbNET.Function("Close", CloseStatement, "This willClosing the connection", 1,,,,,,, "ToolBoxDLL.TestBoolean",,,)
            Close.AddParameter("Dispose", "Boolean", False, "Optional ByVal", "Dispose Of the Object.")
            Close.ParentClass = Result
            Close.PrintStatement(True)
            Close.ParentClass.Add_Function(Close)
#End Region
#Region "|On | |05.02| <Function> [List()]"
            Dim ListStatement As String = ""
            ListStatement += "   Dim Result As New List(Of [" & Tb.TableName & "])" & vbNewLine
            ListStatement += "   If (Me.HasSettings = True) Then" & vbNewLine
            ListStatement += "      If (Me.UseSql = True) Then" & vbNewLine
            ListStatement += "          Import()" & vbNewLine

            ListStatement += "          For Each Row As DataRow In Me.Data.Rows" & vbNewLine
            ListStatement += "              Dim Element As New [" & Tb.TableName & "](" & vbNewLine
#Region "Parameters"
            Dim Templ As String = "                  IIF(IsDBNull(Row.Item("
            If TableClassElementTables.Count - 1 = 0 Then
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementTables(0)
                If P.ParameterType.ToLower = "string" Then
                    ListStatement += Templ & "0))," & Space & Space & ", Row.Item(0)))" & vbNewLine
                ElseIf P.ParameterType.ToLower = "integer" Or P.ParameterType.ToLower = "double" Then
                    ListStatement += Templ & "0)),0, Row.Item(0)))" & vbNewLine
                ElseIf P.ParameterType.ToLower = "boolean" Then
                    ListStatement += Templ & "0)),False, Row.Item(0)))" & vbNewLine
                ElseIf P.ParameterType.ToLower = "date" Or P.ParameterType.ToLower = "datetime" Then
                    ListStatement += Templ & "0)),New DateTime(1970,1,1), Row.Item(0)))" & vbNewLine
                Else
                    ListStatement += Templ & "0))," & Space & Space & ", Row.Item(0)))" & vbNewLine
                End If
            ElseIf TableClassElementTables.Count - 1 < 0 Then
                ListStatement += ")" & vbNewLine
            Else
                For x = 0 To TableClassElementTables.Count - 1
                    Dim P As InnerStatement.ParameterList_Statement = TableClassElementTables(x)
                    If (x = TableClassElementTables.Count - 1) Then
                        If P.ParameterType.ToLower = "string" Then
                            ListStatement += Templ & x & "))," & Space & Space & ", Row.Item(" & x & ")))" & vbNewLine
                        ElseIf P.ParameterType.ToLower = "integer" Or P.ParameterType.ToLower = "double" Then
                            ListStatement += Templ & x & ")),0, Row.Item(" & x & ")))" & vbNewLine
                        ElseIf P.ParameterType.ToLower = "boolean" Then
                            ListStatement += Templ & x & ")),False, Row.Item(" & x & ")))" & vbNewLine
                        ElseIf P.ParameterType.ToLower = "date" Or P.ParameterType.ToLower = "datetime" Then
                            ListStatement += Templ & x & ")),New DateTime(1970,1,1), Row.Item(" & x & ")))" & vbNewLine
                        Else
                            ListStatement += Templ & x & "))," & Space & Space & ", Row.Item(" & x & ")))" & vbNewLine
                        End If
                    Else
                        If P.ParameterType.ToLower = "string" Then
                            ListStatement += Templ & x & "))," & Space & Space & ", Row.Item(" & x & "))," & vbNewLine
                        ElseIf P.ParameterType.ToLower = "integer" Or P.ParameterType.ToLower = "double" Then
                            ListStatement += Templ & x & ")),0, Row.Item(" & x & "))," & vbNewLine
                        ElseIf P.ParameterType.ToLower = "boolean" Then
                            ListStatement += Templ & x & ")),False, Row.Item(" & x & "))," & vbNewLine
                        ElseIf P.ParameterType.ToLower = "date" Or P.ParameterType.ToLower = "datetime" Then
                            ListStatement += Templ & x & ")),New DateTime(1970,1,1), Row.Item(" & x & "))," & vbNewLine
                        Else
                            ListStatement += Templ & x & "))," & Space & Space & ", Row.Item(" & x & "))," & vbNewLine
                        End If
                    End If
                Next
            End If
#End Region
            ListStatement += "          Element.Reset(" & Space & Tb.TableName & Space & ",Me.DataBase,Me.Password)" & vbNewLine
            ListStatement += "          Result.Add(Element)" & vbNewLine
            ListStatement += "          Next" & vbNewLine
            ListStatement += "      ElseIf (Me.UseSql = False) Then" & vbNewLine
            ListStatement += "      End If '(Me.UseSql)" & vbNewLine
            ListStatement += "   Else 'If (Me.HasSettings = False) Then" & vbNewLine
            ListStatement += "   End If '(Me.HasSettings)" & vbNewLine
            ListStatement += "   Return Result" & vbNewLine
            Dim List As New VbNET.Function("List", ListStatement, "Return the entire table listed", 3,,,, ,,, "List(Of " & Result.ClassName & ")", )
            List.ParentClass = Result
            List.PrintStatement(True)
            List.ParentClass.Add_Function(List)
#End Region
#Region "|On | |05.02| <Function> [GetS()]"
            Dim GetStatement As String = ""
            GetStatement += "   Dim Result As New List(Of [" & Tb.TableName & "])" & vbNewLine
            GetStatement += "   If (IsNothing([Connector])) Then" & vbNewLine
            GetStatement += "       Return Nothing" & vbNewLine
            GetStatement += "       Exit Function" & vbNewLine
            GetStatement += "   End If ' (IsNothing([Connector]) " & vbNewLine
            GetStatement += "   ' Grabbing Line Configuration" & vbNewLine
            GetStatement += "   Dim Tb As New DataTable" & vbNewLine
            GetStatement += "   If ([Connector].UseSql = True) Then" & vbNewLine
            GetStatement += "       Dim Con As New SqlClient.SqlConnection([Connector].ConnectionLine)" & vbNewLine
            GetStatement += "       Dim Cmd As New SqlClient.SqlCommand" & vbNewLine
            GetStatement += "       With Cmd" & vbNewLine
            GetStatement += "           .CommandText = " & Space & "SELECT * FROM [" & Tb.TableName & "]" & Space & vbNewLine
            GetStatement += "           .Connection = con" & vbNewLine
            GetStatement += "           Try" & vbNewLine
            GetStatement += "               Con.Open()" & vbNewLine
            GetStatement += "               Tb.Load(.ExecuteReader)" & vbNewLine
            GetStatement += "           Catch ex As Exception" & vbNewLine
            GetStatement += "           Finally" & vbNewLine
            GetStatement += "               Con.Close()" & vbNewLine
            GetStatement += "               Con.Dispose()" & vbNewLine
            GetStatement += "               Cmd.Dispose()" & vbNewLine
            GetStatement += "           End Try" & vbNewLine
            GetStatement += "       End With 'Cmd" & vbNewLine
            GetStatement += "   ElseIf ([Connector].UseSql = False)" & vbNewLine
            GetStatement += "       Dim Con As New OleDb.OleDbConnection([Connector].ConnectionLine)" & vbNewLine
            GetStatement += "       Dim Cmd As New OleDb.OleDbCommand" & vbNewLine
            GetStatement += "       With Cmd" & vbNewLine
            GetStatement += "           .CommandText = " & Space & "SELECT * FROM [" & Tb.TableName & "]" & Space & vbNewLine
            GetStatement += "           .Connection = con" & vbNewLine
            GetStatement += "           Try" & vbNewLine
            GetStatement += "               Con.Open()" & vbNewLine
            GetStatement += "               Tb.Load(.ExecuteReader)" & vbNewLine
            GetStatement += "           Catch ex As Exception" & vbNewLine
            GetStatement += "           Finally" & vbNewLine
            GetStatement += "               Con.Close()" & vbNewLine
            GetStatement += "               Con.Dispose()" & vbNewLine
            GetStatement += "               Cmd.Dispose()" & vbNewLine
            GetStatement += "           End Try" & vbNewLine
            GetStatement += "       End With 'Cmd" & vbNewLine
            GetStatement += "   End If '([Connector].UseSql = True)" & vbNewLine
            GetStatement += "       " & vbNewLine
            GetStatement += "   If (Tb.Columns.Count - 1 > 0) Then" & vbNewLine
            GetStatement += "       For Each Row As DataRow in Tb.Rows" & vbNewLine
            GetStatement += "           Dim Element As New [" & Tb.TableName & "]("
            Templ = "               IIF(IsDBNull(Row.Item("
#Region "[Parameters]"

            If TableClassElementTables.Count - 1 = 0 Then
                Dim P As InnerStatement.ParameterList_Statement = TableClassElementTables(0)
                If P.ParameterType.ToLower = "string" Then
                    GetStatement += Templ & "0))," & Space & Space & ", Row.Item(0)))" & vbNewLine
                ElseIf P.ParameterType.ToLower = "integer" Or P.ParameterType.ToLower = "double" Then
                    GetStatement += Templ & "0)),0, Row.Item(0)))" & vbNewLine
                ElseIf P.ParameterType.ToLower = "boolean" Then
                    GetStatement += Templ & "0)),False, Row.Item(0)))" & vbNewLine
                ElseIf P.ParameterType.ToLower = "date" Or P.ParameterType.ToLower = "datetime" Then
                    GetStatement += Templ & "0)),New DateTime(1970,1,1), Row.Item(0)))" & vbNewLine
                Else
                    GetStatement += Templ & "0))," & Space & Space & ", Row.Item(0)))" & vbNewLine
                End If
            ElseIf TableClassElementTables.Count - 1 < 0 Then
                GetStatement += ")" & vbNewLine
            Else
                For x = 0 To TableClassElementTables.Count - 1
                    Dim P As InnerStatement.ParameterList_Statement = TableClassElementTables(x)
                    If (x = TableClassElementTables.Count - 1) Then
                        If P.ParameterType.ToLower = "string" Then
                            GetStatement += Templ & x & "))," & Space & Space & ", Row.Item(" & x & ")))" & vbNewLine
                        ElseIf P.ParameterType.ToLower = "integer" Or P.ParameterType.ToLower = "double" Then
                            GetStatement += Templ & x & ")),0, Row.Item(" & x & ")))" & vbNewLine
                        ElseIf P.ParameterType.ToLower = "boolean" Then
                            GetStatement += Templ & x & ")),False, Row.Item(" & x & ")))" & vbNewLine
                        ElseIf P.ParameterType.ToLower = "date" Or P.ParameterType.ToLower = "datetime" Then
                            GetStatement += Templ & x & ")),New DateTime(1970,1,1), Row.Item(" & x & ")))" & vbNewLine
                        Else
                            GetStatement += Templ & x & "))," & Space & Space & ", Row.Item(" & x & ")))" & vbNewLine
                        End If
                    Else
                        If P.ParameterType.ToLower = "string" Then
                            GetStatement += Templ & x & "))," & Space & Space & ", Row.Item(" & x & "))," & vbNewLine
                        ElseIf P.ParameterType.ToLower = "integer" Or P.ParameterType.ToLower = "double" Then
                            GetStatement += Templ & x & ")),0, Row.Item(" & x & "))," & vbNewLine
                        ElseIf P.ParameterType.ToLower = "boolean" Then
                            GetStatement += Templ & x & ")),False, Row.Item(" & x & "))," & vbNewLine
                        ElseIf P.ParameterType.ToLower = "date" Or P.ParameterType.ToLower = "datetime" Then
                            GetStatement += Templ & x & ")),New DateTime(1970,1,1), Row.Item(" & x & "))," & vbNewLine
                        Else
                            GetStatement += Templ & x & "))," & Space & Space & ", Row.Item(" & x & "))," & vbNewLine
                        End If
                    End If
                Next
            End If
#End Region

            GetStatement += "       Element.Reset(" & Space & Tb.TableName & Space & ", [Connector].DataSource, [Connector].Password)" & vbNewLine
            GetStatement += "       Result.Add(Element)" & vbNewLine
            GetStatement += "       Next" & vbNewLine
            GetStatement += "   Else '(Tb.Columns.Count - 1 >= 0)" & vbNewLine
            GetStatement += "   End If '(Tb.Columns.Count - 1 < 0)" & vbNewLine
            GetStatement += "   Return Result" & vbNewLine
            Dim GetS As New VbNET.Function("Get" & Tb.TableName, GetStatement, "Return the entire table listed", 3,,,, True,,, "List(Of " & Result.ClassName & ")", )
            GetS.AddParameter("Connector", "ToolBoxDLL.LineBuilder")
            GetS.ParentClass = Result
            GetS.PrintStatement(True)
            GetS.ParentClass.Add_Function(GetS)
#End Region
#Region "|On | |05.03| <Function> [SearchByName()]"
            Dim SearchByNameStatement As String = "Dim Result As New List(Of " & Result.ClassName & ")" & vbNewLine
            Dim ListTempProp As New List(Of VbNET.Property)
            SearchByNameStatement += " Dim C As New " & Result.ClassName & vbNewLine
            For Each P As VbNET.Property In Result.Properties
                If P.ReturnType = "String" Then
                    ListTempProp.Add(P)
                End If
            Next
            SearchByNameStatement += " For Each Element As " & Result.ClassName & " In C.List" & vbNewLine
            If ListTempProp.Count - 1 > 0 Then
                SearchByNameStatement += " If Element." & ListTempProp(0).Name & ".Tolower() = Search.Tolower()"
                For n = 1 To ListTempProp.Count - 1
                    SearchByNameStatement += " Or Element." & ListTempProp(n).Name & ".Tolower() = Search.Tolower() "
                Next
                SearchByNameStatement += "Then" & vbNewLine &
                                        "      Result.Add(Element)" & vbNewLine &
                                        " End If" & vbNewLine
            ElseIf ListTempProp.Count - 1 = 0 Then
                SearchByNameStatement += " If Element." & ListTempProp(0).Name & ".Tolower() = Search.Tolower() Then" & vbNewLine &
                                         "      Result.Add(Element)" & vbNewLine &
                                         " End If" & vbNewLine
            End If
            SearchByNameStatement += " Next" & vbNewLine &
                                     " Return Result"
            Dim SearchByName As New VbNET.Function("SearchByName", SearchByNameStatement, "Search For Each Property that match the Search String.", 4,,,, True,,, "List(Of " & Result.ClassName & ")")
            SearchByName.AddParameter("Search", "String", "",, "Expression search For.")
            SearchByName.ParentClass = Result
            SearchByName.PrintStatement(True)
            SearchByName.ParentClass.Add_Function(SearchByName)
#End Region
#Region "|On | |05.04| <Function> [SearchByID()]"
            Dim SearchByIDStatement As String = "Dim Result As New List(Of " & Result.ClassName & ")" & vbNewLine
            Dim ListTempIDProp As New List(Of VbNET.Property)
            SearchByIDStatement += " Dim C As New " & Result.ClassName & vbNewLine
            For Each P As VbNET.Property In Result.Properties
                If P.ReturnType = "Integer" Or P.ReturnType = "Double" Then
                    ListTempIDProp.Add(P)
                End If
            Next
            SearchByIDStatement += " For Each Element As " & Result.ClassName & " In C.List" & vbNewLine
            If ListTempIDProp.Count - 1 > 0 Then
                SearchByIDStatement += " If Val(Element." & ListTempIDProp(0).Name & ") = Search"
                For n = 1 To ListTempIDProp.Count - 1
                    SearchByIDStatement += " Or Val(Element." & ListTempIDProp(n).Name & ") = Search "
                Next
                SearchByIDStatement += "Then" & vbNewLine &
                                        "      Result.Add(Element)" & vbNewLine &
                                        " End If" & vbNewLine
            ElseIf ListTempIDProp.Count - 1 = 0 Then
                SearchByIDStatement += " If Val(Element." & ListTempProp(0).Name & ") = Search Then" & vbNewLine &
                                         "      Result.Add(Element)" & vbNewLine &
                                         " End If" & vbNewLine
            End If
            SearchByIDStatement += " Next" & vbNewLine &
                                     " Return Result"
            Dim SearchByID As New VbNET.Function("SearchByID", SearchByIDStatement, "Search For Each Property that match the Search Id.", 4,,,, True,,, "List(Of " & Result.ClassName & ")")
            SearchByID.AddParameter("Search", "Double", "",, "Expression search For.")
            SearchByID.ParentClass = Result
            SearchByID.PrintStatement()
            SearchByID.ParentClass.Add_Function(SearchByID)
#End Region
#Region "|On | |05.05| <Function> [SearchByDate()]"

            Dim SearchByDateStatement As String = "Dim Result As New List(Of " & Result.ClassName & ")" & vbNewLine
            Dim ListTempDateProp As New List(Of [Property])
            SearchByDateStatement += " Dim C As New " & Result.ClassName & vbNewLine
            For Each P As VbNET.Property In Result.Properties
                If P.ReturnType = "DateTime" Then
                    ListTempDateProp.Add(P)
                End If
            Next
            If ListTempDateProp.Count - 1 > 0 Then

                SearchByDateStatement += " For Each Element As " & Result.ClassName & " In C.List" & vbNewLine
                If ListTempDateProp.Count - 1 > 0 Then
                    SearchByDateStatement += " If Element." & ListTempDateProp(0).Name & " = Search Then" & vbNewLine

                    SearchByDateStatement +=
                                            "      Result.Add(Element)" & vbNewLine &
                                            " End If" & vbNewLine
                ElseIf ListTempIDProp.Count - 1 = 0 Then
                    SearchByDateStatement += " If Element." & ListTempProp(0).Name & " = Search Then" & vbNewLine &
                                             "      Result.Add(Element)" & vbNewLine &
                                             " End If" & vbNewLine
                End If
                SearchByDateStatement += " Next" & vbNewLine &
                                         " Return Result"
                Dim SearchByDate As New VbNET.Function("SearchByDate", SearchByDateStatement, "Search For Each Property that match the Search Id.", 5,,,, True,,, "List(Of " & Result.ClassName & ")")
                SearchByDate.AddParameter("Search", "DateTime", "",, "Expression search For.")
                SearchByDate.ParentClass = Result
                SearchByDate.PrintStatement()
                SearchByDate.ParentClass.Add_Function(SearchByDate)
            End If
#End Region
#Region "|On | |05.06| <Function> [SearchByDate()]"

            Dim SearchByDateRangeStatement As String = "Dim Result As New List(Of " & Result.ClassName & ")" & vbNewLine
            Dim ListTempDateRangeProp As New List(Of [Property])
            SearchByDateRangeStatement += " Dim C As New " & Result.ClassName & vbNewLine
            For Each P As VbNET.Property In Result.Properties
                If P.ReturnType = "DateTime" Then
                    ListTempDateRangeProp.Add(P)
                End If
            Next
            If ListTempDateRangeProp.Count - 1 > 0 Then
                SearchByDateRangeStatement += " For Each Element As " & Result.ClassName & " In C.List" & vbNewLine
                If ListTempDateRangeProp.Count - 1 > 0 Then
                    SearchByDateRangeStatement += " If (Element." & ListTempDateRangeProp(0).Name & ") >= From_Date And (Element." & ListTempDateRangeProp(0).Name & ") <= Until_Date Then" & vbNewLine &
                                            "      Result.Add(Element)" & vbNewLine &
                                            " End If" & vbNewLine
                ElseIf ListTempIDProp.Count - 1 = 0 Then
                    SearchByDateRangeStatement += " If (Element." & ListTempDateRangeProp(0).Name & ") >= From_Date And (Element." & ListTempDateRangeProp(0).Name & ") <= Until_Date Then" & vbNewLine &
                                            "      Result.Add(Element)" & vbNewLine &
                                            " End If" & vbNewLine

                End If
                SearchByDateRangeStatement += " Next" & vbNewLine &
                                         " Return Result"
                Dim SearchByDateRange As New VbNET.Function("SearchByDateRange", SearchByDateRangeStatement, "Search For Each Property that match the Search Id.", 6,,,, True,,, "List(Of " & Result.ClassName & ")")
                SearchByDateRange.AddParameter("From_Date", "DateTime", "",, "All element from this Date And this Date included.")
                SearchByDateRange.AddParameter("Until_Date", "DateTime", "",, "All element before And including this Date.")
                SearchByDateRange.ParentClass = Result
                SearchByDateRange.PrintStatement()
                SearchByDateRange.ParentClass.Add_Function(SearchByDateRange)
            Else
            End If

#End Region
#Region "|On | |05.07| <Function> [ToString()]"
            Dim ToString As New VbNET.Function("ToString", "    Return Me." & TableClassElementTables(0).ParameterName,, 7, VbNET.AccessModifiers.Public, VbNET.ProcedureModifiers.Overrides,,,,, "String")
            ToString.ParentClass = Result
            ToString.PrintStatement(True)
            ToString.ParentClass.Add_Function(ToString)
#End Region
#Region "|OFF| |05.08| <Function> [CheckConnection()]"
            Dim CheckConnectionStatement As String = " ' Prepare Variables " & vbNewLine &
                                                   " #Region " & Space & "Prepare Variables" & Space & vbNewLine &
                                                   "    Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty." & vbNewLine &
                                                   "    Dim Test_2 As Boolean = False ' Evaluate if the File Exist." & vbNewLine &
                                                   "    Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist." & vbNewLine &
                                                   "    Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected." & vbNewLine &
                                                   "    Dim Test_5 As Boolean = False ' Evaluate if there is a Password." & vbNewLine &
                                                   "    Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing." & vbNewLine &
                                                   "    Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty." & vbNewLine &
                                                   "    Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid." & vbNewLine &
                                                   "    Dim General_Status As Boolean = False ' Return the General result." & vbNewLine &
                                                   "    Dim Message As String = Nothing' Stores the process logic." & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 1 | Evaluate if the FilePath is Empty." & Space & vbNewLine &
                                                   "    If Not IsNothing(FilePath) Then " & vbNewLine &
                                                   "            Test_1 = True" & vbNewLine &
                                                   "        Message += " & Space & "Test 1 <Result> |OK| The variable FilePath is not nothing." & Space & vbNewLine &
                                                   "    Else" & vbNewLine &
                                                   "            Test_1 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 1 <Result> |PB| The variable FilePath is nothing." & Space & vbNewLine &
                                                   "        FilePath = Nothing" & vbNewLine &
                                                   "    End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 2 | Evaluate if the File Exist." & Space & vbNewLine &
                                                   "    If IO.File.Exists(FilePath) Then" & vbNewLine &
                                                   "            Test_2 = True " & vbNewLine &
                                                   "        Message += " & Space & "Test 2 <Result> |OK| The FilePath is a recognize as a File." & Space & vbNewLine &
                                                   "    Else" & vbNewLine &
                                                   "            Test_2 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 2 <Result> |PB| The FilePath is a recognize as a File." & Space & vbNewLine &
                                                   "    End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 3 | Evaluate if the Directory Exist." & Space & vbNewLine &
                                                   "        If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then" & vbNewLine &
                                                   "            Test_3 = True" & vbNewLine &
                                                   "        Message += " & Space & "Test 3 <Result> |OK| The Directory Exist." & Space & vbNewLine &
                                                   "        Else" & vbNewLine &
                                                   "            Test_3 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 3 <Result> |PB| The Directory does not Exist." & Space & vbNewLine &
                                                   "        End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 4 | Evaluate if the Drive is Connected." & Space & vbNewLine &
                                                   "        Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))" & vbNewLine &
                                                   "        If D.IsReady  Then" & vbNewLine &
                                                   "            Test_4 = True" & vbNewLine &
                                                   "        Message += " & Space & "Test 4 <Result> |OK| The Drive is Online." & Space & vbNewLine &
                                                   "        Else" & vbNewLine &
                                                   "            Test_4 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 4 <Result> |PB| The Drive is Offline or Disconnected." & Space & vbNewLine &
                                                   "        End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 5 | Evaluate if there is a Password." & Space & vbNewLine &
                                                   "        If Not IsDbNull(Password) Then" & vbNewLine &
                                                   "            Test_5 = True" & vbNewLine &
                                                   "        Message += " & Space & "Test 5 <Result> |OK| The password has been Recorded." & Space & vbNewLine &
                                                   "        Else" & vbNewLine &
                                                   "            Test_5 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 5 <Result> |PB| No password has been stored." & Space & vbNewLine &
                                                   "        End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 6 | Evaluate if Connector is nothing." & Space & vbNewLine &
                                                   "        If Not IsNothing(Connector) Then" & vbNewLine &
                                                   "            Me.Line = Me.Connector.Line" & vbNewLine &
                                                   "            Test_6 = True" & vbNewLine &
                                                   "        Message += " & Space & "Test 6 <Result> |OK| The Connector has been initialized before." & Space & vbNewLine &
                                                   "        Else" & vbNewLine &
                                                   "            Test_6 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 6 <Result> |PB| The Connector has not been initialized before." & Space & vbNewLine &
                                                   "                If Test_2 = True Then" & vbNewLine &
                                                   "                    Me.Connector = New LineInfo(FilePath,Password)" & vbNewLine &
                                                   "                    Me.Line = Me.Connector.Line" & vbNewLine &
                                                   "        Message += " & Space & "Test 6 <Result> |Initialize Connector|" & Space & vbNewLine &
                                                   "                End If" & vbNewLine &
                                                   "        End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 7 | Evaluate if Connector Line is not empty." & Space & vbNewLine &
                                                    "        If Not IsDbNull(Me.Connector.Line) Then" & vbNewLine &
                                                   "            Test_7 = True" & vbNewLine &
                                                   "        Else " & vbNewLine &
                                                   "            Test_7 = False" & vbNewLine &
                                                   "        End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 8 | Evaluate if the Connection is valid." & Space & vbNewLine &
                                                   "        If Test_7 =True Then" & vbNewLine
            If Tb.UseSQL = True Then
                CheckConnectionStatement += "                   Try" & vbNewLine &
                                            "                       SqlCon = New SqlClient.SqlConnection(Me.Line)" & vbNewLine &
                                            "                       SqlCon.Open()" & vbNewLine &
                                            "                       Test_8 = True" & vbNewLine &
                                            "        Message += " & Space & "Test 8 <Result> |OK| The Connection is valid." & Space & vbNewLine &
                                            "                   Catch ex As Exception" & vbNewLine &
                                            "                       Test_8 = False" & vbNewLine &
                                            "        Message += " & Space & "Test 8 <Result> |PB| The Connection is not valid. Check Password." & Space & vbNewLine &
                                            "                   Finally" & vbNewLine &
                                            "                       SqlCon.Close()" & vbNewLine &
                                            "                       SqlCon.Dispose()" & vbNewLine &
                                            "                   End Try" & vbNewLine
            Else
                CheckConnectionStatement += "                   Try" & vbNewLine &
                                            "                       Con = New OleDb.OleDbConnection(Me.Line)" & vbNewLine &
                                            "                       Con.Open()" & vbNewLine &
                                            "                       Test_8 = True" & vbNewLine &
                                            "        Message += " & Space & "Test 8 <Result> |OK| The Connection is valid." & Space & vbNewLine &
                                            "                   Catch ex As Exception" & vbNewLine &
                                            "                       Test_8 = False" & vbNewLine &
                                            "        Message += " & Space & "Test 8 <Result> |PB| The Connection is not valid. Check Password." & Space & vbNewLine &
                                            "                   Finally" & vbNewLine &
                                            "                       Con.Close()" & vbNewLine &
                                            "                       Con.Dispose()" & vbNewLine &
                                            "                   End Try" & vbNewLine
            End If

            CheckConnectionStatement += "  End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " If Test_7=True And Test_8 = True Then" & vbNewLine &
                                                   "    General_Status=True" & vbNewLine &
                                                   " Else " & vbNewLine &
                                                   "    General_Status=False" & vbNewLine &
                                                   " End If" & vbNewLine &
                                                   " Log+=Message & VbNewLine" & vbNewLine &
                                                   " Return General_Status" & vbNewLine
            Dim CheckConnection As New VbNET.Function("CheckConnection", CheckConnectionStatement, "Evaluate the connection to the DataBase", 8,,,,,,, "Boolean")
            CheckConnection.ParentClass = Result
            CheckConnection.PrintStatement(True)
            ' CheckConnection.ParentClass.Add_Function(CheckConnection)
#End Region
#End Region
#Region "|ON | |06| [Runtime]{10}"
#Region "|06.00| <Runtime> [Oledb Connection](8)"
#Region "|06.00.00| <Runtime> <Oledb Connection> [OleDb_Adaptor|OleDb.OleDbDataAdapter]"
            Dim St_06_00_00 As New VbNET.Runtime("OleDb_Adaptor", "OleDb.OleDbDataAdapter",, ,,, ,, "The OleDb_Adaptor as OleDb.OleDbDataAdapter.")
            St_06_00_00.ParentClass = Result
            St_06_00_00.PrintStatement(True)
            St_06_00_00.ParentClass.Add_Runtime(St_06_00_00)
#End Region
#Region "|06.00.01| <Runtime> <Oledb Connection> [OleDb_DeleteCommand|OleDb.OleDbCommand]"
            Dim St_06_00_01 As New VbNET.Runtime("OleDb_DeleteCommand", "OleDb.OleDbCommand",, ,,, ,, "The OleDb_DeleteCommand as OleDb.OledbCommand.")
            St_06_00_01.ParentClass = Result
            St_06_00_01.PrintStatement(True)
            St_06_00_01.ParentClass.Add_Runtime(St_06_00_01)
#End Region
#Region "|06.00.02| <Runtime> <Oledb Connection> [OleDb_UpdateCommand|OleDb.OleDbCommand]"
            Dim St_06_00_02 As New VbNET.Runtime("OleDb_UpdateCommand", "OleDb.OleDbCommand",, ,,, ,, "The OleDb_UpdateCommand as OleDb.OledbCommand.")
            St_06_00_02.ParentClass = Result
            St_06_00_02.PrintStatement(True)
            St_06_00_02.ParentClass.Add_Runtime(St_06_00_02)
#End Region
#Region "|06.00.03| <Runtime> <Oledb Connection> [OleDb_InsertCommand|OleDb.OleDbCommand]"
            Dim St_06_00_03 As New VbNET.Runtime("OleDb_InsertCommand", "OleDb.OleDbCommand",, ,,, ,, "The OleDb_InsertCommand as OleDb.OledbCommand.")
            St_06_00_03.ParentClass = Result
            St_06_00_03.PrintStatement(True)
            St_06_00_03.ParentClass.Add_Runtime(St_06_00_03)
#End Region
#Region "|06.00.04| <Runtime> <Oledb Connection> [OleDb_SelectCommand|OleDb.OleDbCommand]"
            Dim St_06_00_04 As New VbNET.Runtime("OleDb_SelectCommand", "OleDb.OleDbCommand",, ,,, ,, "The OleDb_SelectCommand as OleDb.OledbCommand.")
            St_06_00_04.ParentClass = Result
            St_06_00_04.PrintStatement(True)
            St_06_00_04.ParentClass.Add_Runtime(St_06_00_04)
#End Region
#Region "|06.00.05| <Runtime> <Oledb Connection> [OleDb_Reader|OleDb.OleDbDataReader]"
            Dim St_06_00_05 As New VbNET.Runtime("OleDb_Reader", "OleDb.OleDbDataReader",, ,,, ,, "The OleDb_Reader as OleDb.OleDbDataReader.")
            St_06_00_05.ParentClass = Result
            St_06_00_05.PrintStatement(True)
            St_06_00_05.ParentClass.Add_Runtime(St_06_00_05)
#End Region
#Region "|06.00.06| <Runtime> <Oledb Connection> [OleDb_Con|OleDb.OleDbConnection]"
            Dim St_06_00_06 As New VbNET.Runtime("OleDb_Con", "OleDb.OleDbConnection",, ,,, ,, "The OleDb_Con as OleDb.OleDbConnection.")
            St_06_00_06.ParentClass = Result
            St_06_00_06.PrintStatement(True)
            St_06_00_06.ParentClass.Add_Runtime(St_06_00_06)
#End Region
#Region "|06.00.07| <Runtime> <Oledb Connection> [OleDb_Cmd|OleDb.OleDbCommand]"
            Dim St_06_00_07 As New VbNET.Runtime("OleDb_Cmd", "OleDb.OleDbCommand",, ,,, ,, "The OleDb_Cmd as OleDb.OleDbCommand.")
            St_06_00_07.ParentClass = Result
            St_06_00_07.PrintStatement(True)
            St_06_00_07.ParentClass.Add_Runtime(St_06_00_07)
#End Region
#End Region
#Region "|06.01| <Runtime> [Sql Connection](8)"
#Region "|06.01.00| <Runtime> <Sql Connection> [Sql_Adaptor|SqlClient.SqlDataAdapter]"
            Dim St_06_01_00 As New VbNET.Runtime("Sql_Adaptor", "SqlClient.SqlDataAdapter",, ,,, ,, "The Sql_Adaptor as SqlClient.SqlDataAdapter.")
            St_06_01_00.ParentClass = Result
            St_06_01_00.PrintStatement(True)
            St_06_01_00.ParentClass.Add_Runtime(St_06_01_00)
#End Region
#Region "|06.01.01| <Runtime> <Sql Connection> [Sql_DeleteCommand|SqlClient.SqlCommand]"
            Dim St_06_01_01 As New VbNET.Runtime("Sql_DeleteCommand", "SqlClient.SqlCommand",, ,,, ,, "The Sql_DeleteCommand as SqlClient.SqlCommand.")
            St_06_01_01.ParentClass = Result
            St_06_01_01.PrintStatement(True)
            St_06_01_01.ParentClass.Add_Runtime(St_06_01_01)
#End Region
#Region "|06.01.02| <Runtime> <Sql Connection> [Sql_UpdateCommand|SqlClient.SqlCommand]"
            Dim St_06_01_02 As New VbNET.Runtime("Sql_UpdateCommand", "SqlClient.SqlCommand",, ,,, ,, "The Sql_UpdateCommand as SqlClient.SqlCommand.")
            St_06_01_02.ParentClass = Result
            St_06_01_02.PrintStatement(True)
            St_06_01_02.ParentClass.Add_Runtime(St_06_01_02)
#End Region
#Region "|06.01.03| <Runtime> <Sql Connection> [Sql_InsertCommand|SqlClient.SqlCommand]"
            Dim St_06_01_03 As New VbNET.Runtime("Sql_InsertCommand", "SqlClient.SqlCommand",, ,,, ,, "The Sql_InsertCommand as SqlClient.SqlCommand.")
            St_06_01_03.ParentClass = Result
            St_06_01_03.PrintStatement(True)
            St_06_01_03.ParentClass.Add_Runtime(St_06_01_03)
#End Region
#Region "|06.01.04| <Runtime> <Sql Connection> [Sql_SelectCommand|SqlClient.SqlCommand]"
            Dim St_06_01_04 As New VbNET.Runtime("Sql_SelectCommand", "SqlClient.SqlCommand",, ,,, ,, "The Sql_SelectCommand as SqlClient.SqlCommand.")
            St_06_01_04.ParentClass = Result
            St_06_01_04.PrintStatement(True)
            St_06_01_04.ParentClass.Add_Runtime(St_06_01_04)
#End Region
#Region "|06.01.05| <Runtime> <Sql Connection> [Sql_Reader|SqlClient.SqlDataReader]"
            Dim St_06_01_05 As New VbNET.Runtime("Sql_Reader", "SqlClient.SqlDataReader",, ,,, ,, "The Sql_Reader as SqlClient.SqlDataReader.")
            St_06_01_05.ParentClass = Result
            St_06_01_05.PrintStatement(True)
            St_06_01_05.ParentClass.Add_Runtime(St_06_01_05)
#End Region
#Region "|06.01.06| <Runtime> <Sql Connection> [Sql_Con|SqlClient.SqlConnection]"
            Dim St_06_01_06 As New VbNET.Runtime("Sql_Con", "SqlClient.SqlConnection",, ,,, ,, "The Sql_Con as SqlClient.SqlConnection.")
            St_06_01_06.ParentClass = Result
            St_06_01_06.PrintStatement(True)
            St_06_01_06.ParentClass.Add_Runtime(St_06_01_06)
#End Region
#Region "|06.01.07| <Runtime> <Sql Connection> [Sql_Cmd|SqlClient.SqlCommand]"
            Dim St_06_01_07 As New VbNET.Runtime("Sql_Cmd", "SqlClient.SqlCommand",, ,,, ,, "The Sql_Cmd as SqlClient.SqlCommand.")
            St_06_01_07.ParentClass = Result
            St_06_01_07.PrintStatement(True)
            St_06_01_07.ParentClass.Add_Runtime(St_06_01_07)
#End Region
#End Region
#Region "|06.02| <Runtime> [Table](7)"
#Region "|06.02.00| <Runtime> <Table> [Columns|List(Of DataColumn)]"
            Dim St_06_02_00 As New VbNET.Runtime("Columns", "List(Of DataColumn)",, ,,, ,, "The Columns as List(Of DataColumn).")
            Result.Add_Runtime(St_06_02_00)
#End Region
#Region "|06.02.01| <Runtime> <Table> [Data|DataTable]"
            Dim St_06_02_01 As New VbNET.Runtime("Data", "DataTable",, ,,, ,, " The Data as DataTable.")
            Result.Add_Runtime(St_06_02_01)
#End Region
#Region "|06.02.02| <Runtime> <Table> [DataSet|DataSet]"
            Dim St_06_02_02 As New VbNET.Runtime("DataSet", "DataSet",, ,,, ,, " The DataSet as DataSet.")
            Result.Add_Runtime(St_06_02_02)
#End Region
#Region "|06.02.03| <Runtime> <Table> [Items|List(Of VirtualItem)]"
            Dim St_06_02_03 As New VbNET.Runtime("Items", "List(Of VirtualItem)",, ,,, ,, " The Items as List(Of VirtualItem).")
            Result.Add_Runtime(St_06_02_03)
#End Region
#Region "|06.02.04| <Runtime> <Table> [OleDb_Parameters|List(Of OleDb.OleDbParameter)]"
            Dim St_06_02_04 As New VbNET.Runtime("OleDb_Parameters", "List(Of OleDb.OleDbParameter)",, ,,, ,, " The OleDb_Parameters as List(Of OleDb.OleDbParameter).")
            Result.Add_Runtime(St_06_02_04)
#End Region
#Region "|06.02.05| <Runtime> <Table> [Rows|List(Of DataRow)]"
            Dim St_06_02_05 As New VbNET.Runtime("Rows", "List(Of DataRow)",, ,,, ,, " The Rows as List(Of DataRow).")
            Result.Add_Runtime(St_06_02_05)
#End Region
#Region "|06.02.06| <Runtime> <Table> [Sql_Parameters|List(Of SqlClient.SqlParameter)]"
            Dim St_06_02_06 As New VbNET.Runtime("Sql_Parameters", "List(Of SqlClient.SqlParameter)",, ,,, ,, " The Sql_Parameters as List(Of SqlClient.SqlParameter).")
            Result.Add_Runtime(St_06_02_06)
#End Region
#End Region
#Region "|06.03| <Runtime> [Connection](5)"
#Region "|06.03.00| <Runtime> <Oledb Connection> [DataBase|String]"
            Dim St_06_03_00 As New VbNET.Runtime("DataBase", "String",, ,,, ,, "The DataBase as String.")
            St_06_03_00.ParentClass = Result
            St_06_03_00.PrintStatement(True)
            St_06_03_00.ParentClass.Add_Runtime(St_06_03_00)
#End Region
#Region "|06.03.01| <Runtime> <Oledb Connection> [Password|String]"
            Dim St_06_03_01 As New VbNET.Runtime("Password", "String",, ,,, ,, "The Password as String.")
            St_06_03_01.ParentClass = Result
            St_06_03_01.PrintStatement(True)
            St_06_03_01.ParentClass.Add_Runtime(St_06_03_01)
#End Region
#Region "|06.03.02| <Runtime> <Oledb Connection> [TableName|String]"
            Dim St_06_03_02 As New VbNET.Runtime("TableName", "String",, ,,, ,, "The TableName as String.")
            St_06_03_02.ParentClass = Result
            St_06_03_02.PrintStatement(True)
            St_06_03_02.ParentClass.Add_Runtime(St_06_03_02)
#End Region
#Region "|06.03.03| <Runtime> <Oledb Connection> [Line|String]"
            Dim St_06_03_03 As New VbNET.Runtime("Line", "String",, ,,, ,, "The Line as String.")
            St_06_03_03.ParentClass = Result
            St_06_03_03.PrintStatement(True)
            St_06_03_03.ParentClass.Add_Runtime(St_06_03_03)
#End Region
#Region "|06.03.04| <Runtime> <Oledb Connection> [UseSql|Boolean]"
            Dim St_06_03_04 As New VbNET.Runtime("UseSql", "Boolean",, ,,, ,, "The UseSql as Boolean.")
            St_06_03_04.ParentClass = Result
            St_06_03_04.PrintStatement(True)
            St_06_03_04.ParentClass.Add_Runtime(St_06_03_04)
#End Region
#Region "|06.03.05| <Runtime> <Oledb Connection> [Connector|ToolBoxDLL.LineBuilder]"
            Dim St_06_03_05 As New VbNET.Runtime("Connector", "ToolBoxDLL.LineBuilder",, ,,, ,, "The UseSql as ToolBoxDLL.LineBuilder.")
            St_06_03_05.ParentClass = Result
            St_06_03_05.PrintStatement(True)
            St_06_03_05.ParentClass.Add_Runtime(St_06_03_05)
#End Region
#End Region
#Region "|06.04| <Runtime> [Option](1)"
#Region "|06.04.00| <Runtime> <Option> [AddingModeEnable|Boolean]"
            Dim St_06_04_00 As New VbNET.Runtime("AddingModeEnable", "Boolean",, ,,, ,, "The AddingModeEnable as Boolean.")
            St_06_04_00.ParentClass = Result
            St_06_04_00.PrintStatement(True)
            St_06_04_00.ParentClass.Add_Runtime(St_06_04_00)
#End Region
#End Region
#Region "|06.05| <Runtime> [Serializable](2)"
#Region "|06.05.00| <Runtime> <Serializable> [SerializeFile|String]"
            Dim St_06_05_00 As New VbNET.Runtime("SerializeFile", "String",, ,,, ,, "The SerializeFile as String.")
            St_06_05_00.ParentClass = Result
            St_06_05_00.PrintStatement(True)
            St_06_05_00.ParentClass.Add_Runtime(St_06_05_00)
#End Region
#Region "|06.05.01| <Runtime> <Serializable> [TableList|List(Of [ClassName])]"
            Dim St_06_05_01 As New VbNET.Runtime("TableList", "List(Of " & Result.ClassName & ")",, ,,, ,, "The SerializeFile as String.")
            St_06_05_01.ParentClass = Result
            St_06_05_01.PrintStatement(True)
            St_06_05_01.ParentClass.Add_Runtime(St_06_05_01)
#End Region
#End Region
#Region "|06.06| <Runtime> [Test](1)"
#Region "|06.06.00| <Runtime> <Test> [HasSettings|Boolean]"
            Dim St_06_06_00 As New VbNET.Runtime("HasSettings", "Boolean",, ,,, ,, "Evaluates if the configuration have been acquired correctly.")
            St_06_06_00.ParentClass = Result
            St_06_06_00.PrintStatement(True)
            St_06_06_00.ParentClass.Add_Runtime(St_06_06_00)
#End Region
#Region "|06.06.01| <Runtime> <Test> [ConnectionEstablised|Boolean]"
            Dim St_06_06_01 As New VbNET.Runtime("ConnectionEstablised", "Boolean",, ,,, ,, "Evaluate if the connection has been establised.")
            St_06_06_01.ParentClass = Result
            St_06_06_01.PrintStatement(True)
            St_06_06_01.ParentClass.Add_Runtime(St_06_06_01)
#End Region
#Region "|06.06.02| <Runtime> <Test> [HasDataImported|Boolean]"
            Dim St_06_06_02 As New VbNET.Runtime("HasDataImported", "Boolean",, ,,, ,, "Evaluate if the data has been imported.")
            St_06_06_02.ParentClass = Result
            St_06_06_02.PrintStatement(True)
            St_06_06_02.ParentClass.Add_Runtime(St_06_06_02)
#End Region
#End Region

#Region "|ON | |07| [Loader]{2}"
#Region "|ON | |07.00| <Loader> [Empty]"
            Dim EmptyLoader As New VbNET.Loader("Empty", , , "Clear")
            EmptyLoader.ParentClass = Result
            EmptyLoader.PrintStatement(True)
            EmptyLoader.ParentClass.Add_Loader(EmptyLoader)

#End Region
#Region "|ON | |07.01| <Loader> [Filled]"
            Dim FilledLoaderStatement As String = ""
            FilledLoaderStatement = " With Me" & vbNewLine &
                 " Clear()" & vbNewLine &
                 " Reset(" & Space & Tb.TableName & Space & ", DataBase, Password)" & vbNewLine
            For Each P As VbNET.InnerStatement.ParameterList_Statement In TableClassElementTables
                FilledLoaderStatement += "     ." & P.ParameterName & " = [" & P.ParameterName & "]" & vbNewLine
            Next
            FilledLoaderStatement += " End With" & vbNewLine
            Dim FilledLoader As New VbNET.Loader("Filled",, TableClassElementTables, FilledLoaderStatement)
            FilledLoader.AddParameter("DataBase", "String", Tb.FilePath, "Optional ByVal", "The filepath to the database")
            FilledLoader.AddParameter("Password", "String", Tb.Password, "Optional ByVal", "The password to the database")
            FilledLoader.ParentClass = Result
            FilledLoader.PrintStatement(True)
            FilledLoader.ParentClass.Add_Loader(FilledLoader)
#End Region

#End Region
        End If

        Return Result
    End Function

#End Region
#Region "|05.03.02| <Function> <DataBase> [Prepare_Initializor(Db|DataBase)|Class]"
    Public Shared Function Prepare_Initializor(ByRef Db As DataBase) As [Class]
        Dim Result As New VbNET.Class("Initializor_" & Db.Name)
        If Not IsNothing(Db) Then
            'Preparing Variables


            If Db.HasFinishImporting = False Then
                Db.GetTables(False)
            End If
            Dim Index As Integer = 0
            For Each Table As Table In Db.Tables
                Dim P As New VbNET.Property(Table.TableName, Table.TableName, "Virtualized Properties", True, Index)
                P.ParentClass = Result
                P.ParentName = Result.Name
                P.ParentClass.Add_Property(P)

                Dim P2 As New VbNET.Property("List_" & Table.TableName, "List(Of " & Table.TableName & ")", "List", False, Index + 1)
                P2.ParentClass = Result
                P2.ParentName = Result.Name
                P2.ParentClass.Add_Property(P2)

                Index += 1


            Next
            Dim Px As New VbNET.Property("Portfolio", "List(Of Object)", "Portfolio", False, Index + 1,, True)
            Px.ParentClass = Result
            Px.ParentName = Result.Name
            Px.ParentClass.Add_Property(Px)

            Dim Dbx As New VbNET.Property("DataBase", "SmartCoder.M_FileManager.DataBase", "DataBase", False, Index + 2,, True)
            Dbx.ParentClass = Result
            Dbx.ParentName = Result.Name
            Dbx.ParentClass.Add_Property(Dbx)

#Region "|ON | |04| [Sub]{1}"
#Region "|ON | |04.00| <Sub> [Clear()]"
            Dim ClearStatement As String = "  With Me" & vbNewLine
            For Each P As VbNET.Property In Result.Properties
                If P.Shared = True Then
                    If P.ReturnType = "Double" Then
                        If P.DefaultValue <> "" Then
                            If IsNumeric(P.DefaultValue) Then
                                ClearStatement += "        " & P.Name & " = " & Val(P.DefaultValue) & vbNewLine
                            Else
                                ClearStatement += "        " & P.Name & " = 0" & vbNewLine
                            End If
                        Else
                            ClearStatement += "        " & P.Name & " = 0" & vbNewLine

                        End If
                    ElseIf P.ReturnType = "Boolean" Then
                        If P.DefaultValue <> "" Then
                            ClearStatement += "        " & P.Name & " =  " & P.DefaultValue & vbNewLine
                        Else
                            ClearStatement += "        " & P.Name & " = False" & vbNewLine
                        End If
                    ElseIf P.ReturnType = "String" Then
                        If P.DefaultValue <> "" Then
                            ClearStatement += "         " & P.Name & " = Nothing" & vbNewLine ' & P.DefaultValue & vbNewLine '& Space & P.DefaultValue & Space & vbNewLine
                        Else
                            ClearStatement += "        " & P.Name & " = Nothing" & vbNewLine
                        End If
                    ElseIf P.ReturnType = "Integer" Then
                        If P.DefaultValue <> "" Then
                            If IsNumeric(P.DefaultValue) Then
                                ClearStatement += "        " & P.Name & " = " & Val(P.DefaultValue) & vbNewLine

                            Else
                                ClearStatement += "        " & P.Name & " = 0" & vbNewLine
                            End If
                        Else
                            ClearStatement += "        " & P.Name & " = 0" & vbNewLine

                        End If
                    ElseIf P.ReturnType.Contains("List(Of ") Then
                        ClearStatement += "        " & P.Name & " = New " & P.ReturnType & vbNewLine
                    Else
                        If P.DefaultValue <> "" Then
                            ClearStatement += "        " & P.Name & " = " & P.DefaultValue & vbNewLine
                        Else
                            If P.ReturnType.Contains("OleDbDataReader") Or P.ReturnType.Contains("SqlDataReader") Then
                                ClearStatement += "        " & P.Name & " = Nothing" & vbNewLine
                            Else
                                ClearStatement += "         " & P.Name & " = New " & P.ReturnType & vbNewLine
                            End If

                        End If
                    End If
                Else

                    If P.ReturnType = "Double" Then
                        If P.DefaultValue <> "" Then
                            If IsNumeric(P.DefaultValue) Then
                                ClearStatement += "        ." & P.Name & " = " & Val(P.DefaultValue) & vbNewLine
                            Else
                                ClearStatement += "        ." & P.Name & " = 0" & vbNewLine
                            End If
                        Else
                            ClearStatement += "        ." & P.Name & " = 0" & vbNewLine

                        End If
                    ElseIf P.ReturnType = "Boolean" Then
                        If P.DefaultValue <> "" Then
                            ClearStatement += "        ." & P.Name & " =  " & P.DefaultValue & vbNewLine
                        Else
                            ClearStatement += "        ." & P.Name & " = False" & vbNewLine
                        End If
                    ElseIf P.ReturnType = "String" Then
                        If P.DefaultValue <> "" Then
                            ClearStatement += "        ." & P.Name & " = Nothing" & vbNewLine ' & P.DefaultValue & vbNewLine '& Space & P.DefaultValue & Space & vbNewLine
                        Else
                            ClearStatement += "        ." & P.Name & " = Nothing" & vbNewLine
                        End If
                    ElseIf P.ReturnType = "Integer" Then
                        If P.DefaultValue <> "" Then
                            If IsNumeric(P.DefaultValue) Then
                                ClearStatement += "        ." & P.Name & " = " & Val(P.DefaultValue) & vbNewLine

                            Else
                                ClearStatement += "        ." & P.Name & " = 0" & vbNewLine
                            End If
                        Else
                            ClearStatement += "        ." & P.Name & " = 0" & vbNewLine

                        End If
                    ElseIf P.ReturnType.Contains("List(Of ") Then
                        ClearStatement += "        ." & P.Name & " = New " & P.ReturnType & vbNewLine
                    Else
                        If P.DefaultValue <> "" Then
                            ClearStatement += "        ." & P.Name & " = " & P.DefaultValue & vbNewLine
                        Else
                            If P.ReturnType.Contains("OleDbDataReader") Or P.ReturnType.Contains("SqlDataReader") Then
                                ClearStatement += "        ." & P.Name & " = Nothing" & vbNewLine
                            Else
                                ClearStatement += "         ." & P.Name & " = New " & P.ReturnType & vbNewLine
                            End If

                        End If
                    End If
                End If
            Next
            ' ClearStatement += " FilePath = " & Space & Tb.FilePath & Space & vbNewLine &
            '                   " Password = " & Space & Tb.Password & Space & vbNewLine &
            '                   " TableName = " & Space & Tb.TableName & Space & vbNewLine &
            '                   " UseSQL = " & Tb.UseSQL & vbNewLine
            ' " Table = New Table(TableName,FilePath, Password)" & vbNewLine &

            ClearStatement += " End With"
            Dim Clear As New VbNET.Sub("Clear", ClearStatement, "This will reinitialize the class properties element.", 0)
            Clear.ParentClass = Result
            Clear.PrintStatement(True)
            Clear.ParentClass.Add_Sub(Clear)
#End Region
#End Region
#Region "|ON | |05| [Function]{1}"
#Region "|ON | |05.06| <Function> [CheckConnection()]"
            Dim CheckConnectionStatement As String = " ' Prepare Variables " & vbNewLine &
                                                   " #Region " & Space & "Prepare Variables" & Space & vbNewLine &
                                                   "    Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty." & vbNewLine &
                                                   "    Dim Test_2 As Boolean = False ' Evaluate if the File Exist." & vbNewLine &
                                                   "    Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist." & vbNewLine &
                                                   "    Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected." & vbNewLine &
                                                   "    Dim Test_5 As Boolean = False ' Evaluate if there is a Password." & vbNewLine &
                                                   "    Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing." & vbNewLine &
                                                   "    Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty." & vbNewLine &
                                                   "    Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid." & vbNewLine &
                                                   "    Dim General_Status As Boolean = False ' Return the General result." & vbNewLine &
                                                   "    Dim Message As String = Nothing' Stores the process logic." & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 1 | Evaluate if the FilePath is Empty." & Space & vbNewLine &
                                                   "    If Not IsNothing(FilePath) Then " & vbNewLine &
                                                   "            Test_1 = True" & vbNewLine &
                                                   "        Message += " & Space & "Test 1 <Result> |OK| The variable FilePath is not nothing." & Space & vbNewLine &
                                                   "    Else" & vbNewLine &
                                                   "            Test_1 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 1 <Result> |PB| The variable FilePath is nothing." & Space & vbNewLine &
                                                   "        FilePath = Nothing" & vbNewLine &
                                                   "    End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 2 | Evaluate if the File Exist." & Space & vbNewLine &
                                                   "    If IO.File.Exists(FilePath) Then" & vbNewLine &
                                                   "            Test_2 = True " & vbNewLine &
                                                   "        Message += " & Space & "Test 2 <Result> |OK| The FilePath is a recognize as a File." & Space & vbNewLine &
                                                   "    Else" & vbNewLine &
                                                   "            Test_2 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 2 <Result> |PB| The FilePath is a recognize as a File." & Space & vbNewLine &
                                                   "    End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 3 | Evaluate if the Directory Exist." & Space & vbNewLine &
                                                   "        If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then" & vbNewLine &
                                                   "            Test_3 = True" & vbNewLine &
                                                   "        Message += " & Space & "Test 3 <Result> |OK| The Directory Exist." & Space & vbNewLine &
                                                   "        Else" & vbNewLine &
                                                   "            Test_3 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 3 <Result> |PB| The Directory does not Exist." & Space & vbNewLine &
                                                   "        End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 4 | Evaluate if the Drive is Connected." & Space & vbNewLine &
                                                   "        Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))" & vbNewLine &
                                                   "        If D.IsReady  Then" & vbNewLine &
                                                   "            Test_4 = True" & vbNewLine &
                                                   "        Message += " & Space & "Test 4 <Result> |OK| The Drive is Online." & Space & vbNewLine &
                                                   "        Else" & vbNewLine &
                                                   "            Test_4 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 4 <Result> |PB| The Drive is Offline or Disconnected." & Space & vbNewLine &
                                                   "        End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 5 | Evaluate if there is a Password." & Space & vbNewLine &
                                                   "        If Not IsDbNull(Password) Then" & vbNewLine &
                                                   "            Test_5 = True" & vbNewLine &
                                                   "        Message += " & Space & "Test 5 <Result> |OK| The password has been Recorded." & Space & vbNewLine &
                                                   "        Else" & vbNewLine &
                                                   "            Test_5 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 5 <Result> |PB| No password has been stored." & Space & vbNewLine &
                                                   "        End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 6 | Evaluate if Connector is nothing." & Space & vbNewLine &
                                                   "        If Not IsNothing(Connector) Then" & vbNewLine &
                                                   "            Me.Line = Me.Connector.Line" & vbNewLine &
                                                   "            Test_6 = True" & vbNewLine &
                                                   "        Message += " & Space & "Test 6 <Result> |OK| The Connector has been initialized before." & Space & vbNewLine &
                                                   "        Else" & vbNewLine &
                                                   "            Test_6 = False" & vbNewLine &
                                                   "        Message += " & Space & "Test 6 <Result> |PB| The Connector has not been initialized before." & Space & vbNewLine &
                                                   "                If Test_2 = True Then" & vbNewLine &
                                                   "                    Me.Connector = New LineInfo(FilePath,Password)" & vbNewLine &
                                                   "                    Me.Line = Me.Connector.Line" & vbNewLine &
                                                   "        Message += " & Space & "Test 6 <Result> |Initialize Connector|" & Space & vbNewLine &
                                                   "                End If" & vbNewLine &
                                                   "        End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 7 | Evaluate if Connector Line is not empty." & Space & vbNewLine &
                                                    "        If Not IsDbNull(Me.Connector.Line) Then" & vbNewLine &
                                                   "            Test_7 = True" & vbNewLine &
                                                   "        Else " & vbNewLine &
                                                   "            Test_7 = False" & vbNewLine &
                                                   "        End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " #Region " & Space & "Test 8 | Evaluate if the Connection is valid." & Space & vbNewLine &
                                                   "        If Test_7 =True Then" & vbNewLine
            If Db.UseSQL = True Then
                CheckConnectionStatement +=
                                            "                       Dim SqlCon As New SqlClient.SqlConnection(Me.Line)" & vbNewLine &
                                          "                   Try" & vbNewLine &
                                          "                       SqlCon.Open()" & vbNewLine &
                                            "                       Test_8 = True" & vbNewLine &
                                            "        Message += " & Space & "Test 8 <Result> |OK| The Connection is valid." & Space & vbNewLine &
                                            "                   Catch ex As Exception" & vbNewLine &
                                            "                       Test_8 = False" & vbNewLine &
                                            "        Message += " & Space & "Test 8 <Result> |PB| The Connection is not valid. Check Password." & Space & vbNewLine &
                                            "                   Finally" & vbNewLine &
                                            "                       SqlCon.Close()" & vbNewLine &
                                            "                       SqlCon.Dispose()" & vbNewLine &
                                            "                   End Try" & vbNewLine
            Else
                CheckConnectionStatement += "                       Dim Con As New OleDb.OleDbConnection(Me.Line)" & vbNewLine &
                                          "                   Try" & vbNewLine &
                                          "                       Con.Open()" & vbNewLine &
                                            "                       Test_8 = True" & vbNewLine &
                                            "        Message += " & Space & "Test 8 <Result> |OK| The Connection is valid." & Space & vbNewLine &
                                            "                   Catch ex As Exception" & vbNewLine &
                                            "                       Test_8 = False" & vbNewLine &
                                            "        Message += " & Space & "Test 8 <Result> |PB| The Connection is not valid. Check Password." & Space & vbNewLine &
                                            "                   Finally" & vbNewLine &
                                            "                       Con.Close()" & vbNewLine &
                                            "                       Con.Dispose()" & vbNewLine &
                                            "                   End Try" & vbNewLine
            End If

            CheckConnectionStatement += "  End If" & vbNewLine &
                                                   " #End Region " & vbNewLine &
                                                   " If Test_7=True And Test_8 = True Then" & vbNewLine &
                                                   "    General_Status=True" & vbNewLine &
                                                   " Else " & vbNewLine &
                                                   "    General_Status=False" & vbNewLine &
                                                   " End If" & vbNewLine &
                                                   " Return General_Status" & vbNewLine
            Dim CheckConnection As New VbNET.Function("CheckConnection", CheckConnectionStatement, "Evaluate the connection to the DataBase", 6,,,,,,, "Boolean")
            CheckConnection.ParentClass = Result
            CheckConnection.PrintStatement(True)
            CheckConnection.ParentClass.Add_Function(CheckConnection)
#End Region
#End Region

#Region "|ON | |06.01| <Runtime> [Line|String]"
            Dim Runtime_Line As New VbNET.Runtime("Line", "String", Db.Line.Line,,,, ,, "The Connection String To the Table.")
            ' Dim Runtime_Line As New VbNET.Runtime("Line", "String", Tb.Line.Line,,,, True,, "The Connection String To the Table.")
            Runtime_Line.ParentClass = Result
            Runtime_Line.PrintStatement(True)
            Runtime_Line.ParentClass.Add_Runtime(Runtime_Line)
#End Region
#Region "|ON | |06.02| <Runtime> [FilePath|String]"
            Dim Runtime_FilePath As New VbNET.Runtime("FilePath", "String", Db.Target,,,, ,, "The FilePath To the Table.")
            ' Dim Runtime_FilePath As New VbNET.Runtime("FilePath", "String", Tb.FilePath,,,, True,, "The FilePath To the Table.")
            Runtime_FilePath.ParentClass = Result
            Runtime_FilePath.PrintStatement(True)
            Runtime_FilePath.ParentClass.Add_Runtime(Runtime_FilePath)
#End Region
#Region "|ON | |06.03| <Runtime> [Password|String]"
            Dim Runtime_Password As New VbNET.Runtime("Password", "String", Db.Password,,,, ,, "The Password To the Table.")
            'Dim Runtime_Password As New VbNET.Runtime("Password", "String", Tb.Password,,,, True,, "The Password To the Table.")
            Runtime_Password.ParentClass = Result
            Runtime_Password.PrintStatement(True)
            Runtime_Password.ParentClass.Add_Runtime(Runtime_Password)
#End Region
#Region "|ON | |06.03| <Runtime> [Connector|String]"
            Dim Runtime_Connector As New VbNET.Runtime("Connector", "LineInfo", Db.Line.Line,,,, ,, "The Connector To the Table.")
            'Dim Runtime_Connector As New VbNET.Runtime("Connector", "String", Tb.Connector,,,, True,, "The Connector To the Table.")
            Runtime_Connector.ParentClass = Result
            Runtime_Connector.PrintStatement(True)
            Runtime_Connector.ParentClass.Add_Runtime(Runtime_Connector)
#End Region
#Region "|ON | |07| [Loader]{2}"
#Region "|ON | |07.00| <Loader> [Empty]"
            Dim EmptyLoader As New VbNET.Loader("Empty", , , "Clear")
            EmptyLoader.ParentClass = Result
            EmptyLoader.PrintStatement(True)
            EmptyLoader.ParentClass.Add_Loader(EmptyLoader)

#End Region
#Region "|ON | |07.01| <Loader> [Filled]"
            Dim FilledLoaderStatement As String = ""
            FilledLoaderStatement = " With Me" & vbNewLine &
                 " Clear()" & vbNewLine
            Dim PL As New List(Of VbNET.InnerStatement.ParameterList_Statement)
            Dim PL0 As New VbNET.InnerStatement.ParameterList_Statement("FilePath", "String", "ByVal", Space & Db.Target & Space, "The initial File Path")
            Dim PL1 As New VbNET.InnerStatement.ParameterList_Statement("Password", "String", "Optional ByVal", Space & Db.Password & Space, "The password")
            PL.Add(PL0)
            PL.Add(PL1)

            For Each P As VbNET.Property In Result.Properties
                If P.Shared = False Then
                    FilledLoaderStatement += "     ." & P.Name & " = New " & P.ReturnType & vbNewLine
                Else
                    FilledLoaderStatement += "     " & P.Name & " = New " & P.ReturnType & vbNewLine
                End If
            Next
            FilledLoaderStatement += " End With" & vbNewLine

            FilledLoaderStatement += "     Portfolio= New List(Of Object)" & vbNewLine &
                                     "     FilePath = FilePath" & vbNewLine &
                                     "     Password= Password" & vbNewLine &
                                     "     Line= Line" & vbNewLine &
                                     "     Dim M As New LineInfo(FilePath,Password)" & vbNewLine &
                                     "     My.Settings.Db_" & Db.Name & "_FilePath = FilePath" & vbNewLine &
                                     "     My.Settings.Db_" & Db.Name & "_Password = Password" & vbNewLine &
                                     "     My.Settings.Db_" & Db.Name & "_Line = Line " & vbNewLine &
                                     "     My.Settings.Save" & vbNewLine
            For Each Tb As Table In Db.Tables
                FilledLoaderStatement += "      With " & Tb.TableName & "" & vbNewLine &
                                         "          .Reset(M)" & vbNewLine &
                                         "      End With" & vbNewLine &
                                         "      List_" & Tb.TableName & " = New List(Of " & Tb.TableName & ")" & vbNewLine &
                                         "      List_" & Tb.TableName & " = " & Tb.TableName & ".List()" & vbNewLine
            Next

            Dim FilledLoader As New VbNET.Loader("Filled",, PL, FilledLoaderStatement)
            FilledLoader.ParentClass = Result
            FilledLoader.PrintStatement(True)
            FilledLoader.ParentClass.Add_Loader(FilledLoader)
#End Region

#End Region
        End If

        Return Result
    End Function

#End Region

#End Region
#End Region

    Public Shared Function ConvertVbReturnType_To_C(ByVal ReturnType As String) As String
        Dim VarC As String = ""
        If ReturnType = "Integer" Then
            VarC = "int"
        ElseIf ReturnType = "String" Then
            VarC = "string"
        ElseIf ReturnType = "Double" Then
            VarC = "double"
        ElseIf ReturnType = "Long" Then
            VarC = "long"
        ElseIf ReturnType = "Int32" Then
            VarC = "int32"
        ElseIf ReturnType = "Int64" Then
            VarC = "int64"
        ElseIf ReturnType = "Boolean" Then
            VarC = "bool"
        ElseIf ReturnType = "Byte" Then
            VarC = "byte"
        ElseIf ReturnType = "Byte()" Then
            VarC = "byte()"
        ElseIf ReturnType = "Decimal" Then
            VarC = "decimal"
        ElseIf ReturnType = "TimeSpan" Then
            VarC = "timespan"
        ElseIf ReturnType = "Single" Then
            VarC = "single"
        ElseIf ReturnType = "DateTime" Then
            VarC = "datetime"
        ElseIf ReturnType = "ULong" Then
            VarC = "ulong"
        Else
            VarC = ReturnType.ToLower
        End If
        Return VarC
    End Function
#End Region
#Region "|6| [Runtime]"

#End Region
#Region "|7| [Loader]"

#End Region
#Region "|8| [Class]"
#Region "|08.00| <Class> [Statement]"
#Region "|08.00.00| <Class> <Statement> [Import]"
    Public Class Import
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]"
#Region "[2019/03/28 09h35:380]<01.00.00> <Property> [Aliasname|String]"
        Private _Aliasname As String
        ''' <summary>
        ''' (Set|Get) Optional. An import alias or name by which code can refer to namespace instead of the full qualification string. See Declared Element Names.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 28.03.2019 09:35</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Optional. An import alias or name by which code can refer to namespace instead of the full qualification string. See Declared Element Names."),
   Browsable(True)>
        Public Property Aliasname() As String
            Get
                Return _Aliasname
            End Get
            Set(ByVal value As String)
                _Aliasname = value
            End Set
        End Property
#End Region 'Optional. An import alias or name by which code can refer to namespace instead of the full qualification string. See Declared Element Names.
#Region "[2019/03/28 09h35:607]<01.00.01> <Property> [Namespaces|String]"
        Private _Namespaces As String
        ''' <summary>
        ''' (Set|Get) Required. The fully qualified name of the namespace being imported. Can be a string of namespaces nested to any level.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 28.03.2019 09:35</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Required. The fully qualified name of the namespace being imported. Can be a string of namespaces nested to any level."),
   Browsable(True)>
        Public Property Namespaces() As String
            Get
                Return _Namespaces
            End Get
            Set(ByVal value As String)
                _Namespaces = value
            End Set
        End Property
#End Region 'Required. The fully qualified name of the namespace being imported. Can be a string of namespaces nested to any level.
#Region "[2019/03/28 09h36:012]<01.00.02> <Property> [Element|String]"
        Private _Element As String
        ''' <summary>
        ''' (Set|Get) Optional. The name of a programming element declared in the namespace. Can be any container element.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 28.03.2019 09:36</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Optional. The name of a programming element declared in the namespace. Can be any container element."),
   Browsable(True)>
        Public Property Element() As String
            Get
                Return _Element
            End Get
            Set(ByVal value As String)
                _Element = value
            End Set
        End Property
#End Region 'Optional. The name of a programming element declared in the namespace. Can be any container element.
#End Region
#Region "|01.01| <Property> [Price]{1}"
#Region "[On] |2019/06/12 16h50:602| <01.00.00> <Property> <Info> |.Production_Cost()|Double|"' (Set|Get) The Production_Cost as Double.
        Private _Production_Cost As Double
        '''    <Summary>
        '''     (Set|Get) The Production_Cost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h50:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Production_Cost as Double.")>
        Property Production_Cost() As Double
            Get
                Return _Production_Cost
            End Get
            Set(ByVal Value As Double)
                _Production_Cost = Value
            End Set
        End Property
#End Region '(Set|Get) The Production_Cost as Double.
#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()
            With Me
                .Aliasname = ""
                .Element = ""
                .ID = 0
                .ImageIndex = 0
                .Namespaces = ""
                .Name = ""
                .Summary = ""
                .RegionCategory = 0
                .StatementFormat = Format.Import
                .RegionCode = IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." & IIf((.StatementFormat) < 10, "0" & (.StatementFormat), (.StatementFormat)) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)
                .Updated(Status.Online, "The test is successful.",, Now) = ""
                .C_OpenStatement = " {"
                .C_CloseStatement = " }"
                .F_OpenStatement = "open "
                .VB_OpenStatement = "Imports "
                .VB_CloseStatement = ""
                .Python_OpenStatement = "def "
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable]|Boolean(True))]"
        ''' <summary>
        ''' Print the statement
        ''' </summary>
        ''' <param name="Enable">This parameter will overide the Me.Enable Property! ByDefault is set on True.</param>
        Public Sub PrintStatement(Optional ByVal Enable As Boolean = True)
            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Production_Cost = 0
            Me.Production_Cost = My.Settings.Price_Import
            Me.Enable = Enable
            If Me.Enable = True Then
                With Me
                    .Print_VB.Add("Imports " & Me.ToString)
                    .Print_C.Add("using " & Me.ToString)
                    .Print_F.Add("open " & Me.ToString)
                    .Print_Python.Add("import " & Me.ToString)
                    .VB = "Imports " & Me.ToString
                    .C = "using " & Me.ToString
                    .F = "open " & Me.ToString
                    .Python = "import " & Me.ToString
                End With
            Else
                With Me
                    .Print_VB.Add("'' Imports " & Me.ToString)
                    .Print_C.Add("// using " & Me.ToString)
                    .Print_F.Add("// open " & Me.ToString)
                    .Print_Python.Add("// import " & Me.ToString)
                    .VB = "'' Imports " & Me.ToString
                    .C = "// using " & Me.ToString
                    .F = "// open " & Me.ToString
                    .Python = "// import " & Me.ToString
                End With
            End If
        End Sub
#End Region
#Region "<04.01.01> <Sub> <Print> [PrinStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]|Boolean(True))]"

        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub

#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Detect]"
#Region "<05.00.00> <Function> <Detect> [DetectImportation(Statement|String)|List(Of Import)]"
        Public Shared Function DetectImportation(ByVal Statement As String) As List(Of Import)
            Dim Result As New List(Of Import)
            Dim TempBox As New TextBox
            With TempBox
                .Multiline = True
                .Width = 255
                .Text = Statement
            End With
            Dim CapturedLines As New List(Of String)
            If Statement = "" Then
            Else
                For Each Line As String In TempBox.Lines
                    If Line.Contains("Import") Then
                        CapturedLines.Add(Line)
                    End If
                Next
            End If
            If CapturedLines.Count - 1 > 0 Then
                For Each Line As String In CapturedLines
                    Dim St As String = Line.Replace("Imports", "")
                    St.Replace(".", " ")
                    Dim words As String() = St.Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                    If words.Length >= 2 Then
                        Dim T_Import As New Import(words(0), words(1), words(2))
                        Result.Add(T_Import)
                    ElseIf words.Length < 2 And words.Length > 1 Then
                        Dim T_Import As New Import(words(0), words(1))
                        Result.Add(T_Import)
                    Else
                        Dim T_Import As New Import(words(0))
                        Result.Add(T_Import)
                    End If

                Next
            End If
            Return Result
        End Function

#End Region
#End Region
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> Statement.Import_Statement.New()"
        Public Sub New()
            Clear()
        End Sub

#End Region
#Region "<06.01> <Loader> Statement.Import_Statement.New(Name|String,[AliasName]|String,[Element]|String,[Description]|String)"
        Public Sub New(ByVal Name As String,
                       Optional ByVal Aliasname As String = "",
                       Optional ByVal Element As String = "",
                       Optional ByVal Description As String = "",
                       Optional ByVal Enable As Boolean = True)
            Clear()

            With Me
                .Namespaces = Name
                .Name = Name
                .Text = Name '"Builder. VB.Import_Statement.New(Name|String,[AliasName]|String,[Element]|String,[Description]|String)"
                .Aliasname = Aliasname
                .Element = Element
                .Print_C = New List(Of String)
                .Print_F = New List(Of String)
                .Print_Python = New List(Of String)
                .Print_VB = New List(Of String)
                .PrintStatement(Enable)
                .Text = .Name
                .Tooltip = Description
                .ImageIndex = 0
            End With

        End Sub

#End Region
#End Region


#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="ImportStatement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal ImportStatement As Import) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(ImportStatement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(ImportStatement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Importation\" & ImportStatement.Name & ".Import"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Importation") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Importation")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, ImportStatement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ImportStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="ImportStatement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal ImportStatement As Import,
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(ImportStatement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(ImportStatement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If IsNothing(Directory) Then
                        Directory = New DirectoryInfo(My.Application.Info.DirectoryPath)
                    End If
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & ImportStatement.Name & ".Import"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Importation"
                        FilePath = My.Application.Info.DirectoryPath & "\Importation\" & ImportStatement.Name & ".Import"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, ImportStatement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As Import
            Dim Result As New Import
            Dim Serializer As New XmlSerializer(GetType(Import))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type Import.")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.Import
                    Temp = VbNET.Import.Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .Aliasname = Temp.Aliasname
                        .Namespaces = Temp.Namespaces
                        .Element = Temp.Element
                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .VB = Temp.VB
                        .XmlFile = Temp.XmlFile


                    End With
                    Result.Output = New VbNET.Import(Temp.Namespaces, Temp.Aliasname, Temp.Element)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Import.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            If Me.Aliasname <> "" Then
                Result += Me.Aliasname & "."
            End If
            Result += Me.Name
            If Me.Element <> "" Then
                Result += "." & Me.Element
            End If
            Return Result
        End Function
#End Region
    End Class
#End Region
#Region "|08.00.01| <Class> <Statement> [Property]"
    ''' <summary>
    ''' Declares the name of a property, and the property procedures used to store and retrieve the value of the property.
    ''' [ (attributelist) ] [ Default ] [ accessmodifier ]
    ''' [ propertymodifiers ] [ Shared ] [ Shadows ] [ ReadOnly | WriteOnly ] [ Iterator ]  
    ''' Property name ( [ parameterlist ] ) [ As returntype ] [ Implements implementslist ] 
    ''' 
    '''   [ (attributelist) ] [ accessmodifier ] Get  
    '''  [ statements ]  
    '''  End Get
    '''  
    ''' [ (attributelist) ] [ accessmodifier ] Set ( ByVal value As returntype [, parameterlist ] )
    '''  [ statements ]  
    '''  End Set
    '''  End Property
    '''  -or-
    '''  [ (attributelist) ] [ Default ] [ accessmodifier ]
    '''  [ propertymodifiers ] [ Shared ] [ Shadows ] [ ReadOnly | WriteOnly ]  
    '''  Property name ( [ parameterlist ] ) [ As returntype ] [ Implements implementslist ]  
    ''' </summary>
    Public Class [Property]
        Inherits Statement
#Region "<1> [Property]"
#Region "|01.01| <Property> [Price]{4}"
#Region "[On] |2019/06/12 16h50:602| <01.00.00> <Property> <Info> |.Production_Cost()|Double|"' (Set|Get) The Production_Cost as Double.
        Private _Production_Cost As Double
        '''    <Summary>
        '''     (Set|Get) The Production_Cost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h50:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Production_Cost as Double.")>
        Property Production_Cost() As Double
            Get
                Return _Production_Cost
            End Get
            Set(ByVal Value As Double)
                _Production_Cost = Value
            End Set
        End Property
#End Region '(Set|Get) The Production_Cost as Double.
#Region "[On] |2019/06/12 16h51:619| <01.00.01> <Property> <Info> |.Quantity_Parameters()|Integer|"' (Set|Get) The Quantity_Parameters as Integer.
        Private _Quantity_Parameters As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Parameters as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h51:635 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Parameters as Integer.")>
        Property Quantity_Parameters() As Integer
            Get
                Return _Quantity_Parameters
            End Get
            Set(ByVal Value As Integer)
                Unit_Cost_Property = My.Settings.Price_Property
                Unit_Cost_Parameters = My.Settings.Price_Parameter
                If Value < 0 Then
                    Value = 0
                Else

                End If
                _Quantity_Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Parameters as Integer.
#Region "[On] |2019/06/12 16h55:025| <01.00.02> <Property> <Info> |.Unit_Cost_Property()|Double|"' (Set|Get) The Unit_Cost_Property as Double.
        Private _Unit_Cost_Property As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Property as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:025 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Property as Double.")>
        Property Unit_Cost_Property() As Double
            Get
                Return _Unit_Cost_Property
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Property = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Property as Double.
#Region "[On] |2019/06/12 16h55:615| <01.00.03> <Property> <Info> |.Unit_Cost_Parameters()|Double|"' (Set|Get) The Unit_Cost_Parameters as Double.
        Private _Unit_Cost_Parameters As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Parameters as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:635 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Parameters as Double.")>
        Property Unit_Cost_Parameters() As Double
            Get
                Return _Unit_Cost_Parameters
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Parameters as Double.
#End Region
#Region "<01.02> <Property> [Constructor]{2}"
#Region "<01.02.00> <Property> <Constructor> [Property]{11}"
#Region "[2019/03/27 23h12:150]<01.02.00> <Property> [SummaryStatement|Summary]"
        Private _SummaryStatement As Summary
        ''' <summary>
        ''' (Set|Get) Summary formatted string to explains uses of the statements.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:12</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Summary formatted string to explains uses of the statements."),
   Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get
                Return _SummaryStatement
            End Get
            Set(ByVal value As Summary)
                _SummaryStatement = value
            End Set
        End Property
#End Region 'Summary formatted string to explains uses of the statements.
#Region "[2019/03/27 23h10:454]<01.02.01> <Property> [Attribute|Attributelist]"
        Private _Attribute As Attributelist
        ''' <summary>
        ''' (Set|Get) Attributes provide a powerful method of associating metadata, or declarative information, with code (assemblies, types, methods, properties, and so forth). After an attribute is associated with a program entity, the attribute can be queried at run time by using a technique called reflection. For more information, see Reflection (Visual Basic).
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:10</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Attributes provide a powerful method of associating metadata, or declarative information, with code (assemblies, types, methods, properties, and so forth). After an attribute is associated with a program entity, the attribute can be queried at run time by using a technique called reflection. For more information, see Reflection (Visual Basic)."),
   Browsable(True)>
        Public Property Attribute() As Attributelist
            Get
                Return _Attribute
            End Get
            Set(ByVal value As Attributelist)
                _Attribute = value
            End Set
        End Property
#End Region 'Attributes provide a powerful method of associating metadata, or declarative information, with code (assemblies, types, methods, properties, and so forth). After an attribute is associated with a program entity, the attribute can be queried at run time by using a technique called reflection. For more information, see Reflection (Visual Basic).
#Region "[2019/03/28 16h30:175]<01.02.02> <Property> [[Default]|Boolean]"
        Private _Default As Boolean
        ''' <summary>
        ''' (Set|Get) Optional. Specifies that this property is the default property for the class or structure on which it is defined. Default properties must accept parameters and can be set and retrieved without specifying the property name. If you declare the property as Default, you cannot use Private on the property or on either of its property procedures.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 28.03.2019 16:30</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Optional. Specifies that this property is the default property for the class or structure on which it is defined. Default properties must accept parameters and can be set and retrieved without specifying the property name. If you declare the property as Default, you cannot use Private on the property or on either of its property procedures."),
   Browsable(True)>
        Public Property [Default]() As Boolean
            Get
                Return _Default
            End Get
            Set(ByVal value As Boolean)
                _Default = value
            End Set
        End Property
#End Region 'Optional. Specifies that this property is the default property for the class or structure on which it is defined. Default properties must accept parameters and can be set and retrieved without specifying the property name. If you declare the property as Default, you cannot use Private on the property or on either of its property procedures.
#Region "[2019/03/28 16h32:530]<01.02.03> <Property> [AccessModifier|AccessModifiers]"
        Private _AccessModifier As AccessModifiers
        ''' <summary>
        ''' (Set|Get) Optional on the Property statement and on at most one of the Get and Set statements. Can be one of the following:Public/Protected/Friend/Private/Protected Friend/
        ''' Private Protected
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 28.03.2019 16:32</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Optional on the Property statement and on at most one of the Get and Set statements. Can be one of the following:Public/Protected/Friend/Private/Protected Friend/Private Protected"),
   Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal value As AccessModifiers)
                _AccessModifier = value
            End Set
        End Property
#End Region 'Optional on the Property statement and on at most one of the Get and Set statements. Can be one of the following:Public/Protected/Friend/Private/Protected Friend/Private Protected
#Region "[2019/03/28 16h33:348]<01.02.04> <Property> [[Shared]|Boolean]"
        Private _Shared As Boolean
        ''' <summary>
        ''' (Set|Get) Specifies that one or more declared programming elements are associated with a class or structure at large, and not with a specific instance of the class or structure.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 28.03.2019 16:33</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Specifies that one or more declared programming elements are associated with a class or structure at large, and not with a specific instance of the class or structure."),
   Browsable(True)>
        Public Property [Shared]() As Boolean
            Get
                Return _Shared
            End Get
            Set(ByVal value As Boolean)
                _Shared = value
            End Set
        End Property
#End Region 'Specifies that one or more declared programming elements are associated with a class or structure at large, and not with a specific instance of the class or structure.
#Region "[2019/03/28 16h34:611]<01.02.05> <Property> [Shadows|Boolean]"
        Private _Shadows As Boolean
        ''' <summary>
        ''' (Set|Get) Specifies that a declared programming element redeclares and hides an identically named element, or set of overloaded elements, in a base class.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 28.03.2019 16:34</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Specifies that a declared programming element redeclares and hides an identically named element, or set of overloaded elements, in a base class."),
   Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal value As Boolean)
                _Shadows = value
            End Set
        End Property
#End Region 'Specifies that a declared programming element redeclares and hides an identically named element, or set of overloaded elements, in a base class.
#Region "[2019/03/28 16h34:735]<01.02.06> <Property> [ReadOnly|Boolean]"
        Private _ReadOnly As Boolean
        ''' <summary>
        ''' (Set|Get) Specifies that a variable or property can be read but not written.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 28.03.2019 16:34</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Specifies that a variable or property can be read but not written."),
   Browsable(True),
   DefaultValue(False)>
        Public Property [ReadOnly]() As Boolean
            Get
                Return _ReadOnly
            End Get
            Set(ByVal value As Boolean)
                _ReadOnly = value
            End Set
        End Property
#End Region 'Specifies that a variable or property can be read but not written.
#Region "[2019/03/28 16h36:307]<01.02.07> <Property> [WriteOnly|Boolean]"
        Private _WriteOnly As Boolean
        ''' <summary>
        ''' (Set|Get) Specifies that a property can be written but not read.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 28.03.2019 16:36</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Specifies that a property can be written but not read."),
   Browsable(True)>
        Public Property [WriteOnly]() As Boolean
            Get
                Return _WriteOnly
            End Get
            Set(ByVal value As Boolean)
                _WriteOnly = value
            End Set
        End Property
#End Region 'Specifies that a property can be written but not read.
#Region "[2019/03/28 16h28:318]<01.02.08> <Property> [PropertyModifier|PropertyModifiers]"
        Private _PropertyModifier As PropertyModifiers
        ''' <summary>
        ''' (Set|Get) Optional. Can be one of the following: • Overloads• Overrides• Overridable• NotOverridable• MustOverride• MustOverride Overrides• NotOverridable Overrides
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 28.03.2019 16:28</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Optional. Can be one of the following: • Overloads• Overrides• Overridable• NotOverridable• MustOverride• MustOverride Overrides• NotOverridable Overrides"),
   Browsable(True),
   DefaultValue(PropertyModifiers.Nothing)>
        Public Property PropertyModifier() As PropertyModifiers
            Get
                Return _PropertyModifier
            End Get
            Set(ByVal value As PropertyModifiers)
                _PropertyModifier = value
            End Set
        End Property
#End Region 'Optional. Can be one of the following: • Overloads• Overrides• Overridable• NotOverridable• MustOverride• MustOverride Overrides• NotOverridable Overrides
#Region "[2019/04/07 18h11:333]<01.02.09> <Property> [ReturnType|String]"
        Private _ReturnType As String
        ''' <summary>
        ''' (Set|Get) The variable return type.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 07.04.2019 18:11</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) The variable return type."),
   Browsable(True)>
        Public Property ReturnType() As String
            Get
                Return _ReturnType
            End Get
            Set(ByVal value As String)
                _ReturnType = value
            End Set
        End Property
#End Region 'The variable return type.
#Region "[2019/04/11 23h06:340]<01.02.10> <Property> [ParameterList|List(Of InnerStatement.ParameterList_Statement)]"
        Private _ParameterList As List(Of InnerStatement.ParameterList_Statement)
        ''' <summary>
        ''' (Set|Get) Optional. List of local variable names representing the parameters of this property, and possible additional parameters of the Set procedure. See Parameter List.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 11.04.2019 23:06</author>
        <CategoryAttribute("Constructor"),
   Description("(Set|Get) Optional. List of local variable names representing the parameters of this property, and possible additional parameters of the Set procedure. See Parameter List."),
   Browsable(True)>
        Public Property ParameterList() As List(Of InnerStatement.ParameterList_Statement)
            Get
                Return _ParameterList
            End Get
            Set(ByVal value As List(Of InnerStatement.ParameterList_Statement))
                _ParameterList = value
            End Set
        End Property
#End Region 'Optional. List of local variable names representing the parameters of this property, and possible additional parameters of the Set procedure. See Parameter List.
#Region "|2019/05/07 16h01:454| <01.02.11> <Property> <Constructor> [Call=Required|Boolean]"'(Set|Get) the Required as Boolean
        Private _Required As Boolean
        ''' <Summary>
        ''' (Set|Get) the Required as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 16h01:454 </Published>
        ''' <Updated>[Created=2019/05/07 16h01:454][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Required as Boolean"), DefaultValue(True), Browsable(True)>
        Public Property Required() As Boolean
            Get
                Return _Required
            End Get
            Set(ByVal Value As Boolean)
                _Required = Value
            End Set
        End Property
#End Region ' (Set|Get) the Required as Boolean

#End Region
#Region "<01.02.01> <Property> <Constructor> [Variable]{3}"
#Region "[2019/04/07 18h05:981]<01.02.01.00> <Property> [Variable_Name|String]"
        Private _Variable_Name As String
        ''' <summary>
        ''' (Set|Get) The variable name.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 07.04.2019 18:05</author>
        <CategoryAttribute("Variable"),
   Description("(Set|Get) The variable name."),
   Browsable(True)>
        Public Property Variable_Name() As String
            Get
                Return _Variable_Name
            End Get
            Set(ByVal value As String)
                _Variable_Name = value
            End Set
        End Property
#End Region 'The variable name.
#Region "[2019/04/07 18h06:235]<01.02.01.01> <Property> [Variable_AccessModifier|AccessModifiers]"
        Private _Variable_AccessModifier As AccessModifiers
        ''' <summary>
        ''' (Set|Get) The variable access modifier.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 07.04.2019 18:06</author>
        <CategoryAttribute("Variable"),
   Description("(Set|Get) The variable access modifier."),
   Browsable(True)>
        Public Property Variable_AccessModifier() As AccessModifiers
            Get
                Return _Variable_AccessModifier
            End Get
            Set(ByVal value As AccessModifiers)
                _Variable_AccessModifier = value
            End Set
        End Property
#End Region 'The variable access modifier.
#Region "[2019/04/07 18h07:993]<01.02.01.02> <Property> [Variable_ReturnType|String]"
        Private _Variable_ReturnType As String
        ''' <summary>
        ''' (Set|Get) The variable return type.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 07.04.2019 18:07</author>
        <CategoryAttribute("Variable"),
   Description("(Set|Get) The variable return type."),
   Browsable(True)>
        Public Property Variable_ReturnType() As String
            Get
                Return _Variable_ReturnType
            End Get
            Set(ByVal value As String)
                _Variable_ReturnType = value
            End Set
        End Property
#End Region 'The variable return type.
#End Region
#Region "<01.02.02> <Property> <Constructor> [Statements]"
#Region "|2019/04/26 18h01:611| <01.02.02.00> <Property> <Statement> [Call=SetStatement|String]"'(Set|Get) the Set as String
        Private _SetStatement As String
        ''' <Summary>
        ''' (Set|Get) the Set as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/26 18h01:611 </Published>
        ''' <Updated>[Created=2019/04/26 18h01:611][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statement"), Description("(Set|Get) the Set as String"), Browsable(True)>
        Public Property [SetStatement]() As String
            Get
                Return _SetStatement
            End Get
            Set(ByVal Value As String)
                _SetStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the Set as String
#Region "|2019/04/26 18h02:608| <01.02.02.01> <Property> <Statement> [Call=GetStatement|String]"'(Set|Get) the Get as String
        Private _GetStatement As String
        ''' <Summary>
        ''' (Set|Get) the Get as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/26 18h02:608 </Published>
        ''' <Updated>[Created=2019/04/26 18h02:608][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statement"), Description("(Set|Get) the Get as String"), Browsable(True)>
        Public Property [GetStatement]() As String
            Get
                Return _GetStatement
            End Get
            Set(ByVal Value As String)
                _GetStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the Get as String

#End Region
#End Region
#Region "|01.03| <Property> [Parent]{4}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h26:392| <01.03.01> <Property> <Parent> |.ParentStructure()|VbNET.Structure|"' (Set|Get) The ParentStructure as VbNET.Structure.
        Private _ParentStructure As VbNET.Structure
        '''    <Summary>
        '''     (Set|Get) The ParentStructure as VbNET.Structure.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h26:413 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentStructure as VbNET.Structure."), XmlIgnore>
        Property ParentStructure() As VbNET.Structure
            Get
                Return _ParentStructure
            End Get
            Set(ByVal Value As VbNET.Structure)
                _ParentStructure = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentStructure as VbNET.Structure.
#Region "[On] |2019/05/22 13h27:647| <01.03.02> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.03> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        Public Sub Clear()
            Reset()

            With Me
                .AccessModifier = AccessModifiers.Public

                .GetStatement = ""
                .PropertyModifier = PropertyModifiers.Nothing
                .ReadOnly = False
                .SetStatement = ""
                .Shadows = False
                .Shared = False
                .WriteOnly = False
                .XmlFile = ""
                .Variable_AccessModifier = AccessModifiers.Private
                .Variable_Name = ""
                .Variable_ReturnType = ""
                .Default = False
                .ReturnType = "String"
                .Required = True
                .ParentName = ""
                .StatementFormat = Format.Property
                .RegionCategory = 0
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                       "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                       "." & IIf(.ID < 10, "0" & .ID, ID)

                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = "def "
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Property "
                .VB_CloseStatement = "End Property"
                .Python_OpenStatement = "def "
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable|True])]"
        Public Sub PrintStatement(Optional ByVal Enable As Boolean = True)
            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable

            Me.Production_Cost = 0
            Me.Production_Cost += Me.Unit_Cost_Property
            If Not IsNothing(Me.ParameterList) Then
                Me.Quantity_Parameters = Me.ParameterList.Count
            End If
            If Me.Quantity_Parameters > 0 Then
                Me.Production_Cost += Me.Quantity_Parameters * Me.Unit_Cost_Parameters
            End If

            With Me
                .RegionCode = IIf(.StatementFormat < 10, "0" & .StatementFormat, .StatementFormat) & "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." & IIf(.ID < 10, "0" & .ID, .ID)
            End With
            '     If Not IsNothing(Temp_Property.ParentStructure) Then
            '    Me.ParentName = Temp_Property.ParentStructure.Name
            '   Else
            '  If Not IsNothing(Temp_Property.ParentModule) Then
            ' Me.ParentName = Temp_Property.ParentModule.Name
            'Else
            'If Not IsNothing(Temp_Property.ParentClass) Then
            'Me.ParentName = Temp_Property.ParentClass.Name
            'Else
            If Not IsNothing(VirtualClass) Then
                Me.ParentName = VirtualClass.Name
            Else
                VirtualClass = New VbNET.[Class]("VirtualClass")
                Me.ParentName = VirtualClass.Name
                '             End If
                '    End If
                'End If
            End If
            If Me.Description = "" Or IsNothing(Me.Description) Or Me.Description.Length < 1 Then
                Me.Description = "The " & Me.Name & "of the object as " & Me.ReturnType & "."
            End If
#Region "<Format Description>"
            If Description.Contains("(Set|Get)") Then
#Region "<WriteOnly>"
                If Me.WriteOnly = True Then
                    Me.Description = "(Set) " & StringRange.Replace(Description, "(Set|Get)").ToString
                    Me.ReadOnly = False
                End If
#End Region
#Region "<ReadOnly>"
                If Me.ReadOnly = True Then
                    Me.Description = "(Get) " & StringRange.Replace(Description, "(Set|Get)").ToString
                    Me.WriteOnly = False
                End If
#End Region
#Region "<Normal>"
                If Me.ReadOnly = False AndAlso Me.WriteOnly = False Then
                    Me.Description = Description
                End If
#End Region
            Else
#Region "<WriteOnly>"
                If Me.WriteOnly = True Then
                    Me.Description = "(Set) " & Description
                    Me.ReadOnly = False
                End If
#End Region
#Region "<ReadOnly>"
                If Me.ReadOnly = True Then
                    Me.Description = "(Get) " & Description
                    Me.WriteOnly = False
                End If
#End Region
#Region "<Normal>"
                If Me.ReadOnly = False AndAlso Me.WriteOnly = False Then
                    Me.Description = "(Set|Get) " & Me.Description
                End If
#End Region
            End If
#End Region
            Dim PX As New List(Of Input_Parameters)

            Dim Parameters As String = ""
            Dim Params As New List(Of Summary.Param)
            If Not IsNothing(Me.ParameterList) Then
                If Me.ParameterList.Count - 1 > 0 Then
                    Parameters = InnerStatement.ParameterList_Statement.PrintCallRegion(Me.ParameterList)
                    For i = 0 To Me.ParameterList.Count - 1
                        Dim P As New Summary.Param(Me.ParameterList(i).Name, Me.ParameterList(i).Definition)
                        Dim Px0 As New Input_Parameters(Me.ParameterList(i).ParameterName, Me.ParameterList(i).ParameterType, Me.ParameterList(i).DefaultValue)
                        PX.Add(Px0)
                    Next

                End If
            End If
            Me.SummaryStatement = New Summary(Me.Description, Params, Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage, Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)
            Me.SummaryStatement.Print(Me.ParameterList)
            Me.Summary = SummaryStatement.Print_VB
            Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)

            'Create 
            If Me.Enable = True Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "(" & Parameters & ")" & "|" & Me.ReturnType & "|" & Space & "' " & Me.Description)
#Region "<Variable>"
                Me.Print_VB.Add("   " & VbNET.AccessModifiers_ToString(Me.Variable_AccessModifier) &
                                    IIf(Me.Shared = True, "Shared ", "") &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    Me.Variable_Name & " As " &
                                    Me.Variable_ReturnType)
#End Region
#Region "<Summary>"
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                     VbNET.PropertyModifiers_ToString(Me.PropertyModifier) &
                                    IIf(Me.Default = True, "Default ", "") &
                                    IIf(Me.Shared = True, "Shared ", "") &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    IIf(Me.ReadOnly = True, "ReadOnly ", "") &
                                    IIf(Me.WriteOnly = True, "WriteOnly ", "") &
                                    "Property [" & Me.Name &
                                    "](" & InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.Vb) & ")" &
                                    "As " & Me.ReturnType)
#End Region
                If Me.ReadOnly = True Then
                    'No Set Statement
#Region "<Get Statement>"
                    Me.Print_VB.Add("       Get")
                    If Me.GetStatement.Length > 1 Then
                        Me.Print_VB.Add("           " & Me.GetStatement)
                    End If
                    Me.Print_VB.Add("       Return " & Me.Variable_Name)
                    Me.Print_VB.Add("       End Get")
#End Region
                Else
                    If Me.WriteOnly = True Then
                        'No Get Statement
#Region "<Set Statement>"
                        Me.Print_VB.Add("       Set(ByVal Value As " & Me.ReturnType & ")")
                        If Me.SetStatement.Length > 1 Then
                            Me.Print_VB.Add("           " & Me.SetStatement)
                        End If
                        Me.Print_VB.Add("       " & Me.Variable_Name & " = Value")
                        Me.Print_VB.Add("       End Set")
#End Region
                    Else
#Region "<Get Statement>"
                        Me.Print_VB.Add("       Get")
                        If Me.GetStatement.Length > 1 Then
                            Me.Print_VB.Add("           " & Me.GetStatement)
                        End If
                        Me.Print_VB.Add("       Return " & Me.Variable_Name)
                        Me.Print_VB.Add("       End Get")
#End Region
#Region "<Set Statement>"
                        Me.Print_VB.Add("       Set(ByVal Value As " & Me.ReturnType & ")")
                        If Me.SetStatement.Length > 1 Then
                            Me.Print_VB.Add("           " & Me.SetStatement)
                        End If
                        Me.Print_VB.Add("       " & Me.Variable_Name & " = Value")
                        Me.Print_VB.Add("       End Set")
#End Region
                    End If
                End If
                Me.Print_VB.Add("   End Property")
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "(" & Parameters & ")" & "|" & Me.ReturnType & "|  " & Me.Description)
#Region "<Variable>"
                'Determine the return type



                Me.Print_C.Add("   " & VbNET.AccessModifiers_ToString(Me.Variable_AccessModifier).ToLower &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    VbNET.ConvertVbReturnType_To_C(Me.Variable_ReturnType) & " " & Me.Variable_Name & " ;")
#End Region
#Region "<Summary>"
                Me.Print_C.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("    " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower &
                                     VbNET.PropertyModifiers_ToString(Me.PropertyModifier).ToLower &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    VbNET.ConvertVbReturnType_To_C(Me.ReturnType) & " " &
                                    Me.Name &
                                    "(" & InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.C) & ")")
                Me.Print_C.Add("   {")
#End Region
                If Me.ReadOnly = True Then
                    'No Set Statement
#Region "<Get Statement>"
                    Me.Print_C.Add("       get")
                    Me.Print_C.Add("       {")
                    If Me.GetStatement <> "" Then
                        Me.Print_C.Add("           " & Me.GetStatement)
                    End If
                    Me.Print_C.Add("            return " & Me.Variable_Name & ";")
                    Me.Print_C.Add("       }")
#End Region
                Else
                    If Me.WriteOnly = True Then
                        'No Get Statement
#Region "<Set Statement>"
                        Me.Print_C.Add("       set")
                        Me.Print_C.Add("       {")
                        If Me.GetStatement <> "" Then
                            Me.Print_C.Add("           " & Me.SetStatement)
                        End If
                        Me.Print_C.Add("            " & Me.Variable_Name & " = value;")
                        Me.Print_C.Add("       }")
#End Region
                    Else
#Region "<Get Statement>"
                        Me.Print_C.Add("       get")
                        Me.Print_C.Add("       {")
                        If Me.GetStatement <> "" Then
                            Me.Print_C.Add("           " & Me.GetStatement)
                        End If
                        Me.Print_C.Add("            return " & Me.Variable_Name & ";")
                        Me.Print_C.Add("       }")
#End Region
#Region "<Set Statement>"
                        Me.Print_C.Add("       set")
                        Me.Print_C.Add("       {")
                        If Me.GetStatement <> "" Then
                            Me.Print_C.Add("           " & Me.SetStatement)
                        End If
                        Me.Print_C.Add("            " & Me.Variable_Name & " = value;")
                        Me.Print_C.Add("       }")
#End Region
                    End If
                End If
                Me.Print_C.Add("   }")
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "(" & Parameters & ")" & "|" & Me.ReturnType & "|  " & Me.Description)
#Region "<Variable>"
                Me.Print_JavaScript.Add("   " & Me.Variable_ReturnType & " " & Me.Variable_Name & " ;")
#End Region
#Region "<Summary>"
                Me.Print_JavaScript.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("    " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower &
                                     VbNET.PropertyModifiers_ToString(Me.PropertyModifier).ToLower &
                                    IIf(Me.Default = True, "final ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    Me.ReturnType & " " &
                                    Me.Name &
                                    "(" & InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.C) & ")" &
                                    "   {")
#End Region
                If Me.ReadOnly = True Then
                    'No Set Statement
#Region "<Get Statement>"
                    Me.Print_JavaScript.Add("       get{")
                    If Me.GetStatement <> "" Then
                        Me.Print_JavaScript.Add("           " & Me.GetStatement)
                    End If
                    Me.Print_JavaScript.Add("       return " & Me.Variable_Name & ";")
                    Me.Print_JavaScript.Add("       }")
#End Region
                Else
                    If Me.WriteOnly = True Then
                        'No Get Statement
#Region "<Set Statement>"
                        Me.Print_JavaScript.Add("       set{")
                        If Me.GetStatement <> "" Then
                            Me.Print_JavaScript.Add("           " & Me.SetStatement)
                        End If
                        Me.Print_JavaScript.Add("       " & Me.Variable_Name & " = value;")
                        Me.Print_JavaScript.Add("       }")
#End Region
                    Else
#Region "<Get Statement>"
                        Me.Print_JavaScript.Add("       get{")
                        If Me.GetStatement <> "" Then
                            Me.Print_JavaScript.Add("           " & Me.GetStatement)
                        End If
                        Me.Print_JavaScript.Add("       return " & Me.Variable_Name & ";")
                        Me.Print_JavaScript.Add("       }")
#End Region
#Region "<Set Statement>"
                        Me.Print_JavaScript.Add("       set{")
                        If Me.GetStatement <> "" Then
                            Me.Print_JavaScript.Add("           " & Me.SetStatement)
                        End If
                        Me.Print_JavaScript.Add("       " & Me.Variable_Name & " = value;")
                        Me.Print_JavaScript.Add("       }")
#End Region
                    End If
                End If
                Me.Print_JavaScript.Add("   }")
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "(" & Parameters & ")" & "|" & Me.ReturnType & "|  " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("    member this." & Me.Name &
                                    "(" & InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.C) & ")")
#End Region
                If Me.ReadOnly = True Then
                    'No Set Statement
#Region "<Get Statement>"
                    Me.Print_F.Add("       with get() = " & Me.Variable_Name)
                    If Me.GetStatement <> "" Then
                        Me.Print_F.Add("           " & Me.GetStatement)
                    End If
#End Region
                Else
                    If Me.WriteOnly = True Then
                        'No Get Statement
#Region "<Set Statement>"
                        Me.Print_F.Add("       and set(value) = " & Me.Variable_Name & " <- value")
                        If Me.GetStatement <> "" Then
                            Me.Print_F.Add("           " & Me.SetStatement)
                        End If
#End Region
                    Else
#Region "<Get Statement>"
                        Me.Print_F.Add("       with get() = " & Me.Variable_Name)
                        If Me.GetStatement <> "" Then
                            Me.Print_F.Add("           " & Me.GetStatement)
                        End If
#End Region
#Region "<Set Statement>"
                        Me.Print_F.Add("       and set(value) = " & Me.Variable_Name & " <- value")
                        If Me.GetStatement <> "" Then
                            Me.Print_F.Add("           " & Me.SetStatement)
                        End If
#End Region
                    End If
                End If
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "(" & Parameters & ")" & "|" & Me.ReturnType & "|  " & Me.Description)
#Region "<Summary>"
                Me.Print_Python.Add(Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_Python.Add("    def " & Me.Name & "(self):")
#End Region
                If Me.ReadOnly = True Then
                    'No Set Statement
#Region "<Get Statement>"
                    If Me.GetStatement <> "" Then
                        Me.Print_Python.Add("           " & Me.GetStatement)
                    End If
                    Me.Print_Python.Add("       return self." & Me.Variable_Name)
#End Region
                Else
                    If Me.WriteOnly = True Then
                        'No Get Statement
#Region "<Set Statement>"
                        If Me.GetStatement <> "" Then
                            Me.Print_Python.Add("           " & Me.SetStatement)
                        End If
#End Region
                    Else
#Region "<Get Statement>"
                        If Me.GetStatement <> "" Then
                            Me.Print_Python.Add("           " & Me.GetStatement)
                        End If
                        Me.Print_Python.Add("       return self." & Me.Variable_Name)
#End Region
#Region "<Set Statement>"
                        If Me.GetStatement <> "" Then
                            Me.Print_Python.Add("           " & Me.SetStatement)
                        End If
#End Region
                    End If
                End If
                Me.Print_Python.Add("#endregion /" & Me.Description)
#End Region
#End Region
            ElseIf Me.Enable = False Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[Off] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "(" & Parameters & ")" & "|" & Me.ReturnType & "|" & Space & "' " & Me.Description)

#Region "<Variable>"
                Me.Print_VB.Add("''   " & VbNET.AccessModifiers_ToString(Me.Variable_AccessModifier) &
                                    IIf(Me.Shared = True, "Shared ", "") &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    Me.Variable_Name & " As " &
                                    Me.Variable_ReturnType)
#End Region
#Region "<Summary>"
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("''    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("'' " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                     VbNET.PropertyModifiers_ToString(Me.PropertyModifier) &
                                    IIf(Me.Default = True, "Default ", "") &
                                    IIf(Me.Shared = True, "Shared ", "") &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    IIf(Me.ReadOnly = True, "ReadOnly ", "") &
                                    IIf(Me.WriteOnly = True, "WriteOnly ", "") &
                                    Me.Name &
                                    "(" & InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.Vb) & ")" &
                                    "As " & Me.ReturnType)
#End Region
                If Me.ReadOnly = True Then
                    'No Set Statement
#Region "<Get Statement>"
                    Me.Print_VB.Add("''       Get")
                    If Me.GetStatement <> "" Then
                        Me.Print_VB.Add("''           " & Me.GetStatement)
                    End If
                    Me.Print_VB.Add("''       Return " & Me.Variable_Name)
                    Me.Print_VB.Add("''       End Get")
#End Region
                Else
                    If Me.WriteOnly = True Then
                        'No Get Statement
#Region "<Set Statement>"
                        Me.Print_VB.Add("''       Set(ByVal Value As " & Me.ReturnType & ")")
                        If Me.GetStatement <> "" Then
                            Me.Print_VB.Add("''           " & Me.SetStatement)
                        End If
                        Me.Print_VB.Add("''       " & Me.Variable_Name & " = Value")
                        Me.Print_VB.Add("''       End Set")
#End Region
                    Else
#Region "<Get Statement>"
                        Me.Print_VB.Add("''       Get")
                        If Me.GetStatement <> "" Then
                            Me.Print_VB.Add("''           " & Me.GetStatement)
                        End If
                        Me.Print_VB.Add("''       Return " & Me.Variable_Name)
                        Me.Print_VB.Add("''       End Get")
#End Region
#Region "<Set Statement>"
                        Me.Print_VB.Add("''       Set(ByVal Value As " & Me.ReturnType & ")")
                        If Me.GetStatement <> "" Then
                            Me.Print_VB.Add("''           " & Me.SetStatement)
                        End If
                        Me.Print_VB.Add("''       " & Me.Variable_Name & " = Value")
                        Me.Print_VB.Add("''       End Set")
#End Region
                    End If
                End If
                Me.Print_VB.Add("''   End Property")
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "(" & Parameters & ")" & "|" & Me.ReturnType & "|  " & Me.Description)
#Region "<Variable>"
                Me.Print_C.Add("//   " & VbNET.AccessModifiers_ToString(Me.Variable_AccessModifier).ToLower &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    Me.Variable_ReturnType & " " & Me.Variable_Name & " ;")
#End Region
#Region "<Summary>"
                Me.Print_C.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("//    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("//    " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower &
                                     VbNET.PropertyModifiers_ToString(Me.PropertyModifier).ToLower &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    Me.ReturnType & " " &
                                    Me.Name &
                                    "(" & InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.C) & ")" &
                                    "   {")
#End Region
                If Me.ReadOnly = True Then
                    'No Set Statement
#Region "<Get Statement>"
                    Me.Print_C.Add("//       get{")
                    If Me.GetStatement <> "" Then
                        Me.Print_C.Add("//           " & Me.GetStatement)
                    End If
                    Me.Print_C.Add("//       return " & Me.Variable_Name & ";")
                    Me.Print_C.Add("//       }")
#End Region
                Else
                    If Me.WriteOnly = True Then
                        'No Get Statement
#Region "<Set Statement>"
                        Me.Print_C.Add("//       set{")
                        If Me.GetStatement <> "" Then
                            Me.Print_C.Add("//           " & Me.SetStatement)
                        End If
                        Me.Print_C.Add("//       " & Me.Variable_Name & " = value;")
                        Me.Print_C.Add("//       }")
#End Region
                    Else
#Region "<Get Statement>"
                        Me.Print_C.Add("//       get{")
                        If Me.GetStatement <> "" Then
                            Me.Print_C.Add("//           " & Me.GetStatement)
                        End If
                        Me.Print_C.Add("//       return " & Me.Variable_Name & ";")
                        Me.Print_C.Add("//       }")
#End Region
#Region "<Set Statement>"
                        Me.Print_C.Add("//       set{")
                        If Me.GetStatement <> "" Then
                            Me.Print_C.Add("//           " & Me.SetStatement)
                        End If
                        Me.Print_C.Add("//       " & Me.Variable_Name & " = value;")
                        Me.Print_C.Add("//       }")
#End Region
                    End If
                End If
                Me.Print_C.Add("//   }")
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "(" & Parameters & ")" & "|" & Me.ReturnType & "|  " & Me.Description)
#Region "<Variable>"
                Me.Print_JavaScript.Add("//   " & Me.Variable_ReturnType & " " & Me.Variable_Name & " ;")
#End Region
#Region "<Summary>"
                Me.Print_JavaScript.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("//    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("//    " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower &
                                     VbNET.PropertyModifiers_ToString(Me.PropertyModifier).ToLower &
                                    IIf(Me.Default = True, "final ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    Me.ReturnType & " " &
                                    Me.Name &
                                    "(" & InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.C) & ")" &
                                    "   {")
#End Region
                If Me.ReadOnly = True Then
                    'No Set Statement
#Region "<Get Statement>"
                    Me.Print_JavaScript.Add("//       get{")
                    If Me.GetStatement <> "" Then
                        Me.Print_JavaScript.Add("//           " & Me.GetStatement)
                    End If
                    Me.Print_JavaScript.Add("//       return " & Me.Variable_Name & ";")
                    Me.Print_JavaScript.Add("//       }")
#End Region
                Else
                    If Me.WriteOnly = True Then
                        'No Get Statement
#Region "<Set Statement>"
                        Me.Print_JavaScript.Add("//       set{")
                        If Me.GetStatement <> "" Then
                            Me.Print_JavaScript.Add("//           " & Me.SetStatement)
                        End If
                        Me.Print_JavaScript.Add("//       " & Me.Variable_Name & " = value;")
                        Me.Print_JavaScript.Add("//       }")
#End Region
                    Else
#Region "<Get Statement>"
                        Me.Print_JavaScript.Add("//       get{")
                        If Me.GetStatement <> "" Then
                            Me.Print_JavaScript.Add("           " & Me.GetStatement)
                        End If
                        Me.Print_JavaScript.Add("//       return " & Me.Variable_Name & ";")
                        Me.Print_JavaScript.Add("//       }")
#End Region
#Region "<Set Statement>"
                        Me.Print_JavaScript.Add("//       set{")
                        If Me.GetStatement <> "" Then
                            Me.Print_JavaScript.Add("//           " & Me.SetStatement)
                        End If
                        Me.Print_JavaScript.Add("//       " & Me.Variable_Name & " = value;")
                        Me.Print_JavaScript.Add("//       }")
#End Region
                    End If
                End If
                Me.Print_JavaScript.Add("//   }")
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "(" & Parameters & ")" & "|" & Me.ReturnType & "|  " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("//    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("//    member this." & Me.Name &
                                    "(" & InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.C) & ")")
#End Region
                If Me.ReadOnly = True Then
                    'No Set Statement
#Region "<Get Statement>"
                    Me.Print_F.Add("//       with get() = " & Me.Variable_Name)
                    If Me.GetStatement <> "" Then
                        Me.Print_F.Add("//           " & Me.GetStatement)
                    End If
#End Region
                Else
                    If Me.WriteOnly = True Then
                        'No Get Statement
#Region "<Set Statement>"
                        Me.Print_F.Add("//       and set(value) = " & Me.Variable_Name & " <- value")
                        If Me.GetStatement <> "" Then
                            Me.Print_F.Add("//           " & Me.SetStatement)
                        End If
#End Region
                    Else
#Region "<Get Statement>"
                        Me.Print_F.Add("//       with get() = " & Me.Variable_Name)
                        If Me.GetStatement <> "" Then
                            Me.Print_F.Add("//          " & Me.GetStatement)
                        End If
#End Region
#Region "<Set Statement>"
                        Me.Print_F.Add("//       and set(value) = " & Me.Variable_Name & " <- value")
                        If Me.GetStatement <> "" Then
                            Me.Print_F.Add("//           " & Me.SetStatement)
                        End If
#End Region
                    End If
                End If
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "(" & Parameters & ")" & "|" & Me.ReturnType & "|  " & Me.Description)
#Region "<Summary>"
                Me.Print_Python.Add(Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("//    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_Python.Add("//    def " & Me.Name & "(self):")
#End Region
                If Me.ReadOnly = True Then
                    'No Set Statement
#Region "<Get Statement>"
                    If Me.GetStatement <> "" Then
                        Me.Print_Python.Add("//           " & Me.GetStatement)
                    End If
                    Me.Print_Python.Add("//       return self." & Me.Variable_Name)
#End Region
                Else
                    If Me.WriteOnly = True Then
                        'No Get Statement
#Region "<Set Statement>"
                        If Me.GetStatement <> "" Then
                            Me.Print_Python.Add("//           " & Me.SetStatement)
                        End If
#End Region
                    Else
#Region "<Get Statement>"
                        If Me.GetStatement <> "" Then
                            Me.Print_Python.Add("//           " & Me.GetStatement)
                        End If
                        Me.Print_Python.Add("//       return self." & Me.Variable_Name)
#End Region
#Region "<Set Statement>"
                        If Me.GetStatement <> "" Then
                            Me.Print_Python.Add("//           " & Me.SetStatement)
                        End If
#End Region
                    End If
                End If
                Me.Print_Python.Add("#endregion /" & Me.Description)
#End Region
#End Region
            End If

            Me.VB = ""
            Me.C = ""
            Me.Python = ""
            Me.JavaScript = ""
            Me.F = ""


            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next



        End Sub
#End Region
#Region "<04.01.01> <Sub> <Print> [PrintStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]]"
        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub
#End Region

#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Property]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Property\" & Statement.Name & ".Property"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Property") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Property")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Property],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    'Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType())

                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Property"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Property"
                        FilePath = My.Application.Info.DirectoryPath & "\Property\" & Statement.Name & ".Property"
                    End If
                    MsgBox(FilePath)
                    Try

                        If Not IO.Directory.Exists(Path) Then
                            IO.Directory.CreateDirectory(Path)
                        End If
                        Dim Test As New StreamWriter(FilePath)
                        XmlTool.Serialize(Test, Statement)
                        Result = New Fichier(FilePath)
                    Catch ex As Exception
                        MsgBox(ex.Message)
                    End Try
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Property]
            Dim Result As New [Property]
            Dim Serializer As New XmlSerializer(GetType([Property]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type Property.")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Property]
                    Temp = VbNET.[Property].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri

                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .Default = Temp.Default
                        .DefaultValue = Temp.DefaultValue
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .Example = Temp.Example

                        .F = Temp.F

                        .GetStatement = Temp.GetStatement

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex

                        .JavaScript = Temp.JavaScript

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .Params = Temp.Params
                        .ParameterList = Temp.ParameterList
                        .PropertyModifier = Temp.PropertyModifier
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .ReadOnly = Temp.ReadOnly
                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Required = Temp.Required
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .SetStatement = Temp.SetStatement
                        .Shared = Temp.Shared
                        .Shadows = Temp.Shadows
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Summary = Temp.Summary
                        .SummaryStatement = Temp.SummaryStatement

                        .Title = Temp.Title
                        .Tag = Temp.Tag
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .Variable_AccessModifier = Temp.Variable_AccessModifier
                        .Variable_Name = Temp.Variable_Name
                        .Variable_ReturnType = Temp.Variable_ReturnType
                        .Variables = Temp.Variables
                        .VB = Temp.VB

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot

                        .WriteOnly = Temp.WriteOnly
                    End With
                    Result.Output = New VbNET.Property(Temp.Name, Temp.ReturnType, Temp.Category, Temp.ID, Temp.DefaultValue, Temp.Shared, Temp.Shadows, Temp.WriteOnly, Temp.ReadOnly, Temp.Default, Temp.AccessModifier, Temp.PropertyModifier, Temp.Variable_Name,
                        Temp.Variable_ReturnType, Temp.Variable_AccessModifier, Temp.GetStatement, Temp.SetStatement, Temp.Browsable, Temp.ReturnType, Temp.Required, Temp.ParameterList, Temp.Enable, Temp.Description,, Temp.AuthorName, Temp.AuthorEmail, Temp.AuthorUri,
                        Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Usage, Temp.Remarks, Temp.Example, Temp.Note, Temp.Published, Temp.Rights, Temp.Title, Temp.See, Temp.SeeAlso, Status.Online, "", Now)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            Else
                If My.Settings.DefaultOuput.Length > 0 Then
                Else
                    Dim Str As String = ""
                    If Not IsNothing(Me.ParentStructure) Then
                        Str += Me.ParentStructure.Name
                    Else
                        If Not IsNothing(Me.ParentModule) Then
                            Str += Me.ParentModule.Name
                        Else
                            If Not IsNothing(Me.ParentClass) Then
                                Str += Me.ParentClass.Name
                            Else
                                If Not IsNothing(VirtualClass) Then
                                    Str += VirtualClass.Name
                                Else
                                    VirtualClass = New [Class]("VirtualClass")
                                    Str += VirtualClass.Name
                                End If
                            End If
                        End If
                    End If
                    My.Settings.DefaultOuput = My.Computer.FileSystem.SpecialDirectories.MyDocuments & "\Serialized Object\" & Str & "\" & Now.Year & "_" & Now.Month & "_" & Now.Day & "\Property"
                    My.Settings.Save()
                End If
                DirPath = New DirectoryInfo(My.Settings.DefaultOuput)
                If DirPath.Exists = False Then
                    Try
                        DirPath.Create()
                    Catch ex As Exception

                    End Try
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Property.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02> <Function> [Add]"
#Region "<05.02.00> <Function> <Add> [AddParameter|InnerStatement.ParameterList_Statement]"
        ''' <summary>
        ''' Add a new Parameter in Me.ParameterList. This function also avoids adding duplicates
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <param name="ReturnType"></param>
        ''' <param name="DefaultValue"></param>
        ''' <param name="Modifier"></param>
        ''' <param name="Definition"></param>
        ''' <returns></returns>
        Public Function AddParameter(ByVal Name As String,
                                     ByVal ReturnType As String,
                           Optional ByVal DefaultValue As String = "",
                           Optional ByVal Modifier As String = "ByVal",
                           Optional ByVal Definition As String = "") As InnerStatement.ParameterList_Statement
            Dim Result As New InnerStatement.ParameterList_Statement(Name, ReturnType, DefaultValue,
                                                IIf(Modifier.Contains("ByVal"), True, False),
                                                IIf(Modifier.Contains("ByRef"), True, False),
                                                IIf(Modifier.Contains("Optional"), True, False),
                                                IIf(Modifier.Contains("ParamArray"), True, False),
Definition, True)

            If IsNothing(Me.ParameterList) Then
                Me.ParameterList = New List(Of InnerStatement.ParameterList_Statement)
            End If
            If IsNothing(Me.Params) Then
                Me.Params = New List(Of Summary.Param)
            End If
            Dim Pi As New Summary.Param(Result.Name, Result.Definition)
            Me.Params.Add(Pi)
            Dim addit As Boolean = True
            For i = 0 To Me.ParameterList.Count - 1
                If Me.ParameterList(i).Name = Name Then
                    addit = False
                    Exit For
                End If
            Next
            If addit = True Then
                Me.ParameterList.Add(Result)
            End If
            Return Result
        End Function

#End Region
#End Region
#Region "<05.03> <Function> [Remove]"
#Region "<05.03.00> <Function> <Remove> [RemoveParameter|InnerStatement.ParameterList_Statement]"
        Public Function RemoveParameter(ByVal Name As String) As InnerStatement.ParameterList_Statement
            Dim Result As InnerStatement.ParameterList_Statement = Nothing
            If Name <> "" Then
                If IsNothing(Me.ParameterList) Then
                    Return Result
                    Exit Function
                End If
                For i = 0 To Me.ParameterList.Count - 1
                    If Me.ParameterList(i).Name = Name Then
                        Result = Me.ParameterList(i)
                        Exit For
                    End If
                Next
                If Not IsNothing(Result) Then
                    Me.ParameterList.Remove(Result)
                End If
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.04> <Function> [Convert]"
#Region "<05.04.00> <Function> <Convert> [Convert_ParameterToListViewItem()|ListViewItem]"
        Public Function Convert_ParameterToListViewItem(ByVal P As InnerStatement.ParameterList_Statement) As ListViewItem
            Dim Result As New ListViewItem(0)

            Dim Str As String = ""
            If P.Optional = True Then
                Str = "Optional ByVal"
            Else
                If P.ParamArray = True Then
                    Str = "ParamArray ByVal"
                Else
                    If P.ByRef = True Then
                        Str = "ByRef"
                    Else
                        Str = "ByVal"
                    End If
                End If
            End If
            Result.SubItems.Add(Str)
            Result.SubItems.Add(P.ParameterName)
            Result.SubItems.Add(P.ParameterType)
            Result.SubItems.Add(P.Definition)
            Result.SubItems.Add(P.DefaultValue)
            Result.Tag = P
            Return Result
        End Function
#End Region
#End Region
#Region "[On] |2019/06/10 18h10:847| <05.00.00> <Function> <> |.Detect_Property()|List(Of VbNet.[Property])}|"' (Set|Get) The Detect_Property as List(Of VbNet.[Property]).
        '''    <Summary>
        '''     (Set|Get) The Detect_Property as List(Of VbNet.[Property]).
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/10 18h10:856 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), Description("(Set|Get) The Detect_Property as List(Of VbNet.[Property]).")>
        Public Function Detect_Property() As List(Of VbNET.[Property])
            Dim Result As New List(Of VbNET.[Property])
            Dim Tx As New TextBox
            Tx.Text = Statement
            Dim Element As New VbNET.[Property]
            For Each Line As String In Tx.Lines
                If Line.Contains("Property") And Not Line.Contains("End Property") Then
                    'Assuring that Line has word "Property" and ensure it is not an end statement.
                    'So The line one has Property 
                    'Need to see test for accessModifiers
                    Dim ListOfWords As New List(Of String)
                    ListOfWords.AddRange(Split(Line, " ").ToArray)
                    Dim AccessModifier As String = ""
                    Dim PropertyModifier As String = ""
                    Dim PropertyName As String = ""
                    MsgBox(ListOfWords.ToArray)
                    Dim Word0 As String = ListOfWords(0)
                    Dim Word1 As String = ListOfWords(1)
                    If Word0.Contains("Property") Then
                        'No Access Modifier or Property Modifier
                        'Example of Format : Property PropertyName As PropertyReturnType
                        Element.AccessModifier = AccessModifiers.Nothing
                        Element.PropertyModifier = PropertyModifiers.Nothing
                        If Word1.Length > 0 Then
                            Element.Name = Word1
                            PropertyName = Word1
                        End If
                    ElseIf Word0.Contains("Shadows") Then
                        'Format -> Shadows Property [PropertyName]
                        Element.Shadows = True
                    ElseIf Word0.Contains("Shared") Then
                        'Format -> Shared Property [PropertyName]
                        Element.Shared = True
                    ElseIf Word0.Contains("Default") Then
                        'Format -> Default Property [PropertyName]
                        Element.Default = True
                    ElseIf Word0.Contains("ReadyOnly") Then
                        'Format -> ReadOnly Property [PropertyName]
                        Element.ReadOnly = True
                    ElseIf Word0.Contains("WriteOnly") Then
                        'Format -> WriteOnly Property [PropertyName]
                    ElseIf Word0 = "Public" Then
                        'Format -> Public  
                        Element.AccessModifier = AccessModifiers.[Public]
                        If Word1.Contains("Property") Then
                            'Format -> Public Property [PropertyName]  (3+P(n))    As  ReturnType
                            'Format ->   0       1          2          3           P(n)+1
                            PropertyName = ListOfWords(2)


                        Else




                        End If

                    ElseIf Word0 = "Private" Then
                        'Format -> Private  
                        Element.AccessModifier = AccessModifiers.[Private]
                    ElseIf Word0 = "Friend" Then
                        Element.AccessModifier = AccessModifiers.[Friend]
                    ElseIf Word0 = "Protected" And ListOfWords(1) = "Friend" Then
                        Element.AccessModifier = AccessModifiers.[Protected_Friend]
                    ElseIf Word0 = "Protected" Then
                        Element.AccessModifier = AccessModifiers.[Protected]
                    Else
                        Element.AccessModifier = AccessModifiers.[Nothing]
                        'No AccessModifier detected moving on to evaluate PropertyModifiers

                        If Word0.Contains("Overloads") Then
                            Element.PropertyModifier = PropertyModifiers.[Overloads]
                        ElseIf Word0.Contains("Overrides") Then
                            Element.PropertyModifier = PropertyModifiers.[Overrides]
                        ElseIf Word0.Contains("Overridable") Then
                            Element.PropertyModifier = PropertyModifiers.[Overridable]
                        ElseIf Word0.Contains("NotOverridable") Then
                            Element.PropertyModifier = PropertyModifiers.[NotOverridable]
                        ElseIf Word0.Contains("MustOverride") Then
                            Element.PropertyModifier = PropertyModifiers.[MustOverride]
                        ElseIf Word0.Contains("MustOverride") And ListOfWords(1) = "Overrides" Then
                            Element.PropertyModifier = PropertyModifiers.[MustOverride_Overrides]
                        ElseIf Word0.Contains("NotOverridable") And ListOfWords(1) = "Overrides" Then
                            Element.PropertyModifier = PropertyModifiers.[NotOverridable_Overrides]
                        Else
                            Element.PropertyModifier = PropertyModifiers.[Nothing]
                            'Here again no PropertyModifiers have been detected. By process of elimintation, 
                            'the last element left must be the name of the property.

                            If Word0.Length > 0 Then
                                Element.Name = Word0
                                PropertyName = Word0
                            End If
                        End If

                    End If

                End If

            Next

        End Function
#End Region '(Set|Get) The Detect_Property as List(Of VbNet.[Property]).

        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [Fill]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="PropertyName">Required. Name of the property. See Declared Element Names.</param>
        ''' <param name="PropertyType">Required if Option Strict is On. Data type of the value returned by this property.</param>
        ''' <param name="CategoryAttribute"></param>
        ''' <param name="ID">The Statement number</param>
        ''' <param name="DefaultValue">The Default Value</param>
        ''' <param name="MakeShared"></param>
        ''' <param name="MakeShadows"></param>
        ''' <param name="MakeWriteOnly"></param>
        ''' <param name="MakeReadOnly"></param>
        ''' <param name="MakeDefault"></param>
        ''' <param name="Property_AccessModifier"></param>
        ''' <param name="Property_PropertyModifier"></param>
        ''' <param name="VariableName"></param>
        ''' <param name="VariableType"></param>
        ''' <param name="Variable_AccessModifier"></param>
        ''' <param name="GetStatement"></param>
        ''' <param name="SetStatement"></param>
        ''' <param name="Browsable"></param>
        ''' <param name="Returns"></param>
        ''' <param name="Parameterlist"></param>
        ''' <param name="Enable"></param>
        ''' <param name="Description"></param>
        ''' <param name="Attributes"></param>
        ''' <param name="AuthorName"></param>
        ''' <param name="AuthorEmail"></param>
        ''' <param name="AuthorUrl"></param>
        ''' <param name="ContributorName"></param>
        ''' <param name="ContributorEmail"></param>
        ''' <param name="ContributorUrl"></param>
        ''' <param name="Usage"></param>
        ''' <param name="Remark"></param>
        ''' <param name="Example"></param>
        ''' <param name="Note"></param>
        ''' <param name="Published"></param>
        ''' <param name="Rights"></param>
        ''' <param name="Title"></param>
        ''' <param name="See"></param>
        ''' <param name="SeeAlso"></param>
        ''' <param name="Status"></param>
        ''' <param name="SituationLog"></param>
        ''' <param name="LogTime"></param>
        ''' <param name="Required">Indicates if this property is Required or Optional.</param>
        Public Sub New(ByVal PropertyName As String,
                       ByVal PropertyType As String,
                       ByVal CategoryAttribute As String,
              Optional ByVal Required As Boolean = True,
              Optional ByVal ID As Integer = 0,
              Optional ByVal DefaultValue As String = "",
              Optional ByVal MakeShared As Boolean = False,
              Optional ByVal MakeShadows As Boolean = False,
              Optional ByVal MakeWriteOnly As Boolean = False,
              Optional ByVal MakeReadOnly As Boolean = False,
              Optional ByVal MakeDefault As Boolean = False,
              Optional ByVal Property_AccessModifier As AccessModifiers = AccessModifiers.Public,
              Optional ByVal Property_PropertyModifier As PropertyModifiers = PropertyModifiers.Nothing,
              Optional ByVal VariableName As String = "",
              Optional ByVal VariableType As String = "",
              Optional ByVal Variable_AccessModifier As AccessModifiers = AccessModifiers.Private,
              Optional ByVal GetStatement As String = "",
              Optional ByVal SetStatement As String = "",
              Optional ByVal Browsable As Boolean = True,
              Optional ByVal Returns As String = "",
              Optional ByVal Parameterlist As List(Of InnerStatement.ParameterList_Statement) = Nothing,
              Optional ByVal Enable As Boolean = True,
              Optional ByVal Description As String = "",
              Optional ByVal Attributes As Attributelist = Nothing,
              Optional ByVal AuthorName As String = "",
              Optional ByVal AuthorEmail As String = "",
              Optional ByVal AuthorUrl As String = "",
              Optional ByVal ContributorName As String = "",
              Optional ByVal ContributorEmail As String = "",
              Optional ByVal ContributorUrl As String = "",
              Optional ByVal Usage As String = "",
              Optional ByVal Remark As String = "",
              Optional ByVal Example As String = "",
              Optional ByVal Note As String = "",
              Optional ByVal Published As String = "",
              Optional ByVal Rights As String = "",
              Optional ByVal Title As String = "",
              Optional ByVal See As String = "",
              Optional ByVal SeeAlso As String = "",
              Optional ByVal Status As Status = Status.Running,
              Optional ByVal SituationLog As String = "",
              Optional ByVal LogTime As Date = Nothing)
            Clear()
            Me.ImageIndex = 1
            Me.ReturnType = PropertyType
            Me.ID = ID
            Me.RegionCode = IIf(Val(Me.StatementFormat) < 10, "0" & Val(Me.StatementFormat), Val(Me.StatementFormat)) &
                       "." & IIf(Me.RegionCategory < 10, "0" & Me.RegionCategory, Me.RegionCategory) &
                       "." & IIf(Me.ID < 10, "0" & Me.ID, Me.ID)
            Me.See = See
            Me.SeeAlso = SeeAlso
            Me.Title = Title
            If IsNothing(LogTime) Then
                LogTime = New Date
                LogTime = Now
            End If
            Me.Updated(Status, SituationLog,, LogTime) = ""
            Me.Rights = Rights
            Me.Published = Published
            Me.Required = Required
            Me.GetStatement = GetStatement
            Me.SetStatement = SetStatement
            With Me
#Region "<Initialize ListOfString>"
                .Print_C = New List(Of String)
                .Print_F = New List(Of String)
                .Print_VB = New List(Of String)
                .Print_Python = New List(Of String)
#End Region
#Region "<Format Description>"
                If Description.Contains("(Set|Get)") Then
#Region "<WriteOnly>"
                    If MakeWriteOnly = True Then
                        .Description = "(Set) " & StringRange.Replace(Description, "(Set|Get)").ToString
                        MakeReadOnly = False
                    End If
#End Region
#Region "<ReadOnly>"
                    If MakeReadOnly = True Then
                        .Description = "(Get) " & StringRange.Replace(Description, "(Set|Get)").ToString
                        MakeWriteOnly = False
                    End If
#End Region
#Region "<Normal>"
                    If MakeReadOnly = False AndAlso MakeWriteOnly = False Then
                        .Description = Description
                    End If
#End Region
                Else
#Region "<WriteOnly>"
                    If MakeWriteOnly = True Then
                        .Description = "(Set) " & Description
                        MakeReadOnly = False
                    End If
#End Region
#Region "<ReadOnly>"
                    If MakeReadOnly = True Then
                        .Description = "(Get) " & Description
                        MakeWriteOnly = False
                    End If
#End Region
#Region "<Normal>"
                    If MakeReadOnly = False AndAlso MakeWriteOnly = False Then
                        .Description = "(Set|Get) " & Description
                    End If
#End Region
                End If
#End Region

#Region "<Initialize AccessModifier>"
                .AccessModifier = Property_AccessModifier
#End Region
#Region "<Initialize CategoryAttribute>"
                .Category = CategoryAttribute
#End Region
#Region "<Initialize Default>"
                .Default = MakeDefault
#End Region
#Region "<Enable?>"
                .Enable = True
#End Region
#Region "<Name>"
                .Name = PropertyName
#End Region
#Region "<PropertyModifier>"
                .PropertyModifier = Property_PropertyModifier
#End Region
#Region "<ReadOnly>"
                .ReadOnly = MakeReadOnly
#End Region
#Region "<Shadows>"
                .Shadows = MakeShadows
#End Region
#Region "<Shared>"
                .Shared = MakeShared
#End Region
#Region "<Initialize AttributeList>"
                Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)

#End Region
#Region "<Initialize Summary>"
                Me.ParameterList = New List(Of InnerStatement.ParameterList_Statement)
                Me.ParameterList = Parameterlist
                Dim ListParams As New List(Of Summary.Param)
                If Not IsNothing(Me.ParameterList) Then

                    If Me.ParameterList.Count - 1 >= 0 Then
                        For i = 0 To Me.ParameterList.Count - 1
                            Dim TP As New Summary.Param(Me.ParameterList(i).ParameterName, Me.ParameterList(i).Definition)
                            ListParams.Add(TP)
                        Next
                    End If
                End If
                Me.ContributorUri = ContributorUri
                Me.ContributorEmail = ContributorEmail
                Me.ContributorName = ContributorName
                Me.AuthorEmail = AuthorEmail
                Me.AuthorName = AuthorName
                Me.AuthorUri = AuthorUri
                Me.Usage = Usage
                Me.Example = Example
                Me.Note = Note
                Me.Remarks = Remarks
                Me.Usage = Usage
                Me.Rights = Rights
                Me.See = See
                Me.SeeAlso = SeeAlso
                Me.Title = Title
                Me.Published = Published
                If IsNothing(LogTime) Then
                    LogTime = New Date
                    LogTime = Now
                End If
                Me.Updated(Status, SituationLog,, LogTime) = ""
                .SummaryStatement = New Summary(Description,
                                           ListParams,
                                           Me.Remarks,
                                           PrintTime(),
                                           Rights,
                                           Me.Example,
                                           Me.Usage,
                                           Me.Note,
                                           See,
                                           SeeAlso,
                                           Title,
                                           Me.AuthorName,
                                           Me.AuthorEmail,
                                           Me.AuthorUri,
                                           Me.ContributorName,
                                           Me.ContributorEmail,
                                           Me.ContributorUri)

#End Region
#Region "<Store Caller in .Text>"
                .Text = .Name & " | " & .ReturnType '"Builder.VB.Property_Statement.Create()"
#End Region
#Region "<Initialize ReturnType>"
                .ReturnType = PropertyType
#End Region
#Region "<Initialize Variable>"
#Region "<Initialize Variable.ReturnType>"
                .Variable_ReturnType = IIf(VariableType = "", .ReturnType, VariableType)
#End Region
#Region "<Initialize Variable.Name>"
                .Variable_Name = IIf(VariableName = "", "_" & .Name, IIf(VariableName = .Name, "_" & .Name, VariableName))
#End Region
#Region "<Initialize Variable.AccessModifier>"
                .Variable_AccessModifier = Variable_AccessModifier
#End Region
#End Region
            End With

            ' PrintStatement(Me.Enable)

        End Sub
#End Region
#End Region
#Region "<9> [Constante]{1}"
#Region "<09.00> <Constante> [KeyWords]{12}"
        Public Const [Implement] As String = "Implements "
        '  Public Const [Shared] As String = "Shared "
        ' Public Const [Shadows] As String = "Shadows "
        ' Public Const [ReadOnly] As String = "ReadOnly "
        ' Public Const [WriteOnly] As String = "WriteOnly "
        Public Const [Property] As String = "Property "
        Public Const [Private] As String = "Private "
        Public Const [Get] As String = "Get "
        Public Const [Set] As String = "Set "
        Public Const [End_Property] As String = "End Property "
        Public Const [End_Get] As String = "End Get "
        Public Const [End_Set] As String = "End Set "
#End Region
#End Region
    End Class
#End Region
#Region "|08.00.02| <Class> <Statement> [Enumeration]"
    Public Class Enumeration
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]{5}"
#Region "|2019/04/12 13h55:386| <01.00.00> <Property> <Constructor> [Call=Attribute|AttributeList]"'(Set|Get) The attribute list of the enumeration.
        Private _Attribute As Attributelist
        ''' <Summary>
        ''' The attribute list of the enumeration.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 13h55:386 </Published>
        ''' <Updated>[Created=2019/04/12 13h55:386][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("The attribute list of the enumeration."),
Browsable(True)>
        Public Property Attribute() As Attributelist
            Get

                Return _Attribute
            End Get
            Set(ByVal Value As Attributelist)

                _Attribute = Value
            End Set
        End Property
#End Region ' (Set|Get) The attribute list of the enumeration.
#Region "|2019/04/12 13h53:798| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) The access modifier type.
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' The access modifier type.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 13h53:797 </Published>
        ''' <Updated>[Created=2019/04/12 13h53:797][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("The access modifier type."),
DefaultValue(AccessModifiers.Nothing),
Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get

                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)

                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) The access modifier type.
#Region "|2019/04/12 13h52:946| <01.00.02> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) Make the enumeration shadows.
        Private _Shadows As Boolean
        ''' <Summary>
        ''' Make the enumeration shadows.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 13h52:946 </Published>
        ''' <Updated>[Created=2019/04/12 13h52:946][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Make the enumeration shadows."),
DefaultValue(False),
Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get

                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)

                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) Make the enumeration shadows.
#Region "|2019/04/12 13h40:767| <01.00.03> <Property> <Constructor> [Call=DataType|String]"'(Set|Get) Optional. Data type of the enumeration and all its members.
        Private _DataType As String
        ''' <Summary>
        ''' Optional. Data type of the enumeration and all its members.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 13h40:767 </Published>
        ''' <Updated>[Created=2019/04/12 13h40:767][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''  <param name="Type"> The Enum statement can declare the data type of an enumeration. Each member takes the enumeration's data type. You can specify Byte, Integer, Long, SByte, Short, UInteger, ULong, or UShort. </param>

        <CategoryAttribute("Constructor"),
Description("Optional. Data type of the enumeration and all its members."),
Browsable(True)>
        Public Property DataType(Optional ByVal Type As DataTypeFormat = DataTypeFormat.Nothing) As String
            Get

                Return _DataType
            End Get
            Set(ByVal Value As String)
                If Not IsNothing(Type) Then
                    If Type = DataTypeFormat.Nothing Then
                    ElseIf Type = DataTypeFormat.Byte Then
                        Value = " As Byte"
                    ElseIf Type = DataTypeFormat.Integer Then
                        Value = " As Integer"
                    ElseIf Type = DataTypeFormat.Long Then
                        Value = " As Long"
                    ElseIf Type = DataTypeFormat.SByte Then
                        Value = " As SByte"
                    ElseIf Type = DataTypeFormat.Short Then
                        Value = " As Short"
                    ElseIf Type = DataTypeFormat.UInteger Then
                        Value = " As UInteger"
                    ElseIf Type = DataTypeFormat.ULong Then
                        Value = " As ULong"
                    ElseIf Type = DataTypeFormat.UShort Then
                        Value = " As UShort"
                    End If
                End If
                _DataType = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Data type of the enumeration and all its members.
#Region "|2019/04/12 10h47:608| <01.00.04> <Property> <Constructor> [Call=Members|List(Of Member)]"'(Set|Get) Required. List of member constants being declared in this statement. Multiple members appear on individual source code lines.
        Private _Members As List(Of Member)
        ''' <Summary>
        ''' Required. List of member constants being declared in this statement. Multiple members appear on individual source code lines.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 10h47:608 </Published>
        ''' <Updated>[Created=2019/04/12 10h47:607][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        <CategoryAttribute("Constructor"),
Description("Required. List of member constants being declared in this statement. Multiple members appear on individual source code lines."),
Browsable(True)>
        Public Property Members() As List(Of Member)
            Get

                Return _Members
            End Get
            Set(ByVal Value As List(Of Member))

                _Members = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. List of member constants being declared in this statement. Multiple members appear on individual source code lines.
#Region "|2019/04/12 11h04:969| <01.00.05> <Property> <Constructor> [Call=EnumerationName|String]"'(Set|Get) Required. Name of the enumeration. For information on valid names, see Declared Element Names.
        Private _EnumerationName As String
        ''' <Summary>
        ''' Required. Name of the enumeration. For information on valid names, see Declared Element Names.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 11h04:969 </Published>
        ''' <Updated>[Created=2019/04/12 11h04:969][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required. Name of the enumeration. For information on valid names, see Declared Element Names."),
Browsable(True)>
        Public Property EnumerationName() As String
            Get

                Return _EnumerationName
            End Get
            Set(ByVal Value As String)

                _EnumerationName = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Name of the enumeration. For information on valid names, see Declared Element Names.
#Region "|2019/04/12 16h17:059| <01.00.06> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) Optional. The summary of the Enumeration.
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' (Set|Get) Optional. The summary of the Enumeration.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 16h17:0059 </Published>
        ''' <Updated>[Created=2019/04/12 16h17:0059][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("(Set|Get) Optional. The summary of the Enumeration."),
Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get

                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)

                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. The summary of the Enumeration.

#End Region
#Region "|01.01| <Property> [Price]{4}"
#Region "[On] |2019/06/12 16h50:602| <01.00.00> <Property> <Info> |.Production_Cost()|Double|"' (Set|Get) The Production_Cost as Double.
        Private _Production_Cost As Double
        '''    <Summary>
        '''     (Set|Get) The Production_Cost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h50:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Production_Cost as Double.")>
        Property Production_Cost() As Double
            Get
                Return _Production_Cost
            End Get
            Set(ByVal Value As Double)
                _Production_Cost = Value
            End Set
        End Property
#End Region '(Set|Get) The Production_Cost as Double.
#Region "[On] |2019/06/12 16h51:619| <01.00.01> <Property> <Info> |.Quantity_Parameters()|Integer|"' (Set|Get) The Quantity_Parameters as Integer.
        Private _Quantity_Parameters As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Parameters as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h51:635 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Parameters as Integer.")>
        Property Quantity_Parameters() As Integer
            Get
                Return _Quantity_Parameters
            End Get
            Set(ByVal Value As Integer)
                Unit_Cost_Enumeration = My.Settings.Price_Enumeration
                Unit_Cost_Members = My.Settings.Price_Member
                If Value < 0 Then
                    Value = 0
                Else

                End If
                _Quantity_Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Parameters as Integer.
#Region "[On] |2019/06/12 16h55:025| <01.00.02> <Property> <Info> |.Unit_Cost_Enumeration()|Double|"' (Set|Get) The Unit_Cost_Enumeration as Double.
        Private _Unit_Cost_Enumeration As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Property as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:025 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Enumeration as Double.")>
        Property Unit_Cost_Enumeration() As Double
            Get
                Return _Unit_Cost_Enumeration
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Enumeration = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Enumeration as Double.
#Region "[On] |2019/06/12 16h55:615| <01.00.03> <Property> <Info> |.Unit_Cost_Members()|Double|"' (Set|Get) The Unit_Cost_Members as Double.
        Private _Unit_Cost_Members As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Members as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:635 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Members as Double.")>
        Property Unit_Cost_Members() As Double
            Get
                Return _Unit_Cost_Members
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Members = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Members as Double.
#End Region
#Region "|01.03| <Property> [Parent]{4}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h26:392| <01.03.01> <Property> <Parent> |.ParentStructure()|VbNET.Structure|"' (Set|Get) The ParentStructure as VbNET.Structure.
        Private _ParentStructure As VbNET.Structure
        '''    <Summary>
        '''     (Set|Get) The ParentStructure as VbNET.Structure.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h26:413 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentStructure as VbNET.Structure."), XmlIgnore>
        Property ParentStructure() As VbNET.Structure
            Get
                Return _ParentStructure
            End Get
            Set(ByVal Value As VbNET.Structure)
                _ParentStructure = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentStructure as VbNET.Structure.
#Region "[On] |2019/05/22 13h27:647| <01.03.02> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.03> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()

            With Me
                .Members = New List(Of Member)
                .EnumerationName = ""
                .AccessModifier = AccessModifiers.Public
                .DataType(DataTypeFormat.Nothing) = ""
                .DllImport = Nothing
                .ID = 0
                .ImageIndex = Format.Enumeration
                .JavaScript = ""
                .AccessModifier = AccessModifiers.Public
                .Name = ""
                .RegionCategory = 0
                .StatementFormat = Format.Enumeration
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." &
                        "." & IIf(.ID < 10, "0" & .ID, ID)
                .Updated(Status.Online, "The test is successful.",, Now) = ""

                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = "def "
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Enum "
                .VB_CloseStatement = "End Enum"
                .Python_OpenStatement = "def "
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""

                .AccessModifier = AccessModifiers.Public
                .Attribute = New Attributelist
                .DataType = ""
                .Members = New List(Of Member)
                .Shadows = False
                .SummaryStatement = New Summary

            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable|True])]"
        Public Sub PrintStatement(Optional ByVal Enable As Boolean = True)
            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            Me.Production_Cost = 0
            Me.Production_Cost += My.Settings.Price_Enumeration
            Me.Unit_Cost_Members = My.Settings.Price_Member
            Me.Unit_Cost_Enumeration = My.Settings.Price_Enumeration
            Me.Quantity_Parameters += Me.Members.Count
            Me.Production_Cost += Me.Quantity_Parameters * Me.Unit_Cost_Members
            With Me
                .RegionCode = IIf(.StatementFormat < 10, "0" & .StatementFormat, .StatementFormat) & "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." & IIf(.ID < 10, "0" & .ID, .ID)
            End With
            If Me.Description = "" Or IsNothing(Me.Description) Or Me.Description.Length < 1 Then
                Me.Description = "The enumeration of " & Me.Name & "."
            End If
            If Me.EnumerationName = "" Then
                Me.EnumerationName = Me.Name
            End If
#Region "<Format Description>"
            If Description.Contains("(Set|Get)") Then
            Else
                Me.Description = "(Set|Get) " & Me.Description
            End If
#End Region


            Me.Summary = Me.SummaryStatement.Print_VB
            Dim Parameters As String = ""
            Dim Params As New List(Of Summary.Param)
            If Not IsNothing(Me.Members) Then
                If Me.Members.Count - 1 > 0 Then
                    For i = 0 To Me.Members.Count - 1
                        Dim P As New VbNET.Enumeration.Member(Me.Members(i).MemberName, Me.Members(i).MemberValue, Me.Members(i).Description)
                    Next

                End If
            End If
            Me.SummaryStatement = New Summary(Me.Description, Params, Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage, Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)
            Me.SummaryStatement.Print()
            Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)


            'Create 
            If Me.Enable = True Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Enumeration> <" & Me.Category & "> |." & Me.Name & "()" & "|Enumeration{" & Me.Members.Count - 1 & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    "Enum " & Me.Name & IIf(Me.DataType <> "", " As " & Me.DataType, ""))
#End Region
#Region "<Print Members>"
                For i = 0 To Me.Members.Count - 1
                    Me.Print_VB.Add("''' <summary>" & Me.Members(i).Description & "</summary>")
                    Me.Print_VB.Add("   [" & Trim(Me.Members(i).MemberName) & "]" & IIf(Me.Members(i).MemberValue <> "", " = " & Me.Members(i).MemberValue, ""))
                Next
#End Region
                Me.Print_VB.Add("   End Enum")
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Enumeration> <" & Me.Category & "> |." & Me.Name & "()" & "|Enumeration{" & Me.Members.Count - 1 & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_C.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("    " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    "enum " & Me.Name)
                Me.Print_C.Add("   {")
#End Region
#Region "<Print Members>"
                For i = 0 To Me.Members.Count - 1
                    Me.Print_C.Add("        /// <summary>" & Me.Members(i).Description & "</summary>")
                    Me.Print_C.Add("        [" & Trim(Me.Members(i).MemberName) & "]" & IIf(Me.Members(i).MemberValue <> "", " = " & Me.Members(i).MemberValue, ","))
                Next
#End Region

                Me.Print_C.Add("   }")
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Enumeration> <" & Me.Category & "> |." & Me.Name & "()" & "|Enumeration{" & Me.Members.Count - 1 & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_JavaScript.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("    " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    "Enum " & Me.Name &
                                    "   {")
#End Region
#Region "<Print Members>"
                For i = 0 To Me.Members.Count - 1
                    Me.Print_JavaScript.Add("/// <summary>" & Me.Members(i).Description & "</summary>")
                    Me.Print_JavaScript.Add("   [" & Trim(Me.Members(i).MemberName) & "]" & IIf(Me.Members(i).MemberValue <> "", " = " & Me.Members(i).MemberValue, ""))
                Next
#End Region

                Me.Print_JavaScript.Add("   };")
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "()" & "|Enumeration{" & Me.Members.Count - 1 & "}|" & Space & "' " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add("    " & Me.SummaryStatement.Print_F)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("    Type " & Me.Name & " = ")
#End Region
#Region "<Print Members>"
                For i = 0 To Me.Members.Count - 2
                    Me.Print_F.Add("/// <summary>" & Me.Members(i).Description & "</summary>")
                    Me.Print_F.Add("|   [" & Trim(Me.Members(i).MemberName) & "]" & IIf(Me.Members(i).MemberValue <> "", " = " & Me.Members(i).MemberValue, ","))
                Next
                Me.Print_F.Add("/// <summary>" & Me.Members(Me.Members.Count - 1).Description & "</summary>")
                Me.Print_F.Add("|   [" & Trim(Me.Members(Me.Members.Count - 1).MemberName) & "]" & IIf(Me.Members(Me.Members.Count - 1).MemberValue <> "", " = " & Me.Members(Me.Members.Count - 1).MemberValue, "};"))
#End Region
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "()" & "|Enumeration{" & Me.Members.Count - 1 & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_Python.Add("    " & Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("    " & Me.Attribute.Python)
#End Region
#Region "<Members>"
                Dim Mem As String = ""
                For i = 0 To Me.Members.Count - 2
                    Mem += "    " & Space & Me.Members(i).MemberName & Space & ","
                Next
                Mem += Space & Me.Members(Me.Members.Count - 1).MemberName & Space & "]"
#End Region
#Region "<Caller>"
                Me.Print_Python.Add("    F_ " & Me.Name & " = [" & Mem)
#End Region
                Me.Print_Python.Add("    " & Me.Name & " = enumerate(F_" & Me.Name & ")")
                Me.Print_Python.Add("#endregion /" & Me.Description)
#End Region
#End Region

            ElseIf Me.Enable = False Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Enumeration> <" & Me.Category & "> |." & Me.Name & "()" & "|Enumeration{" & Me.Members.Count - 1 & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("'    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("'   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    "Enum " & Me.Name & IIf(Me.DataType <> "", " As " & Me.DataType, ""))
#End Region
#Region "<Print Members>"
                For i = 0 To Me.Members.Count - 1
                    Me.Print_VB.Add("''' <summary>" & Me.Members(i).Description & "</summary>")
                    Me.Print_VB.Add("'  [" & Trim(Me.Members(i).MemberName) & "]" & IIf(Me.Members(i).MemberValue <> "", " = " & Me.Members(i).MemberValue, ""))
                Next
#End Region
                Me.Print_VB.Add("'   End Enum")
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Enumeration> <" & Me.Category & "> |." & Me.Name & "()" & "|Enumeration{" & Me.Members.Count - 1 & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_C.Add("//    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("//    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("//    " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    "Enum " & Me.Name &
                                    "   {")
#End Region
#Region "<Print Members>"
                For i = 0 To Me.Members.Count - 1
                    Me.Print_C.Add("/// <summary>" & Me.Members(i).Description & "</summary>")
                    Me.Print_C.Add("//   [" & Trim(Me.Members(i).MemberName) & "]" & IIf(Me.Members(i).MemberValue <> "", " = " & Me.Members(i).MemberValue, ""))
                Next
#End Region

                Me.Print_C.Add("//   };")
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Enumeration> <" & Me.Category & "> |." & Me.Name & "()" & "|Enumeration{" & Me.Members.Count - 1 & "}|" & Space & "' " & Me.Description)
                Me.Print_JavaScript.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("//    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("//    " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    "Enum " & Me.Name &
                                    "   {")
#End Region
#Region "<Print Members>"
                For i = 0 To Me.Members.Count - 1
                    Me.Print_JavaScript.Add("/// <summary>" & Me.Members(i).Description & "</summary>")
                    Me.Print_JavaScript.Add("//   [" & Trim(Me.Members(i).MemberName) & "]" & IIf(Me.Members(i).MemberValue <> "", " = " & Me.Members(i).MemberValue, ""))
                Next
#End Region

                Me.Print_JavaScript.Add("//   };")
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "()" & "|Enumeration{" & Me.Members.Count - 1 & "}|" & Space & "' " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add("    " & Me.SummaryStatement.Print_F)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("//    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("//    Type " & Me.Name & " = ")
#End Region
#Region "<Print Members>"
                For i = 0 To Me.Members.Count - 2
                    Me.Print_F.Add("/// <summary>" & Me.Members(i).Description & "</summary>")
                    Me.Print_F.Add("//|   [" & Trim(Me.Members(i).MemberName) & "]" & IIf(Me.Members(i).MemberValue <> "", " = " & Me.Members(i).MemberValue, ","))
                Next
                Me.Print_F.Add("/// <summary>" & Me.Members(Me.Members.Count - 1).Description & "</summary>")
                Me.Print_F.Add("//|   [" & Trim(Me.Members(Me.Members.Count - 1).MemberName) & "]" & IIf(Me.Members(Me.Members.Count - 1).MemberValue <> "", " = " & Me.Members(Me.Members.Count - 1).MemberValue, "};"))
#End Region
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Property> <" & Me.Category & "> |." & Me.Name & "()" & "|Enumeration{" & Me.Members.Count - 1 & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_Python.Add("    " & Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("//    " & Me.Attribute.Python)
#End Region
#Region "<Members>"
                Dim Mem As String = ""
                For i = 0 To Me.Members.Count - 2
                    Mem += "//    " & Space & Me.Members(i).MemberName & Space & ","
                Next
                Mem += Space & Me.Members(Me.Members.Count - 1).MemberName & Space & "]"
#End Region
#Region "<Caller>"
                Me.Print_Python.Add("//    F_ " & Me.Name & " = [" & Mem)
#End Region
                Me.Print_Python.Add("//    " & Me.Name & " = enumerate(F_" & Me.Name & ")")
                Me.Print_Python.Add("#endregion /" & Me.Description)
#End Region
#End Region
            End If

            Me.VB = ""
            Me.C = ""
            Me.Python = ""
            Me.JavaScript = ""
            Me.F = ""
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next



        End Sub
#End Region
#Region "<04.01.01> <Sub> <Print> [PrintStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]]"
        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub
#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Enumeration]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Enumeration\" & Statement.Name & ".Enumeration"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Enumeration") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Enumeration")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As Enumeration,
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Enumeration"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Enumeration"
                        FilePath = My.Application.Info.DirectoryPath & "\Enumeration\" & Statement.Name & ".Enumeration"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As Enumeration
            Dim Result As New Enumeration
            Dim Serializer As New XmlSerializer(GetType(Enumeration))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type Enumeration.")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.Enumeration
                    Temp = VbNET.Enumeration.Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri

                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .DataType = Temp.DataType
                        .DefaultValue = Temp.DefaultValue
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .EnumerationName = Temp.EnumerationName
                        .Example = Temp.Example

                        .F = Temp.F

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex

                        .JavaScript = Temp.JavaScript

                        .Members = Temp.Members

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .Params = Temp.Params
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Summary = Temp.Summary
                        .SummaryStatement = Temp.SummaryStatement

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .Variables = Temp.Variables
                        .VB = Temp.VB

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot

                    End With
                    Result.Output = New VbNET.Enumeration(Temp.Name, Temp.Members, Temp.DataType, Temp.AccessModifier, Temp.Shadows, Temp.Category, Temp.ID, Temp.DefaultValue, Temp.RegionCategory, Temp.AuthorName, Temp.AuthorEmail, Temp.AuthorUri,
                        Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Browsable, Temp.Enable, Temp.CustomProperty, Temp.DllImport, Temp.Remarks, Temp.Usage, Temp.Example, Temp.Note,, Temp.Rights, Temp.See, Temp.SeeAlso)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Enumeration.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        Public Sub New(ByVal Name As String)
            Clear()

            With Me
                .Name = Name
            End With

        End Sub
#End Region
#Region "<06.02> <Loader> [New(Name|String)]"
        ''' <summary>
        ''' Creation of enumeration with all options.
        ''' </summary>
        ''' <param name="Name">Required. Name of the enumeration. For information on valid names, see Declared Element Names.</param>
        ''' <param name="Members">Required. List of member constants being declared in this statement. Multiple members appear on individual source code lines.</param>
        ''' <param name="DataType">Optional. Data type of the enumeration and all its members. 
        ''' The Enum statement can declare the data type of an enumeration. Each member takes the enumeration's data type. You can specify Byte, Integer, Long, SByte, Short, UInteger, ULong, or UShort.
        ''' If you Do Not specify datatype For the enumeration, Each member takes the data type Of its initializer. If you specify both datatype And initializer, the data type Of initializer must be convertible To datatype. If neither datatype nor initializer Is present, the data type defaults To Integer.
        ''' </param>
        ''' <param name="AccessModifier">Optional. Specifies what code can access this enumeration. Can be one of the following:Public/Protected/Friend/Private/Protected Friend/Private Protected</param>
        ''' <param name="MakeShadows">Optional. Specifies that this enumeration redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can specify Shadows only on the enumeration itself, not on any of its members.</param>
        ''' <param name="CategoryAttribute">The category attribute Name.</param>
        ''' <param name="ID">The statement number for indexation.</param>
        ''' <param name="DefaultValue">The default member value to be expressed as : [EnumerationName].[MemberName].</param>
        ''' <param name="CategoryId">The CategoryId of the Attribute name for indexation.</param>
        ''' <param name="Author">The Author name.</param>
        ''' <param name="AuthorEmail">The Author Email.</param>
        ''' <param name="AuthorUrl">The Author Url.</param>
        ''' <param name="ContributorName">The Contributor Name.</param>
        ''' <param name="ContributorEmail">The Contributor Email.</param>
        ''' <param name="ContributorUrl">The Contributor Url.</param>
        ''' <param name="Browsable">Defines if the Enumeration will appear in the attributeList.</param>
        ''' <param name="Enable">Activate or deactivate the statement, leaving intact comments and regions area.</param>
        ''' <param name="CustomProperty">For attribute, set the CustomProperty event.</param>
        ''' <param name="DllImport">For attribute, set the DllImport event.</param>
        ''' <param name="Remarks">For Summary.</param>
        ''' <param name="Usage">For Summary.</param>
        ''' <param name="Example">For Summary.</param>
        ''' <param name="Note">For Summary.</param>
        ''' <param name="Rules">For Summary.</param>
        ''' <param name="Rights">For Summary.</param>
        ''' <param name="See">For Summary. Reference of url or object</param>
        ''' <param name="SeeAlso">For Summary. Reference of url or object</param>
        ''' <param name="Status">For Summary.</param>
        ''' <param name="SituationLog">Information about the control</param>
        ''' <param name="LogTime">Insert time of modification.</param>
        Public Sub New(ByVal Name As String,
                           ByVal Members As List(Of Member),
                  Optional ByVal DataType As DataTypeFormat = DataTypeFormat.Nothing,
                  Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Nothing,
                  Optional ByVal MakeShadows As Boolean = False,
                  Optional ByVal CategoryAttribute As String = "",
                  Optional ByVal ID As Integer = 0,
                  Optional ByVal DefaultValue As String = "",
                  Optional ByVal CategoryId As Integer = 0,
                  Optional ByVal Author As String = "",
                  Optional ByVal AuthorEmail As String = "",
                  Optional ByVal AuthorUrl As String = "",
                  Optional ByVal ContributorName As String = "",
                  Optional ByVal ContributorEmail As String = "",
                  Optional ByVal ContributorUrl As String = "",
                  Optional ByVal Browsable As Boolean = True,
                  Optional ByVal Enable As Boolean = True,
                  Optional ByVal CustomProperty As String = "",
                  Optional ByVal DllImport As String = "",
                  Optional ByVal Remarks As String = "",
                  Optional ByVal Usage As String = "",
                  Optional ByVal Example As String = "",
                  Optional ByVal Note As String = "",
                  Optional ByVal Rules As String = "",
                  Optional ByVal Rights As String = "",
                  Optional ByVal See As String = "",
                  Optional ByVal SeeAlso As String = "",
              Optional ByVal Status As Status = Status.Running,
              Optional ByVal SituationLog As String = "",
              Optional ByVal LogTime As Date = Nothing)
            Clear()

            With Me
                .AuthorName = Author
                .AuthorEmail = AuthorEmail
                .AuthorUri = AuthorUrl
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUrl
                .Name = Name
                .AccessModifier = AccessModifier
                .Members = New List(Of Member)
                .Members = Members
                .Shadows = MakeShadows
                .Category = CategoryAttribute
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUrl
                .CustomProperty = CustomProperty
                .DataType(DataType) = ""
                .DefaultValue = DefaultValue
                .Remarks = Remarks
                .Rights = Rights
                .See = See
                .SeeAlso = SeeAlso
                .Status = Status
                .Summary = Description
                .DllImport = DllImport
                .Enable = Enable
                .EnumerationName = Name
                .Note = Note
                .Params = New List(Of Summary.Param)
                .RegionCategory = RegionCategory
                .StatementFormat = Format.Enumeration
                .SummaryStatement = New Summary(.Description,, .Remarks, .Published, .Rights, .Example, .Usage, .Note, .See, .SeeAlso, .Title, .AuthorName, .AuthorEmail, .AuthorUri, .ContributorName, .ContributorEmail, .ContributorUri, .Rules, .Syntax)
                .RegionCode = IIf(.StatementFormat < 10, "0" & .StatementFormat, .StatementFormat) & "." &
                                IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." &
                                IIf(.ID < 10, "0" & .ID, .ID)
                .ID = ID
            End With

        End Sub
#End Region
#End Region
#Region "<8> [Class]"
#Region "<08.00> <Class> [Member]"
        Public Class Member
#Region "<1> [Property]"
#Region "<01.00> <Property> [Info]"
#Region "|2019/04/12 01h11:022| <01.00.00> <Property> <Constructor> [Call=MemberName()|String]"'(Set|Get) Required. Name of this member.
            Private _MemberName As String
            ''' <Summary>
            ''' Required. Name of this member.
            ''' </Summary>
            ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
            ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
            ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 01h11:0022 </Published>
            ''' <Updated>[Created=2019/04/12 01h11:0020][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

            <CategoryAttribute("Constructor"),
Description("Required. Name of this member."),
Browsable(True)>
            Public Property MemberName() As String
                Get

                    Return _MemberName
                End Get
                Set(ByVal Value As String)

                    _MemberName = Value
                End Set
            End Property
#End Region ' (Set|Get) Required. Name of this member.
#Region "|2019/04/12 13h28:186| <01.00.01> <Property> <Constructor> [Call=Description|String]"'(Set|Get) Add a comment to describe the enumerated object.
            Private _Description As String
            ''' <Summary>
            ''' Add a comment to describe the enumerated object.
            ''' </Summary>
            ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
            ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
            ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 13h28:185 </Published>
            ''' <Updated>[Created=2019/04/12 13h28:185][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

            <CategoryAttribute("Constructor"),
Description("Add a comment to describe the enumerated object."),
Browsable(True)>
            Public Property Description() As String
                Get

                    Return _Description
                End Get
                Set(ByVal Value As String)

                    _Description = Value
                End Set
            End Property
#End Region ' (Set|Get) Add a comment to describe the enumerated object.
#Region "|2019/04/12 15h39:290| <01.00.02> <Property> <Info> [Call=MemberValue|String]"'(Set|Get) Optional. The value of the member.
            Private _MemberValue As String
            ''' <Summary>
            ''' (Set|Get) Optional. The value of the member.
            ''' </Summary>
            ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
            ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
            ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 15h39:290 </Published>
            ''' <Updated>[Created=2019/04/12 15h39:290][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

            <CategoryAttribute("Info"),
Description("(Set|Get) Optional. The value of the member."),
Browsable(True)>
            Public Property MemberValue() As String
                Get

                    Return _MemberValue
                End Get
                Set(ByVal Value As String)

                    _MemberValue = Value
                End Set
            End Property
#End Region ' (Set|Get) Optional. The value of the member.
#End Region
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
            Public Sub New()
                With Me
                    .MemberName = "Nothing"
                End With
            End Sub
#End Region
#Region "<06.01> <Loader> [Filled]"
            Public Sub New(ByVal Name As String,
                      Optional ByVal Initializer As String = "",
                      Optional ByVal Description As String = "")
                With Me
                    .MemberValue = Initializer
                    .MemberName = Name
                    .Description = Description
                End With
            End Sub
#End Region
#End Region
            Public Overrides Function ToString() As String
                Return Me.MemberName
            End Function
        End Class
#End Region
#End Region
    End Class
#End Region
#Region "|08.00.03| <Class> <Statement> [Structure]"
    ''' <summary>
    ''' https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/structure-statement
    ''' </summary>
    Public Class [Structure]
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]{5}"
#Region "|2019/04/12 13h55:386| <01.00.00> <Property> <Constructor> [Call=Attribute|AttributeList]"'(Set|Get) The attribute list of the enumeration.
        Private _Attribute As Attributelist
        ''' <Summary>
        ''' The attribute list of the enumeration.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 13h55:386 </Published>
        ''' <Updated>[Created=2019/04/12 13h55:386][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("The attribute list of the enumeration."),
Browsable(True)>
        Public Property Attribute() As Attributelist
            Get

                Return _Attribute
            End Get
            Set(ByVal Value As Attributelist)

                _Attribute = Value
            End Set
        End Property
#End Region ' (Set|Get) The attribute list of the enumeration.
#Region "|2019/04/12 13h53:798| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) The access modifier type.
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' The access modifier type.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 13h53:797 </Published>
        ''' <Updated>[Created=2019/04/12 13h53:797][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("The access modifier type."),
DefaultValue(AccessModifiers.Nothing),
Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get

                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)

                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) The access modifier type.
#Region "|2019/04/12 13h52:946| <01.00.02> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) Make the enumeration shadows.
        Private _Shadows As Boolean
        ''' <Summary>
        ''' Make the enumeration shadows.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 13h52:946 </Published>
        ''' <Updated>[Created=2019/04/12 13h52:946][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Make the enumeration shadows."),
DefaultValue(False),
Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get

                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)

                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) Make the enumeration shadows.
#Region "|2019/04/12 16h57:213| <01.00.03> <Property> <Constructor> [Call=Partial|Boolean]"'(Set|Get) Optional. Indicates a partial Description of the structure. See Partial.
        Private _Partial As Boolean
        ''' <Summary>
        ''' Optional. Indicates a partial Description of the structure. See Partial.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 16h57:213 </Published>
        ''' <Updated>[Created=2019/04/12 16h57:206][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Indicates a partial Description of the structure. See Partial."),
Browsable(True)>
        Public Property [Partial]() As Boolean
            Get
                Return _Partial
            End Get
            Set(ByVal Value As Boolean)
                _Partial = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates a partial Description of the structure. See Partial.
#Region "|2019/04/13 15h29:161| <01.00.04> <Property> <Constructor> [Call=Typelist |String]"'(Set|Get) Required if you use the Of keyword. List of type parameters for this structure. See Type List.
        Private _Typelist As String
        ''' <Summary>
        ''' Required if you use the Of keyword. List of type parameters for this structure. See Type List.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 15h29:161 </Published>
        ''' <Updated>[Created=2019/04/13 15h29:161][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required if you use the Of keyword. List of type parameters for this structure. See Type List."),
Browsable(True)>
        Public Property Typelist() As String
            Get
                Return _Typelist
            End Get
            Set(ByVal Value As String)
                _Typelist = Value
            End Set
        End Property
#End Region ' (Set|Get) Required if you use the Of keyword. List of type parameters for this structure. See Type List.
#Region "|2019/04/12 16h17:059| <01.00.05> <Property> <Constructor> [Call=StructureName|String]"'(Set|Get) Optional. The Name of the Structure.
        Private _StructureName As String
        ''' <String>
        ''' (Set|Get) Required. The Name of the Structure.
        ''' </String>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 16h17:0059 </Published>
        ''' <Updated>[Created=2019/04/12 16h17:0059][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("(Set|Get) Required. The Name of the Structure."),
Browsable(True)>
        Public Property StructureName() As String
            Get

                Return _StructureName
            End Get
            Set(ByVal Value As String)

                _StructureName = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. The Name of the Structure.
#Region "|2019/04/12 16h17:059| <01.00.06> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) Optional. The summary of the Structure.
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' (Set|Get) Optional. The summary of the Structure.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 16h17:0059 </Published>
        ''' <Updated>[Created=2019/04/12 16h17:0059][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("(Set|Get) Optional. The summary of the Structure."),
Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get

                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)

                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. The summary of the Structure.
#Region "|2019/05/18 00h26:595| <01.00.07> <Property> <Constructor> [Call=Implements|String]"'(Set|Get) the Implements as String
        Private _Implements As String
        ''' <Summary>
        ''' (Set|Get) the Implements as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/18 00h26:595 </Published>
        ''' <Updated>[Created=2019/05/18 00h26:595][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Implements as String"), Browsable(True)>
        Public Property [Implements]() As String
            Get
                Return _Implements
            End Get
            Set(ByVal Value As String)
                Value = "Implements " & Value
                _Implements = Value
            End Set
        End Property
#End Region ' (Set|Get) the Implements as String

#End Region
#Region "<01.01> <Property> [List]{6}"
#Region "|2019/04/18 16h43:894| <01.01.00> <Property> <List> [Call=Enumeration|List(Of VbNET.Enumeration )]"'(Set|Get) the Enumeration as List(Of VB.Enumerate )
        Private _Enumeration As List(Of VbNET.Enumeration)
        ''' <Summary>
        ''' (Set|Get) the Enumeration as List(Of VB.Enumerate )
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/18 16h43:894 </Published>
        ''' <Updated>[Created=2019/04/18 16h43:887][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("List"), Description("(Set|Get) the Enumeration as List(Of VB.Enumeration )"), Browsable(True)>
        Public Property Enumeration() As List(Of VbNET.Enumeration)
            Get
                Return _Enumeration
            End Get
            Set(ByVal Value As List(Of VbNET.Enumeration))
                _Enumeration = Value
            End Set
        End Property
#End Region ' (Set|Get) the Enumeration as List(Of VBNET.Enumerate )
#Region "|2019/04/18 16h45:063| <01.01.01> <Property> <List> [Call=Event|List(Of VBNET.Event )]"'(Set|Get) the Event as List(Of VBNET.Event )
        Private _Event As List(Of VbNET.Event)
        ''' <Summary>
        ''' (Set|Get) the Event as List(Of VBNET.Event )
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/18 16h45:063 </Published>
        ''' <Updated>[Created=2019/04/18 16h45:063][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("List"), Description("(Set|Get) the Event as List(Of VBNET.Event )"), Browsable(True)>
        Public Property [Event]() As List(Of VbNET.Event)
            Get
                Return _Event
            End Get
            Set(ByVal Value As List(Of VbNET.Event))
                _Event = Value
            End Set
        End Property
#End Region ' (Set|Get) the Event as List(Of VBNET.Event )
#Region "|2019/04/18 16h45:856| <01.01.02> <Property> <List> [Call=Sub|List(Of VBNET.Sub )]"'(Set|Get) the Sub as List(Of VBNET.Sub )
        Private _Sub As List(Of VbNET.Sub)
        ''' <Summary>
        ''' (Set|Get) the Sub as List(Of VBNET.Sub )
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/18 16h45:856 </Published>
        ''' <Updated>[Created=2019/04/18 16h45:856][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("List"), Description("(Set|Get) the Sub as List(Of VBNET.Sub )"), Browsable(True)>
        Public Property [Sub]() As List(Of VbNET.Sub)
            Get
                Return _Sub
            End Get
            Set(ByVal Value As List(Of VbNET.Sub))
                _Sub = Value
            End Set
        End Property
#End Region ' (Set|Get) the Sub as List(Of VBNET.Sub )
#Region "|2019/04/18 16h46:159| <01.01.03> <Property> <List> [Call=Function|List(Of VBNET.Function )]"'(Set|Get) the Function as List(Of VBNET.Function )
        Private _Function As List(Of VbNET.Function)
        ''' <Summary>
        ''' (Set|Get) the Function as List(Of VBNET.Function )
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/18 16h46:159 </Published>
        ''' <Updated>[Created=2019/04/18 16h46:159][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("List"), Description("(Set|Get) the Function as List(Of VBNET.Function )"), Browsable(True)>
        Public Property [Function]() As List(Of VbNET.Function)
            Get
                Return _Function
            End Get
            Set(ByVal Value As List(Of VbNET.Function))
                _Function = Value
            End Set
        End Property
#End Region ' (Set|Get) the Function as List(Of VBNET.Function )
#Region "|2019/04/18 16h47:337| <01.01.04> <Property> <List> [Call=Property|List(Of VBNET.Property )]"'(Set|Get) the Property as List(Of VBNET.Property )
        Private _Property As List(Of VbNET.Property)
        ''' <Summary>
        ''' (Set|Get) the Property as List(Of VBNET.Property )
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/18 16h47:337 </Published>
        ''' <Updated>[Created=2019/04/18 16h47:337][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("List"), Description("(Set|Get) the Property as List(Of VBNET.Property )"), Browsable(True)>
        Public Property [Property]() As List(Of VbNET.Property)
            Get
                Return _Property
            End Get
            Set(ByVal Value As List(Of VbNET.Property))
                _Property = Value
            End Set
        End Property
#End Region ' (Set|Get) the Property as List(Of VBNET.Property )
#Region "|2019/05/08 00h33:096| <01.01.05> <Property> <List> [Call=Runtime|List(Of VbNET.Runtime)]"'(Set|Get) the Runtime as List(Of VbNET.Runtime)
        Private _Runtime As List(Of VbNET.Runtime)
        ''' <Summary>
        ''' (Set|Get) the Runtime as List(Of VbNET.Runtime)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/08 00h33:096 </Published>
        ''' <Updated>[Created=2019/05/08 00h33:096][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("List"), Description("(Set|Get) the Runtime as List(Of VbNET.Runtime)"), Browsable(True)>
        Public Property Runtime() As List(Of VbNET.Runtime)
            Get
                Return _Runtime
            End Get
            Set(ByVal Value As List(Of VbNET.Runtime))
                _Runtime = Value
            End Set
        End Property
#End Region ' (Set|Get) the Runtime as List(Of VbNET.Runtime)

#End Region
#Region "|01.03| <Property> [Parent]{3}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h27:647| <01.03.01> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.02> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.
#End Region
#Region "|01.01| <Property> [Price]{4}"
#Region "[On] |2019/06/12 16h50:602| <01.00.00> <Property> <Info> |.Production_Cost()|Double|"' (Set|Get) The Production_Cost as Double.
        Private _Production_Cost As Double
        '''    <Summary>
        '''     (Set|Get) The Production_Cost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h50:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Production_Cost as Double.")>
        Property Production_Cost() As Double
            Get
                Return _Production_Cost
            End Get
            Set(ByVal Value As Double)
                _Production_Cost = Value
            End Set
        End Property
#End Region '(Set|Get) The Production_Cost as Double.
#Region "[On] |2019/06/12 16h55:025| <01.00.02> <Property> <Info> |.Unit_Cost_Structure()|Double|"' (Set|Get) The Unit_Cost_Structure as Double.
        Private _Unit_Cost_Structure As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Structure as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:025 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Structure as Double.")>
        Property Unit_Cost_Structure() As Double
            Get
                Return _Unit_Cost_Structure
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Structure = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Structure as Double.
#Region "[On] |2019/06/12 17h16:550| <01.00.03> <Property> <Info> |.Quantity_Property()|Integer|"' (Set|Get) The Quantity_Property as Integer.
        Private _Quantity_Property As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Property as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 17h16:572 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Property as Integer.")>
        Property Quantity_Property() As Integer
            Get
                Return _Quantity_Property
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Property = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Property as Integer.
#Region "[On] |2019/06/12 17h17:224| <01.00.04> <Property> <Info> |.Quantity_Enumeration()|Integer|"' (Set|Get) The Quantity_Enumeration as Integer.
        Private _Quantity_Enumeration As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Enumeration as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 17h17:231 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Enumeration as Integer.")>
        Property Quantity_Enumeration() As Integer
            Get
                Return _Quantity_Enumeration
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Enumeration = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Enumeration as Integer.
#Region "[On] |2019/06/12 17h17:031| <01.00.05> <Property> <Info> |.Quantity_Sub()|Integer|"' (Set|Get) The Quantity_Sub as Integer.
        Private _Quantity_Sub As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Sub as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 17h17:039 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Sub as Integer.")>
        Property Quantity_Sub() As Integer
            Get
                Return _Quantity_Sub
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Sub = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Sub as Integer.
#Region "[On] |2019/06/12 17h17:151| <01.00.06> <Property> <Info> |.Quantity_Function()|Integer|"' (Set|Get) The Quantity_Function as Integer.
        Private _Quantity_Function As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Function as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 17h17:155 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Function as Integer.")>
        Property Quantity_Function() As Integer
            Get
                Return _Quantity_Function
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Function = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Function as Integer.
#Region "[On] |2019/06/12 17h17:723| <01.00.07> <Property> <Info> |.Quantity_Runtime()|Integer|"' (Set|Get) The Quantity_Runtime as Integer.
        Private _Quantity_Runtime As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Runtime as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 17h17:723 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Runtime as Integer.")>
        Property Quantity_Runtime() As Integer
            Get
                Return _Quantity_Runtime
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Runtime = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Runtime as Integer.
#Region "[On] |2019/06/12 17h18:135| <01.00.08> <Property> <Info> |.Quantity_Event()|Integer|"' (Set|Get) The Quantity_Event as Integer.
        Private _Quantity_Event As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Event as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 17h18:135 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Event as Integer.")>
        Property Quantity_Event() As Integer
            Get
                Return _Quantity_Event
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Event = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Event as Integer.


#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()
            With Me
                .AccessModifier = AccessModifiers.Public
                .Enumeration = New List(Of Enumeration)
                .Event = New List(Of [Event])
                .Function = New List(Of [Function])
                .Name = ""
                .Partial = False
                .Property = New List(Of [Property])
                .Shadows = False
                .StructureName = ""
                .Sub = New List(Of [Sub])
                .SummaryStatement = New Summary
                .Typelist = ""
                .Runtime = New List(Of Runtime)


                .RegionCategory = 0
                .StatementFormat = Format.[Structure]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                    IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." &
                        "." & IIf(.ID < 10, "0" & .ID, ID)
                .Updated(Status.Online, "The test is successful.",, Now) = ""


                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = "def "
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Structure "
                .VB_CloseStatement = "End Structure"
                .Python_OpenStatement = "def "
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable]|Boolean(True))]"
        ''' <summary>
        ''' Print the statement
        ''' </summary>
        ''' <param name="Enable">This parameter will overide the Me.Enable Property! ByDefault is set on True.</param>
        Public Function PrintStatement(Optional ByVal Enable As Boolean = True) As TestItem
            Dim Result As New TestItem("Printing Module", "Printing a Module Statement")

            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            Me.Production_Cost = 0
            Me.Unit_Cost_Structure = My.Settings.Price_Structure
            Me.Production_Cost += Me.Unit_Cost_Structure

            Me.Quantity_Property = Me.Property.Count
            Me.Quantity_Sub = Me.Sub.Count
            Me.Quantity_Enumeration = Me.Enumeration.Count
            Me.Quantity_Runtime = Me.Runtime.Count
            Me.Quantity_Event = Me.Event.Count
            Me.Quantity_Function = Me.Function.Count
            For Each P As VbNET.Property In Me.Property
                P.PrintStatement(True)
                Me.Production_Cost += P.Production_Cost
            Next
            For Each P As VbNET.Enumeration In Me.Enumeration
                P.PrintStatement(True)
                Me.Production_Cost += P.Production_Cost
            Next
            For Each P As VbNET.Sub In Me.Sub
                P.PrintStatement(True)
                Me.Production_Cost += P.Production_Cost
            Next
            For Each P As VbNET.Function In Me.Function
                P.PrintStatement(True)
                Me.Production_Cost += P.Production_Cost
            Next
            For Each P As VbNET.Event In Me.Event
                P.PrintStatement(True)
                Me.Production_Cost += P.Production_Cost
            Next
            If Me.Enable = True Then
            Else
            End If
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next
            Dim O_VB As New Input_Parameters("VbNET", "String", Me.VB)
            Dim O_C As New Input_Parameters("C#", "String", Me.C)
            Dim O_F As New Input_Parameters("F#", "String", Me.F)
            Dim O_Python As New Input_Parameters("Python", "String", Me.Python)
            Dim O_JavaScript As New Input_Parameters("JavaScript", "String", Me.JavaScript)
            Result.AddOutputParam("VbNET", "String", Me.VB)
            Result.AddOutputParam("C#", "String", Me.C)
            Result.AddOutputParam("F#", "String", Me.F)
            Result.AddOutputParam("Python", "String", Me.Python)
            Result.AddOutputParam("JavaScript", "String", Me.JavaScript)
            Return Result
        End Function
#End Region
#Region "<04.01.01> <Sub> <Print> [PrinStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]|Boolean(True))]"

        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub

#End Region
#End Region
#Region "<04.02> <Sub> [Add]"
#Region "<04.02.01> <Sub> <Add> [Add_Property(Statement|VbNET.Property)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Property(ByVal Statement As VbNET.Property)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Property) Then
                    Me.Property = New List(Of VbNET.Property)
                End If
                For Each S As VbNET.Property In Me.Property
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.ID = Me.Property.Count
                    Me.Property.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 1
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine
                End If
            End If
        End Sub
#End Region
#Region "<04.02.02> <Sub> <Add> [Add_Enumeration(Statement|VbNET.Enumeration)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Enumeration(ByVal Statement As VbNET.Enumeration)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Enumeration) Then
                    Me.Enumeration = New List(Of VbNET.Enumeration)
                End If
                For Each S As VbNET.Enumeration In Me.Enumeration
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.ID = Me.Enumeration.Count
                    Me.Enumeration.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 2
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine
                End If
            End If
        End Sub
#End Region
#Region "<04.02.04> <Sub> <Add> [Add_Sub(Statement|VbNET.Sub)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Sub(ByVal Statement As VbNET.Sub)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Sub) Then
                    Me.Sub = New List(Of VbNET.Sub)
                End If
                For Each S As VbNET.Sub In Me.Sub
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.ID = Me.Sub.Count
                    Me.Sub.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 4
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine
                End If
            End If
        End Sub
#End Region
#Region "<04.02.05> <Sub> <Add> [Add_Function(Statement|VbNET.Function)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Function(ByVal Statement As VbNET.Function)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Function) Then
                    Me.Function = New List(Of VbNET.Function)
                End If
                For Each S As VbNET.Function In Me.Function
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.ID = Me.Function.Count
                    Me.Function.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 5
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine
                End If
            End If
        End Sub
#End Region
#Region "<04.02.06> <Sub> <Add> [Add_Runtime(Statement|VbNET.Runtime)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Runtime(ByVal Statement As VbNET.Runtime)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Runtime) Then
                    Me.Runtime = New List(Of VbNET.Runtime)
                End If
                For Each S As VbNET.Runtime In Me.Runtime
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.ID = Me.Runtime.Count
                    Me.Runtime.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 6
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine
                End If
            End If
        End Sub
#End Region
#Region "<04.02.10> <Sub> <Add> [Add_Event(Statement|VbNET.Event)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Event(ByVal Statement As VbNET.Event)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Event) Then
                    Me.Event = New List(Of VbNET.Event)
                End If
                For Each S As VbNET.Event In Me.Event
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.ID = Me.Event.Count
                    Me.Event.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 10
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine
                End If
            End If
        End Sub
#End Region
#End Region
#Region "<04.03> <Sub> [Remove]"
#Region "<04.03.01> <Sub> <Add> [Remove_Property(Statement|VbNET.Property)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Property(ByVal Statement As VbNET.Property)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Property) Then
                    Me.Property = New List(Of VbNET.Property)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Property = Nothing
                For Each S As VbNET.Property In Me.Property
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Property.Remove(ElementToDelete)
                    hasRemovedit = True

                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If

            End If

        End Sub
#End Region
#Region "<04.03.02> <Sub> <Add> [Remove_Enumeration(Statement|VbNET.Enumeration)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Enumeration(ByVal Statement As VbNET.Enumeration)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Enumeration) Then
                    Me.Enumeration = New List(Of VbNET.Enumeration)
                End If
                Dim hasRemovedit As Boolean = False
                Dim ElementToDelete As VbNET.Enumeration = Nothing
                For Each S As VbNET.Enumeration In Me.Enumeration
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Enumeration.Remove(ElementToDelete)
                    hasRemovedit = True

                End If

                If hasRemovedit = True Then
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If

            End If

        End Sub
#End Region
#Region "<04.03.04> <Sub> <Add> [Remove_Sub(Statement|VbNET.Sub)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Sub(ByVal Statement As VbNET.Sub)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Sub) Then
                    Me.Sub = New List(Of VbNET.Sub)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Sub = Nothing
                For Each S As VbNET.Sub In Me.Sub
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Sub.Remove(ElementToDelete)
                    hasRemovedit = True
                End If
                If hasRemovedit = True Then
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine
                End If
            End If
        End Sub
#End Region
#Region "<04.03.05> <Sub> <Add> [Remove_Function(Statement|VbNET.Function)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Function(ByVal Statement As VbNET.Function)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Function) Then
                    Me.Function = New List(Of VbNET.Function)
                End If
                Dim hasRemovedit As Boolean = False
                Dim ElementToDelete As VbNET.Function = Nothing
                For Each S As VbNET.Function In Me.Function
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Function.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                If hasRemovedit = True Then
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
            End If

        End Sub
#End Region
#Region "<04.03.06> <Sub> <Add> [Remove_Runtime(Statement|VbNET.Runtime)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Runtime(ByVal Statement As VbNET.Runtime)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Runtime) Then
                    Me.Runtime = New List(Of VbNET.Runtime)
                End If
                Dim hasRemovedit As Boolean = False
                Dim ElementToDelete As VbNET.Runtime = Nothing
                For Each S As VbNET.Runtime In Me.Runtime
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Runtime.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                If hasRemovedit = True Then
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine
                End If
            End If

        End Sub
#End Region
#Region "<04.03.10> <Sub> <Add> [Remove_Event(Statement|VbNET.Event)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Event(ByVal Statement As VbNET.Event)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Event) Then
                    Me.Event = New List(Of VbNET.Event)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Event = Nothing
                For Each S As VbNET.Event In Me.Event
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Event.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                If hasRemovedit = True Then
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine
                End If
            End If

        End Sub
#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Structure]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Structure\" & Statement.Name & ".Structure"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Structure") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Structure")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Structure],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Structure"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Structure"
                        FilePath = My.Application.Info.DirectoryPath & "\Structure\" & Statement.Name & ".Structure"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Structure]
            Dim Result As New [Structure]
            Dim Serializer As New XmlSerializer(GetType([Structure]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type Structure.")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.Structure
                    Temp = VbNET.Structure.Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .Name = Temp.Name
                        .AccessModifier = Temp.AccessModifier
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri

                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .DefaultValue = Temp.DefaultValue
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .Enumeration = Temp.Enumeration
                        .Event = Temp.Event
                        .Example = Temp.Example

                        .F = Temp.F
                        .Function = Temp.Function

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex

                        .JavaScript = Temp.JavaScript

                        .Statements = Temp.Statements
                        .StructureName = Temp.StructureName

                        .Partial = Temp.Partial
                        .Params = Temp.Params
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Property = Temp.Property
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .Typelist = Temp.Typelist

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Summary = Temp.Summary
                        .SummaryStatement = Temp.SummaryStatement

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .Variables = Temp.Variables
                        .VB = Temp.VB

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot
                    End With
                    Result.Output = Me 'New VbNET.Structure(Temp.Name, Temp.Members, Temp.DataType, Temp.AccessModifier, Temp.Shadows, Temp.Category, Temp.ID, Temp.DefaultValue, Temp.RegionCategory, Temp.AuthorName, Temp.AuthorEmail, Temp.AuthorUri,
                    'Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Browsable, Temp.Enable, Temp.CustomProperty, Temp.DllImport, Temp.Remarks, Temp.Usage, Temp.Example, Temp.Note,, Temp.Rights, Temp.See, Temp.SeeAlso)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Structure.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        Public Sub New(ByVal Name As String,
                       Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Public,
                       Optional ByVal MakeShadows As Boolean = False,
                       Optional ByVal MakePartial As Boolean = False,
                       Optional ByVal TypeList As List(Of InnerStatement.ParameterList_Statement) = Nothing,
                       Optional ByVal Implement As String = "",
                       Optional ByVal Enable As Boolean = True,
                       Optional ByVal AuthorName As String = "David Shaw Informatique Sàrl",
                       Optional ByVal AuthorEmail As String = "saadry.dunkel@ds-informatique.ch",
                       Optional ByVal AuthorUrl As String = "https://www.ds-informatique.ch",
                       Optional ByVal ContributorName As String = "",
                       Optional ByVal ContributorEmail As String = "",
                       Optional ByVal ContributorUrl As String = "",
                       Optional ByVal Description As String = "",
                       Optional ByVal Usage As String = "",
                       Optional ByVal Note As String = "",
                       Optional ByVal Example As String = "",
                       Optional ByVal Remark As String = "",
                       Optional ByVal Syntax As String = "",
                       Optional ByVal Rights As String = "")

            Clear()
            With Me
                .Name = Name
                .AccessModifier = AccessModifier
                .Shadows = MakeShadows
                .AuthorEmail = AuthorEmail
                .AuthorName = AuthorName
                .AuthorUri = AuthorUri
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUri
                .Description = Description
                .Enable = Enable
                .Implements = Implement
                .Note = Note
                .Partial = MakePartial
                .Syntax = Syntax
                .Example = Example
                .Usage = Usage
                .Rights = Rights
                .SummaryStatement = New Summary(.Description,, .Remarks,, .Rights, .Example, .Usage, .Note,,,, .AuthorName, .AuthorEmail, .AuthorUri, .ContributorName, .ContributorEmail, .ContributorUri, .Rules, .Syntax)
                .Summary = SummaryStatement.ToString
            End With

        End Sub
#End Region
#End Region
    End Class
#End Region
#End Region
#Region "|08.00.04| <Class> <Statement> [Sub]"
    Public Class [Sub]
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]{5}"
#Region "|2019/04/12 13h55:386| <01.00.00> <Property> <Constructor> [Call=Attribute|AttributeList]"'(Set|Get) The attribute list of the enumeration.
        Private _Attribute As Attributelist
        ''' <Summary>
        ''' The attribute list of the enumeration.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 13h55:386 </Published>
        ''' <Updated>[Created=2019/04/12 13h55:386][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("The attribute list of the enumeration."),
Browsable(True)>
        Public Property Attribute() As Attributelist
            Get

                Return _Attribute
            End Get
            Set(ByVal Value As Attributelist)

                _Attribute = Value
            End Set
        End Property
#End Region ' (Set|Get) The attribute list of the enumeration.
#Region "|2019/04/12 19h29:134| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) Optional.
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' Optional.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h29:134 </Published>
        ''' <Updated>[Created=2019/04/12 19h29:133][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional."),
Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)
                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional.
#Region "|2019/04/12 19h30:113| <01.00.02> <Property> <Constructor> [Call=ProcedureModifier|ProcedureModifiers]"'(Set|Get) Optional.
        Private _ProcedureModifier As ProcedureModifiers
        ''' <Summary>
        ''' Optional.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h30:113 </Published>
        ''' <Updated>[Created=2019/04/12 19h30:113][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional."),
Browsable(True)>
        Public Property ProcedureModifier() As ProcedureModifiers
            Get
                Return _ProcedureModifier
            End Get
            Set(ByVal Value As ProcedureModifiers)
                _ProcedureModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional.
#Region "|2019/04/12 19h27:556| <01.00.03> <Property> <Constructor> [Call=Partial|Boolean]"'(Set|Get) Optional. Indicates Description of a partial method. See Partial Methods.
        Private _Partial As Boolean
        ''' <Summary>
        ''' Optional. Indicates Description of a partial method. See Partial Methods.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h27:556 </Published>
        ''' <Updated>[Created=2019/04/12 19h27:556][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Indicates Description of a partial method. See Partial Methods."),
Browsable(True)>
        Public Property [Partial]() As Boolean
            Get
                Return _Partial
            End Get
            Set(ByVal Value As Boolean)
                _Partial = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates Description of a partial method. See Partial Methods.
#Region "|2019/04/12 19h31:967| <01.00.04> <Property> <Constructor> [Call=[Shared]|Boolean]"'(Set|Get) Optional. See Shared.
        Private _Shared As Boolean
        ''' <Summary>
        ''' Optional. See Shared.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h31:967 </Published>
        ''' <Updated>[Created=2019/04/12 19h31:967][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Shared."),
Browsable(True)>
        Public Property [Shared]() As Boolean
            Get
                Return _Shared
            End Get
            Set(ByVal Value As Boolean)
                _Shared = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Shared.
#Region "|2019/04/12 19h31:763| <01.00.05> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) Optional. See Shadows.
        Private _Shadows As Boolean
        ''' <Summary>
        ''' Optional. See Shadows.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h31:763 </Published>
        ''' <Updated>[Created=2019/04/12 19h31:763][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Shadows."),
Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)
                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Shadows.
#Region "|2019/04/12 19h32:160| <01.00.06> <Property> <Constructor> [Call=[Async]|Boolean]"'(Set|Get) The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods.
        Private _Async As Boolean
        ''' <Summary>
        ''' The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h32:160 </Published>
        ''' <Updated>[Created=2019/04/12 19h32:159][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods."),
Browsable(True)>
        Public Property [Async]() As Boolean
            Get
                Return _Async
            End Get
            Set(ByVal Value As Boolean)
                _Async = Value
            End Set
        End Property
#End Region ' (Set|Get) The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods.
#Region "|2019/04/12 19h39:857| <01.00.07> <Property> <Constructor> [Call=SubName|String]"'(Set|Get) Required. Name of the procedure. See Declared Element Names. To create a constructor procedure for a class, set the name of a Sub procedure to the New keyword. For more information, see Object Lifetime: How Objects Are Created and Destroyed.
        Private _SubName As String
        ''' <Summary>
        ''' Required. Name of the procedure. See Declared Element Names. To create a constructor procedure for a class, set the name of a Sub procedure to the New keyword. For more information, see Object Lifetime: How Objects Are Created and Destroyed.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h39:857 </Published>
        ''' <Updated>[Created=2019/04/12 19h39:857][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required. Name of the procedure. See Declared Element Names. To create a constructor procedure for a class, set the name of a Sub procedure to the New keyword. For more information, see Object Lifetime: How Objects Are Created and Destroyed."),
Browsable(True)>
        Public Property SubName() As String
            Get
                Return _SubName
            End Get
            Set(ByVal Value As String)
                _SubName = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Name of the procedure. See Declared Element Names. To create a constructor procedure for a class, set the name of a Sub procedure to the New keyword. For more information, see Object Lifetime: How Objects Are Created and Destroyed.
#Region "|2019/04/12 21h30:872| <01.00.08> <Property> <Constructor> [Call=ParameterList|List(Of InnerStatement.ParameterList_Statement)]"'(Set|Get) Optional. List of local variable names representing the parameters of this procedure. See Parameter List.
        Private _ParameterList As List(Of InnerStatement.ParameterList_Statement)
        ''' <Summary>
        ''' Optional. List of local variable names representing the parameters of this procedure. See InnerStatement.Parameter List.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 21h30:872 </Published>
        ''' <Updated>[Created=2019/04/12 21h30:872][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        ''' <see cref="InnerStatement.ParameterList_Statement"/>
        <CategoryAttribute("Constructor"),
            Description("Optional. List of local variable names representing the parameters of this procedure. See Parameter List."),
            Browsable(True)>
        Public Property ParameterList() As List(Of InnerStatement.ParameterList_Statement)
            Get
                Return _ParameterList
            End Get
            Set(ByVal Value As List(Of InnerStatement.ParameterList_Statement))
                _ParameterList = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. List of local variable names representing the parameters of this procedure. See Parameter List.
#Region "|2019/04/12 16h17:059| <01.00.09> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) Optional. The summary of the Structure.
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' (Set|Get) Optional. The summary of the Structure.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 16h17:0059 </Published>
        ''' <Updated>[Created=2019/04/12 16h17:0059][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("(Set|Get) Optional. The summary of the Structure."),
Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get

                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)

                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. The summary of the Structure.
#Region "|2019/05/18 15h29:179| <01.00.10> <Property> <Constructor> [Call=Handles|String]"'(Set|Get) the Handles as String
        Private _Handles As String
        ''' <Summary>
        ''' (Set|Get) the Handles as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/18 15h29:179 </Published>
        ''' <Updated>[Created=2019/05/18 15h29:172][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Handles as String"), Browsable(True)>
        Public Property [Handles]() As String
            Get
                Return _Handles
            End Get
            Set(ByVal Value As String)
                If Value.Length > 0 Then
                    Value = " Handles " & Value
                End If
                _Handles = Value
            End Set
        End Property
#End Region ' (Set|Get) the Handles as String
#Region "|2019/05/18 15h29:795| <01.00.11> <Property> <Constructor> [Call=Implements|String]"'(Set|Get) the Implements as String
        Private _Implements As String
        ''' <Summary>
        ''' (Set|Get) the Implements as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/18 15h29:795 </Published>
        ''' <Updated>[Created=2019/05/18 15h29:795][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Implements as String"), Browsable(True)>
        Public Property [Implements]() As String
            Get
                Return _Implements
            End Get
            Set(ByVal Value As String)
                If Value.Length > 0 Then
                    Value = " Implements " & Value
                End If
                _Implements = Value
            End Set
        End Property
#End Region ' (Set|Get) the Implements as String

#End Region
#Region "|01.03| <Property> [Parent]{4}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h26:392| <01.03.01> <Property> <Parent> |.ParentStructure()|VbNET.Structure|"' (Set|Get) The ParentStructure as VbNET.Structure.
        Private _ParentStructure As VbNET.Structure
        '''    <Summary>
        '''     (Set|Get) The ParentStructure as VbNET.Structure.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h26:413 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentStructure as VbNET.Structure."), XmlIgnore>
        Property ParentStructure() As VbNET.Structure
            Get
                Return _ParentStructure
            End Get
            Set(ByVal Value As VbNET.Structure)
                _ParentStructure = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentStructure as VbNET.Structure.
#Region "[On] |2019/05/22 13h27:647| <01.03.02> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.03> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#Region "|01.01| <Property> [Price]{4}"
#Region "[On] |2019/06/12 16h50:602| <01.00.00> <Property> <Info> |.Production_Cost()|Double|"' (Set|Get) The Production_Cost as Double.
        Private _Production_Cost As Double
        '''    <Summary>
        '''     (Set|Get) The Production_Cost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h50:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Production_Cost as Double.")>
        Property Production_Cost() As Double
            Get
                Return _Production_Cost
            End Get
            Set(ByVal Value As Double)
                _Production_Cost = Value
            End Set
        End Property
#End Region '(Set|Get) The Production_Cost as Double.
#Region "[On] |2019/06/12 16h51:619| <01.00.01> <Property> <Info> |.Quantity_Parameters()|Integer|"' (Set|Get) The Quantity_Parameters as Integer.
        Private _Quantity_Parameters As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Parameters as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h51:635 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Parameters as Integer.")>
        Property Quantity_Parameters() As Integer
            Get
                Return _Quantity_Parameters
            End Get
            Set(ByVal Value As Integer)
                If Value < 0 Then
                    Value = 0
                Else

                End If
                _Quantity_Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Parameters as Integer.
#Region "[On] |2019/06/12 16h55:025| <01.00.02> <Property> <Info> |.Unit_Cost_Sub()|Double|"' (Set|Get) The Unit_Cost_Sub as Double.
        Private _Unit_Cost_Sub As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Sub as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:025 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Sub as Double.")>
        Property Unit_Cost_Sub() As Double
            Get
                Return _Unit_Cost_Sub
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Sub = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Sub as Double.
#Region "[On] |2019/06/12 16h55:615| <01.00.03> <Property> <Info> |.Unit_Cost_Parameters()|Double|"' (Set|Get) The Unit_Cost_Parameters as Double.
        Private _Unit_Cost_Parameters As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Parameters as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:635 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Parameters as Double.")>
        Property Unit_Cost_Parameters() As Double
            Get
                Return _Unit_Cost_Parameters
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Parameters as Double.
#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()

            With Me
                .Attribute = New Attributelist
                .AccessModifier = AccessModifiers.Public
                .ProcedureModifier = ProcedureModifiers.Nothing
                .Partial = False
                .Shared = False
                .Shadows = False
                .Handles = ""
                .Implements = ""
                .Async = False
                .SubName = ""
                .ParameterList = New List(Of InnerStatement.ParameterList_Statement)
                .SummaryStatement = New Summary
                .Statement = ""
                .ID = 0
                .ImageIndex = Format.[Sub]

                .RegionCategory = 0
                .StatementFormat = Format.[Sub]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." &
                        "." & IIf(.ID < 10, "0" & .ID, ID)

                .C_OpenStatement = "{"
                .C_CloseStatement = "}"
                .F_OpenStatement = "def "
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Sub "
                .VB_CloseStatement = "End Sub"
                .Python_OpenStatement = "def "
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable|True])]"
        Public Sub PrintStatement(Optional ByVal Enable As Boolean = True)
            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            Me.Production_Cost = 0
            Me.Unit_Cost_Sub = My.Settings.Price_Sub
            Me.Unit_Cost_Parameters = My.Settings.Price_Parameter
            Me.Production_Cost += Me.Unit_Cost_Sub
            If Not IsNothing(Me.ParameterList) Then
                Me.Quantity_Parameters = Me.ParameterList.Count
            End If
            Me.Production_Cost += Me.Quantity_Parameters * Me._Unit_Cost_Parameters
            With Me
                .RegionCode = IIf(.StatementFormat < 10, "0" & .StatementFormat, .StatementFormat) & "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." & IIf(.ID < 10, "0" & .ID, .ID)
            End With
            If Me.Description = "" Or IsNothing(Me.Description) Or Me.Description.Length < 1 Then
                Me.Description = "The sub " & Me.Name & "."
            End If
            If Me.SubName = "" Then
                Me.SubName = Me.Name
            End If
#Region "<Format Description>"
            If Description.Contains("(Set|Get)") Then
            Else
                Me.Description = "(Set|Get) " & Me.Description
            End If
#End Region


            Me.Summary = Me.SummaryStatement.Print_VB
            Dim Parameters As String = ""
            Dim Params As New List(Of Summary.Param)
            If Not IsNothing(Me.ParameterList) Then
                Parameters = InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.Vb)
                For Each P As InnerStatement.ParameterList_Statement In Me.ParameterList
                    Dim Pa As New Summary.Param(P.ParameterName, P.Definition)
                    Params.Add(Pa)
                Next
            End If
            Me.SummaryStatement = New Summary(Me.Description, Params, Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage, Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)
            Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)

            'Create 
            If Me.Enable = True Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Dim ST As String = ""
                If Params.Count - 1 > 0 Then
                    For Each PP As Summary.Param In Params
                        ST += "    " & PP.ToString & vbNewLine
                    Next
                End If
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB & ST)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    IIf(Me.Shared = True, "Shared ", "") &
                                    IIf(Me.Partial = True, "Partial ", "") &
                                    IIf(Me.Async = True, "Async ", "") &
                                    "Sub " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")")
#End Region
                Me.Print_VB.Add(Me.Statement)
                Me.Print_VB.Add("   End Sub")
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_C.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Partial = True, "partial ", "") &
                                    IIf(Me.Async = True, "async ", "") &
                                    "void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region

                Me.Print_C.Add(Me.Statement)
                Me.Print_C.Add("   };")
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_JavaScript.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Partial = True, "partial ", "") &
                                    IIf(Me.Async = True, "async ", "") &
                                    "final void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region
                Me.Print_JavaScript.Add(Me.Statement)
                Me.Print_JavaScript.Add("   };")
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add("    " & Me.SummaryStatement.Print_F)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("    Let " & Me.Name & " = ")
#End Region
                Me.Print_F.Add("    " & Me.Statement)
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
                Me.Print_Python.Add("    " & Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("    " & Me.Attribute.Python)
#End Region

#Region "<Caller>"
                Me.Print_Python.Add("    " & Me.Name & " ::= " & Space & Me.Name & Space)
                Me.Print_Python.Add(Me.Statement)
#End Region
                Me.Print_Python.Add("#endregion /" & Me.Description)
#End Region

            ElseIf Me.Enable = False Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[Off] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("//    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    IIf(Me.Shared = True, "Shared ", "") &
                                    IIf(Me.Partial = True, "Partial ", "") &
                                    IIf(Me.Async = True, "Async ", "") &
                                    "Sub " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")")
#End Region
                Me.Print_VB.Add("// " & Me.Statement)
                Me.Print_VB.Add("//   End Sub")
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_C.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("//    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Partial = True, "partial ", "") &
                                    IIf(Me.Async = True, "async ", "") &
                                    "void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region

                Me.Print_C.Add("// " & Me.Statement)
                Me.Print_C.Add("//   };")
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_JavaScript.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("//    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Partial = True, "partial ", "") &
                                    IIf(Me.Async = True, "async ", "") &
                                    "final void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region
                Me.Print_JavaScript.Add(Me.Statement)
                Me.Print_JavaScript.Add("//   };")
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add("//    " & Me.SummaryStatement.Print_F)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("//    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("//    Let " & Me.Name & " = ")
#End Region
                Me.Print_F.Add("//    " & Me.Statement)
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_Python.Add("    " & Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("//    " & Me.Attribute.Python)
#End Region

#Region "<Caller>"
                Me.Print_Python.Add("//    " & Me.Name & " ::= " & Space & Me.Name & Space)
                Me.Print_Python.Add("//" & Me.Statement)
#End Region
                Me.Print_Python.Add("#endregion /" & Me.Description)
#End Region
#End Region
            End If

            Me.VB = ""
            Me.C = ""
            Me.Python = ""
            Me.JavaScript = ""
            Me.F = ""
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next
        End Sub
#End Region
#Region "<04.01.01> <Sub> <Print> [PrintStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]]"
        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub
#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Sub]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Sub\" & Statement.Name & ".Sub"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Sub") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Sub")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Sub],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Sub"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Sub"
                        FilePath = My.Application.Info.DirectoryPath & "\Sub\" & Statement.Name & ".Sub"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Sub]
            Dim Result As New [Sub]
            Dim Serializer As New XmlSerializer(GetType([Sub]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type [Sub].")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Sub]
                    Temp = VbNET.[Sub].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier
                        .Async = Temp.Async
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri

                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .DefaultValue = Temp.DefaultValue
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .Example = Temp.Example

                        .F = Temp.F

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex

                        .JavaScript = Temp.JavaScript

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .Params = Temp.Params
                        .ParameterList = Temp.ParameterList
                        .Partial = Temp.Partial
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .ProcedureModifier = Temp.ProcedureModifier
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Shared = Temp.Shared
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .SubName = Temp.SubName
                        .Summary = Temp.Summary
                        .SummaryStatement = Temp.SummaryStatement

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .VB = Temp.VB
                        .Variables = Temp.Variables

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot
                    End With
                    Result.Output = New VbNET.Sub(Temp.Name, Temp.Statement, Temp.Description, Temp.ID, Temp.AccessModifier, Temp.ProcedureModifier, Temp.Shadows, Temp.Shared, Temp.Async, Temp.Partial, Temp.AttributeList, Temp.AuthorEmail, Temp.AuthorName, Temp.AuthorUri, Temp.Browsable, Temp.Category, Temp.ContributorEmail, Temp.ContributorName, Temp.ContributorUri, Temp.CustomProperty, Temp.DefaultValue, Temp.DllImport, Temp.Example, Temp.Note, Temp.Params, Temp.RegionCategory, Temp.Enable)
                    'Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Browsable, Temp.Enable, Temp.CustomProperty, Temp.DllImport, Temp.Remarks, Temp.Usage, Temp.Example, Temp.Note,, Temp.Rights, Temp.See, Temp.SeeAlso)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Sub.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02> <Function> [Add]"
#Region "<05.02.00> <Function> <Add> [AddParameter|InnerStatement.ParameterList_Statement]"
        ''' <summary>
        ''' Add a new Parameter in Me.ParameterList. This function also avoids adding duplicates
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <param name="ReturnType"></param>
        ''' <param name="DefaultValue"></param>
        ''' <param name="Modifier"></param>
        ''' <param name="Definition"></param>
        ''' <returns></returns>
        Public Function AddParameter(ByVal Name As String,
                                     ByVal ReturnType As String,
                           Optional ByVal DefaultValue As String = Nothing,
                           Optional ByVal Modifier As String = "ByVal",
                           Optional ByVal Definition As String = "") As InnerStatement.ParameterList_Statement
            Dim Result As New InnerStatement.ParameterList_Statement(Name, ReturnType, DefaultValue,
                                                IIf(Modifier.Contains("ByVal"), True, False),
                                                IIf(Modifier.Contains("ByRef"), True, False),
                                                IIf(Modifier.Contains("Optional"), True, False),
                                                IIf(Modifier.Contains("ParamArray"), True, False),
Definition, True)

            If IsNothing(Me.ParameterList) Then
                Me.ParameterList = New List(Of InnerStatement.ParameterList_Statement)
            End If
            If IsNothing(Me.Params) Then
                Me.Params = New List(Of Summary.Param)
            End If
            Me.DefaultValue = DefaultValue

            Dim Pi As New Summary.Param(Result.Name, Result.Definition)
            Me.Params.Add(Pi)
            Dim addit As Boolean = True
            For i = 0 To Me.ParameterList.Count - 1
                If Me.ParameterList(i).Name = Name Then
                    addit = False
                    Exit For
                End If
            Next
            If addit = True Then
                Me.ParameterList.Add(Result)
            End If
            Return Result
        End Function

#End Region
#End Region
#Region "<05.03> <Function> [Remove]"
#Region "<05.03.00> <Function> <Remove> [RemoveParameter|InnerStatement.ParameterList_Statement]"
        Public Function RemoveParameter(ByVal Name As String) As InnerStatement.ParameterList_Statement
            Dim Result As InnerStatement.ParameterList_Statement = Nothing
            If Name <> "" Then
                If IsNothing(Me.ParameterList) Then
                    Return Result
                    Exit Function
                End If
                For i = 0 To Me.ParameterList.Count - 1
                    If Me.ParameterList(i).Name = Name Then
                        Result = Me.ParameterList(i)
                        Exit For
                    End If
                Next
                If Not IsNothing(Result) Then
                    Me.ParameterList.Remove(Result)
                End If
            End If
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<7> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        Public Sub New(ByVal Name As String)
            Clear()

            With Me
                .Name = Name
                .StatementFormat = Format.[Sub]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." &
                        "." & IIf(.ID < 10, "0" & .ID, ID)

            End With

        End Sub
#End Region
#Region "<06.02> <Loader> [Full]"
        Public Sub New(ByVal Name As String,
                           ByVal Statement As String,
                  Optional ByVal Description As String = "",
                  Optional ByVal ID As Integer = 0,
                  Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Public,
                  Optional ByVal ProcedureModifier As ProcedureModifiers = ProcedureModifiers.Nothing,
                  Optional ByVal MakeShadows As Boolean = False,
                  Optional ByVal MakeShared As Boolean = False,
                  Optional ByVal MakeAsync As Boolean = False,
                  Optional ByVal MakePartial As Boolean = False,
                 Optional ByVal AttributeList As Attributelist = Nothing,
                 Optional ByVal AuthorEmail As String = "saadry.dunkel@outlook.com",
                 Optional ByVal AuthorName As String = "Saadry Dunkel",
                 Optional ByVal AuthorUri As String = "https://www.saadry-dunkel.com",
                 Optional ByVal Browsable As Boolean = True,
                 Optional ByVal CategoryName As String = "",
                 Optional ByVal ContributorEmail As String = "",
                 Optional ByVal ContributorName As String = "",
                 Optional ByVal ContributorUri As String = "",
                 Optional ByVal CustomProperty As String = "",
                 Optional ByVal DefaultValue As String = "",
                 Optional ByVal DllImport As String = "",
                 Optional ByVal Example As String = "",
                 Optional ByVal Note As String = "",
                 Optional ByVal Params As List(Of Summary.Param) = Nothing,
                 Optional ByVal RegionCategory As Integer = 0,
                 Optional ByVal Enable As Boolean = True)

            With Me
                .AccessModifier = AccessModifier
                .Async = Async
                .Attribute = Attribute
                .AuthorEmail = AuthorEmail
                .AuthorName = AuthorName
                .AuthorUri = AuthorUri
                .Browsable = Browsable
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUri
                .CustomProperty = CustomProperty
                .DefaultValue = DefaultValue
                .Description = Description
                If DllImport <> "" Then
                    .DllImport = DllImport
                End If
                .Enable = Enable
                .Example = Example
                .ID = ID
                .Name = Name
                .Note = Note
                .ParameterList = New List(Of InnerStatement.ParameterList_Statement)
                .ParameterList = ParameterList
                .Params = New List(Of Summary.Param)
                .Params = Params
                .Partial = MakePartial
                .ProcedureModifier = ProcedureModifier
                .RegionCategory = RegionCategory
                .Remarks = Remarks
                .Shadows = MakeShadows
                .Shared = MakeShared
                .Statement = Statement
                .SubName = Name
                .StatementFormat = Format.[Sub]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." &
                        "." & IIf(.ID < 10, "0" & .ID, ID)

                .SummaryStatement = New Summary(.Description, .Params, .Remarks,,, .Example, .Usage, .Note,,,, .AuthorName, .AuthorEmail, .AuthorUri, .ContributorName, .ContributorEmail, .ContributorUri)
                Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)

                .Summary = SummaryStatement.Print_VB
            End With
        End Sub
#End Region
#End Region
    End Class
#End Region
#Region "|08.00.05| <Class> <Statement> [Function]"
    ''' <summary>
    ''' Create a Function Statement https://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/function-procedures 
    ''' [Summary]
    ''' [ (attributelist) ]
    ''' [AccessModifiers]
    ''' [ proceduremodifiers ]
    ''' [ Shared ][ Shadows ][ Async | Iterator ]
    '''  Function FunctionName [ (Of typeparamlist) ] [ (parameterlist) ] [ As returntype ] [ Implements implementslist | Handles eventlist ]  
    '''  [ statements ]
    '''  [ Exit Function ]
    '''  [ statements ]  
    '''  End Function 
    ''' </summary>
    Public Class [Function]
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]{13}"
#Region "|2019/04/12 19h26:775| <01.00.00> <Property> <Constructor> [Call=Attribute|Attributelist]"'(Set|Get) Optional. See Attribute List.
        Private _Attribute As Attributelist
        ''' <Summary>
        ''' Optional. See Attribute List.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h26:775 </Published>
        ''' <Updated>[Created=2019/04/12 19h26:775][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Attribute List."),
Browsable(True)>
        Public Property Attribute() As Attributelist
            Get
                Return _Attribute
            End Get
            Set(ByVal Value As Attributelist)
                _Attribute = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Attribute List.
#Region "|2019/04/12 19h29:134| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) Optional.
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' Optional.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h29:134 </Published>
        ''' <Updated>[Created=2019/04/12 19h29:133][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional."),
Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)
                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional.
#Region "|2019/04/12 19h30:113| <01.00.02> <Property> <Constructor> [Call=ProcedureModifier|ProcedureModifiers]"'(Set|Get) Optional.
        Private _ProcedureModifier As ProcedureModifiers
        ''' <Summary>
        ''' Optional.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h30:113 </Published>
        ''' <Updated>[Created=2019/04/12 19h30:113][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional."),
Browsable(True)>
        Public Property ProcedureModifier() As ProcedureModifiers
            Get
                Return _ProcedureModifier
            End Get
            Set(ByVal Value As ProcedureModifiers)
                _ProcedureModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional.
#Region "|2019/04/12 19h31:967| <01.00.03> <Property> <Constructor> [Call=[Shared]|Boolean]"'(Set|Get) Optional. See Shared.
        Private _Shared As Boolean
        ''' <Summary>
        ''' Optional. See Shared.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h31:967 </Published>
        ''' <Updated>[Created=2019/04/12 19h31:967][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Shared."),
Browsable(True)>
        Public Property [Shared]() As Boolean
            Get
                Return _Shared
            End Get
            Set(ByVal Value As Boolean)
                _Shared = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Shared.
#Region "|2019/04/12 19h31:763| <01.00.04> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) Optional. See Shadows.
        Private _Shadows As Boolean
        ''' <Summary>
        ''' Optional. See Shadows.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h31:763 </Published>
        ''' <Updated>[Created=2019/04/12 19h31:763][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Shadows."),
Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)
                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Shadows.
#Region "|2019/04/12 19h32:160| <01.00.05> <Property> <Constructor> [Call=[Async]|Boolean]"'(Set|Get) The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods.
        Private _Async As Boolean
        ''' <Summary>
        ''' The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h32:160 </Published>
        ''' <Updated>[Created=2019/04/12 19h32:159][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods."),
Browsable(True)>
        Public Property [Async]() As Boolean
            Get
                Return _Async
            End Get
            Set(ByVal Value As Boolean)
                _Async = Value
            End Set
        End Property
#End Region ' (Set|Get) The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods.
#Region "|2019/04/12 19h39:857| <01.00.06> <Property> <Constructor> [Call=FunctionName|String]"'(Set|Get) Required. Name of the procedure. See Declared Element Names. To create a constructor procedure for a class, set the name of a Function procedure to the New keyword. For more information, see Object Lifetime: How Objects Are Created and Destroyed.
        Private _FunctionName As String
        ''' <Summary>
        ''' Required. Name of the procedure. See Declared Element Names. To create a constructor procedure for a class, set the name of a Function procedure to the New keyword. For more information, see Object Lifetime: How Objects Are Created and Destroyed.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h39:857 </Published>
        ''' <Updated>[Created=2019/04/12 19h39:857][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required. Name of the procedure. See Declared Element Names. To create a constructor procedure for a class, set the name of a Function procedure to the New keyword. For more information, see Object Lifetime: How Objects Are Created and Destroyed."),
Browsable(True)>
        Public Property FunctionName() As String
            Get
                Return _FunctionName
            End Get
            Set(ByVal Value As String)
                _FunctionName = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Name of the procedure. See Declared Element Names. To create a constructor procedure for a class, set the name of a Function procedure to the New keyword. For more information, see Object Lifetime: How Objects Are Created and Destroyed.
#Region "|2019/04/12 21h30:872| <01.00.07> <Property> <Constructor> [Call=ParameterList|List(Of Innerstatement.ParameterList_Statement)]"'(Set|Get) Optional. List of local variable names representing the parameters of this procedure. See Parameter List.
        Private _ParameterList As List(Of InnerStatement.ParameterList_Statement)
        ''' <Summary>
        ''' Optional. List of local variable names representing the parameters of this procedure. See Parameter List.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 21h30:872 </Published>
        ''' <Updated>[Created=2019/04/12 21h30:872][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        ''' <see cref="Innerstatement.ParameterList_Statement"/>
        <CategoryAttribute("Constructor"),
            Description("Optional. List of local variable names representing the parameters of this procedure. See Parameter List."),
            Browsable(True)>
        Public Property ParameterList() As List(Of InnerStatement.ParameterList_Statement)
            Get
                Return _ParameterList
            End Get
            Set(ByVal Value As List(Of InnerStatement.ParameterList_Statement))
                _ParameterList = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. List of local variable names representing the parameters of this procedure. See Parameter List.
#Region "|2019/04/12 22h06:040| <01.00.08> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) Optional. The summary statement.
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' Optional. The summary statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 22h06:0040 </Published>
        ''' <Updated>[Created=2019/04/12 22h06:0040][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. The summary statement."),
Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get
                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)
                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. The summary statement.
#Region "|2019/04/13 14h31:153| <01.00.09> <Property> <Constructor> [Call=ReturnType|String]"'(Set|Get) Required if Option Strict is On. Data type of the value returned by this procedure.
        Private _ReturnType As String
        ''' <Summary>
        ''' Required if Option Strict is On. Data type of the value returned by this procedure.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 14h31:153 </Published>
        ''' <Updated>[Created=2019/04/13 14h31:153][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required if Option Strict is On. Data type of the value returned by this procedure."),
Browsable(True)>
        Public Property ReturnType() As String
            Get
                Return _ReturnType
            End Get
            Set(ByVal Value As String)
                _ReturnType = Value
            End Set
        End Property
#End Region ' (Set|Get) Required if Option Strict is On. Data type of the value returned by this procedure.
#Region "|2019/06/01 15h33:153| <01.00.10> <Property> <Constructor> [Call=Partial|String]"'(Set|Get) Required if Option Strict is On. Data type of the value returned by this procedure.
        Private _Partial As String
        ''' <Summary>
        ''' Required if Option Strict is On. Data type of the value returned by this procedure.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 14h31:153 </Published>
        ''' <Updated>[Created=2019/04/13 14h31:153][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required if Option Strict is On. Data type of the value returned by this procedure."),
Browsable(True)>
        Public Property [Partial]() As String
            Get
                Return _Partial
            End Get
            Set(ByVal Value As String)
                _Partial = Value
            End Set
        End Property
#End Region ' (Set|Get) Required if Option Strict is On. Data type of the value returned by this procedure.
#Region "|2019/06/01 15h33:153| <01.00.11> <Property> <Constructor> [Call=Handle|String]"'(Set|Get) Required if Option Strict is On. Data type of the value returned by this procedure.
        Private _Handle As String
        ''' <Summary>
        ''' Required if Option Strict is On. Data type of the value returned by this procedure.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 14h31:153 </Published>
        ''' <Updated>[Created=2019/04/13 14h31:153][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required if Option Strict is On. Data type of the value returned by this procedure."),
Browsable(True)>
        Public Property [Handle]() As String
            Get
                Return _Handle
            End Get
            Set(ByVal Value As String)
                _Handle = Value
            End Set
        End Property
#End Region ' (Set|Get) Required if Option Strict is On. Data type of the value returned by this procedure.
#Region "|2019/06/01 15h33:153| <01.00.12> <Property> <Constructor> [Call=Implements|String]"'(Set|Get) Required if Option Strict is On. Data type of the value returned by this procedure.
        Private _Implements As String
        ''' <Summary>
        ''' Required if Option Strict is On. Data type of the value returned by this procedure.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 14h31:153 </Published>
        ''' <Updated>[Created=2019/04/13 14h31:153][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required if Option Strict is On. Data type of the value returned by this procedure."),
Browsable(True)>
        Public Property [Implements]() As String
            Get
                Return _Implements
            End Get
            Set(ByVal Value As String)
                _Implements = Value
            End Set
        End Property
#End Region ' (Set|Get) Required if Option Strict is On. Data type of the value returned by this procedure.
#End Region
#Region "|01.03| <Property> [Parent]{4}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h26:392| <01.03.01> <Property> <Parent> |.ParentStructure()|VbNET.Structure|"' (Set|Get) The ParentStructure as VbNET.Structure.
        Private _ParentStructure As VbNET.Structure
        '''    <Summary>
        '''     (Set|Get) The ParentStructure as VbNET.Structure.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h26:413 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentStructure as VbNET.Structure."), XmlIgnore>
        Property ParentStructure() As VbNET.Structure
            Get
                Return _ParentStructure
            End Get
            Set(ByVal Value As VbNET.Structure)
                _ParentStructure = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentStructure as VbNET.Structure.
#Region "[On] |2019/05/22 13h27:647| <01.03.02> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.03> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#Region "|01.01| <Property> [Price]{4}"
#Region "[On] |2019/06/12 16h50:602| <01.00.00> <Property> <Info> |.Production_Cost()|Double|"' (Set|Get) The Production_Cost as Double.
        Private _Production_Cost As Double
        '''    <Summary>
        '''     (Set|Get) The Production_Cost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h50:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Production_Cost as Double.")>
        Property Production_Cost() As Double
            Get
                Return _Production_Cost
            End Get
            Set(ByVal Value As Double)
                _Production_Cost = Value
            End Set
        End Property
#End Region '(Set|Get) The Production_Cost as Double.
#Region "[On] |2019/06/12 16h51:619| <01.00.01> <Property> <Info> |.Quantity_Parameters()|Integer|"' (Set|Get) The Quantity_Parameters as Integer.
        Private _Quantity_Parameters As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Parameters as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h51:635 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Parameters as Integer.")>
        Property Quantity_Parameters() As Integer
            Get
                Return _Quantity_Parameters
            End Get
            Set(ByVal Value As Integer)
                If Value < 0 Then
                    Value = 0
                Else

                End If
                _Quantity_Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Parameters as Integer.
#Region "[On] |2019/06/12 16h55:025| <01.00.02> <Property> <Info> |.Unit_Cost_Function()|Double|"' (Set|Get) The Unit_Cost_Function as Double.
        Private _Unit_Cost_Function As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Function as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:025 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Function as Double.")>
        Property Unit_Cost_Function() As Double
            Get
                Return _Unit_Cost_Function
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Function = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Function as Double.
#Region "[On] |2019/06/12 16h55:615| <01.00.03> <Property> <Info> |.Unit_Cost_Parameters()|Double|"' (Set|Get) The Unit_Cost_Parameters as Double.
        Private _Unit_Cost_Parameters As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Parameters as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:635 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Parameters as Double.")>
        Property Unit_Cost_Parameters() As Double
            Get
                Return _Unit_Cost_Parameters
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Parameters as Double.
#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()
            With Me
                .ID = 0
                .ImageIndex = Format.[Function]
                .RegionCategory = 0
                .StatementFormat = Format.[Function]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                       "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                       "." & IIf(.ID < 10, "0" & .ID, ID)
                .Remarks = ""
                .Rights = ""
                .See = ""
                .Partial = False
                .Handle = ""
                .Implements = ""
                .SeeAlso = ""
                .Statement = ""
                .Statements = New List(Of Statement)
                .Status = Status.IsNothing
                .Summary = ""
                .Tag = Nothing
                .Text = ""
                .Title = ""
                .Tooltip = ""
                .Updated(Status.Online, "The test is successful.",, Now) = ""
                .Usage = ""
                .Variables = New List(Of InnerStatement)
                .VB = ""
                '.WindowStyle = ""
                '  .XmlFile = New Fichier

                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = "def "
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Function "
                .VB_CloseStatement = "End Function"
                .Python_OpenStatement = "def "
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""

                .Attribute = New Attributelist
                .AccessModifier = AccessModifiers.Public
                .ProcedureModifier = ProcedureModifiers.Nothing
                .Shared = False
                .Shadows = False
                .Async = False
                .FunctionName = ""
                .ParameterList = New List(Of InnerStatement.ParameterList_Statement)
                .SummaryStatement = New Summary
                .ReturnType = ""

            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable|True])]"
        Public Sub PrintStatement(Optional ByVal Enable As Boolean = True)
            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            Me.Production_Cost = 0
            Me.Unit_Cost_Function = My.Settings.Price_Function
            Me.Unit_Cost_Parameters = My.Settings.Price_Parameter
            Me.Production_Cost += Me.Unit_Cost_Function
            If Not IsNothing(Me.ParameterList) Then
                Me.Quantity_Parameters = Me.ParameterList.Count
            End If
            Me.Production_Cost += Me.Quantity_Parameters * Me._Unit_Cost_Parameters
            With Me
                .RegionCode = IIf(.StatementFormat < 10, "0" & .StatementFormat, .StatementFormat) & "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." & IIf(.ID < 10, "0" & .ID, .ID)
            End With
            If Me.Description = "" Or IsNothing(Me.Description) Or Me.Description.Length < 1 Then
                Me.Description = "The function " & Me.Name & "."
            End If
            If Me.FunctionName = "" Then
                Me.FunctionName = Me.Name
            End If
#Region "<Format Description>"
            If Description.Contains("(Set|Get)") Then
            Else
                Me.Description = "(Set|Get) " & Me.Description
            End If
#End Region


            Me.Summary = Me.SummaryStatement.Print_VB
            Dim Parameters As String = ""
            Dim Params As New List(Of Summary.Param)
            If Not IsNothing(Me.ParameterList) Then
                Parameters = InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.Vb)
                For Each P As InnerStatement.ParameterList_Statement In Me.ParameterList
                    Dim Pa As New Summary.Param(P.ParameterName, P.Definition)
                    Params.Add(Pa)
                Next
            End If
            Me.SummaryStatement = New Summary(Me.Description, Params, Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage, Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)
            Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)

            'Create 
            If Me.Enable = True Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Function> <" & Me.Category & "> |." & Me.Name & "()" & "|" & ReturnType & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Dim ST As String = ""
                If Params.Count - 1 > 0 Then
                    For Each PP As Summary.Param In Params
                        ST += "    " & PP.ToString & vbNewLine
                    Next
                End If
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB & ST)

#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    IIf(Me.Shared = True, "Shared ", "") &
                                    IIf(Me.Async = True, "Async ", "") &
                                    IIf(Me.Partial = True, "Partial ", "") &
                                    "Function " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    IIf(Me.Handle <> "", " Handle " & Me.Handle, IIf(Me.Implements <> "", " Implements " & Me.Implements, " As " & Me.ReturnType)))
#End Region
                Me.Print_VB.Add(Me.Statement)
                Me.Print_VB.Add("   End Function")
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Function> <" & Me.Category & "> |." & Me.Name & "()" & "|Function" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_C.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Async = True, "async ", "") & ReturnType & " " &
                                    "void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region

                Me.Print_C.Add(Me.Statement)
                Me.Print_C.Add("   };")
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_JavaScript.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Async = True, "async ", "") & ReturnType & " " &
                                    "void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region
                Me.Print_JavaScript.Add(Me.Statement)
                Me.Print_JavaScript.Add("   };")
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add("    " & Me.SummaryStatement.Print_F)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("    Let " & Me.Name & " = ")
#End Region
                Me.Print_F.Add("    " & Me.Statement)
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
                Me.Print_Python.Add("    " & Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("    " & Me.Attribute.Python)
#End Region

#Region "<Caller>"
                Me.Print_Python.Add("    " & Me.Name & " ::= " & Space & Me.Name & Space)
                Me.Print_Python.Add(Me.Statement)
#End Region
                Me.Print_Python.Add("#endregion /" & Me.Description)
#End Region

            ElseIf Me.Enable = False Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[Off] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("//    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    IIf(Me.Shared = True, "Shared ", "") &
                                    IIf(Me.Async = True, "Async ", "") &
                                    "Function " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ") As " & ReturnType)
#End Region
                Me.Print_VB.Add("// " & Me.Statement)
                Me.Print_VB.Add("//   End Function")
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_C.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("//    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Async = True, "async ", "") & ReturnType & " " &
                                    "void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region

                Me.Print_C.Add("// " & Me.Statement)
                Me.Print_C.Add("//   };")
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_JavaScript.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("//    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Async = True, "async ", "") & ReturnType & " " &
                                    "void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region
                Me.Print_JavaScript.Add(Me.Statement)
                Me.Print_JavaScript.Add("//   };")
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add("//    " & Me.SummaryStatement.Print_F)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("//    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("//    Let " & Me.Name & " = ")
#End Region
                Me.Print_F.Add("//    " & Me.Statement)
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_Python.Add("    " & Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("//    " & Me.Attribute.Python)
#End Region

#Region "<Caller>"
                Me.Print_Python.Add("//    " & Me.Name & " ::= " & Space & Me.Name & Space)
                Me.Print_Python.Add("//" & Me.Statement)
#End Region
                Me.Print_Python.Add("#endregion /" & Me.Description)
#End Region
#End Region
            End If

            Me.VB = ""
            Me.C = ""
            Me.Python = ""
            Me.JavaScript = ""
            Me.F = ""
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next
        End Sub
#End Region
#Region "<04.01.01> <Sub> <Print> [PrintStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]]"
        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub
#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Function]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Function\" & Statement.Name & ".Function"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Function") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Function")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Function],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Function"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Function"
                        FilePath = My.Application.Info.DirectoryPath & "\Function\" & Statement.Name & ".Function"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Function]
            Dim Result As New [Function]
            Dim Serializer As New XmlSerializer(GetType([Function]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type [Function].")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Function]
                    Temp = VbNET.[Function].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier
                        .Async = Temp.Async
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri

                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .DefaultValue = Temp.DefaultValue
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .Example = Temp.Example

                        .F = Temp.F
                        .FunctionName = Temp.FunctionName

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex

                        .JavaScript = Temp.JavaScript

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .Params = Temp.Params
                        .ParameterList = Temp.ParameterList
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .ProcedureModifier = Temp.ProcedureModifier
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .ReturnType = Temp.ReturnType
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Shared = Temp.Shared
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Summary = Temp.Summary
                        .SummaryStatement = Temp.SummaryStatement

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .VB = Temp.VB
                        .Variables = Temp.Variables

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot
                    End With
                    Result.Output = New VbNET.Function(Temp.Name, Temp.Statement, Temp.Description, Temp.ID, Temp.AccessModifier, Temp.ProcedureModifier, Temp.Shadows, Temp.Shared, Temp.Async, Temp.Partial, Temp.ReturnType, Temp.Handle, Temp.Implements, Temp.AttributeList, Temp.AuthorEmail, Temp.AuthorName, Temp.AuthorUri, Temp.Browsable, Temp.Category, Temp.ContributorEmail, Temp.ContributorName, Temp.ContributorUri, Temp.CustomProperty, Temp.DefaultValue, Temp.DllImport, Temp.Example, Temp.Note, Temp.Params, Temp.RegionCategory, Temp.Enable)
                    'Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Browsable, Temp.Enable, Temp.CustomProperty, Temp.DllImport, Temp.Remarks, Temp.Usage, Temp.Example, Temp.Note,, Temp.Rights, Temp.See, Temp.SeeAlso)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Function.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02> <Function> [Add]"
#Region "<05.02.00> <Function> <Add> [AddParameter|InnerStatement.ParameterList_Statement]"
        ''' <summary>
        ''' Add a new Parameter in Me.ParameterList. This function also avoids adding duplicates
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <param name="ReturnType"></param>
        ''' <param name="DefaultValue"></param>
        ''' <param name="Modifier"></param>
        ''' <param name="Definition"></param>
        ''' <returns></returns>
        Public Function AddParameter(ByVal Name As String,
                                     ByVal ReturnType As String,
                           Optional ByVal DefaultValue As String = "",
                           Optional ByVal Modifier As String = "ByVal",
                           Optional ByVal Definition As String = "") As InnerStatement.ParameterList_Statement
            Dim Result As New InnerStatement.ParameterList_Statement(Name, ReturnType, DefaultValue,
                                                IIf(Modifier.Contains("ByVal"), True, False),
                                                IIf(Modifier.Contains("ByRef"), True, False),
                                                IIf(Modifier.Contains("Optional"), True, False),
                                                IIf(Modifier.Contains("ParamArray"), True, False),
Definition, True)

            If IsNothing(Me.ParameterList) Then
                Me.ParameterList = New List(Of InnerStatement.ParameterList_Statement)
            End If
            If IsNothing(Me.Params) Then
                Me.Params = New List(Of Summary.Param)
            End If
            Dim Pi As New Summary.Param(Result.Name, Result.Definition)
            Me.Params.Add(Pi)
            Dim addit As Boolean = True
            For i = 0 To Me.ParameterList.Count - 1
                If Me.ParameterList(i).Name = Name Then
                    addit = False
                    Exit For
                End If
            Next
            If addit = True Then
                Me.ParameterList.Add(Result)
            End If
            Return Result
        End Function

#End Region
#End Region
#Region "<05.03> <Function> [Remove]"
#Region "<05.03.00> <Function> <Remove> [RemoveParameter|InnerStatement.ParameterList_Statement]"
        Public Function RemoveParameter(ByVal Name As String) As InnerStatement.ParameterList_Statement
            Dim Result As InnerStatement.ParameterList_Statement = Nothing
            If Name <> "" Then
                If IsNothing(Me.ParameterList) Then
                    Return Result
                    Exit Function
                End If
                For i = 0 To Me.ParameterList.Count - 1
                    If Me.ParameterList(i).Name = Name Then
                        Result = Me.ParameterList(i)
                        Exit For
                    End If
                Next
                If Not IsNothing(Result) Then
                    Me.ParameterList.Remove(Result)
                End If
            End If
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<7> [Loader]"
#Region "<07.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<07.02> <Loader> [Full]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <param name="Statement"></param>
        ''' <param name="Description"></param>
        ''' <param name="ID"></param>
        ''' <param name="AccessModifier"></param>
        ''' <param name="ProcedureModifier"></param>
        ''' <param name="MakeShadows"></param>
        ''' <param name="MakeShared"></param>
        ''' <param name="MakeAsync"></param>
        ''' <param name="ReturnType"></param>
        ''' <param name="AttributeList"></param>
        ''' <param name="AuthorEmail"></param>
        ''' <param name="AuthorName"></param>
        ''' <param name="AuthorUri"></param>
        ''' <param name="Browsable"></param>
        ''' <param name="CategoryName"></param>
        ''' <param name="ContributorEmail"></param>
        ''' <param name="ContributorName"></param>
        ''' <param name="ContributorUri"></param>
        ''' <param name="CustomProperty"></param>
        ''' <param name="DefaultValue"></param>
        ''' <param name="DllImport"></param>
        ''' <param name="Example"></param>
        ''' <param name="Note"></param>
        ''' <param name="Params"></param>
        ''' <param name="RegionCategory"></param>
        ''' <param name="Enable"></param>
        Public Sub New(ByVal Name As String,
                           ByVal Statement As String,
                  Optional ByVal Description As String = "",
                  Optional ByVal ID As Integer = 0,
                  Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Public,
                  Optional ByVal ProcedureModifier As ProcedureModifiers = ProcedureModifiers.Nothing,
                  Optional ByVal MakeShadows As Boolean = False,
                  Optional ByVal MakeShared As Boolean = False,
                  Optional ByVal MakeAsync As Boolean = False,
                  Optional ByVal MakePartial As Boolean = False,
                  Optional ByVal ReturnType As String = "",
                  Optional ByVal Handle As String = "",
                  Optional ByVal [Implements] As String = "",
                 Optional ByVal AttributeList As Attributelist = Nothing,
                 Optional ByVal AuthorEmail As String = "saadry.dunkel@outlook.com",
                 Optional ByVal AuthorName As String = "Saadry Dunkel",
                 Optional ByVal AuthorUri As String = "https://www.saadry-dunkel.com",
                 Optional ByVal Browsable As Boolean = True,
                 Optional ByVal CategoryName As String = "",
                 Optional ByVal ContributorEmail As String = "",
                 Optional ByVal ContributorName As String = "",
                 Optional ByVal ContributorUri As String = "",
                 Optional ByVal CustomProperty As String = "",
                 Optional ByVal DefaultValue As String = "",
                 Optional ByVal DllImport As String = "",
                 Optional ByVal Example As String = "",
                 Optional ByVal Note As String = "",
                 Optional ByVal Params As List(Of Summary.Param) = Nothing,
                 Optional ByVal RegionCategory As Integer = 0,
                 Optional ByVal Enable As Boolean = True)
            Clear()
            With Me
                .AccessModifier = AccessModifier
                .Async = MakeAsync
                .AttributeList = AttributeList
                .Category = CategoryName
                .Attribute = Attribute
                .AuthorEmail = AuthorEmail
                .AuthorName = AuthorName
                .AuthorUri = AuthorUri
                .Browsable = Browsable
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUri
                .CustomProperty = CustomProperty
                .DefaultValue = DefaultValue
                .Description = Description
                If DllImport <> "" Then
                    .DllImport = DllImport
                End If
                .Enable = Enable
                .Example = Example
                .ID = ID
                .Handle = Handle
                .Implements = [Implements]
                .Name = Name
                .Note = Note
                .Partial = MakePartial
                .ParameterList = New List(Of InnerStatement.ParameterList_Statement)
                .ParameterList = ParameterList
                .Params = New List(Of Summary.Param)
                .Params = Params
                .ProcedureModifier = ProcedureModifier
                .RegionCategory = RegionCategory
                .Remarks = Remarks
                .Shadows = MakeShadows
                .Shared = MakeShared
                .Statement = Statement
                .FunctionName = Name
                .ReturnType = ReturnType
                .StatementFormat = Format.Function
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." &
                        "." & IIf(.ID < 10, "0" & .ID, ID)

                .SummaryStatement = New Summary(.Description, .Params, .Remarks,,, .Example, .Usage, .Note,,,, .AuthorName, .AuthorEmail, .AuthorUri, .ContributorName, .ContributorEmail, .ContributorUri)
                Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)

                .Summary = SummaryStatement.Print_VB
            End With
        End Sub
#End Region
#Region "<07.01> <Loader> [New(Name|String,ReturnType|String,Statement|String,[AccessModifier]|AccessModifiers(Public),...)]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <param name="ReturnType"></param>
        ''' <param name="Statement"></param>
        ''' <param name="AccessModifier"></param>
        ''' <param name="ProcedureModifier"></param>
        ''' <param name="MakeShadows"></param>
        ''' <param name="MakeShared"></param>
        ''' <param name="MakeAsync"></param>
        ''' <param name="Parameters"></param>
        ''' <param name="Description"></param>
        ''' <param name="Summary"></param>
        ''' <param name="Attributes"></param>
        Public Sub New(ByVal Name As String,
                       ByVal ReturnType As String,
                       ByVal Statement As String,
              Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Public,
              Optional ByVal ProcedureModifier As ProcedureModifiers = ProcedureModifiers.Nothing,
              Optional ByVal MakeShadows As Boolean = False,
              Optional ByVal MakeShared As Boolean = False,
              Optional ByVal MakeAsync As Boolean = False,
              Optional ByVal MakePartial As Boolean = False,
              Optional ByVal [Implements] As String = "",
              Optional ByVal Handle As String = "",
              Optional ByVal Parameters As List(Of InnerStatement.ParameterList_Statement) = Nothing,
              Optional ByVal Description As String = "",
              Optional ByVal Summary As Summary = Nothing,
              Optional ByVal Attributes As Attributelist = Nothing)
            Clear()

            With Me
                .Name = Name
                .ReturnType = ReturnType
                .Statement = Statement
                .AccessModifier = AccessModifier
                .ProcedureModifier = ProcedureModifier
                .Shadows = MakeShadows
                .Shared = MakeShared
                .Async = MakeAsync
                .Partial = MakePartial
                .Handle = Handle
                .ReturnType = ReturnType
                .Implements = [Implements]
                .Description = IIf(Description <> "", Description, "")
                If Not IsNothing(Parameters) Then
                    .ParameterList = Parameters
                End If
                If Not IsNothing(Summary) Then
                    .AuthorName = Summary.AuthorName
                    .AuthorEmail = Summary.AuthorEmail
                    .AuthorUri = Summary.AuthorUri
                    .ContributorEmail = Summary.ContributorEmail
                    .ContributorName = Summary.ContributorName
                    .ContributorUri = Summary.ContributorUri
                    .CustomProperty = Summary.CustomProperty
                    .Example = Summary.Example
                    .Note = Summary.Note
                    .Params = Summary.Params
                    .Published = Summary.Published
                    .Remarks = Summary.Remarks
                    .Rights = Summary.Rights
                    .See = Summary.See
                    .SeeAlso = Summary.SeeAlso
                    .Summary = Summary.Summary
                    .Title = Summary.Title
                    .Updated = Summary.Updated
                    .Usage = Summary.Usage
                End If
                If Not IsNothing(Attributes) Then
                    .Browsable = Attributes.Browsable
                    .Category = Attributes.Category
                    .Custom = Attributes.Custom
                    .DefaultValue = Attributes.DefaultValue
                    If Attributes.Description <> "" Then
                        .Description = Attributes.Description
                    End If
                    .Deserializable = Attributes.Deserializable
                    .DllImport = Attributes.DllImport
                    .Editor = Attributes.Editor
                    .NonSerialized = Attributes.NonSerialized
                    .RelatedImageList = Attributes.RelatedImageList
                    .Serializable = Attributes.Serializable
                    .XmlIgnore = Attributes.XmlIgnore
                    .XmlInclude = Attributes.XmlInclude
                    .XmlRoot = Attributes.XmlRoot
                    .AttributeList = Attributes
                End If

            End With

        End Sub
#End Region
#End Region
    End Class
#End Region
#Region "|08.00.06| <Class> <Statement> [Runtime]"
    ''' <summary>
    ''' https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/const-statement
    ''' </summary>
    Public Class [Runtime]
        Inherits Statement
#Region "<1> [Property]{9}"
#Region "<01.00> <Property> [Constructor]{9}"
#Region "|2019/04/24 00h10:536| <01.00.00> <Property> <Constructor> [Call=Attribute|Attributelist)]"'(Set|Get) the Attribute as List(Of InnerStatement.AttributeList)
        Private _Attribute As Attributelist
        ''' <Summary>
        ''' (Set|Get) the Attribute as List(Of Attributelist)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h10:536 </Published>
        ''' <Updated>[Created=2019/04/24 00h10:536][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Attribute as List(Of Attributelist)"), Browsable(True)>
        Public Property Attribute() As Attributelist
            Get
                Return _Attribute
            End Get
            Set(ByVal Value As Attributelist)
                _Attribute = Value
            End Set
        End Property
#End Region ' (Set|Get) the Attribute as List(Of InnerStatement.AttributeList)
#Region "|2019/04/24 00h11:932| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) the AccessModifier as AccessModifiers
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' (Set|Get) the AccessModifier as AccessModifiers
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h11:932 </Published>
        ''' <Updated>[Created=2019/04/24 00h11:932][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the AccessModifier as AccessModifiers"), Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)
                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) the AccessModifier as AccessModifiers
#Region "|2019/04/24 00h12:680| <01.00.02> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) the [Shadows] as Boolean
        Private _Shadows As Boolean
        ''' <Summary>
        ''' (Set|Get) the [Shadows] as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h12:680 </Published>
        ''' <Updated>[Created=2019/04/24 00h12:680][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the [Shadows] as Boolean"), Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)
                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) the [Shadows] as Boolean
#Region "|2019/05/07 16h19:252| <01.00.03> <Property> <Constructor> [Call=Shared|Boolean]"'(Set|Get) Make the statement Shareable.
        Private _Shared As Boolean
        ''' <Summary>
        ''' (Set|Get) Make the statement Shareable.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 16h19:252 </Published>
        ''' <Updated>[Created=2019/05/07 16h19:252][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) Make the statement Shareable."), Browsable(True)>
        Public Property [Shared]() As Boolean
            Get
                Return _Shared
            End Get
            Set(ByVal Value As Boolean)
                _Shared = Value
            End Set
        End Property
#End Region ' (Set|Get) Make the statement Shareable.
#Region "|2019/04/24 00h28:596| <01.00.04> <Property> <Constructor> [Call=RuntimeName|String]"'(Set|Get) the RuntimeName as String
        Private _RuntimeName As String
        ''' <Summary>
        ''' (Set|Get) the RuntimeName as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h28:596 </Published>
        ''' <Updated>[Created=2019/04/24 00h28:596][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the RuntimeName as String"), Browsable(True)>
        Public Property RuntimeName() As String
            Get
                Return _RuntimeName
            End Get
            Set(ByVal Value As String)
                _RuntimeName = Value
            End Set
        End Property
#End Region ' (Set|Get) the RuntimeName as String
#Region "|2019/04/24 00h29:367| <01.00.05> <Property> <Constructor> [Call=ReturnType|String]"'(Set|Get) Required if Option Strict is On. Return type of the constant.
        Private _ReturnType As String
        ''' <Summary>
        ''' (Set|Get) Required if Option Strict is On. Return type of the constant.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h29:367 </Published>
        ''' <Updated>[Created=2019/04/24 00h29:367][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) Required if Option Strict is On. Return type of the constant."), Browsable(True)>
        Public Property ReturnType() As String
            Get
                Return _ReturnType
            End Get
            Set(ByVal Value As String)
                _ReturnType = Value
            End Set
        End Property
#End Region ' (Set|Get) Required if Option Strict is On. Return type of the constant.
#Region "|2019/04/24 00h29:218| <01.00.06> <Property> <Constructor> [Call=Initializer|String]"'(Set|Get) Required. Expression that is evaluated at compile time and assigned to the constant.
        Private _Initializer As String
        ''' <Summary>
        ''' Required. Expression that is evaluated at compile time and assigned to the constant.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h29:218 </Published>
        ''' <Updated>[Created=2019/04/24 00h29:218][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required. Expression that is evaluated at compile time and assigned to the constant."), Browsable(True)>
        Public Property Initializer() As String
            Get
                Return _Initializer
            End Get
            Set(ByVal Value As String)
                _Initializer = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Expression that is evaluated at compile time and assigned to the constant.
#Region "|2019/05/07 15h36:609| <01.00.07> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) the SummaryStatement as Summary
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' (Set|Get) the SummaryStatement as Summary
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 15h36:609 </Published>
        ''' <Updated>[Created=2019/05/07 15h36:609][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the SummaryStatement as Summary"), Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get
                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)
                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the SummaryStatement as Summary
#Region "|2019/06/01 17h47:932| <01.00.08> <Property> <Constructor> [Call=ProcedureModifier|ProcedureModifiers]"'(Set|Get) the ProcedureModifier as ProcedureModifiers
        Private _ProcedureModifier As ProcedureModifiers
        ''' <Summary>
        ''' (Set|Get) the ProcedureModifier as ProcedureModifiers
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h11:932 </Published>
        ''' <Updated>[Created=2019/04/24 00h11:932][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the ProcedureModifier as ProcedureModifiers"), Browsable(True)>
        Public Property ProcedureModifier() As ProcedureModifiers
            Get
                Return _ProcedureModifier
            End Get
            Set(ByVal Value As ProcedureModifiers)
                _ProcedureModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) the ProcedureModifier as ProcedureModifiers
#Region "|2019/06/01 17h50:174| <01.00.09> <Property> <Constructor> [Call=Dim|Boolean]"'(Set|Get) Make it a Dim Statement.
        Private _Dim As Boolean
        ''' <Summary>
        ''' (Set|Get) Make it a Dim Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 16h19:252 </Published>
        ''' <Updated>[Created=2019/05/07 16h19:252][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) Make it a Dim Statement."), Browsable(True)>
        Public Property [Dim]() As Boolean
            Get
                Return _Dim
            End Get
            Set(ByVal Value As Boolean)
                _Dim = Value
            End Set
        End Property
#End Region ' (Set|Get) Make it a Dim Statement.

#End Region
#Region "|01.03| <Property> [Parent]{4}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h26:392| <01.03.01> <Property> <Parent> |.ParentStructure()|VbNET.Structure|"' (Set|Get) The ParentStructure as VbNET.Structure.
        Private _ParentStructure As VbNET.Structure
        '''    <Summary>
        '''     (Set|Get) The ParentStructure as VbNET.Structure.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h26:413 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentStructure as VbNET.Structure."), XmlIgnore>
        Property ParentStructure() As VbNET.Structure
            Get
                Return _ParentStructure
            End Get
            Set(ByVal Value As VbNET.Structure)
                _ParentStructure = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentStructure as VbNET.Structure.
#Region "[On] |2019/05/22 13h27:647| <01.03.02> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.03> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#Region "|01.01| <Property> [Price]{4}"
#Region "[On] |2019/06/12 16h50:602| <01.00.00> <Property> <Info> |.Production_Cost()|Double|"' (Set|Get) The Production_Cost as Double.
        Private _Production_Cost As Double
        '''    <Summary>
        '''     (Set|Get) The Production_Cost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h50:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Production_Cost as Double.")>
        Property Production_Cost() As Double
            Get
                Return _Production_Cost
            End Get
            Set(ByVal Value As Double)
                _Production_Cost = Value
            End Set
        End Property
#End Region '(Set|Get) The Production_Cost as Double.
#Region "[On] |2019/06/12 16h55:025| <01.00.02> <Property> <Info> |.Unit_Cost_Runtime()|Double|"' (Set|Get) The Unit_Cost_Runtime as Double.
        Private _Unit_Cost_Runtime As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Runtime as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:025 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Runtime as Double.")>
        Property Unit_Cost_Runtime() As Double
            Get
                Return _Unit_Cost_Runtime
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Runtime = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Runtime as Double.
#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()

            With Me
                .RuntimeName = ""
                .AccessModifier = AccessModifiers.Public
                .ProcedureModifier = ProcedureModifiers.Nothing
                .ReturnType = ""
                .ID = 0
                .ImageIndex = Format.[Runtime]
                .Dim = False
                .Initializer = ""
                .ReturnType = ""
                .RegionCategory = 0
                .StatementFormat = Format.[Runtime]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)

                .Updated(Status.Online, "The test is successful.",, Now) = ""

                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = ""
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Const "
                .VB_CloseStatement = ""
                .Python_OpenStatement = ""
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable|True])]"
        Public Sub PrintStatement(Optional ByVal Enable As Boolean = True)
            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            Me.Production_Cost = 0
            Me.Unit_Cost_Runtime = My.Settings.Price_Runtime
            Me.Production_Cost += Me.Unit_Cost_Runtime
            With Me
                .RegionCode = IIf(.StatementFormat < 10, "0" & .StatementFormat, .StatementFormat) & "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." & IIf(.ID < 10, "0" & .ID, .ID)
            End With
            If Me.Description = "" Or IsNothing(Me.Description) Or Me.Description.Length < 1 Then
                Me.Description = "Variable " & Me.Name & " as " & Me.ReturnType & "."
            End If
#Region "<Format Description>"
            If Description.Contains("(Set|Get)") Then
                Me.Description = Description
#End Region
            Else
                Me.Description = "(Set|Get) " & Me.Description
            End If

            Me.Summary = Me.SummaryStatement.Print_VB
            Me.SummaryStatement = New Summary(Me.Description, , Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage, Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)
            Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)

            'Create 
            If Me.Enable = True Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Runtime> <" & Me.Category & "> |." & Me.Name & "()" & "|" & Me.ReturnType & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                If Me.Dim = True Then
                    Me.Print_VB.Add("   Dim " & Me.Name & " As " & Me.ReturnType & IIf(Me.DefaultValue <> "", IIf(Me.ReturnType = "String", " = " & Space & Me.DefaultValue & Space, " = " & Me.DefaultValue), ""))
                Else
                    Me.Print_VB.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) & " " & VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                   IIf(Me.Shadows = True, " Shadows ", "") &
                                   IIf(Me.Shared = True, " Shared ", "") &
                                    Me.Name & " As " & ReturnType & IIf(Me.DefaultValue <> "", IIf(Me.ReturnType = "String", " = " & Space & Me.DefaultValue & Space, " = " & Me.DefaultValue), ""))
                End If

#End Region
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Runtime> <" & Me.Category & "> |." & Me.Name & "()" & "|Runtime|  " & Me.Description)

#Region "<Summary>"
                Me.Print_C.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                      ReturnType & " " & Me.Name & ";")
#End Region
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Runtime> <" & Me.Category & "> |." & Me.Name & "()" & "|Runtime|  " & Me.Description)

#Region "<Summary>"
                Me.Print_JavaScript.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                      ReturnType & " " & Me.Name & ";")
#End Region
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Runtime> <" & Me.Category & "> |." & Me.Name & "()" & "|Runtime|  " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                      ReturnType & " " & Me.Name & ";")
#End Region
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Runtime> <" & Me.Category & "> |." & Me.Name & "()" & "|Runtime|  " & Me.Description)

#Region "<Summary>"
                Me.Print_Python.Add(Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("    " & Me.Attribute.Python)
#End Region
#Region "<Caller>"
                Me.Print_Python.Add("   member " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                      ReturnType & " " & Me.Name)
#End Region
                Me.Print_Python.Add("#endregion " & Me.Description)
#End Region
#End Region
            ElseIf Me.Enable = False Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Runtime> <" & Me.Category & "> |." & Me.Name & "()" & "|Runtime|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_VB.Add("''    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("''    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                If Me.Dim = True Then
                    Me.Print_VB.Add("'''   Dim " & Me.Name & " As " & Me.ReturnType & IIf(Me.DefaultValue <> "", IIf(Me.ReturnType = "String", " = " & Space & Me.DefaultValue & Space, " = " & Me.DefaultValue), ""))
                Else
                    Me.Print_VB.Add("'''   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) & " " & VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                   IIf(Me.Shadows = True, " Shadows ", "") &
                                   IIf(Me.Shared = True, " Shared ", "") &
                                    Me.Name & " As " & ReturnType & IIf(Me.DefaultValue <> "", IIf(Me.ReturnType = "String", " = " & Space & Me.DefaultValue & Space, " = " & Me.DefaultValue), ""))
                End If

#End Region
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Runtime> <" & Me.Category & "> |." & Me.Name & "()" & "|Runtime|  " & Me.Description)

#Region "<Summary>"
                Me.Print_C.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("//    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                      ReturnType & " " & Me.Name & ";")
#End Region
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_JavaScript.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("//    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                      ReturnType & " " & Me.Name & ";")
#End Region
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("//    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                      ReturnType & " " & Me.Name & ";")
#End Region
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_Python.Add(Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("//    " & Me.Attribute.Python)
#End Region
#Region "<Caller>"
                Me.Print_Python.Add("//   member " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                      ReturnType & " " & Me.Name)
#End Region
                Me.Print_Python.Add("#endregion " & Me.Description)
#End Region
#End Region
            End If

            Me.VB = ""
            Me.C = ""
            Me.Python = ""
            Me.JavaScript = ""
            Me.F = ""
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next



        End Sub
#End Region
#Region "<04.01.01> <Sub> <Print> [PrintStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]]"
        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub
#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Runtime]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Runtime\" & Statement.Name & ".Runtime"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Runtime") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Runtime")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Runtime],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Runtime"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Runtime"
                        FilePath = My.Application.Info.DirectoryPath & "\Runtime\" & Statement.Name & ".Runtime"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    'MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Runtime]
            Dim Result As New [Runtime]
            Dim Serializer As New XmlSerializer(GetType([Runtime]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type [Runtime].")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Runtime]
                    Temp = VbNET.[Runtime].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri
                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .RuntimeName = Temp.RuntimeName
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .ReturnType = Temp.ReturnType
                        .DefaultValue = Temp.DefaultValue
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .RuntimeName = Temp.RuntimeName
                        .Example = Temp.Example

                        .F = Temp.F

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex
                        .Initializer = Temp.Initializer

                        .JavaScript = Temp.JavaScript

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .Params = Temp.Params
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Summary = Temp.Summary
                        .SummaryStatement = Temp.SummaryStatement

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .VB = Temp.VB
                        .Variables = Temp.Variables

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot
                    End With

                    Result.Output = New VbNET.Runtime(Temp.Name, Temp.ReturnType, Temp.Initializer, Temp.AccessModifier, Temp.ProcedureModifier, Temp.Shadows, Temp.Shared, Temp.Enable, Temp.Description, Temp.AttributeList, Temp.AuthorName, Temp.AuthorEmail, Temp.AuthorUri, Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Usage, Temp.Remarks, Temp.Example, Temp.Note, Temp.Published, Temp.Rights, Temp.Title, Temp.See, Temp.SeeAlso, Temp.Status, "", Now)
                    'Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Browsable, Temp.Enable, Temp.CustomProperty, Temp.DllImport, Temp.Remarks, Temp.Usage, Temp.Example, Temp.Note,, Temp.Rights, Temp.See, Temp.SeeAlso)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Runtime.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="Name">Required. Name of this external reference. For more information, see Declared Element Names.</param>
        ''' <param name="AccessModifier">Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected</param>
        ''' <param name="MakeShadows">Optional. See Shadows.</param>
        ''' <param name="Enable">Enable the statement or disable it.</param>
        ''' <param name="Description">The summary statement.</param>
        ''' <param name="Attributes">[AttributeList]The AttributesList</param>
        ''' <param name="AuthorName">[Summary]The Author Name</param>
        ''' <param name="AuthorEmail">[Summary]The Author Email</param>
        ''' <param name="AuthorUrl">[Summary]The Author Url</param>
        ''' <param name="ContributorName">[Summary]The ContributorName</param>
        ''' <param name="ContributorEmail">[Summary]The ContributorEmail</param>
        ''' <param name="ContributorUrl">[Summary]The ContributorUrl</param>
        ''' <param name="Usage">[Summary]How to use this statement.</param>
        ''' <param name="Remark">[Summary]Special remarks regardinig this statment.</param>
        ''' <param name="Example">[Summary]Example of how to use this statment.</param>
        ''' <param name="Note">[Summary]Note regarding this statement.</param>
        ''' <param name="Published">[Summary]When this statment has been published.</param>
        ''' <param name="Rights">[Summary]The rights and authorisation for the usage of this command.</param>
        ''' <param name="Title">[Summary]The title of the statement</param>
        ''' <param name="See">[Summary]Reference to an external URl reference or internal object.</param>
        ''' <param name="SeeAlso">[Summary]Reference to an external URl reference or internal object.</param>
        ''' <param name="Status">[Summary]Status of this Statment.</param>
        ''' <param name="SituationLog">[Summary]Log report of this Statment.</param>
        ''' <param name="LogTime">[Summary]Log report time of this statment.</param>
        ''' <param name="Returntype">Required if Option Strict is On. Return type of the constant.</param>
        ''' <param name="Initializer">Required. Expression that is evaluated at compile time and assigned to the constant.</param>
        Public Sub New(ByVal Name As String,
                       ByVal Returntype As String,
              Optional ByVal Initializer As String = "",
              Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Public,
              Optional ByVal ProcedureModifier As ProcedureModifiers = ProcedureModifiers.Nothing,
              Optional ByVal MakeShadows As Boolean = False,
              Optional ByVal MakeShared As Boolean = False,
              Optional ByVal Enable As Boolean = True,
              Optional ByVal Description As String = "",
              Optional ByVal Attributes As Attributelist = Nothing,
              Optional ByVal AuthorName As String = "",
              Optional ByVal AuthorEmail As String = "",
              Optional ByVal AuthorUrl As String = "",
              Optional ByVal ContributorName As String = "",
              Optional ByVal ContributorEmail As String = "",
              Optional ByVal ContributorUrl As String = "",
              Optional ByVal Usage As String = "",
              Optional ByVal Remark As String = "",
              Optional ByVal Example As String = "",
              Optional ByVal Note As String = "",
              Optional ByVal Published As String = "",
              Optional ByVal Rights As String = "",
              Optional ByVal Title As String = "",
              Optional ByVal See As String = "",
              Optional ByVal SeeAlso As String = "",
              Optional ByVal Status As Status = Status.Running,
              Optional ByVal SituationLog As String = "",
              Optional ByVal LogTime As Date = Nothing)
            Clear()

            With Me
                .Name = Name
                .Shadows = MakeShadows
                .Statement = Statement
                .RuntimeName = Name
                .AccessModifier = AccessModifier
                .Enable = Enable
                .AuthorUri = AuthorUrl
                .ContributorUri = ContributorUrl
                .ProcedureModifier = ProcedureModifier
                .Description = Description
                .ReturnType = Returntype
                .Initializer = Initializer
                .Shared = MakeShared
                If IsNothing(LogTime) Then
                    LogTime = New Date
                    LogTime = Now
                End If
                .Updated(Status, SituationLog & Environment.NewLine & "Need to construct the printing methods and also make the necessary research to find out how to convert this method to other languages.",, LogTime) = ""
                If Not IsNothing(Attributes) Then
                    With Attributes
                        Me.Browsable = .Browsable
                        Me.Category = .Category
                        Me.Custom = .Custom
                        Me.DefaultValue = .DefaultValue
                        Me.Description = .Description
                        Me.Deserializable = .Deserializable
                        Me.DllImport = .DllImport
                        Me.Editor = .Editor
                        Me.NonSerialized = .NonSerialized
                        Me.RelatedImageList = .RelatedImageList
                        Me.Serializable = .Serializable
                        Me.XmlIgnore = .XmlIgnore
                        Me.XmlInclude = .XmlInclude
                        Me.XmlRoot = .XmlRoot
                    End With
                End If
                If Me.Description = "" Then
                    .Description = Description
                End If

                .AuthorName = AuthorName
                .AuthorEmail = AuthorEmail
                .AuthorUri = AuthorUri
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUri
                .Usage = Usage
                .Remarks = Remark
                .Example = Example
                .Published = Published
                .Rights = Rights
                .Note = Note
                .Title = Title
                .See = See
                .SeeAlso = SeeAlso

                .SummaryStatement = New Summary(Me.Description,  , Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage,
                Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)

            End With
        End Sub
#End Region
#End Region
#Region "<8> [Class]"
#End Region
    End Class
#End Region
#Region "|08.00.07| <Class> <Statement> [Loader]"
    Public Class [Loader]
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]"
#Region "|2019/05/07 15h40:881| <01.00.00> <Property> <Constructor> [Call=ParameterList|List(Of InnerStatement.ParameterList_Statement)]"'(Set|Get) the ParameterList as List(Of InnerStatement.ParameterList_Statement)
        Private _ParameterList As List(Of InnerStatement.ParameterList_Statement)
        ''' <Summary>
        ''' (Set|Get) the ParameterList as List(Of InnerStatement.ParameterList_Statement)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 15h40:881 </Published>
        ''' <Updated>[Created=2019/05/07 15h40:881][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the ParameterList as List(Of InnerStatement.ParameterList_Statement)"), Browsable(True)>
        Public Property ParameterList() As List(Of InnerStatement.ParameterList_Statement)
            Get
                Return _ParameterList
            End Get
            Set(ByVal Value As List(Of InnerStatement.ParameterList_Statement))
                _ParameterList = Value
            End Set
        End Property
#End Region ' (Set|Get) the ParameterList as List(Of InnerStatement.ParameterList_Statement)
#Region "|2019/05/07 15h51:628| <01.00.01> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) the SummaryStatement as Summary
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' (Set|Get) the SummaryStatement as Summary
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 15h51:628 </Published>
        ''' <Updated>[Created=2019/05/07 15h51:628][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the SummaryStatement as Summary"), Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get
                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)
                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the SummaryStatement as Summary
#Region "|2019/04/12 13h55:386| <01.00.02> <Property> <Constructor> [Call=Attribute|AttributeList]"'(Set|Get) The attribute list of the enumeration.
        Private _Attribute As Attributelist
        ''' <Summary>
        ''' The attribute list of the enumeration.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 13h55:386 </Published>
        ''' <Updated>[Created=2019/04/12 13h55:386][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("The attribute list of the enumeration."),
Browsable(True)>
        Public Property Attribute() As Attributelist
            Get

                Return _Attribute
            End Get
            Set(ByVal Value As Attributelist)

                _Attribute = Value
            End Set
        End Property
#End Region ' (Set|Get) The attribute list of the enumeration.
#Region "|2019/04/12 19h29:134| <01.00.03> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) Optional.
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' Optional.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h29:134 </Published>
        ''' <Updated>[Created=2019/04/12 19h29:133][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional."),
Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)
                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional.
#Region "|2019/04/12 19h30:113| <01.00.04> <Property> <Constructor> [Call=ProcedureModifier|ProcedureModifiers]"'(Set|Get) Optional.
        Private _ProcedureModifier As ProcedureModifiers
        ''' <Summary>
        ''' Optional.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h30:113 </Published>
        ''' <Updated>[Created=2019/04/12 19h30:113][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional."),
Browsable(True)>
        Public Property ProcedureModifier() As ProcedureModifiers
            Get
                Return _ProcedureModifier
            End Get
            Set(ByVal Value As ProcedureModifiers)
                _ProcedureModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional.
#Region "|2019/04/12 19h27:556| <01.00.05> <Property> <Constructor> [Call=Partial|Boolean]"'(Set|Get) Optional. Indicates Description of a partial method. See Partial Methods.
        Private _Partial As Boolean
        ''' <Summary>
        ''' Optional. Indicates Description of a partial method. See Partial Methods.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h27:556 </Published>
        ''' <Updated>[Created=2019/04/12 19h27:556][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Indicates Description of a partial method. See Partial Methods."),
Browsable(True)>
        Public Property [Partial]() As Boolean
            Get
                Return _Partial
            End Get
            Set(ByVal Value As Boolean)
                _Partial = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates Description of a partial method. See Partial Methods.
#Region "|2019/04/12 19h31:967| <01.00.06> <Property> <Constructor> [Call=[Shared]|Boolean]"'(Set|Get) Optional. See Shared.
        Private _Shared As Boolean
        ''' <Summary>
        ''' Optional. See Shared.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h31:967 </Published>
        ''' <Updated>[Created=2019/04/12 19h31:967][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Shared."),
Browsable(True)>
        Public Property [Shared]() As Boolean
            Get
                Return _Shared
            End Get
            Set(ByVal Value As Boolean)
                _Shared = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Shared.
#Region "|2019/04/12 19h31:763| <01.00.07> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) Optional. See Shadows.
        Private _Shadows As Boolean
        ''' <Summary>
        ''' Optional. See Shadows.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h31:763 </Published>
        ''' <Updated>[Created=2019/04/12 19h31:763][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Shadows."),
Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)
                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Shadows.
#Region "|2019/04/12 19h32:160| <01.00.08> <Property> <Constructor> [Call=[Async]|Boolean]"'(Set|Get) The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods.
        Private _Async As Boolean
        ''' <Summary>
        ''' The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/12 19h32:160 </Published>
        ''' <Updated>[Created=2019/04/12 19h32:159][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods."),
Browsable(True)>
        Public Property [Async]() As Boolean
            Get
                Return _Async
            End Get
            Set(ByVal Value As Boolean)
                _Async = Value
            End Set
        End Property
#End Region ' (Set|Get) The Async modifier indicates that the method or lambda expression that it modifies is asynchronous. Such methods are referred to as async methods.
#End Region
#Region "|01.03| <Property> [Parent]"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/06/10 16h04:647| <01.03.01> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()

            With Me

                .ID = 0
                .ImageIndex = Format.[Loader]
                .RegionCategory = 0
                .StatementFormat = Format.[Loader]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)

                .Updated(Status.Online, "The test is successful.",, Now) = ""
                .AccessModifier = AccessModifiers.Public
                .ProcedureModifier = ProcedureModifiers.Nothing

                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = ""
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Sub New("
                .VB_CloseStatement = "End Sub "
                .VB_CloseStatement = "End Sub "
                .Python_OpenStatement = ""
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable|True])]"
        Public Sub PrintStatement(Optional ByVal Enable As Boolean = True)
            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            With Me
                .RegionCode = IIf(.StatementFormat < 10, "0" & .StatementFormat, .StatementFormat) & "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." & IIf(.ID < 10, "0" & .ID, .ID)
            End With
            If Me.Description = "" Or IsNothing(Me.Description) Or Me.Description.Length < 1 Then
                Me.Description = "The sub " & Me.Name & "."
            End If

#Region "<Format Description>"
            If Description.Contains("(Set|Get)") Then
            Else
                Me.Description = "(Set|Get) " & Me.Description
            End If
#End Region


            Me.Summary = Me.SummaryStatement.Print_VB
            Dim Parameters As String = ""
            Dim Params As New List(Of Summary.Param)
            If Not IsNothing(Me.ParameterList) Then
                Parameters = InnerStatement.ParameterList_Statement.Print(Me.ParameterList, CodeLanguage.Vb)
                For Each P As InnerStatement.ParameterList_Statement In Me.ParameterList
                    Dim Pa As New Summary.Param(P.ParameterName, P.Definition)
                    Params.Add(Pa)
                Next
            End If
            Me.SummaryStatement = New Summary(Me.Description, Params, Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage, Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)
            Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)

            'Create 
            If Me.Enable = True Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Loader> <" & Me.Category & "> |." & Me.Name & "()" & "|Function" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Dim ST As String = ""
                If Params.Count - 1 > 0 Then
                    For Each PP As Summary.Param In Params
                        ST += "    " & PP.ToString & vbNewLine
                    Next
                End If
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB & ST)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    IIf(Me.Shared = True, "Shared ", "") &
                                    IIf(Me.Async = True, "Async ", "") &
                                    "Sub New (" & IIf(Parameters <> "", Parameters, "") & ")")
#End Region
                Me.Print_VB.Add(Me.Statement)
                Me.Print_VB.Add("   End Sub")
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Function> <" & Me.Category & "> |." & Me.Name & "()" & "|Function" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_C.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Async = True, "async ", "") &
                                    "void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region

                Me.Print_C.Add(Me.Statement)
                Me.Print_C.Add("   };")
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_JavaScript.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Async = True, "async ", "") &
                                    "void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region
                Me.Print_JavaScript.Add(Me.Statement)
                Me.Print_JavaScript.Add("   };")
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add("    " & Me.SummaryStatement.Print_F)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("    Let " & Me.Name & " = ")
#End Region
                Me.Print_F.Add("    " & Me.Statement)
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
                Me.Print_Python.Add("    " & Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("    " & Me.Attribute.Python)
#End Region

#Region "<Caller>"
                Me.Print_Python.Add("    " & Me.Name & " ::= " & Space & Me.Name & Space)
                Me.Print_Python.Add(Me.Statement)
#End Region
                Me.Print_Python.Add("#endregion /" & Me.Description)
#End Region

            ElseIf Me.Enable = False Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[Off] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("//    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "Shadows ", "") &
                                    IIf(Me.Shared = True, "Shared ", "") &
                                    IIf(Me.Async = True, "Async ", "") &
                                    "Function " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")")
#End Region
                Me.Print_VB.Add("// " & Me.Statement)
                Me.Print_VB.Add("//   End Function")
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_C.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("//    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Async = True, "async ", "") &
                                    "void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region

                Me.Print_C.Add("// " & Me.Statement)
                Me.Print_C.Add("//   };")
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_JavaScript.Add("    " & Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("//    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("//   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    VbNET.ProcedureModifiers_ToString(Me.ProcedureModifier) &
                                    IIf(Me.Shadows = True, "new ", "") &
                                    IIf(Me.Shared = True, "static ", "") &
                                    IIf(Me.Async = True, "async ", "") &
                                    "void " & Me.Name & "(" & IIf(Parameters <> "", Parameters, "") & ")" &
                                    "   {")
#End Region
                Me.Print_JavaScript.Add(Me.Statement)
                Me.Print_JavaScript.Add("//   };")
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add("//    " & Me.SummaryStatement.Print_F)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("//    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("//    Let " & Me.Name & " = ")
#End Region
                Me.Print_F.Add("//    " & Me.Statement)
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Sub> <" & Me.Category & "> |." & Me.Name & "()" & "|Sub" & "}|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_Python.Add("    " & Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("//    " & Me.Attribute.Python)
#End Region

#Region "<Caller>"
                Me.Print_Python.Add("//    " & Me.Name & " ::= " & Space & Me.Name & Space)
                Me.Print_Python.Add("//" & Me.Statement)
#End Region
                Me.Print_Python.Add("#endregion /" & Me.Description)
#End Region
#End Region
            End If

            Me.VB = ""
            Me.C = ""
            Me.Python = ""
            Me.JavaScript = ""
            Me.F = ""
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next
        End Sub
#End Region
#Region "<04.01.01> <Sub> <Print> [PrintStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]]"
        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub
#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Loader]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Loader\" & Statement.Name & ".Loader"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Loader") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Loader")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Loader],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Loader"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Loader"
                        FilePath = My.Application.Info.DirectoryPath & "\Loader\" & Statement.Name & ".Loader"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Loader]
            Dim Result As New [Loader]
            Dim Serializer As New XmlSerializer(GetType([Loader]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type [Loader].")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Loader]
                    Temp = VbNET.[Loader].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri
                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .DefaultValue = Temp.DefaultValue
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .Example = Temp.Example

                        .F = Temp.F

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex

                        .JavaScript = Temp.JavaScript

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .Params = Temp.Params
                        .ParameterList = Temp.ParameterList
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Summary = Temp.Summary

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .VB = Temp.VB
                        .Variables = Temp.Variables

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot
                    End With

                    Result.Output = New VbNET.Loader(Temp.Name, , Temp.ParameterList, Temp.Statement, Temp.Enable, Temp.Description, Temp.AttributeList, Temp.AuthorName, Temp.AuthorEmail, Temp.AuthorUri, Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Usage, Temp.Remarks, Temp.Example, Temp.Note, Temp.Published, Temp.Rights, Temp.Title, Temp.See, Temp.SeeAlso, Temp.Status, "", Now)
                    'Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Browsable, Temp.Enable, Temp.CustomProperty, Temp.DllImport, Temp.Remarks, Temp.Usage, Temp.Example, Temp.Note,, Temp.Rights, Temp.See, Temp.SeeAlso)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Loader.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02> <Function> [Add]"
#Region "<05.02.00> <Function> <Add> [AddParameter|InnerStatement.ParameterList_Statement]"
        ''' <summary>
        ''' Add a new Parameter in Me.ParameterList. This function also avoids adding duplicates
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <param name="ReturnType"></param>
        ''' <param name="DefaultValue"></param>
        ''' <param name="Modifier"></param>
        ''' <param name="Definition"></param>
        ''' <returns></returns>
        Public Function AddParameter(ByVal Name As String,
                                     ByVal ReturnType As String,
                           Optional ByVal DefaultValue As String = "",
                           Optional ByVal Modifier As String = "ByVal",
                           Optional ByVal Definition As String = "") As InnerStatement.ParameterList_Statement
            Dim Result As New InnerStatement.ParameterList_Statement(Name, ReturnType, DefaultValue,
                                                IIf(Modifier.Contains("ByVal"), True, False),
                                                IIf(Modifier.Contains("ByRef"), True, False),
                                                IIf(Modifier.Contains("Optional"), True, False),
                                                IIf(Modifier.Contains("ParamArray"), True, False),
Definition, True)

            If IsNothing(Me.ParameterList) Then
                Me.ParameterList = New List(Of InnerStatement.ParameterList_Statement)
            End If
            If IsNothing(Me.Params) Then
                Me.Params = New List(Of Summary.Param)
            End If
            Dim Pi As New Summary.Param(Result.Name, Result.Definition)
            Me.Params.Add(Pi)
            Dim addit As Boolean = True
            For i = 0 To Me.ParameterList.Count - 1
                If Me.ParameterList(i).Name = Name Then
                    addit = False
                    Exit For
                End If
            Next
            If addit = True Then
                Me.ParameterList.Add(Result)
            End If
            Return Result
        End Function

#End Region
#End Region
#Region "<05.03> <Function> [Remove]"
#Region "<05.03.00> <Function> <Remove> [RemoveParameter|InnerStatement.ParameterList_Statement]"
        Public Function RemoveParameter(ByVal Name As String) As InnerStatement.ParameterList_Statement
            Dim Result As InnerStatement.ParameterList_Statement = Nothing
            If Name <> "" Then
                If IsNothing(Me.ParameterList) Then
                    Return Result
                    Exit Function
                End If
                For i = 0 To Me.ParameterList.Count - 1
                    If Me.ParameterList(i).Name = Name Then
                        Result = Me.ParameterList(i)
                        Exit For
                    End If
                Next
                If Not IsNothing(Result) Then
                    Me.ParameterList.Remove(Result)
                End If
            End If
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="Name">The name of the Loader Sub Method</param>
        ''' <param name="Parameters">The list of parameters</param>
        ''' <param name="Statement">The statement of the Sub</param>
        ''' <param name="Enable">Enable of Disable the Statement.</param>
        ''' <param name="Description">The Description of the Statement</param>
        ''' <param name="Attributes">[AttributeList] The Attributes.</param>
        ''' <param name="AuthorName">[Summary]The Author Name</param>
        ''' <param name="AuthorEmail">[Summary]The Author Email</param>
        ''' <param name="AuthorUrl">[Summary]The Author Url</param>
        ''' <param name="ContributorName">[Summary]The ContributorName</param>
        ''' <param name="ContributorEmail">[Summary]The ContributorEmail</param>
        ''' <param name="ContributorUrl">[Summary]The ContributorUrl</param>
        ''' <param name="Usage">[Summary]How to use this statement.</param>
        ''' <param name="Remark">[Summary]Special remarks regardinig this statment.</param>
        ''' <param name="Example">[Summary]Example of how to use this statment.</param>
        ''' <param name="Note">[Summary]Note regarding this statement.</param>
        ''' <param name="Published">[Summary]When this statment has been published.</param>
        ''' <param name="Rights">[Summary]The rights and authorisation for the usage of this command.</param>
        ''' <param name="Title">[Summary]The title of the statement</param>
        ''' <param name="See">[Summary]Reference to an external URl reference or internal object.</param>
        ''' <param name="SeeAlso">[Summary]Reference to an external URl reference or internal object.</param>
        ''' <param name="Status">[Summary]Status of this Statment.</param>
        ''' <param name="SituationLog">[Summary]Log report of this Statment.</param>
        ''' <param name="LogTime">[Summary]Log report time of this statment.</param>
        Public Sub New(ByVal Name As String,
              Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Public,
              Optional ByVal Parameters As List(Of InnerStatement.ParameterList_Statement) = Nothing,
              Optional ByVal Statement As String = "",
              Optional ByVal Enable As Boolean = True,
              Optional ByVal Description As String = "",
              Optional ByVal Attributes As Attributelist = Nothing,
              Optional ByVal AuthorName As String = "",
              Optional ByVal AuthorEmail As String = "",
              Optional ByVal AuthorUrl As String = "",
              Optional ByVal ContributorName As String = "",
              Optional ByVal ContributorEmail As String = "",
              Optional ByVal ContributorUrl As String = "",
              Optional ByVal Usage As String = "",
              Optional ByVal Remark As String = "",
              Optional ByVal Example As String = "",
              Optional ByVal Note As String = "",
              Optional ByVal Published As String = "",
              Optional ByVal Rights As String = "",
              Optional ByVal Title As String = "",
              Optional ByVal See As String = "",
              Optional ByVal SeeAlso As String = "",
              Optional ByVal Status As Status = Status.Running,
              Optional ByVal SituationLog As String = "",
              Optional ByVal LogTime As Date = Nothing)
            Clear()

            With Me
                If IsNothing(Parameters) Then
                    .Name = "Empty"
                Else
                    .Name = Name
                    .ParameterList = Parameters
                End If
                .AccessModifier = AccessModifier
                .Statement = Statement
                .Enable = Enable
                .Description = Description
                .Attribute = Attributes
                .AuthorUri = AuthorUrl
                .StatementFormat = Format.Loader
                .AuthorName = AuthorName
                .AuthorEmail = AuthorEmail
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUrl
                .Usage = Usage
                .Remarks = Remark
                .Example = Example
                .Published = Published
                .Rights = Rights
                .Note = Note
                .Title = Title
                .See = See
                .SeeAlso = SeeAlso
                .StatementFormat = Format.[Loader]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)
                Dim Params As New List(Of Summary.Param)
                If Not IsNothing(Me.ParameterList) Then
                    For i = 0 To Me.ParameterList.Count - 1
                        Dim P As New Summary.Param(Me.ParameterList(i).ParameterName, Me.ParameterList(i).Definition)
                        Params.Add(P)
                    Next
                End If
                .SummaryStatement = New Summary(Me.Description, Params, Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage,
                Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)

            End With

        End Sub
#End Region
#Region "<06.02> <Loader> [New(Statement|Class)]"
        Public Sub New(ByVal Statement As [Class])
            Clear()
            If Not IsNothing(Statement) Then
                With Me
                    .Name = Statement.Name
#Region "<Printing VB>"
                    If Not IsNothing(Statement.Properties) Then
                        'Shorting list first.
                        Dim ListRequired As New List(Of [Property])
                        Dim ListOptional As New List(Of [Property])
                        If Statement.Properties.Count - 1 >= 0 Then
                            For Each P As [Property] In Statement.Properties
                                If P.Required = True Then
                                    ListRequired.Add(P)
                                Else
                                    ListOptional.Add(P)
                                End If
                            Next
                        End If
                        Dim ListAll As New List(Of [Property])
                        ListAll.AddRange(ListRequired)
                        ListAll.AddRange(ListOptional)

                        If ListAll.Count - 1 > 0 Then
                            .Print_VB.Add("Public Sub New(")
                            For i = 0 To ListAll.Count - 2
                                Dim P As [Property] = ListAll(i)
                                If P.Required = True Then
                                    .Print_VB.Add("ByVal " & P.Name & " As " & P.ReturnType & ", ")
                                Else
                                    If P.DefaultValue <> "" Then
                                        .Print_VB.Add("Optional ByVal " & P.Name & " As " & P.ReturnType & " = " & P.DefaultValue & ", ")
                                    Else
                                        .Print_VB.Add("Optional ByVal " & P.Name & " As " & P.ReturnType & " = Nothing, ")
                                    End If
                                End If
                            Next
                            Dim P0 As [Property] = ListAll(ListAll.Count - 1)
                            If P0.Required = True Then
                                .Print_VB.Add("ByVal " & P0.Name & " As " & P0.ReturnType & ")")
                            Else
                                If P0.DefaultValue <> "" Then
                                    .Print_VB.Add("Optional ByVal " & P0.Name & " As " & P0.ReturnType & " = " & P0.DefaultValue & ") ")
                                Else
                                    .Print_VB.Add("Optional ByVal " & P0.Name & " As " & P0.ReturnType & " = Nothing) ")
                                End If
                            End If
                        Else
                            .Print_VB.Add("Public Sub New()")
                        End If
                        If Statement.Properties.Count - 1 >= 0 Then
                            .Print_VB.Add(" With Me")
                            For Each P As [Property] In Statement.Properties
                                .Print_VB.Add("." & P.Name & " = " & P.Name)
                            Next
                            .Print_VB.Add(" End With")
                        Else

                        End If

                    End If
#End Region
                    With Statement
                        Me.Description = .Description
                        Me.Note = .Note
                        Me.Published = .Published
                        Me.Remarks = .Remarks
                        Me.Rights = .Rights
                        Me.See = .See
                        Me.SeeAlso = .SeeAlso
                        Me.SummaryStatement = .SummaryStatement
                    End With
                    If Not IsNothing(Me.SummaryStatement) Then
                        With Me.SummaryStatement
                            Me.AuthorEmail = .AuthorEmail
                            Me.AuthorUri = .AuthorUri
                            Me.AuthorName = .AuthorName
                            Me.ContributorEmail = .ContributorEmail
                            Me.ContributorName = .ContributorName
                            Me.ContributorUri = .ContributorUri
                            Me.CustomProperty = .CustomProperty
                        End With
                    End If
                End With

            End If

        End Sub
#End Region
#End Region
    End Class
#End Region
#Region "|08.00.08| <Class> <Statement> [Class]"
    Public Class [Class]
        Inherits Statement
#Region "<1> [Property]{4}"
#Region "<01.00> <Property> [Constructor]{12}"
#Region "|2019/04/14 11h40:458| <01.00.00> <Property> <Constructor> [Call=Attribute|AttributeList]"'(Set|Get) Optional. See Attribute List.
        Private _Attribute As Attributelist
        ''' <Summary>
        ''' Optional. See Attribute List.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h40:458 </Published>
        ''' <Updated>[Created=2019/04/14 11h40:458][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Attribute List."),
Browsable(True)>
        Public Property Attribute() As Attributelist
            Get
                Return _Attribute
            End Get
            Set(ByVal Value As Attributelist)
                _Attribute = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Attribute List.
#Region "|2019/04/14 11h41:035| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected See Access levels in Visual Basic.
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected See Access levels in Visual Basic.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h41:0035 </Published>
        ''' <Updated>[Created=2019/04/14 11h41:0035][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected See Access levels in Visual Basic."),
Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)
                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected See Access levels in Visual Basic.
#Region "|2019/04/14 11h43:019| <01.00.02> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) Optional. See Shadows.
        Private _Shadows As Boolean
        ''' <Summary>
        ''' Optional. See Shadows.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h43:0019 </Published>
        ''' <Updated>[Created=2019/04/14 11h43:0019][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Shadows."),
Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)
                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Shadows.
#Region "|2019/04/14 11h44:563| <01.00.03> <Property> <Constructor> [Call=[MustInherit]|Boolean]"'(Set|Get) Optional. See MustInherit.
        Private _MustInherit As Boolean
        ''' <Summary>
        ''' Optional. See MustInherit.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h44:563 </Published>
        ''' <Updated>[Created=2019/04/14 11h44:563][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See MustInherit."),
Browsable(True)>
        Public Property [MustInherit]() As Boolean
            Get
                Return _MustInherit
            End Get
            Set(ByVal Value As Boolean)
                _MustInherit = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See MustInherit.
#Region "|2019/04/14 11h45:199| <01.00.04> <Property> <Constructor> [Call=[NotInheritable]|Boolean]"'(Set|Get) Optional. See NotInheritable.
        Private _NotInheritable As Boolean
        ''' <Summary>
        ''' Optional. See NotInheritable.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h45:199 </Published>
        ''' <Updated>[Created=2019/04/14 11h45:199][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See NotInheritable."),
Browsable(True)>
        Public Property [NotInheritable]() As Boolean
            Get
                Return _NotInheritable
            End Get
            Set(ByVal Value As Boolean)
                _NotInheritable = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See NotInheritable.
#Region "|2019/04/14 11h45:481| <01.00.05> <Property> <Constructor> [Call=[Partial]|Boolean]"'(Set|Get) Optional. Indicates a partial Description of the class. See Partial.
        Private _Partial As Boolean
        ''' <Summary>
        ''' Optional. Indicates a partial Description of the class. See Partial.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h45:481 </Published>
        ''' <Updated>[Created=2019/04/14 11h45:481][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Indicates a partial Description of the class. See Partial."),
Browsable(True)>
        Public Property [Partial]() As Boolean
            Get
                Return _Partial
            End Get
            Set(ByVal Value As Boolean)
                _Partial = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates a partial Description of the class. See Partial.
#Region "|2019/04/14 11h46:977| <01.00.06> <Property> <Constructor> [Call=ClassName|String]"'(Set|Get) Required. Name of this class. See Declared Element Names.
        Private _ClassName As String
        ''' <Summary>
        ''' Required. Name of this class. See Declared Element Names.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h46:977 </Published>
        ''' <Updated>[Created=2019/04/14 11h46:977][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required. Name of this class. See Declared Element Names."),
Browsable(True)>
        Public Property ClassName() As String
            Get
                Return _ClassName
            End Get
            Set(ByVal Value As String)
                _ClassName = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Name of this class. See Declared Element Names.
#Region "|2019/04/14 11h47:864| <01.00.07> <Property> <Constructor> [Call=[Inherits]|String]"'(Set|Get) Optional. Indicates that this class inherits the members of another class. See Inherits Statement.
        Private _Inherits As String
        ''' <Summary>
        ''' Optional. Indicates that this class inherits the members of another class. See Inherits Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h47:864 </Published>
        ''' <Updated>[Created=2019/04/14 11h47:864][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Indicates that this class inherits the members of another class. See Inherits Statement."),
Browsable(True)>
        Public Property [Inherits]() As String
            Get
                Return _Inherits
            End Get
            Set(ByVal Value As String)
                _Inherits = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates that this class inherits the members of another class. See Inherits Statement.
#Region "|2019/04/14 11h51:640| <01.00.08> <Property> <Constructor> [Call=Implements|List(Of String)]"'(Set|Get) Optional. Indicates that this class implements the members of one or more interfaces. See Implements Statement.
        Private _Implements As List(Of String)
        ''' <Summary>
        ''' Optional. Indicates that this class implements the members of one or more interfaces. See Implements Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h51:640 </Published>
        ''' <Updated>[Created=2019/04/14 11h51:640][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Indicates that this class implements the members of one or more interfaces. See Implements Statement."),
Browsable(True)>
        Public Property [Implements]() As List(Of String)
            Get
                Return _Implements
            End Get
            Set(ByVal Value As List(Of String))
                _Implements = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates that this class implements the members of one or more interfaces. See Implements Statement.
#Region "|2019/05/07 15h55:256| <01.00.09> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) the SummaryStatement as Summary
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' (Set|Get) the SummaryStatement as Summary
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 15h55:255 </Published>
        ''' <Updated>[Created=2019/05/07 15h55:255][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the SummaryStatement as Summary"), Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get
                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)
                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the SummaryStatement as Summary

#Region "[On] |2019/05/22 15h16:467| <01.00.10> <Property> <Constructor> |.[Namespace]()|List(Of ReferenceCaller)|"' (Set|Get) The [Namespace] as List(Of ReferenceCaller).
        Private _Namespace As List(Of ReferenceCaller)
        '''    <Summary>
        '''     (Set|Get) The [Namespace] as List(Of ReferenceCaller).
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h16:475 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Constructor"), Description("(Set|Get) The [Namespace] as List(Of ReferenceCaller).")>
        Public Property [Namespace]() As List(Of ReferenceCaller)
            Get
                Return _Namespace
            End Get
            Set(ByVal Value As List(Of ReferenceCaller))
                _Namespace = Value
            End Set
        End Property
#End Region '(Set|Get) The [Namespace] as List(Of ReferenceCaller).
#Region "[On] |2019/05/22 15h17:768| <01.00.11> <Property> <Constructor> |.Caller()|ReferenceCaller|"' (Set|Get) The Caller as ReferenceCaller.
        Private _Caller As ReferenceCaller
        '''    <Summary>
        '''     (Set|Get) The Caller as ReferenceCaller.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h17:775 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Constructor"), Description("(Set|Get) The Caller as ReferenceCaller.")>
        Public Property Caller() As ReferenceCaller
            Get
                Return _Caller
            End Get
            Set(ByVal Value As ReferenceCaller)
                _Caller = Value
            End Set
        End Property
#End Region '(Set|Get) The Caller as ReferenceCaller.
#Region "[On] |2019/06/18 15h02:980| <01.00.05> <Property> <Info> |.Items()|List(Of StatementItem)|"' (Set|Get) The Items as List(Of StatementItem).
        Private _Items As List(Of StatementItem)
        '''    <Summary>
        '''     (Set|Get) The Items as List(Of StatementItem).
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 15h02:985 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Items as List(Of StatementItem).")>
        Public Property Items() As List(Of StatementItem)
            Get
                Return _Items
            End Get
            Set(ByVal Value As List(Of StatementItem))
                _Items = Value
            End Set
        End Property
#End Region '(Set|Get) The Items as List(Of StatementItem).

#End Region
#Region "<01.01> <Property> [Statements]{16}"
#Region "|2019/04/14 11h54:916| <01.01.00> <Property> <Statements> [Call=[Importation]|List(Of Import)]"'(Set|Get) Stores the list of Import Statement.
        Private _Importation As List(Of VbNET.Import)
        ''' <Summary>
        ''' Stores the list of Import Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h54:916 </Published>
        ''' <Updated>[Created=2019/04/14 11h54:916][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Import Statement."),
            Browsable(True)>
        Public Property [Importation]() As List(Of VbNET.Import)
            Get
                Return _Importation
            End Get
            Set(ByVal Value As List(Of VbNET.Import))
                _Importation = Value
            End Set
        End Property
        '<XmlIgnore()>
#End Region ' (Set|Get) Stores the list of Import Statement.
#Region "|2019/04/14 11h56:424| <01.01.01> <Property> <Statements> [Call=Properties|List(Of Property)]"'(Set|Get) Stores the list of Property Statement.
        Private _Properties As List(Of VbNET.Property)
        ''' <Summary>
        ''' Stores the list of Property Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h56:424 </Published>
        ''' <Updated>[Created=2019/04/14 11h56:424][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Property Statement."),
            Browsable(True)>
        Public Property Properties() As List(Of VbNET.Property)
            Get
                Return _Properties
            End Get
            Set(ByVal Value As List(Of VbNET.Property))
                _Properties = Value
            End Set
        End Property
#End Region ' (Set|Get) Stores the list of Property Statement.
#Region "|2019/04/14 11h56:180| <01.01.02> <Property> <Statements> [Call=Enumeration|List(Of Enumerate)]"'(Set|Get) Stores the list of Enumerate Statement.
        Private _Enumeration As List(Of VbNET.Enumeration)
        ''' <Summary>
        ''' Stores the list of Enumerate Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h56:180 </Published>
        ''' <Updated>[Created=2019/04/14 11h56:180][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Enumerate Statement."),
            Browsable(True)>
        Public Property Enumeration() As List(Of VbNET.Enumeration)
            Get
                Return _Enumeration
            End Get
            Set(ByVal Value As List(Of VbNET.Enumeration))
                _Enumeration = Value
            End Set
        End Property
#End Region ' (Set|Get) Stores the list of Enumerate Statement.
#Region "|2019/04/14 11h57:050| <01.01.03> <Property> <Statements> [Call=Structure|List(Of Structure)]"'(Set|Get) Stores the list of Structure Statement.
        Private _Structure As List(Of VbNET.Structure)
        ''' <Summary>
        ''' Stores the list of Structure Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h57:0050 </Published>
        ''' <Updated>[Created=2019/04/14 11h57:0050][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Structure Statement."),
            Browsable(True)>
        Public Property [Structure]() As List(Of VbNET.Structure)
            Get
                Return _Structure
            End Get
            Set(ByVal Value As List(Of VbNET.Structure))
                _Structure = Value
            End Set
        End Property
#End Region ' (Set|Get) Stores the list of Structure Statement.
#Region "|2019/04/14 11h59:278| <01.01.04> <Property> <Statements> [Call=Sub|List(Of Sub)]"'(Set|Get) Stores the list of Sub Statement.
        Private _Sub As List(Of VbNET.Sub)
        ''' <Summary>
        ''' Stores the list of Sub Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h59:278 </Published>
        ''' <Updated>[Created=2019/04/14 11h59:278][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Sub Statement."),
            Browsable(True)>
        Public Property [Sub]() As List(Of VbNET.Sub)
            Get
                Return _Sub
            End Get
            Set(ByVal Value As List(Of VbNET.Sub))
                _Sub = Value
            End Set
        End Property
#End Region ' (Set|Get) Stores the list of Sub Statement.
#Region "|2019/04/14 12h00:578| <01.01.05> <Property> <Statements> [Call=[Function]|List(Of Function)]"'(Set|Get) Stores the list of Function Statement.
        Private _Function As List(Of VbNET.Function)
        ''' <Summary>
        ''' Stores the list of Function Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 12h00:578 </Published>
        ''' <Updated>[Created=2019/04/14 12h00:578][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Function Statement."),
            Browsable(True)>
        Public Property [Function]() As List(Of VbNET.Function)
            Get
                Return _Function
            End Get
            Set(ByVal Value As List(Of VbNET.Function))
                _Function = Value
            End Set
        End Property
#End Region ' (Set|Get) Stores the list of Function Statement.
#Region "|2019/04/14 14h01:945| <01.01.06> <Property> <Statements> [Call=[Runtime]|List(Of Runtime)]"'(Set|Get) List of Runtime
        Private _Runtime As List(Of VbNET.Runtime)
        ''' <Summary>
        ''' List of Runtime
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h01:945 </Published>
        ''' <Updated>[Created=2019/04/14 14h01:945][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("List of Runtime"),
            Browsable(True)>
        Public Property [Runtime]() As List(Of VbNET.Runtime)
            Get
                Return _Runtime
            End Get
            Set(ByVal Value As List(Of VbNET.Runtime))
                _Runtime = Value
            End Set
        End Property
#End Region ' (Set|Get) List of Runtime
#Region "|2019/04/14 14h20:933| <01.01.07> <Property> <Statements> [Call=Loader|List(Of Loader)]"'(Set|Get) The list of Loader Statement. Example is Public Sub New().
        Private _Loader As List(Of VbNET.Loader)
        ''' <Summary>
        ''' The list of Loader Statement. Example is Public Sub New().
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h20:933 </Published>
        ''' <Updated>[Created=2019/04/14 14h20:933][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("The list of Loader Statement. Example is Public Sub New()."),
            Browsable(True)>
        Public Property Loader() As List(Of VbNET.Loader)
            Get
                Return _Loader
            End Get
            Set(ByVal Value As List(Of VbNET.Loader))
                _Loader = Value
            End Set
        End Property
#End Region ' (Set|Get) The list of Loader Statement. Example is Public Sub New().
#Region "|2019/04/14 14h21:878| <01.01.08> <Property> <Statements> [Call=Classes|List(Of Class)]"'(Set|Get) The list of Class Statement.
        Private _Classes As List(Of VbNET.Class)
        ''' <Summary>
        ''' The list of Class Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h21:878 </Published>
        ''' <Updated>[Created=2019/04/14 14h21:878][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("The list of Class Statement."),
            Browsable(True)>
        Public Property Classes() As List(Of VbNET.Class)
            Get
                Return _Classes
            End Get
            Set(ByVal Value As List(Of VbNET.Class))
                _Classes = Value
            End Set
        End Property
#End Region ' (Set|Get) The list of Class Statement.
#Region "|2019/04/14 14h22:430| <01.01.09> <Property> <Statements> [Call=Constante|List(Of Vbnet.Constante)]"'(Set|Get) The list of Constante Statement.
        Private _Constante As List(Of VbNET.Constante)
        ''' <Summary>
        ''' The list of Constante Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h22:430 </Published>
        ''' <Updated>[Created=2019/04/14 14h22:430][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("The list of Constante Statement."),
            Browsable(True)>
        Public Property Constante() As List(Of VbNET.Constante)
            Get
                Return _Constante
            End Get
            Set(ByVal Value As List(Of VbNET.Constante))
                _Constante = Value
            End Set
        End Property
#End Region ' (Set|Get) The list of Constante Statement.
#Region "|2019/04/14 14h23:536| <01.01.10> <Property> <Statements> [Call=Event|List(Of VBNET.Event)]"'(Set|Get) The list of Event Statement.
        Private _Event As List(Of VbNET.Event)
        ''' <Summary>
        ''' The list of Event Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h23:536 </Published>
        ''' <Updated>[Created=2019/04/14 14h23:536][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("The list of Event Statement."),
            Browsable(True)>
        Public Property [Event]() As List(Of VbNET.Event)
            Get
                Return _Event
            End Get
            Set(ByVal Value As List(Of VbNET.Event))
                _Event = Value
            End Set
        End Property
#End Region ' (Set|Get) The list of Event Statement.
#Region "|2019/05/07 17h06:518| <01.01.11> <Property> <Statements> [Call=Delegates|List(Of VbNET.Delegate)]"'(Set|Get) the Delegates as List(Of VbNET.Delegate).
        Private _Delegates As List(Of VbNET.Delegate)
        ''' <Summary>
        ''' (Set|Get) the Delegates as List(Of VbNET.Delegate).
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h06:518 </Published>
        ''' <Updated>[Created=2019/05/07 17h06:518][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"), Description("(Set|Get) the Delegates as List(Of VbNET.Delegate)."), Browsable(True)>
        Public Property Delegates() As List(Of VbNET.Delegate)
            Get
                Return _Delegates
            End Get
            Set(ByVal Value As List(Of VbNET.Delegate))
                _Delegates = Value
            End Set
        End Property
#End Region ' (Set|Get) the Delegates as List(Of VbNET.Delegate).
#Region "|2019/05/07 17h06:718| <01.01.12> <Property> <Statements> [Call=Declares|List(Of VbNET.Declare)]"'(Set|Get) the Declares as List(Of VbNET.Declare)
        Private _Declares As List(Of VbNET.Declare)
        ''' <Summary>
        ''' (Set|Get) the Declares as List(Of VbNET.Declare)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h06:718 </Published>
        ''' <Updated>[Created=2019/05/07 17h06:718][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"), Description("(Set|Get) the Declares as List(Of VbNET.Declare)"), Browsable(True)>
        Public Property Declares() As List(Of VbNET.Declare)
            Get
                Return _Declares
            End Get
            Set(ByVal Value As List(Of VbNET.Declare))
                _Declares = Value
            End Set
        End Property
#End Region ' (Set|Get) the Declares as List(Of VbNET.Declare)
#Region "|2019/05/07 17h06:783| <01.01.13> <Property> <Statements> [Call=Dims|List(Of VbNET.Dim)]"'(Set|Get) the Dims as List(Of VbNET.Dim)
        Private _Dims As List(Of VbNET.Dim)
        ''' <Summary>
        ''' (Set|Get) the Dims as List(Of VbNET.Dim)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h06:783 </Published>
        ''' <Updated>[Created=2019/05/07 17h06:783][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"), Description("(Set|Get) the Dims as List(Of VbNET.Dim)"), Browsable(True)>
        Public Property Dims() As List(Of VbNET.Dim)
            Get
                Return _Dims
            End Get
            Set(ByVal Value As List(Of VbNET.Dim))
                _Dims = Value
            End Set
        End Property
#End Region ' (Set|Get) the Dims as List(Of VbNET.Dim)
#Region "|2019/05/07 17h07:796| <01.01.14> <Property> <Statements> [Call=Modules|List(Of VbNET.Module)]"'(Set|Get) the Modules as List(Of VbNET.Module)
        Private _Modules As List(Of VbNET.Module)
        ''' <Summary>
        ''' (Set|Get) the Modules as List(Of VbNET.Module)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h07:796 </Published>
        ''' <Updated>[Created=2019/05/07 17h07:795][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"), Description("(Set|Get) the Modules as List(Of VbNET.Module)"), Browsable(True)>
        Public Property Modules() As List(Of VbNET.Module)
            Get
                Return _Modules
            End Get
            Set(ByVal Value As List(Of VbNET.Module))
                _Modules = Value
            End Set
        End Property
#End Region ' (Set|Get) the Modules as List(Of VbNET.Module)
#Region "|2019/06/07 17h33:796| <01.01.15> <Property> <Statements> [Call=MyNamespace|List(Of ReferenceCaller)]"'(Set|Get) the MyNamespace as List(Of ReferenceCaller)
        Private _MyNamespace As List(Of ReferenceCaller)
        ''' <Summary>
        ''' (Set|Get) the MyNamespace as List(Of ReferenceCaller)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h07:796 </Published>
        ''' <Updated>[Created=2019/05/07 17h07:795][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"), Description("(Set|Get) the MyNamespace as List(Of ReferenceCaller)"), Browsable(True)>
        Public Property MyNamespace() As List(Of ReferenceCaller)
            Get
                Return _MyNamespace
            End Get
            Set(ByVal Value As List(Of ReferenceCaller))
                _MyNamespace = Value
            End Set
        End Property
#End Region ' (Set|Get) the MyNamespace as List(Of ReferenceCaller)
#End Region
#Region "<01.02> <Property> [FileInfo]{6}"
#Region "|2019/04/14 14h15:073| <01.02.00> <Property> <FileInfo> [Call=DirectoryPath|IO.DirectoryInfo]"'(Set|Get) Using a Directory Output to store the created Files.
        Private _DirectoryPath As IO.DirectoryInfo
        ''' <Summary>
        ''' Using a Directory Output to store the created Files.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h15:0073 </Published>
        ''' <Updated>[Created=2019/04/14 14h15:0073][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"),
Description("Using a Directory Output to store the created Files."),
Browsable(True)>
        <XmlIgnore()>
        Public Property DirectoryPath() As IO.DirectoryInfo
            Get
                Return _DirectoryPath
            End Get
            Set(ByVal Value As IO.DirectoryInfo)
                _DirectoryPath = Value
            End Set
        End Property
#End Region ' (Set|Get) Using a Directory Output to store the created Files.
#Region "|2019/04/14 14h16:258| <01.02.01> <Property> <FileInfo> [Call=FileVB|Fichier]"'(Set|Get) The Vb.NET Class file.
        Private _FileVB As Fichier
        ''' <Summary>
        ''' The Vb.NET Class file.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h16:258 </Published>
        ''' <Updated>[Created=2019/04/14 14h16:257][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"),
Description("The Vb.NET Class file."),
Browsable(True)>
        Public Property FileVB() As Fichier
            Get
                Return _FileVB
            End Get
            Set(ByVal Value As Fichier)
                _FileVB = Value
            End Set
        End Property
#End Region ' (Set|Get) The Vb.NET Class file.
#Region "|2019/04/14 14h17:620| <01.02.02> <Property> <FileInfo> [Call=FileC|Fichier]"'(Set|Get) The C#.NET Class file.
        Private _FileC As Fichier
        ''' <Summary>
        ''' The C#.NET Class file.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h17:620 </Published>
        ''' <Updated>[Created=2019/04/14 14h17:620][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"),
Description("The C#.NET Class file."),
Browsable(True)>
        Public Property FileC() As Fichier
            Get
                Return _FileC
            End Get
            Set(ByVal Value As Fichier)
                _FileC = Value
            End Set
        End Property
#End Region ' (Set|Get) The C#.NET Class file.
#Region "|2019/04/14 14h18:224| <01.02.03> <Property> <FileInfo> [Call=FileF|Fichier]"'(Set|Get) The F#.NET Class file.
        Private _FileF As Fichier
        ''' <Summary>
        ''' The F#.NET Class file.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h18:224 </Published>
        ''' <Updated>[Created=2019/04/14 14h18:224][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"),
Description("The F#.NET Class file."),
Browsable(True)>
        Public Property FileF() As Fichier
            Get
                Return _FileF
            End Get
            Set(ByVal Value As Fichier)
                _FileF = Value
            End Set
        End Property
#End Region ' (Set|Get) The F#.NET Class file.
#Region "|2019/04/14 14h18:577| <01.02.04> <Property> <FileInfo> [Call=FilePython|Fichier]"'(Set|Get) The Python Class file.
        Private _FilePython As Fichier
        ''' <Summary>
        ''' The Python Class file.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h18:577 </Published>
        ''' <Updated>[Created=2019/04/14 14h18:577][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"),
Description("The Python Class file."),
Browsable(True)>
        Public Property FilePython() As Fichier
            Get
                Return _FilePython
            End Get
            Set(ByVal Value As Fichier)
                _FilePython = Value
            End Set
        End Property
#End Region ' (Set|Get) The Python Class file.
#Region "|2019/05/07 17h04:299| <01.02.05> <Property> <FileInfo> [Call=FileJavaScript|Fichier]"'(Set|Get) the FileJavaScript as Fichier.
        Private _FileJavaScript As Fichier
        ''' <Summary>
        ''' (Set|Get) the FileJavaScript as Fichier.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h04:299 </Published>
        ''' <Updated>[Created=2019/05/07 17h04:299][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"), Description("(Set|Get) the FileJavaScript as Fichier."), Browsable(True)>
        Public Property FileJavaScript() As Fichier
            Get
                Return _FileJavaScript
            End Get
            Set(ByVal Value As Fichier)
                _FileJavaScript = Value
            End Set
        End Property
#End Region ' (Set|Get) the FileJavaScript as Fichier.
#End Region
#Region "<01.03> <Property> [Nodes]{16}"
#Region "|2019/04/14 14h26:881| <01.03.00> <Property> <Node> [Call=MainNode|DevComponents.AdvTree.Node]"'(Set|Get) The Main node of the Class.
        Private _MainNode As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The Main node of the Class.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h26:880 </Published>
        ''' <Updated>[Created=2019/04/14 14h26:880][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The Main node of the Class."),
Browsable(True)>
        <XmlIgnore()>
        Public Property MainNode() As DevComponents.AdvTree.Node
            Get
                Return _MainNode
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _MainNode = Value
            End Set
        End Property
#End Region ' (Set|Get) The Main node of the Class.
#Region "|2019/04/14 14h26:059| <01.03.01> <Property> <Node> [Call=Node_Importation|DevComponents.AdvTree.Node]"'(Set|Get) The node for Importations.
        Private _Node_Importation As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Importations.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h26:0059 </Published>
        ''' <Updated>[Created=2019/04/14 14h26:0059][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Importations."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Importation() As DevComponents.AdvTree.Node
            Get
                Return _Node_Importation
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Importation = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Importations.
#Region "|2019/04/14 14h27:218| <01.03.02> <Property> <Node> [Call=Node_Properties|DevComponents.AdvTree.Node]"'(Set|Get) The node for Properties.
        Private _Node_Properties As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Properties.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h27:218 </Published>
        ''' <Updated>[Created=2019/04/14 14h27:218][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Properties."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Properties() As DevComponents.AdvTree.Node
            Get
                Return _Node_Properties
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Properties = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Properties.
#Region "|2019/04/14 14h28:513| <01.03.03> <Property> <Node> [Call=Node_Enumerations|DevComponents.AdvTree.Node]"'(Set|Get) The node for Enumeration.
        Private _Node_Enumerations As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Enumeration.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h28:513 </Published>
        ''' <Updated>[Created=2019/04/14 14h28:513][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Enumeration."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Enumerations() As DevComponents.AdvTree.Node
            Get
                Return _Node_Enumerations
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Enumerations = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Enumeration.
#Region "|2019/04/14 14h28:671| <01.03.04> <Property> <Node> [Call=Node_Structure|DevComponents.AdvTree.Node]"'(Set|Get) The node for Structure.
        Private _Node_Structure As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Structure.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h28:671 </Published>
        ''' <Updated>[Created=2019/04/14 14h28:671][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Structure."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Structure() As DevComponents.AdvTree.Node
            Get
                Return _Node_Structure
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Structure = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Structure.
#Region "|2019/04/14 14h29:214| <01.03.05> <Property> <Node> [Call=Node_Sub|DevComponents.AdvTree.Node]"'(Set|Get) The node for Subs.
        Private _Node_Sub As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Subs.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h29:214 </Published>
        ''' <Updated>[Created=2019/04/14 14h29:214][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Subs."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Sub() As DevComponents.AdvTree.Node
            Get
                Return _Node_Sub
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Sub = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Subs.
#Region "|2019/04/14 14h29:257| <01.03.06> <Property> <Node> [Call=Node_Function|DevComponents.AdvTree.Node]"'(Set|Get) The node for Functions.
        Private _Node_Function As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Functions.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h29:257 </Published>
        ''' <Updated>[Created=2019/04/14 14h29:256][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Functions."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Function() As DevComponents.AdvTree.Node
            Get
                Return _Node_Function
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Function = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Functions.
#Region "|2019/04/14 14h30:681| <01.03.07> <Property> <Node> [Call=Node_Loader|DevComponents.AdvTree.Node]"'(Set|Get) The node for Loaders.
        Private _Node_Loader As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Loaders.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h30:681 </Published>
        ''' <Updated>[Created=2019/04/14 14h30:681][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Loaders."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Loader() As DevComponents.AdvTree.Node
            Get
                Return _Node_Loader
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Loader = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Loaders.
#Region "|2019/04/14 14h30:652| <01.03.08> <Property> <Node> [Call=Node_Class|DevComponents.AdvTree.Node]"'(Set|Get) The node for Classes.
        Private _Node_Class As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Classes.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h30:652 </Published>
        ''' <Updated>[Created=2019/04/14 14h30:652][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Classes."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Class() As DevComponents.AdvTree.Node
            Get
                Return _Node_Class
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Class = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Classes.
#Region "|2019/04/14 14h31:161| <01.03.09> <Property> <Node> [Call=Node_Constante|DevComponents.AdvTree.Node]"'(Set|Get) The node for Constantes.
        Private _Node_Constante As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Constantes.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h31:161 </Published>
        ''' <Updated>[Created=2019/04/14 14h31:161][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Constantes."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Constante() As DevComponents.AdvTree.Node
            Get
                Return _Node_Constante
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Constante = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Constantes.
#Region "|2019/04/14 14h31:886| <01.03.10> <Property> <Node> [Call=Node_Event|DevComponents.AdvTree.Node]"'(Set|Get) The node for Events.
        Private _Node_Event As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Events.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h31:886 </Published>
        ''' <Updated>[Created=2019/04/14 14h31:886][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Events."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Event() As DevComponents.AdvTree.Node
            Get
                Return _Node_Event
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Event = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Events.
#Region "|2019/04/14 14h32:189| <01.03.11> <Property> <Node> [Call=Node_Runtime|DevComponents.AdvTree.Node]"'(Set|Get) The node for Runtimes.
        Private _Node_Runtime As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Runtimes.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h32:189 </Published>
        ''' <Updated>[Created=2019/04/14 14h32:189][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Runtimes."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Runtime() As DevComponents.AdvTree.Node
            Get
                Return _Node_Runtime
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Runtime = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Runtimes.
#Region "|2019/05/07 17h01:359| <01.03.12> <Property> <Node> [Call=Node_Delegate|DevComponents.AdvTree.Node]"'(Set|Get) the Node_Delegate as DevComponents.AdvTree.Node
        Private _Node_Delegate As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' (Set|Get) the Node_Delegate as DevComponents.AdvTree.Node
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h01:359 </Published>
        ''' <Updated>[Created=2019/05/07 17h01:359][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"), Description("(Set|Get) the Node_Delegate as DevComponents.AdvTree.Node"), Browsable(True)>
        Public Property Node_Delegate() As DevComponents.AdvTree.Node
            Get
                Return _Node_Delegate
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Delegate = Value
            End Set
        End Property
#End Region ' (Set|Get) the Node_Delegate as DevComponents.AdvTree.Node
#Region "|2019/05/07 17h02:638| <01.03.13> <Property> <Node> [Call=Node_Declare|DevComponents.AdvTree.Node]"'(Set|Get) the Node_Declare as DevComponents.AdvTree.Node
        Private _Node_Declare As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' (Set|Get) the Node_Declare as DevComponents.AdvTree.Node
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h02:638 </Published>
        ''' <Updated>[Created=2019/05/07 17h02:638][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"), Description("(Set|Get) the Node_Declare as DevComponents.AdvTree.Node"), Browsable(True)>
        Public Property Node_Declare() As DevComponents.AdvTree.Node
            Get
                Return _Node_Declare
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Declare = Value
            End Set
        End Property
#End Region ' (Set|Get) the Node_Declare as DevComponents.AdvTree.Node
#Region "|2019/05/07 17h02:062| <01.03.14> <Property> <Node> [Call=Node_Dim|DevComponents.AdvTree.Node]"'(Set|Get) the Node_Dim as DevComponents.AdvTree.Node
        Private _Node_Dim As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' (Set|Get) the Node_Dim as DevComponents.AdvTree.Node
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h02:062 </Published>
        ''' <Updated>[Created=2019/05/07 17h02:062][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"), Description("(Set|Get) the Node_Dim as DevComponents.AdvTree.Node"), Browsable(True)>
        Public Property Node_Dim() As DevComponents.AdvTree.Node
            Get
                Return _Node_Dim
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Dim = Value
            End Set
        End Property
#End Region ' (Set|Get) the Node_Dim as DevComponents.AdvTree.Node
#Region "|2019/05/07 17h03:805| <01.03.15> <Property> <Node> [Call=Node_Module|DevComponents.AdvTree.Node]"'(Set|Get) the Node_Module as DevComponents.AdvTree.Node
        Private _Node_Module As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' (Set|Get) the Node_Module as DevComponents.AdvTree.Node
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h03:805 </Published>
        ''' <Updated>[Created=2019/05/07 17h03:804][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"), Description("(Set|Get) the Node_Module as DevComponents.AdvTree.Node"), Browsable(True)>
        Public Property Node_Module() As DevComponents.AdvTree.Node
            Get
                Return _Node_Module
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Module = Value
            End Set
        End Property
#End Region ' (Set|Get) the Node_Module as DevComponents.AdvTree.Node
#End Region
#Region "|01.04| <Property> [Parent]{3}"
#Region "[On] |2019/05/22 12h55:731| <01.04.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h27:647| <01.04.01> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.04.02> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.
#End Region
#Region "|01.05| <Property> [Quote]"
#Region "[On] |2019/06/07 17h35:731| <01.05.00> <Property> <Quote> |.ProductionCost()|Double|"' (Set|Get) The ProductionCost as Double.
        Private _ProductionCost As Double
        '''    <Summary>
        '''     (Set|Get) The ProductionCost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The ProductionCost as Double.")>
        Property ProductionCost() As Double
            Get
                Return _ProductionCost
            End Get
            Set(ByVal Value As Double)
                _ProductionCost = Value
            End Set
        End Property
#End Region '(Set|Get) The ProductionCost as Double.
#Region "[On] |2019/06/07 17h39:796| <01.00.01> <Property> <Quote> |.Total_Importation()|Double|"' (Set|Get) The Total_Importation as Double.
        Private _Total_Importation As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Importation as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h39:796 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Importation as Double.")>
        Property Total_Importation() As Double
            Get
                Return _Total_Importation
            End Get
            Set(ByVal Value As Double)
                _Total_Importation = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Importation as Double.
#Region "[On] |2019/06/07 17h40:729| <01.00.02> <Property> <Quote> |.Total_Property()|Double|"' (Set|Get) The Total_Property as Double.
        Private _Total_Property As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Property as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h40:745 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Property as Double.")>
        Property Total_Property() As Double
            Get
                Return _Total_Property
            End Get
            Set(ByVal Value As Double)
                _Total_Property = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Property as Double.
#Region "[On] |2019/06/07 17h41:319| <01.00.03> <Property> <Quote> |.Total_Enumeration()|Double|"' (Set|Get) The Total_Enumeration as Double.
        Private _Total_Enumeration As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Enumeration as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:319 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Enumeration as Double.")>
        Property Total_Enumeration() As Double
            Get
                Return _Total_Enumeration
            End Get
            Set(ByVal Value As Double)
                _Total_Enumeration = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Enumeration as Double.
#Region "[On] |2019/06/07 17h41:979| <01.00.04> <Property> <Quote> |.Total_Structure()|Double|"' (Set|Get) The Total_Structure as Double.
        Private _Total_Structure As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Structure as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:994 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Structure as Double.")>
        Property Total_Structure() As Double
            Get
                Return _Total_Structure
            End Get
            Set(ByVal Value As Double)
                _Total_Structure = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Structure as Double.
#Region "[On] |2019/06/07 17h41:540| <01.00.05> <Property> <Quote> |.Total_Sub()|Double|"' (Set|Get) The Total_Sub as Double.
        Private _Total_Sub As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Sub as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:540 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Sub as Double.")>
        Property Total_Sub() As Double
            Get
                Return _Total_Sub
            End Get
            Set(ByVal Value As Double)
                _Total_Sub = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Sub as Double.
#Region "[On] |2019/06/07 17h41:228| <01.00.06> <Property> <Quote> |.Total_Function()|Double|"' (Set|Get) The Total_Function as Double.
        Private _Total_Function As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Function as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:244 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Function as Double.")>
        Property Total_Function() As Double
            Get
                Return _Total_Function
            End Get
            Set(ByVal Value As Double)
                _Total_Function = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Function as Double.
#Region "[On] |2019/06/07 17h42:269| <01.00.07> <Property> <Quote> |.Total_Runtime()|Double|"' (Set|Get) The Total_Runtime as Double.
        Private _Total_Runtime As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Runtime as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:269 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Runtime as Double.")>
        Property Total_Runtime() As Double
            Get
                Return _Total_Runtime
            End Get
            Set(ByVal Value As Double)
                _Total_Runtime = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Runtime as Double.
#Region "[On] |2019/06/07 17h42:669| <01.00.08> <Property> <Quote> |.Total_Loader()|Double|"' (Set|Get) The Total_Loader as Double.
        Private _Total_Loader As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Loader as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:685 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Loader as Double.")>
        Property Total_Loader() As Double
            Get
                Return _Total_Loader
            End Get
            Set(ByVal Value As Double)
                _Total_Loader = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Loader as Double.
#Region "[On] |2019/06/07 17h42:529| <01.00.09> <Property> <Quote> |.Total_Class()|Double|"' (Set|Get) The Total_Class as Double.
        Private _Total_Class As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Class as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:545 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Class as Double.")>
        Property Total_Class() As Double
            Get
                Return _Total_Class
            End Get
            Set(ByVal Value As Double)
                _Total_Class = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Class as Double.
#Region "[On] |2019/06/07 17h43:682| <01.00.10> <Property> <Quote> |.Total_Constante()|Double|"' (Set|Get) The Total_Constante as Double.
        Private _Total_Constante As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Constante as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Constante as Double.")>
        Property Total_Constante() As Double
            Get
                Return _Total_Constante
            End Get
            Set(ByVal Value As Double)
                _Total_Constante = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Constante as Double.
#Region "[On] |2019/06/07 17h43:565| <01.00.10> <Property> <Quote> |.Total_Event()|Double|"' (Set|Get) The Total_Event as Double.
        Private _Total_Event As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Event as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:565 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Event as Double.")>
        Property Total_Event() As Double
            Get
                Return _Total_Event
            End Get
            Set(ByVal Value As Double)
                _Total_Event = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Event as Double.
#Region "[On] |2019/06/07 17h43:970| <01.00.11> <Property> <Quote> |.Total_DataBase()|Double|"' (Set|Get) The Total_DataBase as Double.
        Private _Total_DataBase As Double
        '''    <Summary>
        '''     (Set|Get) The Total_DataBase as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:986 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_DataBase as Double.")>
        Property Total_DataBase() As Double
            Get
                Return _Total_DataBase
            End Get
            Set(ByVal Value As Double)
                _Total_DataBase = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_DataBase as Double.
#Region "[On] |2019/06/07 17h44:721| <01.00.12> <Property> <Quote> |.Total_Table()|Double|"' (Set|Get) The Total_Table as Double.
        Private _Total_Table As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Table as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:737 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Table as Double.")>
        Property Total_Table() As Double
            Get
                Return _Total_Table
            End Get
            Set(ByVal Value As Double)
                _Total_Table = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Table as Double.
#Region "[On] |2019/06/07 17h44:717| <01.00.13> <Property> <Quote> |.Total_Fichier()|Double|"' (Set|Get) The Total_Fichier as Double.
        Private _Total_Fichier As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Fichier as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:732 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Fichier as Double.")>
        Property Total_Fichier() As Double
            Get
                Return _Total_Fichier
            End Get
            Set(ByVal Value As Double)
                _Total_Fichier = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Fichier as Double.
#Region "[On] |2019/06/07 17h44:321| <01.00.14> <Property> <Quote> |.Total_Folder()|Double|"' (Set|Get) The Total_Folder as Double.
        Private _Total_Folder As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Folder as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:326 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Folder as Double.")>
        Property Total_Folder() As Double
            Get
                Return _Total_Folder
            End Get
            Set(ByVal Value As Double)
                _Total_Folder = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Folder as Double.
#Region "[On] |2019/06/07 17h45:044| <01.00.15> <Property> <Quote> |.Total_Parameter()|Double|"' (Set|Get) The Total_Parameter as Double.
        Private _Total_Parameter As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Parameter as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:047 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Parameter as Double.")>
        Property Total_Parameter() As Double
            Get
                Return _Total_Parameter
            End Get
            Set(ByVal Value As Double)
                _Total_Parameter = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Parameter as Double.
#Region "[On] |2019/06/07 17h45:059| <01.00.16> <Property> <Quote> |.Total_Member()|Double|"' (Set|Get) The Total_Member as Double.
        Private _Total_Member As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Member as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:059 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Member as Double.")>
        Property Total_Member() As Double
            Get
                Return _Total_Member
            End Get
            Set(ByVal Value As Double)
                _Total_Member = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Member as Double.
#Region "[On] |2019/06/07 17h45:899| <01.00.17> <Property> <Quote> |.Total_LineInfo()|Double|"' (Set|Get) The Total_LineInfo as Double.
        Private _Total_LineInfo As Double
        '''    <Summary>
        '''     (Set|Get) The Total_LineInfo as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:915 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_LineInfo as Double.")>
        Property Total_LineInfo() As Double
            Get
                Return _Total_LineInfo
            End Get
            Set(ByVal Value As Double)
                _Total_LineInfo = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_LineInfo as Double.
#Region "[On] |2019/06/07 17h47:510| <01.00.18> <Property> <Quote> |.Total_Brut()|Double|"' (Set|Get) The Total_Brut as Double.
        Private _Total_Brut As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Brut as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h47:526 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Brut as Double.")>
        Property Total_Brut() As Double
            Get
                Return _Total_Brut
            End Get
            Set(ByVal Value As Double)
                _Total_Brut = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Brut as Double.
#Region "[On] |2019/06/07 17h47:483| <01.00.19> <Property> <Quote> |.Montant_VAT()|Double|"' (Set|Get) The Montant_VAT as Double.
        Private _Montant_VAT As Double
        '''    <Summary>
        '''     (Set|Get) The Montant_VAT as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h47:504 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Montant_VAT as Double.")>
        Property Montant_VAT() As Double
            Get
                Return _Montant_VAT
            End Get
            Set(ByVal Value As Double)
                _Montant_VAT = Value
            End Set
        End Property
#End Region '(Set|Get) The Montant_VAT as Double.
#Region "[On] |2019/06/07 17h48:982| <01.00.20> <Property> <Quote> |.GrandTotal_TVA()|Double|"' (Set|Get) The GrandTotal_TVA as Double.
        Private _GrandTotal_TVA As Double
        '''    <Summary>
        '''     (Set|Get) The GrandTotal_TVA as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h48:982 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The GrandTotal_TVA as Double.")>
        Property GrandTotal_TVA() As Double
            Get
                Return _GrandTotal_TVA
            End Get
            Set(ByVal Value As Double)
                _GrandTotal_TVA = Value
            End Set
        End Property
#End Region '(Set|Get) The GrandTotal_TVA as Double.
#Region "[On] |2019/06/07 17h48:871| <01.00.21> <Property> <Quote> |.GrandTotal()|Double|"' (Set|Get) The GrandTotal as Double.
        Private _GrandTotal As Double
        '''    <Summary>
        '''     (Set|Get) The GrandTotal without VAT as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h48:886 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The GrandTotal as Double.")>
        Property GrandTotal() As Double
            Get
                Return _GrandTotal
            End Get
            Set(ByVal Value As Double)
                _GrandTotal = Value
            End Set
        End Property
#End Region '(Set|Get) The GrandTotal as Double.

#Region "[On] |2019/06/07 17h39:796| <01.00.01> <Property> <Quote> |.Quantity_Importation()|Integer|"' (Set|Get) The Quantity_Importation as Integer.
        Private _Quantity_Importation As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Importation as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h39:796 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Importation as Integer.")>
        Property Quantity_Importation() As Integer
            Get
                Return _Quantity_Importation
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Importation = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Importation as Integer.
#Region "[On] |2019/06/07 17h40:729| <01.00.02> <Property> <Quote> |.Quantity_Property()|Integer|"' (Set|Get) The Quantity_Property as Integer.
        Private _Quantity_Property As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Property as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h40:745 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Property as Integer.")>
        Property Quantity_Property() As Integer
            Get
                Return _Quantity_Property
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Property = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Property as Integer.
#Region "[On] |2019/06/07 17h41:319| <01.00.03> <Property> <Quote> |.Quantity_Enumeration()|Integer|"' (Set|Get) The Quantity_Enumeration as Integer.
        Private _Quantity_Enumeration As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Enumeration as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:319 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Enumeration as Integer.")>
        Property Quantity_Enumeration() As Integer
            Get
                Return _Quantity_Enumeration
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Enumeration = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Enumeration as Integer.
#Region "[On] |2019/06/07 17h41:979| <01.00.04> <Property> <Quote> |.Quantity_Structure()|Integer|"' (Set|Get) The Quantity_Structure as Integer.
        Private _Quantity_Structure As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Structure as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:994 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Structure as Integer.")>
        Property Quantity_Structure() As Integer
            Get
                Return _Quantity_Structure
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Structure = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Structure as Integer.
#Region "[On] |2019/06/07 17h41:540| <01.00.05> <Property> <Quote> |.Quantity_Sub()|Integer|"' (Set|Get) The Quantity_Sub as Integer.
        Private _Quantity_Sub As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Sub as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:540 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Sub as Integer.")>
        Property Quantity_Sub() As Integer
            Get
                Return _Quantity_Sub
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Sub = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Sub as Integer.
#Region "[On] |2019/06/07 17h41:228| <01.00.06> <Property> <Quote> |.Quantity_Function()|Integer|"' (Set|Get) The Quantity_Function as Integer.
        Private _Quantity_Function As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Function as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:244 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Function as Integer.")>
        Property Quantity_Function() As Integer
            Get
                Return _Quantity_Function
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Function = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Function as Integer.
#Region "[On] |2019/06/07 17h42:269| <01.00.07> <Property> <Quote> |.Quantity_Runtime()|Integer|"' (Set|Get) The Quantity_Runtime as Integer.
        Private _Quantity_Runtime As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Runtime as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:269 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Runtime as Integer.")>
        Property Quantity_Runtime() As Integer
            Get
                Return _Quantity_Runtime
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Runtime = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Runtime as Integer.
#Region "[On] |2019/06/07 17h42:669| <01.00.08> <Property> <Quote> |.Quantity_Loader()|Integer|"' (Set|Get) The Quantity_Loader as Integer.
        Private _Quantity_Loader As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Loader as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:685 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Loader as Integer.")>
        Property Quantity_Loader() As Integer
            Get
                Return _Quantity_Loader
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Loader = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Loader as Integer.
#Region "[On] |2019/06/07 17h42:529| <01.00.09> <Property> <Quote> |.Quantity_Class()|Integer|"' (Set|Get) The Quantity_Class as Integer.
        Private _Quantity_Class As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Class as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:545 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Class as Integer.")>
        Property Quantity_Class() As Integer
            Get
                Return _Quantity_Class
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Class = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Class as Integer.
#Region "[On] |2019/06/07 17h43:682| <01.00.10> <Property> <Quote> |.Quantity_Constante()|Integer|"' (Set|Get) The Quantity_Constante as Integer.
        Private _Quantity_Constante As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Constante as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Constante as Integer.")>
        Property Quantity_Constante() As Integer
            Get
                Return _Quantity_Constante
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Constante = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Constante as Integer.
#Region "[On] |2019/06/07 17h43:565| <01.00.10> <Property> <Quote> |.Quantity_Event()|Integer|"' (Set|Get) The Quantity_Event as Integer.
        Private _Quantity_Event As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Event as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:565 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Event as Integer.")>
        Property Quantity_Event() As Integer
            Get
                Return _Quantity_Event
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Event = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Event as Integer.
#Region "[On] |2019/06/07 17h43:970| <01.00.11> <Property> <Quote> |.Quantity_DataBase()|Integer|"' (Set|Get) The Quantity_DataBase as Integer.
        Private _Quantity_DataBase As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_DataBase as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:986 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_DataBase as Integer.")>
        Property Quantity_DataBase() As Integer
            Get
                Return _Quantity_DataBase
            End Get
            Set(ByVal Value As Integer)
                _Quantity_DataBase = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_DataBase as Integer.
#Region "[On] |2019/06/07 17h44:721| <01.00.12> <Property> <Quote> |.Quantity_Table()|Integer|"' (Set|Get) The Quantity_Table as Integer.
        Private _Quantity_Table As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Table as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:737 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Table as Integer.")>
        Property Quantity_Table() As Integer
            Get
                Return _Quantity_Table
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Table = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Table as Integer.
#Region "[On] |2019/06/07 17h44:717| <01.00.13> <Property> <Quote> |.Quantity_Fichier()|Integer|"' (Set|Get) The Quantity_Fichier as Integer.
        Private _Quantity_Fichier As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Fichier as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:732 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Fichier as Integer.")>
        Property Quantity_Fichier() As Integer
            Get
                Return _Quantity_Fichier
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Fichier = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Fichier as Integer.
#Region "[On] |2019/06/07 17h44:321| <01.00.14> <Property> <Quote> |.Quantity_Folder()|Integer|"' (Set|Get) The Quantity_Folder as Integer.
        Private _Quantity_Folder As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Folder as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:326 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Folder as Integer.")>
        Property Quantity_Folder() As Integer
            Get
                Return _Quantity_Folder
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Folder = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Folder as Integer.
#Region "[On] |2019/06/07 17h45:044| <01.00.15> <Property> <Quote> |.Quantity_Parameter()|Integer|"' (Set|Get) The Quantity_Parameter as Integer.
        Private _Quantity_Parameter As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Parameter as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:047 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Parameter as Integer.")>
        Property Quantity_Parameter() As Integer
            Get
                Return _Quantity_Parameter
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Parameter = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Parameter as Integer.
#Region "[On] |2019/06/07 17h45:059| <01.00.16> <Property> <Quote> |.Quantity_Member()|Integer|"' (Set|Get) The Quantity_Member as Integer.
        Private _Quantity_Member As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Member as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:059 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Member as Integer.")>
        Property Quantity_Member() As Integer
            Get
                Return _Quantity_Member
            End Get
            Set(ByVal Value As Integer)
                _Quantity_Member = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Member as Integer.
#Region "[On] |2019/06/07 17h45:899| <01.00.17> <Property> <Quote> |.Quantity_LineInfo()|Integer|"' (Set|Get) The Quantity_LineInfo as Integer.
        Private _Quantity_LineInfo As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_LineInfo as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:915 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_LineInfo as Integer.")>
        Property Quantity_LineInfo() As Integer
            Get
                Return _Quantity_LineInfo
            End Get
            Set(ByVal Value As Integer)
                _Quantity_LineInfo = Value
                CalculateQuote()
            End Set
        End Property
#End Region '(Set|Get) The Quantity_LineInfo as Integer.
#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()

            With Me
                .AccessModifier = AccessModifiers.Public

                .Classes = New List(Of [Class])
                .ClassName = ""
                .Constante = New List(Of Constante)

                .Declares = New List(Of [Declare])
                .Delegates = New List(Of [Delegate])
                .Dims = New List(Of [Dim])
                .DirectoryPath = New DirectoryInfo(My.Application.Info.DirectoryPath)

                .Enable = True
                .Enumeration = New List(Of Enumeration)
                .Event = New List(Of [Event])

                .FileC = New Fichier
                .FileF = New Fichier
                .FilePython = New Fichier
                .FileVB = New Fichier
                .FileJavaScript = New Fichier
                .Function = New List(Of [Function])

                .ID = 0
                .ImageIndex = Format.Class
                .Importation = New List(Of Import)
                .Items = New List(Of StatementItem)
                .Loader = New List(Of Loader)

                .MainNode = New DevComponents.AdvTree.Node
                .Modules = New List(Of [Module])
                .MustInherit = False

                .Name = ""
                Dim EStyle As New DevComponents.DotNetBar.ElementStyle(Color.DodgerBlue)
                .MyNamespace = New List(Of ReferenceCaller)
                .Node_Class = New DevComponents.AdvTree.Node("|0| [Importation]{0}", EStyle)
                .Node_Constante = New DevComponents.AdvTree.Node("|9| [Constante]{0}", EStyle)
                .Node_Declare = New DevComponents.AdvTree.Node("|11| [Declare]{0}", EStyle)
                .Node_Delegate = New DevComponents.AdvTree.Node("|12| [Delegate]{0}", EStyle)
                .Node_Dim = New DevComponents.AdvTree.Node("|13| [Dim]{0}", EStyle)
                .Node_Enumerations = New DevComponents.AdvTree.Node("|2| [Enumerations]{0}", EStyle)
                .Node_Event = New DevComponents.AdvTree.Node("|10| [Event]{0}", EStyle)
                .Node_Function = New DevComponents.AdvTree.Node("|4| [Function]{0}", EStyle)
                .Node_Importation = New DevComponents.AdvTree.Node("|0| [Importation]{0}", EStyle)
                .Node_Loader = New DevComponents.AdvTree.Node("|7| [Loader]{0}", EStyle)
                .Node_Module = New DevComponents.AdvTree.Node("|0| [Module]{0}", EStyle)
                .Node_Properties = New DevComponents.AdvTree.Node("|1| [Properties]{0}", EStyle)
                .Node_Runtime = New DevComponents.AdvTree.Node("|6| [Runtime]{0}", EStyle)
                .Node_Structure = New DevComponents.AdvTree.Node("|2| [Structure]{0}", EStyle)
                .Node_Sub = New DevComponents.AdvTree.Node("|3| [Sub]{0}", EStyle)
                .Node_Importation.ImageIndex = 0
                .Node_Properties.ImageIndex = 1
                .Node_Enumerations.ImageIndex = 2
                .Node_Structure.ImageIndex = 3
                .Node_Sub.ImageIndex = 4
                .Node_Function.ImageIndex = 5
                .Node_Runtime.ImageIndex = 6
                .Node_Loader.ImageIndex = 7
                .Node_Class.ImageIndex = 8
                .Node_Module.ImageIndex = 8
                .Node_Constante.ImageIndex = 9
                .Node_Event.ImageIndex = 10
                .Node_Declare.ImageIndex = 11
                .Node_Delegate.ImageIndex = 12
                .Node_Dim.ImageIndex = 6
                .NotInheritable = False

                .Partial = False
                .Properties = New List(Of [Property])

                .RegionCategory = 0
                .Runtime = New List(Of Runtime)

                .Shadows = False
                .StatementFormat = Format.Class
                .Structure = New List(Of [Structure])
                .Sub = New List(Of [Sub])

                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                       "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                       "." & IIf(.ID < 10, "0" & .ID, ID)
                .Updated(Status.Online, "The test is successful.",, Now) = ""

                .Total_Brut = 0
                .Total_Class = 0
                .Total_Constante = 0
                .Total_DataBase = 0
                .Total_Enumeration = 0
                .Total_Event = 0
                .Total_Fichier = 0
                .Total_Folder = 0
                .Total_Function = 0
                .Total_Importation = 0
                .Total_LineInfo = 0
                .Total_Loader = 0
                .Total_Member = 0
                .Total_Parameter = 0
                .Total_Property = 0
                .Total_Runtime = 0
                .Total_Structure = 0
                .Total_Sub = 0
                .Total_Table = 0
                .Montant_VAT = 0
                .Quantity_Class = 0
                .Quantity_Constante = 0
                .Quantity_DataBase = 0
                .Quantity_Enumeration = 0
                .Quantity_Event = 0
                .Quantity_Fichier = 0
                .Quantity_Folder = 0
                .Quantity_Function = 0
                .Quantity_Importation = 0
                .Quantity_LineInfo = 0
                .Quantity_Loader = 0
                .Quantity_Member = 0
                .Quantity_Parameter = 0
                .Quantity_Property = 0
                .Quantity_Runtime = 0
                .Quantity_Structure = 0
                .Quantity_Sub = 0
                .Quantity_Table = 0



                .C_OpenStatement = " {"
                .C_CloseStatement = " }"
                .F_OpenStatement = "type " '& Me.Name & "()"
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Class " ' & Me.Name & "()"
                .VB_CloseStatement = "End Class"
                .Python_OpenStatement = "class " ' & Me.Name & "()"
                .Python_CloseStatement = ""
                .JS_OpenStatement = "class " & Me.Name & "{"
                .JS_CloseStatement = "}"
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable]|Boolean(True))]"
        ''' <summary>
        ''' Print the statement
        ''' </summary>
        ''' <param name="Enable">This parameter will overide the Me.Enable Property! ByDefault is set on True.</param>
        Public Function PrintStatement(Optional ByVal Enable As Boolean = True, Optional ByVal PrintasModule As Boolean = False) As TestItem
            Dim Result As New TestItem("Printing Class", "Printing a Class Statement")


            If Me.Quantity_Loader < 0 Then
                Dim l As New Loader(Me)
                Me.Add_Loader(l)
            End If
            Try
                If Me.Note = "" Then
                    If Me.MyNamespace.Count - 1 < 0 Then
                        MyNamespace = PrintallStatements()
                    End If
                    For Each Element As ReferenceCaller In Me.MyNamespace
                        If Element.Parameters.Length > 0 Then
                            If Element.Optional = True Then
                                Me.Note += "''' |" & Element.Code & "|" & Element.Namespace & " [" & Element.Name & "](" & Element.Parameters & ")|" & Element.ReturnType & "{" & Element.DefaultValue & "} " & Element.Description
                            Else
                                Me.Note += "''' |" & Element.Code & "|" & Element.Namespace & " " & Element.Name & "(" & Element.Parameters & ")|" & Element.ReturnType & vbTab & Element.Description

                            End If
                        End If
                    Next
                End If
            Catch ex As Exception

            End Try


            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            Dim TotalStatements As Integer = 0
            TotalStatements += Me.Properties.Count + Me.Importation.Count + Me.Enumeration.Count + Me.Structure.Count + Me.Sub.Count + Me.Function.Count +
                Me.Runtime.Count + Me.Loader.Count + Me.Classes.Count + Me.Constante.Count + Me.Event.Count
            If Me.Enable = True Then
                Try


#Region "|StackFlow|"
                    Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Class> <" & Me.Category & "> |." & Me.Name & "|Class|{" & TotalStatements & "} |Production Cost : " & Total_Brut & "|Selling Price : " & Math.Round(Me.Total_Brut * My.Settings.Marge, 2) & "|" & Space & "' " & Me.Description)
#Region "|Step 01|<Formatting Nodes>"
                    Dim EStyle As New DevComponents.DotNetBar.ElementStyle(Color.White, Color.Black)
                    Me.MainNode = New DevComponents.AdvTree.Node(Me.Name)
                    Me.Node_Importation = New DevComponents.AdvTree.Node("<0> [Importation]{" & Me.Importation.Count - 1 & "}", EStyle)
                    Me.Node_Properties = New DevComponents.AdvTree.Node("<1> [Properties]{" & Me.Properties.Count - 1 & "}", EStyle)
                    Me.Node_Enumerations = New DevComponents.AdvTree.Node("<2> [Enumerations]{" & Me.Enumeration.Count - 1 & "}", EStyle)
                    Me.Node_Structure = New DevComponents.AdvTree.Node("<3> [Structure]{" & Me.Structure.Count - 1 & "}", EStyle)
                    Me.Node_Sub = New DevComponents.AdvTree.Node("<4> [Sub]{" & Me.Sub.Count - 1 & "}", EStyle)
                    Me.Node_Function = New DevComponents.AdvTree.Node("<5> [Function]{" & Me.Function.Count - 1 & "}", EStyle)
                    Me.Node_Runtime = New DevComponents.AdvTree.Node("<6> [Runtime]{" & Me.Runtime.Count - 1 & "}", EStyle)
                    Me.Node_Loader = New DevComponents.AdvTree.Node("<7> [Loader]{" & Me.Loader.Count - 1 & "}", EStyle)
                    Me.Node_Class = New DevComponents.AdvTree.Node("<8> [Class]{" & Me.Classes.Count - 1 & "}", EStyle)
                    Me.Node_Constante = New DevComponents.AdvTree.Node("<9> [Constante]{" & Me.Constante.Count - 1 & "}", EStyle)
                    Me.Node_Event = New DevComponents.AdvTree.Node("<10> [Event]{" & Me.Event.Count - 1 & "}", EStyle)
                    Me.Node_Declare = New DevComponents.AdvTree.Node("<11> [Declare]{" & Me.Declares.Count - 1 & "}", EStyle)
                    Me.Node_Delegate = New DevComponents.AdvTree.Node("<12> [Delegate]{" & Me.Delegates.Count - 1 & "}", EStyle)
                    Me.Node_Dim = New DevComponents.AdvTree.Node("<13> [Dim]{" & Me.Dims.Count - 1 & "}", EStyle)
                    Me.Node_Module = New DevComponents.AdvTree.Node("<14> [Module]{" & Me.Modules.Count - 1 & "}", EStyle)
                    With Me
                        .MainNode.ImageIndex = 8
                        .Node_Importation.ImageIndex = 0
                        .Node_Properties.ImageIndex = 1
                        .Node_Enumerations.ImageIndex = 2
                        .Node_Structure.ImageIndex = 3
                        .Node_Sub.ImageIndex = 4
                        .Node_Function.ImageIndex = 5
                        .Node_Runtime.ImageIndex = 6
                        .Node_Loader.ImageIndex = 7
                        .Node_Class.ImageIndex = 8
                        .Node_Module.ImageIndex = 8
                        .Node_Constante.ImageIndex = 9
                        .Node_Event.ImageIndex = 10
                        .Node_Declare.ImageIndex = 11
                        .Node_Delegate.ImageIndex = 12
                        .Node_Dim.ImageIndex = 6
                    End With
#End Region
#Region "|>>|Adding To Result|<<|"
                    Result.Write("Object Name :             " & VbNET.AccessModifiers_ToString(Me.AccessModifier) & " Class " & Me.Name)
                    Result.Write("Author Information :      " & Me.AuthorName & "|" & Me.AuthorEmail & "|" & Me.AuthorUri)
                    Result.Write("Contributor Information : " & Me.ContributorName & "|" & Me.ContributorEmail & "|" & Me.ContributorUri)
                    Result.Write("Creation Date :           " & Me.CreationDate)
                    Result.Write("")
                    Result.Write("")
                    Result.Write("|Schema|")
                    Result.Write("<ID> |ObjectType |{Quantity}")
                    Result.Write("<00> |Importation|{" & Me.Importation.Count - 1 & "}")
                    Result.Write("<01> |Properties |{" & Me.Properties.Count - 1 & "}")
                    Result.Write("<02> |Enumeration|{" & Me.Enumeration.Count - 1 & "}")
                    Result.Write("<03> |Structure  |{" & Me.Structure.Count - 1 & "}")
                    Result.Write("<04> |Sub        |{" & Me.Sub.Count - 1 & "}")
                    Result.Write("<05> |Function   |{" & Me.Function.Count - 1 & "}")
                    Result.Write("<06> |Runtime    |{" & Me.Runtime.Count - 1 & "}")
                    Result.Write("<07> |Loader     |{" & Me.Loader.Count - 1 & "}")
                    Result.Write("<08> |Class      |{" & Me.Classes.Count - 1 & "}")
                    Result.Write("<09> |Constante  |{" & Me.Constante.Count - 1 & "}")
                    Result.Write("<10> |Event      |{" & Me.Event.Count - 1 & "}")
                    Result.Write("<11> |Declare    |{" & Me.Declares.Count - 1 & "}")
                    Result.Write("<12> |Delegate   |{" & Me.Delegates.Count - 1 & "}")
                    Result.Write("<13> |Dim        |{" & Me.Dims.Count - 1 & "}")
                    Result.Write("<14> |Module     |{" & Me.Modules.Count - 1 & "}")
                    Result.Write("|/Schema|")
                    Result.Write("")
                    Result.Write("")
                    Dim Summary As String = "'''    Object Name :             " & VbNET.AccessModifiers_ToString(Me.AccessModifier) & " Class " & Me.Name & vbNewLine &
                                            "'''    Author Information :      " & Me.AuthorName & "|" & Me.AuthorEmail & "|" & Me.AuthorUri & vbNewLine &
                                            "'''    Contributor Information : " & Me.ContributorName & "|" & Me.ContributorEmail & "|" & Me.ContributorUri & vbNewLine &
                                            "'''    Creation Date :           " & Me.CreationDate & vbNewLine &
                                            "'''    |Schema|" & vbNewLine &
                                            "'''    |ID| |ObjectType |{Quantity}||UnitPrice||Total" & vbNewLine &
                                            "'''    |00| |Importation|{" & Me.Quantity_Importation & "}||" & My.Settings.Price_Import & "| |" & Me.Total_Importation & vbNewLine &
                                            "'''    |01| |Properties |{" & Me.Quantity_Property & "}||" & My.Settings.Price_Property & "| |" & Me.Total_Property & vbNewLine &
                                            "'''    |02| |Enumeration|{" & Me.Quantity_Enumeration & "}||" & My.Settings.Price_Enumeration & "| |" & Me.Total_Enumeration & vbNewLine &
                                            "'''    |03| |Structure  |{" & Me.Quantity_Structure & "}||" & My.Settings.Price_Structure & "| |" & Me.Total_Structure & vbNewLine &
                                            "'''    |04| |Sub        |{" & Me.Quantity_Sub & "}||" & My.Settings.Price_Sub & "| |" & Me.Total_Sub & vbNewLine &
                                            "'''    |05| |Function   |{" & Me.Quantity_Function & "}||" & My.Settings.Price_Function & "| |" & Me.Total_Function & vbNewLine &
                                            "'''    |06| |Runtime    |{" & Me.Quantity_Runtime & "}||" & My.Settings.Price_Runtime & "| |" & Me.Total_Runtime & vbNewLine &
                                            "'''    |07| |Loader     |{" & Me.Quantity_Loader & "}||" & My.Settings.Price_Loader & "| |" & Me.Total_Loader & vbNewLine &
                                            "'''    |08| |Class      |{" & Me.Quantity_Class & "}||" & My.Settings.Price_Class & "| |" & Me.Total_Class & vbNewLine &
                                            "'''    |09| |Constante  |{" & Me.Quantity_Constante & "}||" & My.Settings.Price_Constante & "| |" & Me.Total_Constante & vbNewLine &
                                            "'''    |10| |Event      |{" & Me.Quantity_Event & "}||" & My.Settings.Price_Events & "| |" & Me.Total_Event & vbNewLine &
                                            "'''    |11| |Members    |{" & Me.Quantity_Member & "}||" & My.Settings.Price_Member & "| |" & Me.Total_Member & vbNewLine &
                                            "'''    |12| |Parameter  |{" & Me.Quantity_Parameter & "}||" & My.Settings.Price_Parameter & "| |" & Me.Total_Parameter & vbNewLine &
                                            "'''    |Production Cost             |" & Math.Round(Me.Total_Brut, 2) & vbNewLine &
                                            "'''    |Selling Price without VAT   |" & Math.Round(Me.Total_Brut * My.Settings.Marge, 2) & vbNewLine &
                                            "'''    |Total TVA                   |" & Math.Round((Me.Total_Brut * My.Settings.Marge) * My.Settings.VAT, 2) & vbNewLine &
                                            "'''    |Grand Total                 |" & Math.Round(((Me.Total_Brut * My.Settings.Marge)) + ((Me.Total_Brut * My.Settings.Marge) * My.Settings.VAT), 2) & vbNewLine &
                                            "'''    |/Schema|"

#End Region
#Region "|Step 02|<Filling Nodes>"
#Region "|Step 02|<Printing> |00|Importation|"
#Region "0-<Importation>"
                    If Me.Importation.Count - 1 >= 0 Then

#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<0> [Importation]{" & Me.Importation.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<0> [Importation]{" & Me.Importation.Count - 1 & "}" & Space)
                        Me.Print_C.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                        Me.Print_F.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                        Me.Print_Python.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                        Me.Print_JavaScript.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
#End Region
#Region "|PRINTING|Importation"
                        For Each Statement As VbNET.Import In Me.Importation
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Importation Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 0
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Importation.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#End Region
#Region "| > Add Summary >|"
                    Me.SummaryStatement = New Summary(Me.Description & Summary, Me.Params, Me.Remarks,, Me.Rights, Me.Example, Me.Usage, Me.Note, Me.See, Me.SeeAlso, Me.Category, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri, Me.Rules, Me.Syntax)
                    Me.SummaryStatement.Print()
                    Me.Print_VB.Add(Me.SummaryStatement.Print_VB)
                    Me.Print_C.Add(Me.SummaryStatement.Print_C)
                    Me.Print_F.Add(Me.SummaryStatement.Print_C)
                    Me.Print_Python.Add(Me.SummaryStatement.Print_C)
                    Me.Print_JavaScript.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "|Step 03|<Printing> |!|Caller|"
                    Dim Vb_Caller As String = VbNET.AccessModifiers_ToString(Me.AccessModifier)
                    Dim C_Caller As String = VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
                    Dim F_Caller As String = VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
                    Dim Python_Caller As String = "def "
                    Dim Java_Caller As String = VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
#Region "<Caller>"
                    If Me.Shadows = True Then
                        Vb_Caller += " Shadows "
                    End If
                    If Me.Partial = True Then
                        Vb_Caller += " Partial "
                    End If
                    If Me.MustInherit = True Then
                        Me.NotInheritable = False
                        Vb_Caller += " MustInherit "
                        C_Caller += " abstract "
                        F_Caller += " abstract "
                        Java_Caller += " abstract "

                    End If
                    If Me.NotInheritable = True Then
                        Me.MustInherit = False
                        Vb_Caller += " NotInheritable "
                        C_Caller += " sealed "
                        Java_Caller += " final "
                    End If
                    If PrintasModule = True Then
                        Vb_Caller += " Module " & Me.Name
                    Else
                        Vb_Caller += " Class " & Me.Name
                    End If
                    C_Caller += " class " & Me.Name
                    F_Caller += " class " & Me.Name
                    Java_Caller += " class " & Me.Name
                    Me.Print_VB.Add(Vb_Caller)
                    If Me.Inherits <> "" Then
                        Me.Print_VB.Add("Inherits " & Me.[Inherits])
                        C_Caller += ": " & Me.Inherits & "{"
                        F_Caller += ": " & Me.Inherits & "{"
                        Java_Caller += ": " & Me.Inherits & "{"
                    Else
                        C_Caller += "{"
                        F_Caller += "{"
                        Java_Caller += "{"
                    End If
                    Me.Print_C.Add(C_Caller)
                    Me.Print_F.Add(F_Caller)
                    Me.Print_Python.Add(Python_Caller)
                    Me.Print_JavaScript.Add(Java_Caller)
#End Region

#End Region
#Region "|Step 04|<Printing> |01|Property|"
                    'Modification
#Region "1-<Property>"
                    If Me.Properties.Count - 1 >= 0 Then

                        Dim TempProp As New List(Of VbNET.Property)
                        For Each P As VbNET.Property In Me.Properties
                            TempProp.Add(P)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(P.Name)
                            N.ImageIndex = 1
                            N.Tag = Statement
                            N.Tooltip = P.Description
                            Me.Node_Properties.Nodes.Add(N)
#End Region
                        Next

                        Dim List_Categories As New List(Of String)
                        Dim TempCats As New List(Of String)
                        For Each P As VbNET.Property In TempProp
                            TempCats.Add(P.Category)
                        Next

                        'Test 1
                        If TempCats.Count - 1 < 0 Then
                            MsgBox("Warning test 1 failed")
                        End If

                        For Each Cat As String In TempCats
                            Dim addCat As Boolean = True

                            If List_Categories.Count - 1 = 0 Then
                                If Cat.ToLower = List_Categories(0).ToLower Then
                                    addCat = False
                                End If
                            ElseIf List_Categories.Count - 1 > 0 Then
                                For Each St As String In List_Categories
                                    If St.ToLower = Cat.ToLower Then
                                        addCat = False
                                    End If
                                Next
                            Else
                                addCat = True
                            End If

                            If addCat = True Then
                                List_Categories.Add(Cat)
                            End If
                        Next

                        'Test 2
                        If List_Categories.Count - 1 < 0 Then
                            MsgBox("Warning test 2 failed")
                        End If

                        Dim PortFolio As New List(Of CategoryPortfolio)
                        'Sort ListCategories
                        List_Categories.Sort()
                        For i As Integer = 0 To List_Categories.Count - 1
                            Dim Item As New CategoryPortfolio
                            Item.ID = i
                            Item.Name = List_Categories(i).ToString
                            Item.Properties = New List(Of [Property])
                            PortFolio.Add(Item)
                        Next

                        'Test 3
                        If PortFolio.Count - 1 < 0 Then
                            MsgBox("Warning test 3 failed")
                        End If

                        'Grabbing Properties
                        For Each Item As CategoryPortfolio In PortFolio

                            For Each P As VbNET.Property In TempProp

                                If P.Category = Item.Name Then
                                    Item.Properties.Add(P)
                                End If

                            Next
                        Next
                        'Reindexing
                        For Each Item As CategoryPortfolio In PortFolio
                            For i As Integer = 0 To Item.Properties.Count - 1
                                Dim p As VbNET.Property = Item.Properties(i)
                                p.ID = i
                            Next
                        Next
                        'Ok we should have everything ready now
#Region "|Opening Region"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "|01| [Property]{" & Me.Properties.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "|01| [Property]{" & Me.Properties.Count & "}" & Space)
                        Me.Print_C.Add("#region |01| [Property]{" & Me.Properties.Count & "}")
                        Me.Print_F.Add("#region |01| [Property]{" & Me.Properties.Count & "}")
                        Me.Print_Python.Add("#region |01| [Property]{" & Me.Properties.Count & "}")
                        Me.Print_JavaScript.Add("#region |01| [Property]{" & Me.Properties.Count & "}")
#End Region
                        For Each L As CategoryPortfolio In PortFolio
#Region "|Opening Category Region|"
#Region "|>>|Adding To Result|<<|"
                            Result.Write("#Region " & Space & "|01." & IIf(L.ID < 10, "0" & ID, ID) & "| <Property> [" & L.Name & "](" & L.Properties.Count - 1 & ")" & Space)
#End Region
                            Me.Print_VB.Add("#Region " & Space & "|01." & IIf(L.ID < 10, "0" & ID, ID) & "| <Property> [" & L.Name & "](" & L.Properties.Count - 1 & ")" & Space)
                            Me.Print_C.Add("#region |01." & IIf(L.ID < 10, "0" & ID, ID) & "| <Property> [" & L.Name & "](" & L.Properties.Count - 1 & ")")
                            Me.Print_F.Add("#region |01." & IIf(L.ID < 10, "0" & ID, ID) & "| <Property> [" & L.Name & "](" & L.Properties.Count - 1 & ")")
                            Me.Print_Python.Add("#region |01." & IIf(L.ID < 10, "0" & ID, ID) & "| <Property> [" & L.Name & "](" & L.Properties.Count - 1 & ")")
                            Me.Print_JavaScript.Add("#region |01." & IIf(L.ID < 10, "0" & ID, ID) & "| <Property> [" & L.Name & "](" & L.Properties.Count - 1 & ")")
#End Region
                            If L.Properties.Count - 1 < 0 Then
                                MsgBox("L Category has no properties")
                            End If
                            For Each P As VbNET.Property In L.Properties
                                'MsgBox(P.VB)
                                P.ParentClass = Me
                                P.PrintStatement(Me.Enable)
                                Me.Print_VB.Add(P.VB)
                                Me.Print_C.Add(P.C)
                                Me.Print_F.Add(P.F)
                                Me.Print_JavaScript.Add(P.JavaScript)
                                Me.Print_Python.Add(P.Python)
                            Next
#Region "<Closing Category Region>"
#Region "|>>|Adding To Result|<<|"
                            Result.Write("#End Region ")
#End Region
                            Me.Print_VB.Add("#End Region ")
                            Me.Print_C.Add("#end region ")
                            Me.Print_F.Add("#end region ")
                            Me.Print_Python.Add("#end region ")
                            Me.Print_JavaScript.Add("#end region ")
#End Region
                        Next
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 05|<Printing> |02|Enumeration|"
#Region "2-<Enumeration>"
                    If Me.Enumeration.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region" & Space & "<2> [Enumeration]{" & Me.Enumeration.Count & "}" & Space)
                        Me.Print_C.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count & "}")
                        Me.Print_F.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count & "}")
                        Me.Print_Python.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count & "}")
                        Me.Print_JavaScript.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Enumeration In Me.Enumeration
                            Statement.ParentClass = Me
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 2
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Enumerations.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 04|<Printing> |03|Structure|"
#Region "3-<Structure>"
                    If Me.Structure.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<3> [Structure]{" & Me.Structure.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region" & Space & "<3> [Structure]{" & Me.Enumeration.Count & "}" & Space)
                        Me.Print_C.Add("#region <3> [Structure]{" & Me.Enumeration.Count & "}")
                        Me.Print_F.Add("#region <3> [Structure]{" & Me.Enumeration.Count & "}")
                        Me.Print_Python.Add("#region <3> [Structure]{" & Me.Enumeration.Count & "}")
                        Me.Print_JavaScript.Add("#region <3> [Structure]{" & Me.Enumeration.Count & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Structure In Me.Structure
                            Statement.ParentClass = Me
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 3
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
#Region "<Adding Info>"
#Region "<Property>"
                            For Each Property_InnerStatement As VbNET.Property In Statement.Property
                                Property_InnerStatement.ParentStructure = Statement
                                Dim NS As New DevComponents.AdvTree.Node(Property_InnerStatement.Name)
                                NS.ImageIndex = 1
                                NS.Tag = Property_InnerStatement
                                NS.Tooltip = Property_InnerStatement.Description
                                N.Nodes.Add(NS)
                            Next
#End Region
#Region "<Enumeration>"
                            For Each Enumeration_InnerStatement As VbNET.Enumeration In Statement.Enumeration
                                Enumeration_InnerStatement.ParentStructure = Statement
                                Dim NS As New DevComponents.AdvTree.Node(Enumeration_InnerStatement.Name)
                                NS.ImageIndex = 2
                                NS.Tag = Enumeration_InnerStatement
                                NS.Tooltip = Enumeration_InnerStatement.Description
                                N.Nodes.Add(NS)
                            Next
#End Region
#Region "<Sub>"
                            For Each Sub_InnerStatement As VbNET.Sub In Statement.Sub
                                Sub_InnerStatement.ParentStructure = Statement
                                Dim NS As New DevComponents.AdvTree.Node(Sub_InnerStatement.Name)
                                NS.ImageIndex = 4
                                NS.Tag = Sub_InnerStatement
                                NS.Tooltip = Sub_InnerStatement.Description
                                N.Nodes.Add(NS)
                            Next
#End Region
#Region "<Function>"
                            For Each Function_InnerStatement As VbNET.Function In Statement.Function
                                Function_InnerStatement.ParentStructure = Statement
                                Dim NS As New DevComponents.AdvTree.Node(Function_InnerStatement.Name)
                                NS.ImageIndex = 5
                                NS.Tag = Function_InnerStatement
                                NS.Tooltip = Function_InnerStatement.Description
                                N.Nodes.Add(NS)
                            Next
#End Region
#Region "<Runtime>"
                            For Each Runtime_InnerStatement As VbNET.Runtime In Statement.Runtime
                                Runtime_InnerStatement.ParentStructure = Statement
                                Dim NS As New DevComponents.AdvTree.Node(Runtime_InnerStatement.Name)
                                NS.ImageIndex = 6
                                NS.Tag = Runtime_InnerStatement
                                NS.Tooltip = Runtime_InnerStatement.Description
                                N.Nodes.Add(NS)
                            Next
#End Region
#Region "<Event>"
                            For Each Event_InnerStatement As VbNET.Event In Statement.Event
                                Event_InnerStatement.ParentStructure = Statement
                                Dim NS As New DevComponents.AdvTree.Node(Event_InnerStatement.Name)
                                NS.ImageIndex = 10
                                NS.Tag = Event_InnerStatement
                                NS.Tooltip = Event_InnerStatement.Description
                                N.Nodes.Add(NS)
                            Next
#End Region
#End Region
                            Me.Node_Structure.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 05|<Printing> |04|Sub|"
#Region "4-<Sub>"
                    If Me.Sub.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<4> [Sub]{" & Me.Sub.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<4> [Sub]{" & Me.Sub.Count & "}" & Space)
                        Me.Print_C.Add("#region <4> [Sub]{" & Me.Sub.Count & "}")
                        Me.Print_F.Add("#region <4> [Sub]{" & Me.Sub.Count & "}")
                        Me.Print_Python.Add("#region <4> [Sub]{" & Me.Sub.Count & "}")
                        Me.Print_JavaScript.Add("#region <4> [Sub]{" & Me.Sub.Count & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Sub In Me.Sub
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 4
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Sub.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 06|<Printing> |05|Function|"
#Region "5-<Function>"
                    If Me.Function.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<5> [Function]{" & Me.Function.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<5> [Function]{" & Me.Function.Count & "}" & Space)
                        Me.Print_C.Add("#region <5> [Function]{" & Me.Function.Count & "}")
                        Me.Print_F.Add("#region <5> [Function]{" & Me.Function.Count & "}")
                        Me.Print_Python.Add("#region <5> [Function]{" & Me.Function.Count & "}")
                        Me.Print_JavaScript.Add("#region <5> [Function]{" & Me.Function.Count & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Function In Me.Function
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 5
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Function.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 07|<Printing> |06|Runtime|"
#Region "6-<Runtime>"
                    If Me.Runtime.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<6> [Runtime]{" & Me.Runtime.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<6> [Runtime]{" & Me.Runtime.Count & "}" & Space)
                        Me.Print_C.Add("#region <6> [Runtime]{" & Me.Runtime.Count & "}")
                        Me.Print_F.Add("#region <6> [Runtime]{" & Me.Runtime.Count & "}")
                        Me.Print_Python.Add("#region <6> [Runtime]{" & Me.Runtime.Count & "}")
                        Me.Print_JavaScript.Add("#region <6> [Runtime]{" & Me.Runtime.Count & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Runtime In Me.Runtime
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 6
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Runtime.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 08|<Printing> |07|Loader|"
#Region "7-<Loader>"
                    If Me.Loader.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<7> [Loader]{" & Me.Loader.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<7> [Loader]{" & Me.Loader.Count & "}" & Space)
                        Me.Print_C.Add("#region <7> [Loader]{" & Me.Loader.Count & "}")
                        Me.Print_F.Add("#region <7> [Loader]{" & Me.Loader.Count & "}")
                        Me.Print_Python.Add("#region <7> [Loader]{" & Me.Loader.Count & "}")
                        Me.Print_JavaScript.Add("#region <7> [Loader]{" & Me.Loader.Count & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Loader In Me.Loader
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 7
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Loader.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 09|<Printing> |08|Class|"
#Region "8-<Class>"
                    If Me.Classes.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        ' Result.Write("#Region " & Space & "<8> [Class]{" & Me.Classes.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Class> <" & Me.Category & "> |." & Me.Name & "|Class|" & Space & "' " & Me.Description)
                        Me.Print_C.Add("#region <8> [Class]{" & Me.Classes.Count & "}")
                        Me.Print_F.Add("#region <8> [Class]{" & Me.Classes.Count & "}")
                        Me.Print_Python.Add("#region <8> [Class]{" & Me.Classes.Count & "}")
                        Me.Print_JavaScript.Add("#region <8> [Class]{" & Me.Classes.Count & "}")
#End Region
#Region "|PRINTING|"
                        Dim Tx As Integer = 1
                        For Each Statement As VbNET.Class In Me.Classes
                            Statement.ID = Tx
                            Statement.ParentClass = (Me)
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 8
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Class.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                            Tx += 1
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        'Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 10|<Printing> |09|Constante|"
#Region "9-<Constante>"
                    If Me.Constante.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<9> [Constante]{" & Me.Constante.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<9> [Constante]{" & Me.Constante.Count & "}" & Space)
                        Me.Print_C.Add("#region <9> [Constante]{" & Me.Constante.Count & "}")
                        Me.Print_F.Add("#region <9> [Constante]{" & Me.Constante.Count & "}")
                        Me.Print_Python.Add("#region <9> [Constante]{" & Me.Constante.Count & "}")
                        Me.Print_JavaScript.Add("#region <9> [Constante]{" & Me.Constante.Count & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Constante In Me.Constante
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 9
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Constante.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 11|<Printing> |10|Event|"
#Region "10-<Event>"
                    If Me.Event.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<10> [Event]{" & Me.Event.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<10> [Event]{" & Me.Event.Count & "}" & Space)
                        Me.Print_C.Add("#region <10> [Event]{" & Me.Event.Count & "}")
                        Me.Print_F.Add("#region <10> [Event]{" & Me.Event.Count & "}")
                        Me.Print_Python.Add("#region <10> [Event]{" & Me.Event.Count & "}")
                        Me.Print_JavaScript.Add("#region <10> [Event]{" & Me.Event.Count & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Event In Me.Event
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 10
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Event.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 12|<Printing> |11|Declare|"
#Region "11-<Declare>"
                    If Me.Declares.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<11> [Declare]{" & Me.Declares.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<11> [Declare]{" & Me.Declares.Count - 1 & "}" & Space)
                        Me.Print_C.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                        Me.Print_F.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                        Me.Print_Python.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                        Me.Print_JavaScript.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Declare In Me.Declares
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 11
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Declare.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 13|<Printing> |12|Delegate|"
#Region "12-<Delegate>"
                    If Me.Delegates.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<12> [Delegate]{" & Me.Delegates.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<12> [Delegate]{" & Me.Delegates.Count - 1 & "}" & Space)
                        Me.Print_C.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                        Me.Print_F.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                        Me.Print_Python.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                        Me.Print_JavaScript.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Delegate In Me.Delegates
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 12
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Delegate.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 14|<Printing> |13|Dim|"
#Region "13-<Dim>"
                    If Me.Dims.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<13> [Dim]{" & Me.Dims.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<13> [Dim]{" & Me.Dims.Count - 1 & "}" & Space)
                        Me.Print_C.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                        Me.Print_F.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                        Me.Print_Python.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                        Me.Print_JavaScript.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Dim In Me.Dims
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 6
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Dim.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 15|<Printing> |14|Module|"
#Region "14-<Module>"
                    If Me.Modules.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#Region " & Space & "<14> [Module]{" & Me.Modules.Count - 1 & "}" & Space)
#End Region
                        Me.Print_VB.Add("#Region " & Space & "<14> [Module]{" & Me.Modules.Count - 1 & "}" & Space)
                        Me.Print_C.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                        Me.Print_F.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                        Me.Print_Python.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                        Me.Print_JavaScript.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                        For Each Statement As VbNET.Module In Me.Modules
                            Statement.PrintStatement(Me.Enable)
                            Me.Print_VB.Add(Statement.VB)
                            Me.Print_C.Add(Statement.C)
                            Me.Print_F.Add(Statement.F)
                            Me.Print_Python.Add(Statement.Python)
                            Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                            Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                            N.ImageIndex = 8
                            N.Tag = Statement
                            N.Tooltip = Statement.Description
                            Me.Node_Module.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                            Result.Write(Statement.VB)
#End Region
                        Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                        Result.Write("#End Region ")
#End Region
                        Me.Print_VB.Add("#End Region ")
                        Me.Print_C.Add("#end region ")
                        Me.Print_F.Add("#end region ")
                        Me.Print_Python.Add("#end region ")
                        Me.Print_JavaScript.Add("#end region ")
#End Region
                    End If
#End Region
#End Region
#Region "|Step 17|<Printing Nodes>"
                    Me.MainNode.Nodes.Add(Me.Node_Importation)
                    Me.MainNode.Nodes.Add(Me.Node_Properties)
                    Me.MainNode.Nodes.Add(Me.Node_Enumerations)
                    Me.MainNode.Nodes.Add(Me.Node_Structure)
                    Me.MainNode.Nodes.Add(Me.Node_Sub)
                    Me.MainNode.Nodes.Add(Me.Node_Function)
                    Me.MainNode.Nodes.Add(Me.Node_Runtime)
                    Me.MainNode.Nodes.Add(Me.Node_Loader)
                    Me.MainNode.Nodes.Add(Me.Node_Class)
                    Me.MainNode.Nodes.Add(Me.Node_Constante)
                    Me.MainNode.Nodes.Add(Me.Node_Event)
                    Me.MainNode.Nodes.Add(Me.Node_Declare)
                    Me.MainNode.Nodes.Add(Me.Node_Delegate)
                    Me.MainNode.Nodes.Add(Me.Node_Dim)
                    Me.MainNode.Nodes.Add(Me.Node_Module)

#End Region
#Region "<Closing Caller>"
                    If PrintasModule = True Then
                        Me.Print_VB.Add(" End Module")
                    Else
                        Me.Print_VB.Add(" End Class")
                    End If
                    Me.Print_C.Add("}")
                    Me.Print_F.Add("}")
                    Me.Print_JavaScript.Add("}")
#End Region
#End Region
                Catch ex As Exception
                    ' MsgBox(ex.Message)
                End Try
            Else
#Region "|StackFlow|"
                Me.Print_VB.Add("#Region" & Space & "[OFF] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Class> <" & Me.Category & "> |." & Me.Name & "|Class|" & Space & "' " & Me.Description)

#Region "|Step 01|<Formatting Nodes>"
                Dim EStyle As New DevComponents.DotNetBar.ElementStyle(Color.White, Color.Black)
                Me.MainNode = New DevComponents.AdvTree.Node(Me.Name)
                Me.Node_Importation = New DevComponents.AdvTree.Node("<0> [Importation]{" & Me.Importation.Count - 1 & "}", EStyle)
                Me.Node_Properties = New DevComponents.AdvTree.Node("<1> [Properties]{" & Me.Properties.Count - 1 & "}", EStyle)
                Me.Node_Enumerations = New DevComponents.AdvTree.Node("<2> [Enumerations]{" & Me.Enumeration.Count - 1 & "}", EStyle)
                Me.Node_Structure = New DevComponents.AdvTree.Node("<3> [Structure]{" & Me.Structure.Count - 1 & "}", EStyle)
                Me.Node_Sub = New DevComponents.AdvTree.Node("<4> [Sub]{" & Me.Sub.Count - 1 & "}", EStyle)
                Me.Node_Function = New DevComponents.AdvTree.Node("<5> [Function]{" & Me.Function.Count - 1 & "}", EStyle)
                Me.Node_Runtime = New DevComponents.AdvTree.Node("<6> [Runtime]{" & Me.Runtime.Count - 1 & "}", EStyle)
                Me.Node_Loader = New DevComponents.AdvTree.Node("<7> [Loader]{" & Me.Loader.Count - 1 & "}", EStyle)
                Me.Node_Class = New DevComponents.AdvTree.Node("<8> [Class]{" & Me.Classes.Count - 1 & "}", EStyle)
                Me.Node_Constante = New DevComponents.AdvTree.Node("<9> [Constante]{" & Me.Constante.Count - 1 & "}", EStyle)
                Me.Node_Event = New DevComponents.AdvTree.Node("<10> [Event]{" & Me.Event.Count - 1 & "}", EStyle)
                Me.Node_Declare = New DevComponents.AdvTree.Node("<11> [Declare]{" & Me.Declares.Count - 1 & "}", EStyle)
                Me.Node_Delegate = New DevComponents.AdvTree.Node("<12> [Delegate]{" & Me.Delegates.Count - 1 & "}", EStyle)
                Me.Node_Dim = New DevComponents.AdvTree.Node("<13> [Dim]{" & Me.Dims.Count - 1 & "}", EStyle)
                Me.Node_Module = New DevComponents.AdvTree.Node("<14> [Module]{" & Me.Modules.Count - 1 & "}", EStyle)
                With Me
                    .MainNode.ImageIndex = 8
                    .Node_Importation.ImageIndex = 0
                    .Node_Properties.ImageIndex = 1
                    .Node_Enumerations.ImageIndex = 2
                    .Node_Structure.ImageIndex = 3
                    .Node_Sub.ImageIndex = 4
                    .Node_Function.ImageIndex = 5
                    .Node_Runtime.ImageIndex = 6
                    .Node_Loader.ImageIndex = 7
                    .Node_Class.ImageIndex = 8
                    .Node_Module.ImageIndex = 8
                    .Node_Constante.ImageIndex = 9
                    .Node_Event.ImageIndex = 10
                    .Node_Declare.ImageIndex = 11
                    .Node_Delegate.ImageIndex = 12
                    .Node_Dim.ImageIndex = 6
                End With
#End Region
#Region "|>>|Adding To Result|<<|"
                Result.Write("Object Name :             " & VbNET.AccessModifiers_ToString(Me.AccessModifier) & " Module " & Me.Name)
                Result.Write("Author Information :      " & Me.AuthorName & "|" & Me.AuthorEmail & "|" & Me.AuthorUri)
                Result.Write("Contributor Information : " & Me.ContributorName & "|" & Me.ContributorEmail & "|" & Me.ContributorUri)
                Result.Write("Creation Date :           " & Me.CreationDate)
                Result.Write("")
                Result.Write("")
                Result.Write("|Schema|")
                Result.Write("<ID> |ObjectType |{Quantity}")
                Result.Write("<00> |Importation|{" & Me.Importation.Count - 1 & "}")
                Result.Write("<01> |Properties |{" & Me.Properties.Count - 1 & "}")
                Result.Write("<02> |Enumeration|{" & Me.Enumeration.Count - 1 & "}")
                Result.Write("<03> |Structure  |{" & Me.Structure.Count - 1 & "}")
                Result.Write("<04> |Sub        |{" & Me.Sub.Count - 1 & "}")
                Result.Write("<05> |Function   |{" & Me.Function.Count - 1 & "}")
                Result.Write("<06> |Runtime    |{" & Me.Runtime.Count - 1 & "}")
                Result.Write("<07> |Loader     |{" & Me.Loader.Count - 1 & "}")
                Result.Write("<08> |Class      |{" & Me.Classes.Count - 1 & "}")
                Result.Write("<09> |Constante  |{" & Me.Constante.Count - 1 & "}")
                Result.Write("<10> |Event      |{" & Me.Event.Count - 1 & "}")
                Result.Write("<11> |Declare    |{" & Me.Declares.Count - 1 & "}")
                Result.Write("<12> |Delegate   |{" & Me.Delegates.Count - 1 & "}")
                Result.Write("<13> |Dim        |{" & Me.Dims.Count - 1 & "}")
                Result.Write("<14> |Module     |{" & Me.Modules.Count - 1 & "}")
                Result.Write("|/Schema|")
                Result.Write("")
                Result.Write("")
#End Region
#Region "|Step 02|<Filling Nodes>"
#Region "|Step 02|<Printing> |00|Importation|"
#Region "0-<Importation>"
                If Me.Importation.Count - 1 >= 0 Then

#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<0> [Importation]{" & Me.Importation.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<0> [Importation]{" & Me.Importation.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                    Me.Print_F.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                    Me.Print_Python.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
#End Region
#Region "|PRINTING|Importation"
                    For Each Statement As VbNET.Import In Me.Importation
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Importation Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 0
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Importation.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#End Region

#Region "|Step 03|<Printing> |!|Caller|"
                Dim Vb_Caller As String = "'' " & VbNET.AccessModifiers_ToString(Me.AccessModifier)
                Dim C_Caller As String = "// " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
                Dim F_Caller As String = "// " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
                Dim Python_Caller As String = "// def "
                Dim Java_Caller As String = "// " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
#Region "<Caller>"
                If Me.Shadows = True Then
                    Vb_Caller += " Shadows "
                End If
                If Me.Partial = True Then
                    Vb_Caller += " Partial "
                End If
                If Me.MustInherit = True Then
                    Me.NotInheritable = False
                    Vb_Caller += " MustInherit "
                    C_Caller += " abstract "
                    F_Caller += " abstract "
                    Java_Caller += " abstract "

                End If
                If Me.NotInheritable = True Then
                    Me.MustInherit = False
                    Vb_Caller += " NotInheritable "
                    C_Caller += " sealed "
                    Java_Caller += " final "
                End If
                If PrintasModule = True Then
                    Vb_Caller += " Module " & Me.Name
                Else
                    Vb_Caller += " Class " & Me.Name

                End If
                C_Caller += " class " & Me.Name & "{"
                F_Caller += " class " & Me.Name & "{"
                Java_Caller += " class " & Me.Name & "{"
                Me.Print_VB.Add(Vb_Caller)
                Me.Print_C.Add(C_Caller)
                Me.Print_F.Add(F_Caller)
                Me.Print_Python.Add(Python_Caller)
                Me.Print_JavaScript.Add(Java_Caller)
#End Region

#End Region

#Region "|Step 04|<Printing> |01|Property|"
#Region "1-<Property>"
                If Me.Properties.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<1> [Property]{" & Me.Properties.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<1> [Property]{" & Me.Properties.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
                    Me.Print_F.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
                    Me.Print_Python.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Property In Me.Properties
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 1
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Properties.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 05|<Printing> |02|Enumeration|"
#Region "2-<Enumeration>"
                If Me.Enumeration.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
                    Me.Print_F.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
                    Me.Print_Python.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Enumeration In Me.Enumeration
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 2
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Enumerations.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 04|<Printing> |03|Structure|"
#Region "3-<Structure>"
                If Me.Structure.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<3> [Structure]{" & Me.Structure.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<3> [Structure]{" & Me.Structure.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
                    Me.Print_F.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
                    Me.Print_Python.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Structure In Me.Structure
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 3
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Structure.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 05|<Printing> |04|Sub|"
#Region "4-<Sub>"
                If Me.Sub.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<4> [Sub]{" & Me.Sub.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<4> [Sub]{" & Me.Sub.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
                    Me.Print_F.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
                    Me.Print_Python.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Sub In Me.Sub
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 4
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Sub.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 06|<Printing> |05|Function|"
#Region "5-<Function>"
                If Me.Function.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<5> [Function]{" & Me.Function.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<5> [Function]{" & Me.Function.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
                    Me.Print_F.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
                    Me.Print_Python.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Function In Me.Function
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 5
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Function.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 07|<Printing> |06|Runtime|"
#Region "6-<Runtime>"
                If Me.Runtime.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<6> [Runtime]{" & Me.Runtime.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<6> [Runtime]{" & Me.Runtime.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
                    Me.Print_F.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
                    Me.Print_Python.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Runtime In Me.Runtime
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 6
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Runtime.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 08|<Printing> |07|Loader|"
#Region "7-<Loader>"
                If Me.Loader.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<7> [Loader]{" & Me.Loader.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<7> [Loader]{" & Me.Loader.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
                    Me.Print_F.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
                    Me.Print_Python.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Loader In Me.Loader
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 7
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Loader.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 09|<Printing> |08|Class|"
#Region "8-<Class>"
                If Me.Classes.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<8> [Class]{" & Me.Classes.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<8> [Class]{" & Me.Classes.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
                    Me.Print_F.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
                    Me.Print_Python.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Class In Me.Classes
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 8
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Class.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 10|<Printing> |09|Constante|"
#Region "9-<Constante>"
                If Me.Constante.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<9> [Constante]{" & Me.Constante.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<9> [Constante]{" & Me.Constante.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
                    Me.Print_F.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
                    Me.Print_Python.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Constante In Me.Constante
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 9
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Constante.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 11|<Printing> |10|Event|"
#Region "10-<Event>"
                If Me.Event.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<10> [Event]{" & Me.Event.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<10> [Event]{" & Me.Event.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
                    Me.Print_F.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
                    Me.Print_Python.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Event In Me.Event
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 10
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Event.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 12|<Printing> |11|Declare|"
#Region "11-<Declare>"
                If Me.Declares.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<11> [Declare]{" & Me.Declares.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<11> [Declare]{" & Me.Declares.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                    Me.Print_F.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                    Me.Print_Python.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Declare In Me.Declares
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 11
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Declare.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 13|<Printing> |12|Delegate|"
#Region "12-<Delegate>"
                If Me.Delegates.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<12> [Delegate]{" & Me.Delegates.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<12> [Delegate]{" & Me.Delegates.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                    Me.Print_F.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                    Me.Print_Python.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Delegate In Me.Delegates
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 12
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Delegate.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 14|<Printing> |13|Dim|"
#Region "13-<Dim>"
                If Me.Dims.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<13> [Dim]{" & Me.Dims.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<13> [Dim]{" & Me.Dims.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                    Me.Print_F.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                    Me.Print_Python.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Dim In Me.Dims
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 6
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Dim.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 15|<Printing> |14|Module|"
#Region "14-<Module>"
                If Me.Modules.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<14> [Module]{" & Me.Modules.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<14> [Module]{" & Me.Modules.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                    Me.Print_F.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                    Me.Print_Python.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Module In Me.Modules
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 8
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Module.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 17|<Printing Nodes>"
                Me.MainNode.Nodes.Add(Me.Node_Importation)
                Me.MainNode.Nodes.Add(Me.Node_Properties)
                Me.MainNode.Nodes.Add(Me.Node_Enumerations)
                Me.MainNode.Nodes.Add(Me.Node_Structure)
                Me.MainNode.Nodes.Add(Me.Node_Sub)
                Me.MainNode.Nodes.Add(Me.Node_Function)
                Me.MainNode.Nodes.Add(Me.Node_Runtime)
                Me.MainNode.Nodes.Add(Me.Node_Loader)
                Me.MainNode.Nodes.Add(Me.Node_Class)
                Me.MainNode.Nodes.Add(Me.Node_Constante)
                Me.MainNode.Nodes.Add(Me.Node_Event)
                Me.MainNode.Nodes.Add(Me.Node_Declare)
                Me.MainNode.Nodes.Add(Me.Node_Delegate)
                Me.MainNode.Nodes.Add(Me.Node_Dim)
                Me.MainNode.Nodes.Add(Me.Node_Module)

#End Region
#Region "<Closing Caller>"
                If PrintasModule = True Then
                    Me.Print_VB.Add("'' End Module")
                Else
                    Me.Print_VB.Add("'' End Class")
                End If

                Me.Print_C.Add("// }")
                Me.Print_F.Add("// }")
                Me.Print_JavaScript.Add("// }")
#End Region
#End Region
            End If
            Me.Print_VB.Add("#End Region")

            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str '& Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str '& Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str '& Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str '& Environment.NewLine
            Next
            Dim O_VB As New Input_Parameters("VbNET", "String", Me.VB)
            Dim O_C As New Input_Parameters("C#", "String", Me.C)
            Dim O_F As New Input_Parameters("F#", "String", Me.F)
            Dim O_Python As New Input_Parameters("Python", "String", Me.Python)
            Dim O_JavaScript As New Input_Parameters("JavaScript", "String", Me.JavaScript)
            Result.AddOutputParam("VbNET", "String", Me.VB)
            Result.AddOutputParam("C#", "String", Me.C)
            Result.AddOutputParam("F#", "String", Me.F)
            Result.AddOutputParam("Python", "String", Me.Python)
            Result.AddOutputParam("JavaScript", "String", Me.JavaScript)
            Return Result
        End Function
#End Region
#Region "<04.01.01> <Sub> <Print> [PrinStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]|Boolean(True))]"

        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception
                '  MsgBox(ex.Message)
            End Try
        End Sub

#End Region


#End Region
#Region "<04.02> <Sub> [Add]"
#Region "<04.02.00> <Sub> <Add> [Add_Importation(Statement|VbNET.Import)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Importation(ByVal Statement As VbNET.Import)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Importation) Then
                    Me.Importation = New List(Of Import)
                End If
                For Each S As VbNET.Import In Me.Importation
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Me.Quantity_Importation += 1
                    Statement.ID = Me.Importation.Count
                    ' Log.Add(Statement.Save())
                    Me.Importation.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 0
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Importation.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Import", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine

                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Import Statement", Result, "Public Sub Add_Importation(ByVal Statement As VbNET.Import)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.01> <Sub> <Add> [Add_Property(Statement|VbNET.Property)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Property(ByVal Statement As VbNET.Property)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then

                ' Dim addit As Boolean = True
                'If Me.Properties.Count - 1 < 0 Then
                'Else
                '   Dim i As Integer = 0
                '  For Each S As VbNET.Property In Me.Properties
                ' ResultString += "     >(" & i & ") " & S.Name
                'If S.Name = Statement.Name Then
                'ResultString += "S.Name=" & S.Name & " <Duplicate> Statement.Name=" & Statement.Name
                'addit = False
                'Exit For
                'End If
                '   i += 1
                '  Next
                'End If

                'If addit = True Then
                Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                Statement.ID = Me.Properties.Count
                Me.Quantity_Property += 1
                If Not IsNothing(Statement.ParameterList) Then
                    Me.Quantity_Parameter += Statement.ParameterList.Count
                End If
                ' Log.Add(Statement.Save())
                Add_Namespace(New ReferenceCaller(Statement))
                Me.Properties.Add(Statement)
                Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                N.ImageIndex = 1
                N.Tag = Statement
                N.Tooltip = Statement.Description
                N.TagString = Statement.Description
                Me.Node_Properties.Nodes.Add(N)
                Log.AddParam("Statement", "VbNET.Property", Statement)
                ResultString += "Adding " & Statement.VB & Environment.NewLine
                'Else
                'Result = Status.Broken
                'ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine
                'MsgBox(ResultString)
                'End If
                Log.AddStep("[Class]", "Adding a new Property Statement", Result, "Public Sub Add_Property(ByVal Statement As VbNET.Property)", "Add", ResultString)
                Dim NX As New StatementItem(Statement)
                Me.Items.Add(NX)
            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.02> <Sub> <Add> [Add_Enumeration(Statement|VbNET.Enumeration)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Enumeration(ByVal Statement As VbNET.Enumeration)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Enumeration) Then
                    Me.Enumeration = New List(Of VbNET.Enumeration)
                End If
                For Each S As VbNET.Enumeration In Me.Enumeration
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Enumeration.Count
                    '   Log.Add(Statement.Save())
                    Me.Enumeration.Add(Statement)
                    Me.Quantity_Enumeration += 1
                    Add_Namespace(New ReferenceCaller(Statement))
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 2
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description

                    For Each M As VbNET.Enumeration.Member In Statement.Members
                        Dim Mn As New DevComponents.AdvTree.Node(M.MemberName & " " & M.MemberValue)
                        Me.Quantity_Member += 1
                        Mn.Tooltip = M.Description
                        Mn.ImageIndex = 2
                        Mn.Tag = M
                        N.Nodes.Add(Mn)
                    Next


                    Me.Node_Enumerations.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Enumeration", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Enumeration Statement", Result, "Public Sub Add_Enumeration(ByVal Statement As VbNET.Enumeration)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.03> <Sub> <Add> [Add_Structure(Statement|VbNET.Structure)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Structure(ByVal Statement As VbNET.Structure)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Structure) Then
                    Me.Structure = New List(Of VbNET.Structure)
                End If
                For Each S As VbNET.Structure In Me.Structure
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Structure.Count
                    '     Log.Add(Statement.Save())
                    Me.Structure.Add(Statement)
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Quantity_Structure += 1
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 3
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description

                    If Statement.Property.Count - 1 >= 0 Then
                        For Each P As [Property] In Statement.Property
                            P.ParentStructure = Statement
                            Dim Str As String = ""
                            If P.Required = True Then
                                Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" & P.ReturnType
                            Else
                                Str = "[" & P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" & P.ReturnType & " = " & P.DefaultValue & "]"
                            End If
                            Me.Quantity_Property += 1
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 1
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Enumeration.Count - 1 >= 0 Then
                        For Each P As [Enumeration] In Statement.Enumeration
                            P.ParentStructure = Statement
                            Dim Str As String = ""
                            Str = P.Name & "|(" & P.Members.Count & ")"
                            If Not IsNothing(P.Members) Then
                                Me.Quantity_Member += P.Members.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Me.Quantity_Enumeration += 1
                            Nm.ImageIndex = 2
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Sub.Count - 1 >= 0 Then
                        For Each P As [Sub] In Statement.Sub
                            P.ParentStructure = Statement
                            Dim Str As String = ""
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Me.Quantity_Sub += 1
                            Nm.ImageIndex = 4
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Function.Count - 1 >= 0 Then
                        For Each P As [Function] In Statement.Function
                            P.ParentStructure = Statement
                            Me.Quantity_Function += 1
                            Dim Str As String = ""
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 5
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Runtime.Count - 1 >= 0 Then
                        For Each P As Runtime In Statement.Runtime
                            P.ParentStructure = Statement
                            Me.Quantity_Runtime += 1
                            Dim Str As String = ""
                            Str = P.Name & "|" & P.ReturnType

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 6
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Event.Count - 1 >= 0 Then
                        For Each P As [Event] In Statement.Event
                            P.ParentStructure = Statement
                            Me.Quantity_Event += 1
                            Dim Str As String = ""
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 10
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                    Me.Node_Structure.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Structure", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Structure Statement", Result, "Public Sub Add_Structure(ByVal Statement As VbNET.Structure)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.04> <Sub> <Add> [Add_Sub(Statement|VbNET.Sub)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Sub(ByVal Statement As VbNET.Sub)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Sub) Then
                    Me.Sub = New List(Of VbNET.Sub)
                End If
                For Each S As VbNET.Sub In Me.Sub
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Sub.Count
                    Me.Quantity_Sub += 1
                    If Not IsNothing(Statement.ParameterList) Then
                        Me.Quantity_Parameter += Statement.ParameterList.Count
                    End If
                    '     Log.Add(Statement.Save())
                    Me.Sub.Add(Statement)
                    Add_Namespace(New ReferenceCaller(Statement))
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 4
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Sub.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Sub", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Sub Statement", Result, "Public Sub Add_Sub(ByVal Statement As VbNET.Sub)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.05> <Sub> <Add> [Add_Function(Statement|VbNET.Function)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Function(ByVal Statement As VbNET.Function)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Function) Then
                    Me.Function = New List(Of VbNET.Function)
                End If
                For Each S As VbNET.Function In Me.Function
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Function.Count
                    '      Log.Add(Statement.Save())
                    If Not IsNothing(Statement.ParameterList) Then
                        Me.Quantity_Parameter += Statement.ParameterList.Count
                    End If
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Quantity_Function += 1
                    Me.Function.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 5
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Function.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Function", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Function Statement", Result, "Public Sub Add_Function(ByVal Statement As VbNET.Function)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.06> <Sub> <Add> [Add_Runtime(Statement|VbNET.Runtime)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Runtime(ByVal Statement As VbNET.Runtime)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Runtime) Then
                    Me.Runtime = New List(Of VbNET.Runtime)
                End If
                For Each S As VbNET.Runtime In Me.Runtime
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Runtime.Count
                    Me.Quantity_Runtime += 1
                    Log.Add(Statement.Save())
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Runtime.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 6
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Runtime.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Runtime", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Runtime Statement", Result, "Public Sub Add_Runtime(ByVal Statement As VbNET.Runtime)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.07> <Sub> <Add> [Add_Loader(Statement|VbNET.Loader)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Loader(ByVal Statement As VbNET.Loader)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Loader) Then
                    Me.Loader = New List(Of VbNET.Loader)
                End If
                For Each S As VbNET.Loader In Me.Loader
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    'Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Loader.Count
                    ' Log.Add(Statement.Save())
                    If Not IsNothing(Statement.ParameterList) Then
                        Me.Quantity_Parameter += Statement.ParameterList.Count
                    End If
                    Me.Quantity_Loader += 1
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Loader.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 7
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description


                    Me.Node_Loader.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Loader", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Loader Statement", Result, "Public Sub Add_Loader(ByVal Statement As VbNET.Loader)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.08> <Sub> <Add> [Add_Class(Statement|VbNET.Class)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Class(ByVal Statement As VbNET.Class)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Classes) Then
                    Me.Classes = New List(Of VbNET.Class)
                End If
                For Each S As VbNET.Class In Me.Classes
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Classes.Count
                    Me.Quantity_Class += 1
                    '      Log.Add(Statement.Save())
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Classes.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 8
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description


                    If Statement.Properties.Count - 1 >= 0 Then
                        For Each P As [Property] In Statement.Properties
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            If P.Required = True Then
                                Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" & P.ReturnType
                            Else
                                Str = "[" & P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" & P.ReturnType & " = " & P.DefaultValue & "]"
                            End If
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 1
                            Me.Quantity_Property += 1
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Enumeration.Count - 1 >= 0 Then
                        For Each P As [Enumeration] In Statement.Enumeration
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name & "|(" & P.Members.Count - 1 & ")"

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Me.Quantity_Enumeration += 1
                            If Not IsNothing(P.Members) Then
                                Me.Quantity_Member += P.Members.Count
                            End If
                            Nm.ImageIndex = 2
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Structure.Count - 1 >= 0 Then
                        For Each P As [Structure] In Statement.Structure
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 3
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            Me.Quantity_Structure += 1

                            If P.Property.Count - 1 >= 0 Then
                                For Each Pr As [Property] In P.Property
                                    Pr.ParentStructure = P
                                    Dim Str0 As String = ""
                                    If Pr.Required = True Then
                                        Str0 = Pr.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Pr.ParameterList) & ")|" & Pr.ReturnType
                                    Else
                                        Str0 = "[" & Pr.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Pr.ParameterList) & ")|" & Pr.ReturnType & " = " & P.DefaultValue & "]"
                                    End If
                                    Me.Quantity_Property += 1
                                    If Not IsNothing(Pr.ParameterList) Then
                                        Me.Quantity_Parameter += Pr.ParameterList.Count
                                    End If
                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 1
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = Pr
                                    N.Nodes.Add(Nm0)
                                Next
                            End If
                            If Statement.Enumeration.Count - 1 >= 0 Then
                                For Each Pr As [Enumeration] In Statement.Enumeration
                                    Pr.ParentStructure = P
                                    Dim Str0 As String = ""
                                    Str0 = P.Name & "|(" & Pr.Members.Count - 1 & ")"

                                    Me.Quantity_Enumeration += 1
                                    Me.Quantity_Member += Pr.Members.Count
                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 2
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = P
                                    N.Nodes.Add(Nm0)
                                Next
                            End If
                            If Statement.Sub.Count - 1 >= 0 Then
                                For Each Pr As [Sub] In Statement.Sub
                                    Pr.ParentStructure = P
                                    Dim Str0 As String = ""
                                    Str0 = Pr.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Pr.ParameterList) & ")|" '& P.ReturnType
                                    Me.Quantity_Sub += 1
                                    If Not IsNothing(Pr.ParameterList) Then
                                        Me.Quantity_Parameter += Pr.ParameterList.Count
                                    End If

                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 4
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = Pr
                                    N.Nodes.Add(Nm0)
                                Next
                            End If
                            If Statement.Function.Count - 1 >= 0 Then
                                For Each Pr As [Function] In Statement.Function
                                    Pr.ParentStructure = P
                                    Dim Str0 As String = ""
                                    Str0 = Pr.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Pr.ParameterList) & ")|" '& P.ReturnType
                                    Me.Quantity_Function += 1
                                    If Not IsNothing(Pr.ParameterList) Then
                                        Me.Quantity_Parameter += Pr.ParameterList.Count
                                    End If
                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 5
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = Pr
                                    N.Nodes.Add(Nm0)
                                Next
                            End If
                            If Statement.Runtime.Count - 1 >= 0 Then
                                For Each Pr As Runtime In Statement.Runtime
                                    Pr.ParentStructure = P
                                    Dim Str0 As String = ""
                                    Str0 = Pr.Name & "|" & Pr.ReturnType
                                    Me.Quantity_Runtime += 1

                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 6
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = P
                                    N.Nodes.Add(Nm0)
                                Next
                            End If
                            If Statement.Event.Count - 1 >= 0 Then
                                For Each Pr As [Event] In Statement.Event
                                    Pr.ParentStructure = P
                                    Me.Quantity_Event += 1
                                    Dim Str0 As String = ""
                                    Str = Pr.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Pr.ParameterList) & ")|" '& P.ReturnType
                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 10
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = P
                                    N.Nodes.Add(Nm0)
                                Next
                            End If


                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Sub.Count - 1 >= 0 Then
                        For Each P As [Sub] In Statement.Sub
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            Me.Quantity_Sub += 1
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 4
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Function.Count - 1 >= 0 Then
                        For Each P As [Function] In Statement.Function
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Me.Quantity_Function += 1

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 5
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Runtime.Count - 1 >= 0 Then
                        For Each P As Runtime In Statement.Runtime
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name & "|" & P.ReturnType
                            Me.Quantity_Runtime += 1

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 6
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Loader.Count - 1 >= 0 Then
                        For Each P As Loader In Statement.Loader
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|"
                            Me.Quantity_Loader += 1
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 7
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Event.Count - 1 >= 0 Then
                        For Each P As [Event] In Statement.Event
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Me.Quantity_Event += 1
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 10
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                    Me.Node_Class.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Class", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Class Statement", Result, "Public Sub Add_Class(ByVal Statement As VbNET.Class)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.09> <Sub> <Add> [Add_Constante(Statement|VbNET.Constante)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Constante(ByVal Statement As VbNET.Constante)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Constante) Then
                    Me.Constante = New List(Of VbNET.Constante)
                End If
                For Each S As VbNET.Constante In Me.Constante
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Constante.Count
                    Log.Add(Statement.Save())
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Constante.Add(Statement)
                    Me.Quantity_Constante += 1
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 9
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Constante.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Constante", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Constante Statement", Result, "Public Sub Add_Constante(ByVal Statement As VbNET.Constante)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.10> <Sub> <Add> [Add_Event(Statement|VbNET.Event)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Event(ByVal Statement As VbNET.Event)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Event) Then
                    Me.Event = New List(Of VbNET.Event)
                End If
                For Each S As VbNET.Event In Me.Event
                    If S.Name = Statement.Name Then
                        addit = False

                        Exit For
                    End If
                Next
                If addit = True Then
                    Me.Quantity_Event += 1
                    If Not IsNothing(Statement.ParameterList) Then
                        Me.Quantity_Parameter += Statement.ParameterList.Count
                    End If
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Event.Count
                    Log.Add(Statement.Save())
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Event.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 10
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Event.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Event", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Event Statement", Result, "Public Sub Add_Event(ByVal Statement As VbNET.Event)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.11> <Sub> <Add> [Add_Declare(Statement|VbNET.Declare)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Declare(ByVal Statement As VbNET.Declare)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Declares) Then
                    Me.Declares = New List(Of VbNET.Declare)
                End If
                For Each S As VbNET.Declare In Me.Declares
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Declares.Count
                    Log.Add(Statement.Save())
                    Me.Declares.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 11
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Declare.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Declare", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Declare Statement", Result, "Public Sub Add_Declare(ByVal Statement As VbNET.Declare)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.12> <Sub> <Add> [Add_Delegate(Statement|VbNET.Delegate)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Delegate(ByVal Statement As VbNET.Delegate)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Delegates) Then
                    Me.Delegates = New List(Of VbNET.Delegate)
                End If
                For Each S As VbNET.Delegate In Me.Delegates
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Delegates.Count
                    Log.Add(Statement.Save())
                    Me.Delegates.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 12
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Delegate.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Delegate", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Delegate Statement", Result, "Public Sub Add_Delegate(ByVal Statement As VbNET.Delegate)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.13> <Sub> <Add> [Add_Dim(Statement|VbNET.Dim)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Dim(ByVal Statement As VbNET.Dim)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Dims) Then
                    Me.Dims = New List(Of VbNET.Dim)
                End If
                For Each S As VbNET.Dim In Me.Dims
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.ID = Me.Dims.Count
                    '  Log.Add(Statement.Save())
                    Me.Dims.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 6
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Dim.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Dim", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Dim Statement", Result, "Public Sub Add_Dim(ByVal Statement As VbNET.Dim)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.14> <Sub> <Add> [Add_Module(Statement|VbNET.Module)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Module(ByVal Statement As VbNET.Module)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Modules) Then
                    Me.Modules = New List(Of VbNET.Module)
                End If
                For Each S As VbNET.Module In Me.Modules
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Modules.Count
                    Log.Add(Statement.Save())
                    Me.Modules.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 8
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Module.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Module", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Add(NX)
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Module Statement", Result, "Public Sub Add_Module(ByVal Statement As VbNET.Module)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "[On] |2019/05/22 13h24:648| <04.02.15> <Sub> <> |.Add_Namespace()|Sub}|"' (Set|Get) The sub Add_Namespace.
        '''    <Summary>
        '''     (Set|Get) The sub Add_Namespace.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h25:648 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), Description("(Set|Get) The sub Add_Namespace.")>
        Public Sub Add_Namespace(ByVal Reference As ReferenceCaller)
            Dim Addit As Boolean = True
            If IsNothing(Me.Namespace) Then
                Me.Namespace = New List(Of ReferenceCaller)

            End If
            If Not IsNothing(Reference) Then
                If Me.Namespace.Count - 1 >= 0 Then
                    For i = 0 To Me.Namespace.Count - 1
                        If Me.Namespace(i).Name = Reference.Name Then
                            Addit = False
                            Exit For
                        End If
                    Next
                Else
                End If
                If Addit = True Then
                    Me.Namespace.Add(Reference)
                End If
            End If
        End Sub
#End Region '(Set|Get) The sub Add_Namespace.
#End Region
#Region "<04.03> <Sub> [Remove]"
#Region "<04.03.00> <Sub> <Add> [Remove_Importation(Statement|VbNET.Import)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Importation(ByVal Statement As VbNET.Import)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Importation) Then
                    Me.Importation = New List(Of Import)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Import = Nothing
                For Each S As VbNET.Import In Me.Importation
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Importation.Remove(ElementToDelete)
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Importation.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Importation.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Import", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                    If Me.Quantity_Importation - 1 < 0 Then
                        Me.Quantity_Importation = 0
                    Else
                        Me.Quantity_Importation -= 1
                    End If

                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Import Statement", Result, "Public Sub Remove_Importation(ByVal Statement As VbNET.Import)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.01> <Sub> <Add> [Remove_Property(Statement|VbNET.Property)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Property(ByVal Statement As VbNET.Property)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Properties) Then
                    '  Me.Properties = New List(Of VbNET.Property)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Property = Nothing
                For Each S As VbNET.Property In Me.Properties
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Properties.Remove(ElementToDelete)
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                    If Me.Quantity_Property - 1 < 0 Then
                        Me.Quantity_Property = 0
                    Else
                        Me.Quantity_Property -= 1
                    End If
                    If Me.Quantity_Parameter - ElementToDelete.ParameterList.Count < 0 Then
                        Me.Quantity_Parameter = 0
                    Else
                        Me.Quantity_Parameter -= ElementToDelete.ParameterList.Count
                    End If
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Property", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Property Statement", Result, "Public Sub Remove_Property(ByVal Statement As VbNET.Property)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.02> <Sub> <Add> [Remove_Enumeration(Statement|VbNET.Enumeration)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Enumeration(ByVal Statement As VbNET.Enumeration)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Enumeration) Then
                    Me.Enumeration = New List(Of VbNET.Enumeration)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Enumeration = Nothing
                For Each S As VbNET.Enumeration In Me.Enumeration
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Enumeration - 1 < 0 Then
                            Me.Quantity_Enumeration = 0
                        Else
                            Me.Quantity_Enumeration -= 1
                        End If
                        If Me.Quantity_Member - ElementToDelete.Members.Count < 0 Then
                            Me.Quantity_Member = 0
                        Else
                            Me.Quantity_Member -= ElementToDelete.Members.Count
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Enumeration.Remove(ElementToDelete)
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Enumeration", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Enumeration Statement", Result, "Public Sub Remove_Enumeration(ByVal Statement As VbNET.Enumeration)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.03> <Sub> <Add> [Remove_Structure(Statement|VbNET.Structure)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Structure(ByVal Statement As VbNET.Structure)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Structure) Then
                    Me.Structure = New List(Of VbNET.Structure)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Structure = Nothing
                For Each S As VbNET.Structure In Me.Structure
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Structure.Remove(ElementToDelete)
                    hasRemovedit = True

                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Structure.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True

                    If Me.Quantity_Structure - 1 < 0 Then
                        Me.Quantity_Structure = 0
                    Else
                        Me.Quantity_Structure -= 1
                    End If
                    For Each EnumE As VbNET.Enumeration In Statement.Enumeration
                        If Me.Quantity_Enumeration - 1 < 0 Then
                            Me.Quantity_Enumeration = 0
                        Else
                            Me.Quantity_Enumeration -= 1
                        End If
                        If Me.Quantity_Member - EnumE.Members.Count < 0 Then
                            Me.Quantity_Member = 0
                        Else
                            Me.Quantity_Member -= EnumE.Members.Count
                        End If
                    Next
                    For Each PropE As VbNET.Property In Statement.Property
                        If Me.Quantity_Property - 1 < 0 Then
                            Me.Quantity_Property = 0
                        Else
                            Me.Quantity_Property -= 1
                        End If
                        If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= PropE.ParameterList.Count
                        End If
                    Next
                    For Each PropE As VbNET.Sub In Statement.Sub
                        If Me.Quantity_Sub - 1 < 0 Then
                            Me.Quantity_Sub = 0
                        Else
                            Me.Quantity_Sub -= 1
                        End If
                        If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= PropE.ParameterList.Count
                        End If
                    Next
                    For Each PropE As VbNET.Function In Statement.Function
                        If Me.Quantity_Function - 1 < 0 Then
                            Me.Quantity_Function = 0
                        Else
                            Me.Quantity_Function -= 1
                        End If
                        If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= PropE.ParameterList.Count
                        End If
                    Next
                    For Each PropE As VbNET.Runtime In Statement.Runtime
                        If Me.Quantity_Runtime - 1 < 0 Then
                            Me.Quantity_Runtime = 0
                        Else
                            Me.Quantity_Runtime -= 1
                        End If
                    Next
                    For Each PropE As VbNET.Event In Statement.Event
                        If Me.Quantity_Event - 1 < 0 Then
                            Me.Quantity_Event = 0
                        Else
                            Me.Quantity_Event -= 1
                        End If

                    Next


                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Structure", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Structure Statement", Result, "Public Sub Remove_Structure(ByVal Statement As VbNET.Structure)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.04> <Sub> <Add> [Remove_Sub(Statement|VbNET.Sub)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Sub(ByVal Statement As VbNET.Sub)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Sub) Then
                    Me.Sub = New List(Of VbNET.Sub)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Sub = Nothing
                For Each S As VbNET.Sub In Me.Sub
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Sub - 1 < 0 Then
                            Me.Quantity_Sub = 0
                        Else
                            Me.Quantity_Sub -= 1
                        End If
                        If Me.Quantity_Parameter - S.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= S.ParameterList.Count
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Sub.Remove(ElementToDelete)
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Sub.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Sub", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Sub Statement", Result, "Public Sub Remove_Sub(ByVal Statement As VbNET.Sub)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.05> <Sub> <Add> [Remove_Function(Statement|VbNET.Function)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Function(ByVal Statement As VbNET.Function)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Function) Then
                    Me.Function = New List(Of VbNET.Function)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Function = Nothing
                For Each S As VbNET.Function In Me.Function
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Function - 1 < 0 Then
                            Me.Quantity_Function = 0
                        Else
                            Me.Quantity_Function -= 1
                        End If
                        If Me.Quantity_Parameter - S.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= S.ParameterList.Count
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Function.Remove(ElementToDelete)
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Function.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Function.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Function", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Function Statement", Result, "Public Function Remove_Function(ByVal Statement As VbNET.Function)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.06> <Sub> <Add> [Remove_Runtime(Statement|VbNET.Runtime)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Runtime(ByVal Statement As VbNET.Runtime)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Runtime) Then
                    Me.Runtime = New List(Of VbNET.Runtime)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Runtime = Nothing
                For Each S As VbNET.Runtime In Me.Runtime
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Runtime.Remove(ElementToDelete)
                    If Me.Quantity_Runtime - 1 < 0 Then
                        Me.Quantity_Runtime = 0
                    Else
                        Me.Quantity_Runtime -= 1
                    End If
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Runtime", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Runtime Statement", Result, "Public Runtime Remove_Runtime(ByVal Statement As VbNET.Runtime)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.07> <Sub> <Add> [Remove_Loader(Statement|VbNET.Loader)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Loader(ByVal Statement As VbNET.Loader)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Loader) Then
                    Me.Loader = New List(Of VbNET.Loader)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Loader = Nothing
                For Each S As VbNET.Loader In Me.Loader
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Loader - 1 < 0 Then
                            Me.Quantity_Loader = 0
                        Else
                            Me.Quantity_Loader -= 1
                        End If
                        If Me.Quantity_Parameter - S.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= S.ParameterList.Count
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Loader.Remove(ElementToDelete)
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Loader", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Loader Statement", Result, "Public Loader Remove_Loader(ByVal Statement As VbNET.Loader)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.08> <Sub> <Add> [Remove_Class(Statement|VbNET.Class)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Class(ByVal Statement As VbNET.Class)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Classes) Then
                    Me.Classes = New List(Of VbNET.Class)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Class = Nothing
                For Each S As VbNET.Class In Me.Classes
                    If S.Name = Statement.Name Then

                        If Me.Quantity_Class - 1 < 0 Then
                            Me.Quantity_Class = 0
                        Else
                            Me.Quantity_Class -= 1
                        End If
                        For Each EnumE As VbNET.Import In S.Importation
                            If Me.Quantity_Importation - 1 < 0 Then
                                Me.Quantity_Importation = 0
                            Else
                                Me.Quantity_Importation -= 1
                            End If

                        Next
                        For Each EnumE As VbNET.Enumeration In S.Enumeration
                            If Me.Quantity_Enumeration - 1 < 0 Then
                                Me.Quantity_Enumeration = 0
                            Else
                                Me.Quantity_Enumeration -= 1
                            End If
                            If Me.Quantity_Member - EnumE.Members.Count < 0 Then
                                Me.Quantity_Member = 0
                            Else
                                Me.Quantity_Member -= EnumE.Members.Count
                            End If
                        Next
                        For Each PropE As VbNET.Property In S.Properties
                            If Me.Quantity_Property - 1 < 0 Then
                                Me.Quantity_Property = 0
                            Else
                                Me.Quantity_Property -= 1
                            End If
                            If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                                Me.Quantity_Parameter = 0
                            Else
                                Me.Quantity_Parameter -= PropE.ParameterList.Count
                            End If
                        Next
                        For Each PropE As VbNET.Sub In S.Sub
                            If Me.Quantity_Sub - 1 < 0 Then
                                Me.Quantity_Sub = 0
                            Else
                                Me.Quantity_Sub -= 1
                            End If
                            If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                                Me.Quantity_Parameter = 0
                            Else
                                Me.Quantity_Parameter -= PropE.ParameterList.Count
                            End If
                        Next
                        For Each PropE As VbNET.Function In S.Function
                            If Me.Quantity_Function - 1 < 0 Then
                                Me.Quantity_Function = 0
                            Else
                                Me.Quantity_Function -= 1
                            End If
                            If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                                Me.Quantity_Parameter = 0
                            Else
                                Me.Quantity_Parameter -= PropE.ParameterList.Count
                            End If
                        Next
                        For Each PropE As VbNET.Runtime In S.Runtime
                            If Me.Quantity_Runtime - 1 < 0 Then
                                Me.Quantity_Runtime = 0
                            Else
                                Me.Quantity_Runtime -= 1
                            End If
                        Next
                        For Each PropE As VbNET.Event In S.Event
                            If Me.Quantity_Event - 1 < 0 Then
                                Me.Quantity_Event = 0
                            Else
                                Me.Quantity_Event -= 1
                            End If

                        Next
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Classes.Remove(ElementToDelete)
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Class", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Class Statement", Result, "Public Class Remove_Class(ByVal Statement As VbNET.Class)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.09> <Sub> <Add> [Remove_Constante(Statement|VbNET.Constante)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Constante(ByVal Statement As VbNET.Constante)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Constante) Then
                    Me.Constante = New List(Of VbNET.Constante)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Constante = Nothing
                For Each S As VbNET.Constante In Me.Constante
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Constante - 1 < 0 Then
                            Me.Quantity_Constante = 0
                        Else
                            Me.Quantity_Constante -= 1
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Constante.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Constante", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Constante Statement", Result, "Public Constante Remove_Constante(ByVal Statement As VbNET.Constante)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.10> <Sub> <Add> [Remove_Event(Statement|VbNET.Event)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Event(ByVal Statement As VbNET.Event)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Event) Then
                    Me.Event = New List(Of VbNET.Event)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Event = Nothing
                For Each S As VbNET.Event In Me.Event
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Event - 1 < 0 Then
                            Me.Quantity_Event = 0
                        Else
                            Me.Quantity_Event -= 1
                        End If
                        If Me.Quantity_Parameter - S.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= S.ParameterList.Count
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Event.Remove(ElementToDelete)
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Event", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Event Statement", Result, "Public Event Remove_Event(ByVal Statement As VbNET.Event)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.11> <Sub> <Add> [Remove_Declare(Statement|VbNET.Declare)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Declare(ByVal Statement As VbNET.Declare)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Declares) Then
                    Me.Declares = New List(Of VbNET.Declare)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Declare = Nothing
                For Each S As VbNET.Declare In Me.Declares
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Declares.Remove(ElementToDelete)
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Declare", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Declare Statement", Result, "Public Declare Remove_Declare(ByVal Statement As VbNET.Declare)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.12> <Sub> <Add> [Remove_Delegate(Statement|VbNET.Delegate)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Delegate(ByVal Statement As VbNET.Delegate)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Delegates) Then
                    Me.Delegates = New List(Of VbNET.Delegate)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Delegate = Nothing
                For Each S As VbNET.Delegate In Me.Delegates
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Delegates.Remove(ElementToDelete)
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Delegate", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Delegate Statement", Result, "Public Delegate Remove_Delegate(ByVal Statement As VbNET.Delegate)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.13> <Sub> <Add> [Remove_Dim(Statement|VbNET.Dim)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Dim(ByVal Statement As VbNET.Dim)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Dims) Then
                    Me.Dims = New List(Of VbNET.Dim)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Dim = Nothing
                For Each S As VbNET.Dim In Me.Dims
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Dims.Remove(ElementToDelete)
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Dim", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Dim Statement", Result, "Public Dim Remove_Dim(ByVal Statement As VbNET.Dim)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.14> <Sub> <Add> [Remove_Module(Statement|VbNET.Module)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Module(ByVal Statement As VbNET.Module)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Modules) Then
                    Me.Modules = New List(Of VbNET.Module)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Module = Nothing
                For Each S As VbNET.Module In Me.Modules
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Modules.Remove(ElementToDelete)
                    hasRemovedit = True
                    Dim NX As New StatementItem(Statement)
                    Me.Items.Remove(NX)
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Module", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Module Statement", Result, "Public Module Remove_Module(ByVal Statement As VbNET.Module)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "[On] |2019/05/22 13h24:648| <04.03.15> <Sub> <> |.Remove_Namespace()|Sub}|"' (Set|Get) The sub Remove_Namespace.
        '''    <Summary>
        '''     (Set|Get) The sub Remove_Namespace.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h28:238 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), Description("(Set|Get) The sub Remove_Namespace.")>
        Public Sub Remove_Namespace(ByVal Reference As ReferenceCaller)
            Dim ElementToDelete As ReferenceCaller = Nothing
            If Not IsNothing(Reference) Then
                If Me.Namespace.Count - 1 >= 0 Then
                    For i = 0 To Me.Namespace.Count - 1
                        If Me.Namespace(i).Name = Reference.Name Then
                            ElementToDelete = Me.Namespace(i)
                            Exit For
                        End If
                    Next
                Else
                End If
                If Not IsNothing(ElementToDelete) Then
                    Try
                        Me.Namespace.Remove(ElementToDelete)
                    Catch ex As Exception

                    End Try
                End If
            End If
        End Sub
#End Region '(Set|Get) The sub Remove_Namespace.
#End Region
#Region "<04.04> <Sub> [Refresh]"
#Region "<04.04.00> <Sub> <Refresh> [RefreshMainNode]"
        Public Sub RefreshMainNode()
            MainNode = New DevComponents.AdvTree.Node(Me.ClassName)
            MainNode.ImageIndex = 8
            MainNode.Nodes.Clear()
            Node_Importation.Nodes.Clear()

            Node_Importation.Text = "|0| Importation {" & Me.Importation.Count & "}"
            Node_Properties.Text = "|1| Property {" & Me.Properties.Count & "}"
            Node_Enumerations.Text = "|2| Enumeration {" & Me.Enumeration.Count & "}"
            Node_Structure.Text = "|3| Structure {" & Me.Structure.Count & "}"
            Node_Sub.Text = "|4| Sub {" & Me.Sub.Count & "}"
            Node_Function.Text = "|5| Function {" & Me.Function.Count & "}"
            Node_Runtime.Text = "|6| Runtime {" & Me.Runtime.Count & "}"
            Node_Loader.Text = "|7| Loader {" & Me.Loader.Count & "}"
            Node_Class.Text = "|8| Class {" & Me.Classes.Count & "}"
            Node_Constante.Text = "|9| Constante {" & Me.Constante.Count & "}"
            Node_Event.Text = "|10| Event {" & Me.Event.Count & "}"

            For Each Statement As VbNET.Import In Me.Importation
                Dim N As New DevComponents.AdvTree.Node(Statement.ToString)
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Importation.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Importation)

            Node_Properties.Nodes.Clear()
            For Each Statement As VbNET.Property In Me.Properties
                Dim Str As String = ""
                If Statement.Required = True Then
                    Str = (Statement.Name & "|" & Statement.ReturnType & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")")
                Else
                    Str = ("[" & Statement.Name & "]|" & Statement.ReturnType & "{" & Statement.DefaultValue & "} " & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")")
                End If
                Dim N As New DevComponents.AdvTree.Node(Str)
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Properties.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Properties)

            Node_Enumerations.Nodes.Clear()
            For Each Statement As VbNET.Enumeration In Me.Enumeration
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "|{" & Statement.Members.Count & "} " & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ") ")
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Enumerations.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Enumerations)

            Node_Structure.Nodes.Clear()
            For Each Statement As VbNET.Structure In Me.Structure
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "|{" & Statement.Statements.Count & "}" & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")")
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Structure.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Structure)

            Node_Sub.Nodes.Clear()

            For Each Statement As VbNET.Sub In Me.Sub
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Statement.ParameterList) & ")" & "|{" & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")" & "}")
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Sub.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Sub)

            Node_Function.Nodes.Clear()
            For Each Statement As VbNET.Function In Me.Function
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Statement.ParameterList) & ")" & "|" & Statement.ReturnType & "{" & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")" & "}")
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Function.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Function)

            Node_Runtime.Nodes.Clear()
            For Each Statement As VbNET.Runtime In Me.Runtime
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "|" & Statement.ReturnType)
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Runtime.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Runtime)


            Node_Loader.Nodes.Clear()
            For Each Statement As VbNET.Loader In Me.Loader
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Statement.ParameterList) & ")" & "{" & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")" & "}")
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Loader.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Loader)

            Node_Class.Nodes.Clear()
            For Each Statement As VbNET.Class In Me.Classes
                Statement.RefreshMainNode()
                Node_Class.Nodes.Add(Statement.MainNode)
            Next
            MainNode.Nodes.Add(Node_Class)

            Node_Constante.Nodes.Clear()
            For Each Statement As VbNET.Constante In Me.Constante
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "|" & Statement.DefaultValue)
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Constante.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Constante)

            Node_Event.Nodes.Clear()
            For Each Statement As VbNET.Event In Me.Event
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "|" & Statement.DefaultValue)
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Event.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Event)
        End Sub

#End Region
#End Region
#Region "<04.05> <Sub> [CalculateQuote()]"
        Public Sub CalculateQuote()

            Total_Class = 0
            Total_Constante = 0
            Total_DataBase = 0
            Total_Enumeration = 0
            Total_Event = 0
            Total_Fichier = 0
            Total_Folder = 0
            Total_Function = 0
            Total_Importation = 0
            Total_LineInfo = 0
            Total_Loader = 0
            Total_Member = 0
            Total_Parameter = 0
            Total_Property = 0
            Total_Runtime = 0
            Total_Structure = 0
            Total_Sub = 0
            Total_Table = 0

            Total_Brut = 0
            GrandTotal_TVA = 0
            GrandTotal = 0

            Total_Class += My.Settings.Price_Class * Quantity_Class
            '  If Quantity_Class > 1 Then
            '  For Each C As VbNET.Class In Me.Classes
            '   Total_Class += C.Total_Brut * 1.2
            '   Next
            '   End If
            Total_Class = Math.Round(Total_Class, 2)
            Total_Constante = My.Settings.Price_Constante * Quantity_Constante
            Total_DataBase = My.Settings.Price_DataBase * Quantity_DataBase
            Total_Enumeration = My.Settings.Price_Enumeration * Quantity_Enumeration
            Total_Event = My.Settings.Price_Events * Quantity_Event
            Total_Fichier = My.Settings.Price_Fichier * Quantity_Fichier
            Total_Folder = My.Settings.Price_Folder * Quantity_Folder
            Total_Function = My.Settings.Price_Function * Quantity_Function
            Total_Importation = My.Settings.Price_Import * Quantity_Importation
            Total_LineInfo = My.Settings.Price_LineInfo * Quantity_LineInfo
            Total_Loader = My.Settings.Price_Loader * Quantity_Loader
            Total_Member = My.Settings.Price_Member * Quantity_Member
            Total_Parameter = My.Settings.Price_Parameter * Quantity_Parameter
            Total_Property = My.Settings.Price_Property * Quantity_Property
            Total_Runtime = My.Settings.Price_Runtime * Quantity_Runtime
            Total_Structure = My.Settings.Price_Structure * Quantity_Structure
            Total_Sub = My.Settings.Price_Sub * Quantity_Sub
            Total_Table = My.Settings.Price_Table * Quantity_Table

            Total_Brut = Math.Round(Total_Class +
                Total_Constante +
                Total_DataBase +
                Total_Enumeration +
                Total_Event +
                Total_Fichier +
                Total_Folder +
                Total_Function +
                Total_Importation +
                Total_LineInfo +
                Total_Loader +
                Total_Member +
                Total_Parameter +
                Total_Property +
                Total_Runtime +
                Total_Structure +
                Total_Sub +
                Total_Table, 2)

            GrandTotal_TVA = Math.Round(Total_Brut * My.Settings.VAT, 2)
            GrandTotal = Math.Round(Total_Brut + GrandTotal_TVA, 2)

        End Sub
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Class]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Class\" & Statement.Name & ".Class"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Class") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Class")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Class],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Class"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Class"
                        FilePath = My.Application.Info.DirectoryPath & "\Class\" & Statement.Name & ".Class"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Class]
            Dim Result As New [Class]
            Dim Serializer As New XmlSerializer(GetType([Class]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type Class.")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Class]
                    Temp = VbNET.[Class].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri

                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ClassName = Temp.ClassName
                        .Classes = Temp.Classes
                        .Constante = Temp.Constante
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .DefaultValue = Temp.DefaultValue
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DirectoryPath = Temp.DirectoryPath
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .Enumeration = Temp.Enumeration
                        .Event = Temp.Event
                        .Example = Temp.Example

                        .F = Temp.F
                        .FileC = Temp.FileC
                        .FileF = Temp.FileF
                        .FilePython = Temp.FilePython
                        .FileVB = Temp.FileVB
                        .Function = Temp.Function

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex
                        .Importation = Temp.Importation

                        .JavaScript = Temp.JavaScript

                        .Loader = Temp.Loader

                        .MainNode = Temp.MainNode
                        .MustInherit = Temp.MustInherit

                        .Name = Temp.Name
                        .Node_Class = Temp.Node_Class
                        .Node_Constante = Temp.Node_Constante
                        .Node_Enumerations = Temp.Node_Enumerations
                        .Node_Event = Temp.Node_Event
                        .Node_Function = Temp.Node_Function
                        .Node_Importation = Temp.Node_Importation
                        .Node_Loader = Temp.Node_Loader
                        .Node_Properties = Temp.Node_Properties
                        .Node_Runtime = Temp.Node_Runtime
                        .Node_Structure = Temp.Node_Structure
                        .Node_Sub = Temp.Node_Sub
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note
                        .NotInheritable = Temp.NotInheritable

                        .Partial = Temp.Partial
                        .Params = Temp.Params
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Properties = Temp.Properties
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Rights = Temp.Rights
                        .Runtime = Temp.Runtime

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Structure = Temp.Structure
                        .Sub = Temp.Sub
                        .Summary = Temp.Summary
                        .SummaryStatement = Temp.SummaryStatement

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .Variables = Temp.Variables
                        .VB = Temp.VB

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot

                    End With
                    Result.Output = New VbNET.[Class](Temp.Name)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")



            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            Else
                If My.Settings.DefaultOuput.Length < 1 Then
                    My.Settings.DefaultOuput = My.Computer.FileSystem.SpecialDirectories.MyDocuments & "\Virtual Classes"
                    My.Settings.Save()
                    If IO.Directory.Exists(My.Settings.DefaultOuput) = False Then
                        IO.Directory.CreateDirectory(My.Settings.DefaultOuput)
                    End If
                End If
                DirPath = New DirectoryInfo(My.Settings.DefaultOuput)
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Class.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try

            With Me
                .FileC = New Fichier(DirPath.FullName & "/" & Me.Name & ".C")
                .FileF = New Fichier(DirPath.FullName & "/" & Me.Name & ".F")
                .FileJavaScript = New Fichier(DirPath.FullName & "/" & Me.Name & ".Js")
                .FilePython = New Fichier(DirPath.FullName & "/" & Me.Name & ".Py")
                .FileVB = New Fichier(DirPath.FullName & "/" & Me.Name & ".vb")
            End With
            Try
                Dim file As System.IO.StreamWriter
                file = My.Computer.FileSystem.OpenTextFileWriter(FileC.Target, True)
                file.Write(C)
                file.Close()
            Catch ex As Exception
                MsgBox(ex.Message)
            End Try
            Try
                Dim file As System.IO.StreamWriter
                file = My.Computer.FileSystem.OpenTextFileWriter(FileF.Target, True)
                file.Write(F)
                file.Close()
            Catch ex As Exception
                MsgBox(ex.Message)
            End Try
            Try
                Dim file As System.IO.StreamWriter
                file = My.Computer.FileSystem.OpenTextFileWriter(FileVB.Target, True)
                file.Write(VB)
                file.Close()
            Catch ex As Exception
                MsgBox(ex.Message)
            End Try
            Try
                Dim file As System.IO.StreamWriter
                file = My.Computer.FileSystem.OpenTextFileWriter(FileJavaScript.Target, True)
                file.Write(JavaScript)
                file.Close()
            Catch ex As Exception
                MsgBox(ex.Message)
            End Try
            Try
                Dim file As System.IO.StreamWriter
                file = My.Computer.FileSystem.OpenTextFileWriter(FilePython.Target, True)
                file.Write(Python)
                file.Close()
            Catch ex As Exception
                MsgBox(ex.Message)
            End Try
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02> <Function> [Print]"
#Region "<05.02.00> <Function> <Print> [PrintAllStatements]"
        Public Function PrintallStatements() As List(Of ReferenceCaller)
            Dim Result As New List(Of ReferenceCaller)
            If Me.Statements.Count - 1 < 0 Then
                If Me.Note.Length < 0 Then
                    For Each P As VbNET.Property In Me.Properties
                        Dim PR As New ReferenceCaller(P)
                        Result.Add(PR)
                        Me.Statements.Add(P)
                    Next
                    ' For Each I As VbNET.Import In Me.Importation
                    'Dim Pr As New ReferenceCaller(I)
                    'Result.Add(Pr)
                    'Me.Statements.Add(I)
                    'Next
                    For Each E As VbNET.Enumeration In Me.Enumeration
                        Dim Pr As New ReferenceCaller(E)
                        Result.Add(Pr)
                        Me.Statements.Add(E)
                    Next
                    For Each S As VbNET.Structure In Me.Structure
                        Dim Pr As New ReferenceCaller(S)
                        Result.Add(Pr)
                        Me.Statements.Add(S)
                    Next
                    For Each SU As VbNET.Sub In Me.Sub
                        Dim Pr As New ReferenceCaller(SU)
                        Result.Add(Pr)
                        Me.Statements.Add(SU)
                    Next
                    For Each F As VbNET.Function In Me.Function
                        Dim Pr As New ReferenceCaller(F)
                        Result.Add(Pr)
                        Me.Statements.Add(F)
                    Next
                    For Each R As VbNET.Runtime In Me.Runtime
                        Dim Pr As New ReferenceCaller(R)
                        Result.Add(Pr)
                        Me.Statements.Add(R)
                    Next
                    For Each L As VbNET.Loader In Me.Loader
                        Dim Pr As New ReferenceCaller(L)
                        Result.Add(Pr)
                        Me.Statements.Add(L)
                    Next
                    For Each C As VbNET.Class In Me.Classes
                        Dim Pr As New ReferenceCaller(C)
                        Result.Add(Pr)
                        Me.Statements.Add(C)
                    Next
                    For Each CO As VbNET.Constante In Me.Constante
                        Dim Pr As New ReferenceCaller(CO)
                        Result.Add(Pr)
                        Me.Statements.Add(CO)
                    Next
                    For Each EV As VbNET.Event In Me.Event
                        Dim Pr As New ReferenceCaller(EV)
                        Result.Add(Pr)
                        Me.Statements.Add(EV)
                    Next


                End If
            End If

            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        Public Sub New(ByVal Name As String)
            Clear()
            With Me
                .Name = Name
                .ClassName = Name
                .MainNode.Text = Name
            End With

        End Sub
#End Region
#End Region
#Region "<7> [Runtime]"
        Public Temp_Import As Import
        Public Temp_Enumeration As Enumeration
        Public Temp_Structure As [Structure]
        Public Temp_Sub As [Sub]
        Public Temp_Function As [Function]
        Public Temp_Declare As [Declare]
        Public Temp_Loader As Loader
        Public Temp_Delegate As [Delegate]
        Public Temp_Constante As Constante
        Public Temp_Class As [Class]
        Public Temp_Dim As [Dim]
        Public Temp_Event As [Event]
        Public Temp_RaiseEvent As [RaiseEvent]
        Public Log As New TestItem("[Class].Log", "Record all events")
#End Region
    End Class
#End Region
#Region "|08.00.09| <Class> <Statement> [Constante]"
    ''' <summary>
    ''' https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/const-statement
    ''' </summary>
    Public Class [Constante]
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]"
#Region "|2019/04/24 00h10:536| <01.00.00> <Property> <Constructor> [Call=Attribute|Attributelist)]"'(Set|Get) the Attribute as List(Of InnerStatement.AttributeList)
        Private _Attribute As Attributelist
        ''' <Summary>
        ''' (Set|Get) the Attribute as List(Of Attributelist)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h10:536 </Published>
        ''' <Updated>[Created=2019/04/24 00h10:536][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Attribute as List(Of Attributelist)"), Browsable(True)>
        Public Property Attribute() As Attributelist
            Get
                Return _Attribute
            End Get
            Set(ByVal Value As Attributelist)
                _Attribute = Value
            End Set
        End Property
#End Region ' (Set|Get) the Attribute as List(Of InnerStatement.AttributeList)
#Region "|2019/04/24 00h11:932| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) the AccessModifier as AccessModifiers
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' (Set|Get) the AccessModifier as AccessModifiers
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h11:932 </Published>
        ''' <Updated>[Created=2019/04/24 00h11:932][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the AccessModifier as AccessModifiers"), Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)
                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) the AccessModifier as AccessModifiers
#Region "|2019/04/24 00h12:680| <01.00.02> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) the [Shadows] as Boolean
        Private _Shadows As Boolean
        ''' <Summary>
        ''' (Set|Get) the [Shadows] as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h12:680 </Published>
        ''' <Updated>[Created=2019/04/24 00h12:680][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the [Shadows] as Boolean"), Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)
                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) the [Shadows] as Boolean
#Region "|2019/04/24 00h28:596| <01.00.03> <Property> <Constructor> [Call=ConstanteName|String]"'(Set|Get) the ConstanteName as String
        Private _ConstanteName As String
        ''' <Summary>
        ''' (Set|Get) the ConstanteName as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h28:596 </Published>
        ''' <Updated>[Created=2019/04/24 00h28:596][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the ConstanteName as String"), Browsable(True)>
        Public Property ConstanteName() As String
            Get
                Return _ConstanteName
            End Get
            Set(ByVal Value As String)
                _ConstanteName = Value
            End Set
        End Property
#End Region ' (Set|Get) the ConstanteName as String
#Region "|2019/04/24 00h29:367| <01.00.04> <Property> <Constructor> [Call=DataType|String]"'(Set|Get) Required if Option Strict is On. Data type of the constant.
        Private _DataType As String
        ''' <Summary>
        ''' (Set|Get) Required if Option Strict is On. Data type of the constant.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h29:367 </Published>
        ''' <Updated>[Created=2019/04/24 00h29:367][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) Required if Option Strict is On. Data type of the constant."), Browsable(True)>
        Public Property DataType() As String
            Get
                Return _DataType
            End Get
            Set(ByVal Value As String)
                _DataType = Value
            End Set
        End Property
#End Region ' (Set|Get) Required if Option Strict is On. Data type of the constant.
#Region "|2019/04/24 00h29:218| <01.00.05> <Property> <Constructor> [Call=Initializer|String]"'(Set|Get) Required. Expression that is evaluated at compile time and assigned to the constant.
        Private _Initializer As String
        ''' <Summary>
        ''' Required. Expression that is evaluated at compile time and assigned to the constant.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h29:218 </Published>
        ''' <Updated>[Created=2019/04/24 00h29:218][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required. Expression that is evaluated at compile time and assigned to the constant."), Browsable(True)>
        Public Property Initializer() As String
            Get
                Return _Initializer
            End Get
            Set(ByVal Value As String)
                _Initializer = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Expression that is evaluated at compile time and assigned to the constant.
#Region "|2019/05/07 15h36:609| <01.00.06> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) the SummaryStatement as Summary
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' (Set|Get) the SummaryStatement as Summary
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 15h36:609 </Published>
        ''' <Updated>[Created=2019/05/07 15h36:609][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the SummaryStatement as Summary"), Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get
                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)
                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the SummaryStatement as Summary

#End Region
#Region "|01.03| <Property> [Parent]"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h27:647| <01.03.01> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.02> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.
#End Region
#Region "|01.01| <Property> [Price]{4}"
#Region "[On] |2019/06/12 16h50:602| <01.00.00> <Property> <Info> |.Production_Cost()|Double|"' (Set|Get) The Production_Cost as Double.
        Private _Production_Cost As Double
        '''    <Summary>
        '''     (Set|Get) The Production_Cost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h50:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Production_Cost as Double.")>
        Property Production_Cost() As Double
            Get
                Return _Production_Cost
            End Get
            Set(ByVal Value As Double)
                _Production_Cost = Value
            End Set
        End Property
#End Region '(Set|Get) The Production_Cost as Double.
#Region "[On] |2019/06/12 16h55:025| <01.00.02> <Property> <Info> |.Unit_Cost_Constante()|Double|"' (Set|Get) The Unit_Cost_Constante as Double.
        Private _Unit_Cost_Constante As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Constante as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:025 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Constante as Double.")>
        Property Unit_Cost_Constante() As Double
            Get
                Return _Unit_Cost_Constante
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Constante = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Constante as Double.
#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()

            With Me
                .ConstanteName = ""
                .AccessModifier = AccessModifiers.Public
                .DataType = ""
                .ID = 0
                .ImageIndex = Format.[Constante]
                .RegionCategory = 0
                .StatementFormat = Format.[Constante]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)

                .Updated(Status.Online, "The test is successful.",, Now) = ""

                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = ""
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Const "
                .VB_CloseStatement = ""
                .Python_OpenStatement = ""
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable|True])]"
        Public Sub PrintStatement(Optional ByVal Enable As Boolean = True)
            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            Production_Cost = 0
            Unit_Cost_Constante = My.Settings.Price_Constante
            Production_Cost += Unit_Cost_Constante
            With Me
                .RegionCode = IIf(.StatementFormat < 10, "0" & .StatementFormat, .StatementFormat) & "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." & IIf(.ID < 10, "0" & .ID, .ID)
            End With
            If Me.Description = "" Or IsNothing(Me.Description) Or Me.Description.Length < 1 Then
                Me.Description = "The Structure of " & Me.Name & "."
            End If
#Region "<Format Description>"
            If Description.Contains("(Set|Get)") Then
                Me.Description = Description
#End Region
            Else
                Me.Description = "(Set|Get) " & Me.Description
            End If

            Me.Summary = Me.SummaryStatement.Print_VB
            Me.SummaryStatement = New Summary(Me.Description, , Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage, Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)
            Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)

            'Create 
            If Me.Enable = True Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "Shadows ", "") & " Const " &
                                     Me.Name & " As " & Me.DataType & " = " & IIf(Me.DataType = "String", Space & Me.DefaultValue & Space, Me.DefaultValue))
#End Region
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_C.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("   " & DataType & " = " & IIf(Me.DataType = "String", Space & Me.DefaultValue & Space, Me.DefaultValue) & ";")
#End Region
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_JavaScript.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("   " & DataType & " = " & IIf(Me.DataType = "String", Space & Me.DefaultValue & Space, Me.DefaultValue) & ";")
#End Region
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("   " & DataType & " = " & IIf(Me.DataType = "String", Space & Me.DefaultValue & Space, Me.DefaultValue) & ";")
#End Region
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_Python.Add(Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("    " & Me.Attribute.Python)
#End Region
#Region "<Caller>"
                Me.Print_Python.Add("   member " & DataType & " = " & IIf(Me.DataType = "String", Space & Me.DefaultValue & Space, Me.DefaultValue))
#End Region
                Me.Print_Python.Add("#endregion " & Me.Description)
#End Region
#End Region
            ElseIf Me.Enable = False Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|" & Space & "' " & Me.Description)
#Region "<Summary>"
                Me.Print_VB.Add("    " & Me.SummaryStatement.Print_VB)
#End Region
#Region "<AttributeList>"
                Me.Print_VB.Add("''    " & Me.Attribute.VB)
#End Region
#Region "<Caller>"
                Me.Print_VB.Add("''   " & VbNET.AccessModifiers_ToString(Me.AccessModifier) &
                                    IIf(Me.Shadows = True, "Shadows ", "") & " Const " &
                                     Me.Name & " As " & Me.DataType & " = " & IIf(Me.DataType = "String", Space & Me.DefaultValue & Space, Me.DefaultValue))
#End Region
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_C.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_C.Add("//    " & Me.Attribute.C)
#End Region
#Region "<Caller>"
                Me.Print_C.Add("//   " & DataType & " = " & IIf(Me.DataType = "String", Space & Me.DefaultValue & Space, Me.DefaultValue) & ";")
#End Region
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_JavaScript.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_JavaScript.Add("//    " & Me.Attribute.JavaScript)
#End Region
#Region "<Caller>"
                Me.Print_JavaScript.Add("//   " & DataType & " = " & IIf(Me.DataType = "String", Space & Me.DefaultValue & Space, Me.DefaultValue) & ";")
#End Region
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_F.Add(Me.SummaryStatement.Print_C)
#End Region
#Region "<AttributeList>"
                Me.Print_F.Add("//    " & Me.Attribute.F)
#End Region
#Region "<Caller>"
                Me.Print_F.Add("//   " & DataType & " = " & IIf(Me.DataType = "String", Space & Me.DefaultValue & Space, Me.DefaultValue) & ";")
#End Region
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Summary>"
                Me.Print_Python.Add(Me.SummaryStatement.Print_Python)
#End Region
#Region "<AttributeList>"
                Me.Print_Python.Add("//    " & Me.Attribute.Python)
#End Region
#Region "<Caller>"
                Me.Print_Python.Add("//   member " & DataType & " = " & IIf(Me.DataType = "String", Space & Me.DefaultValue & Space, Me.DefaultValue))
#End Region
                Me.Print_Python.Add("#endregion " & Me.Description)
#End Region
#End Region
            End If

            Me.VB = ""
            Me.C = ""
            Me.Python = ""
            Me.JavaScript = ""
            Me.F = ""
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next



        End Sub
#End Region
#Region "<04.01.01> <Sub> <Print> [PrintStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]]"
        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub
#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Constante]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Constante\" & Statement.Name & ".Constante"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Constante") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Constante")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Constante],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Constante"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Constante"
                        FilePath = My.Application.Info.DirectoryPath & "\Constante\" & Statement.Name & ".Constante"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Constante]
            Dim Result As New [Constante]
            Dim Serializer As New XmlSerializer(GetType([Constante]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type [Constante].")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Constante]
                    Temp = VbNET.[Constante].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri
                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ConstanteName = Temp.ConstanteName
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .DataType = Temp.DataType
                        .DefaultValue = Temp.DefaultValue
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .ConstanteName = Temp.ConstanteName
                        .Example = Temp.Example

                        .F = Temp.F

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex
                        .Initializer = Temp.Initializer

                        .JavaScript = Temp.JavaScript

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .Params = Temp.Params
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Summary = Temp.Summary
                        .SummaryStatement = Temp.SummaryStatement

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .VB = Temp.VB
                        .Variables = Temp.Variables

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot
                    End With

                    Result.Output = New VbNET.Constante(Temp.Name, Temp.DataType, Temp.Initializer, Temp.AccessModifier, Temp.Shadows, Temp.Enable, Temp.Description, Temp.AttributeList, Temp.AuthorName, Temp.AuthorEmail, Temp.AuthorUri, Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Usage, Temp.Remarks, Temp.Example, Temp.Note, Temp.Published, Temp.Rights, Temp.Title, Temp.See, Temp.SeeAlso, Temp.Status, "", Now)
                    'Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Browsable, Temp.Enable, Temp.CustomProperty, Temp.DllImport, Temp.Remarks, Temp.Usage, Temp.Example, Temp.Note,, Temp.Rights, Temp.See, Temp.SeeAlso)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Constante.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="Name">Required. Name of this external reference. For more information, see Declared Element Names.</param>
        ''' <param name="AccessModifier">Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected</param>
        ''' <param name="MakeShadows">Optional. See Shadows.</param>
        ''' <param name="Enable">Enable the statement or disable it.</param>
        ''' <param name="Description">The summary statement.</param>
        ''' <param name="Attributes">[AttributeList]The AttributesList</param>
        ''' <param name="AuthorName">[Summary]The Author Name</param>
        ''' <param name="AuthorEmail">[Summary]The Author Email</param>
        ''' <param name="AuthorUrl">[Summary]The Author Url</param>
        ''' <param name="ContributorName">[Summary]The ContributorName</param>
        ''' <param name="ContributorEmail">[Summary]The ContributorEmail</param>
        ''' <param name="ContributorUrl">[Summary]The ContributorUrl</param>
        ''' <param name="Usage">[Summary]How to use this statement.</param>
        ''' <param name="Remark">[Summary]Special remarks regardinig this statment.</param>
        ''' <param name="Example">[Summary]Example of how to use this statment.</param>
        ''' <param name="Note">[Summary]Note regarding this statement.</param>
        ''' <param name="Published">[Summary]When this statment has been published.</param>
        ''' <param name="Rights">[Summary]The rights and authorisation for the usage of this command.</param>
        ''' <param name="Title">[Summary]The title of the statement</param>
        ''' <param name="See">[Summary]Reference to an external URl reference or internal object.</param>
        ''' <param name="SeeAlso">[Summary]Reference to an external URl reference or internal object.</param>
        ''' <param name="Status">[Summary]Status of this Statment.</param>
        ''' <param name="SituationLog">[Summary]Log report of this Statment.</param>
        ''' <param name="LogTime">[Summary]Log report time of this statment.</param>
        ''' <param name="Datatype">Required if Option Strict is On. Data type of the constant.</param>
        ''' <param name="Initializer">Required. Expression that is evaluated at compile time and assigned to the constant.</param>
        Public Sub New(ByVal Name As String,
                       ByVal Datatype As String,
              Optional ByVal Initializer As String = "",
              Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Public,
              Optional ByVal MakeShadows As Boolean = False,
              Optional ByVal Enable As Boolean = True,
              Optional ByVal Description As String = "",
              Optional ByVal Attributes As Attributelist = Nothing,
              Optional ByVal AuthorName As String = "",
              Optional ByVal AuthorEmail As String = "",
              Optional ByVal AuthorUrl As String = "",
              Optional ByVal ContributorName As String = "",
              Optional ByVal ContributorEmail As String = "",
              Optional ByVal ContributorUrl As String = "",
              Optional ByVal Usage As String = "",
              Optional ByVal Remark As String = "",
              Optional ByVal Example As String = "",
              Optional ByVal Note As String = "",
              Optional ByVal Published As String = "",
              Optional ByVal Rights As String = "",
              Optional ByVal Title As String = "",
              Optional ByVal See As String = "",
              Optional ByVal SeeAlso As String = "",
              Optional ByVal Status As Status = Status.Running,
              Optional ByVal SituationLog As String = "",
              Optional ByVal LogTime As Date = Nothing)
            Clear()

            With Me
                .Name = Name
                .Shadows = MakeShadows
                .Statement = Statement
                .ConstanteName = Name
                .Description = Description
                .DataType = Datatype
                .Initializer = Initializer
                If IsNothing(LogTime) Then
                    LogTime = New Date
                    LogTime = Now
                End If
                .Updated(Status, SituationLog & Environment.NewLine & "Need to construct the printing methods and also make the necessary research to find out how to convert this method to other languages.",, LogTime) = ""
                If Not IsNothing(Attributes) Then
                    With Attributes
                        Me.Browsable = .Browsable
                        Me.Category = .Category
                        Me.Custom = .Custom
                        Me.DefaultValue = .DefaultValue
                        Me.Description = .Description
                        Me.Deserializable = .Deserializable
                        Me.DllImport = .DllImport
                        Me.Editor = .Editor
                        Me.NonSerialized = .NonSerialized
                        Me.RelatedImageList = .RelatedImageList
                        Me.Serializable = .Serializable
                        Me.XmlIgnore = .XmlIgnore
                        Me.XmlInclude = .XmlInclude
                        Me.XmlRoot = .XmlRoot
                    End With
                End If
                If Me.Description = "" Then
                    .Description = Description
                End If

                .AuthorName = AuthorName
                .AuthorEmail = AuthorEmail
                .AuthorUri = AuthorUri
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUri
                .Usage = Usage
                .Remarks = Remark
                .Example = Example
                .Published = Published
                .Rights = Rights
                .Note = Note
                .Title = Title
                .See = See
                .SeeAlso = SeeAlso

                .SummaryStatement = New Summary(Me.Description,  , Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage,
                Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)

            End With
        End Sub
#End Region
#End Region
#Region "<8> [Class]"
#End Region
    End Class
#End Region
#Region "|08.00.10| <Class> <Statement> [Event]"
    ''' <summary>
    ''' https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/event-statement
    ''' </summary>
    Public Class [Event]
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]"
#Region "|2019/04/23 23h30:793| <01.00.00> <Property> <Constructor> [Call=AttrList|List(Of String)]"'(Set|Get) the AttrList as List(Of String)
        Private _AttrList As List(Of String)
        ''' <Summary>
        ''' (Set|Get) the AttrList as List(Of String)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h30:793 </Published>
        ''' <Updated>[Created=2019/04/23 23h30:793][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the AttrList as List(Of String)"), Browsable(True)>
        Public Property AttrList() As List(Of String)
            Get
                Return _AttrList
            End Get
            Set(ByVal Value As List(Of String))
                _AttrList = Value
            End Set
        End Property
#End Region ' (Set|Get) the AttrList as List(Of String)
#Region "|2019/04/23 23h31:365| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) Optional. Specifies what code can access the event. Can be one of the following:
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' Optional. Specifies what code can access the event. Can be one of the following:
        '''- Public—any code that can access the element that declares it can access it.
        '''- Protected—only code within its class or a derived class can access it.
        '''- Friend—only code in the same assembly can access it.
        '''- Private—only code in the element that declares it can access it.
        '''- Protected Friend-only code in the event's class, a derived class, or the same assembly can access it. 
        '''- Private Protected-only code in the event's class or a derived class in the same assembly can access it.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h31:365 </Published>
        ''' <Updated>[Created=2019/04/23 23h31:365][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. Specifies what code can access the event. Can be one of the following:
- Public—any code that can access the element that declares it can access it.
- Protected—only code within its class or a derived class can access it.
- Friend—only code in the same assembly can access it.
- Private—only code in the element that declares it can access it.
- Protected Friend-only code in the event's class, a derived class, or the same assembly can access it. 
- Private Protected-only code in the event's class or a derived class in the same assembly can access it."), Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)
                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Specifies what code can access the event. Can be one of the following:
#Region "|2019/04/23 23h33:905| <01.00.02> <Property> <Constructor> [Call=[Shared]|Boolean]"'(Set|Get) the [Shared] as Boolean
        Private _Shared As Boolean
        ''' <Summary>
        ''' (Set|Get) the [Shared] as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h33:905 </Published>
        ''' <Updated>[Created=2019/04/23 23h33:905][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the [Shared] as Boolean"), Browsable(True)>
        Public Property [Shared]() As Boolean
            Get
                Return _Shared
            End Get
            Set(ByVal Value As Boolean)
                _Shared = Value
            End Set
        End Property
#End Region ' (Set|Get) the [Shared] as Boolean
#Region "|2019/04/23 23h34:201| <01.00.03> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) Optional. Indicates that this event redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can shadow any kind of declared element with any other kind. A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible. For example, if a Private element shadows a base-class element, code that does not have permission to access the Private element accesses the base-class element instead.
        Private _Shadows As Boolean
        ''' <Summary>
        ''' Optional. Indicates that this event redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can shadow any kind of declared element with any other kind. A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible. For example, if a Private element shadows a base-class element, code that does not have permission to access the Private element accesses the base-class element instead.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h34:201 </Published>
        ''' <Updated>[Created=2019/04/23 23h34:201][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. Indicates that this event redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can shadow any kind of declared element with any other kind. A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible. For example, if a Private element shadows a base-class element, code that does not have permission to access the Private element accesses the base-class element instead."), Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)
                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates that this event redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can shadow any kind of declared element with any other kind. A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible. For example, if a Private element shadows a base-class element, code that does not have permission to access the Private element accesses the base-class element instead.
#Region "|2019/04/23 23h35:330| <01.00.04> <Property> <Constructor> [Call=EventName|String]"'(Set|Get) Required. Name of the event; follows standard variable naming conventions.
        Private _EventName As String
        ''' <Summary>
        ''' Required. Name of the event; follows standard variable naming conventions.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h35:330 </Published>
        ''' <Updated>[Created=2019/04/23 23h35:330][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required. Name of the event; follows standard variable naming conventions."), Browsable(True)>
        Public Property EventName() As String
            Get
                Return _EventName
            End Get
            Set(ByVal Value As String)
                _EventName = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Name of the event; follows standard variable naming conventions.
#Region "|2019/04/23 23h36:725| <01.00.05> <Property> <Constructor> [Call=ParameterList|List(Of InnerStatement.ParameterList_Statement)]"'(Set|Get) Optional. List of local variables that represent the parameters of this event. You must enclose the Parameter List in parentheses.
        Private _ParameterList As List(Of InnerStatement.ParameterList_Statement)
        ''' <Summary>
        ''' Optional. List of local variables that represent the parameters of this event. You must enclose the Parameter List in parentheses.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h36:725 </Published>
        ''' <Updated>[Created=2019/04/23 23h36:725][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. List of local variables that represent the parameters of this event. You must enclose the Parameter List in parentheses."), Browsable(True)>
        Public Property ParameterList() As List(Of InnerStatement.ParameterList_Statement)
            Get
                Return _ParameterList
            End Get
            Set(ByVal Value As List(Of InnerStatement.ParameterList_Statement))
                _ParameterList = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. List of local variables that represent the parameters of this event. You must enclose the Parameter List in parentheses.
#Region "|2019/04/23 23h38:851| <01.00.06> <Property> <Constructor> [Call=Implements|String]"'(Set|Get) Optional. Indicates that this event implements an event of an interface.
        Private _Implements As String
        ''' <Summary>
        ''' Optional. Indicates that this event implements an event of an interface.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h38:851 </Published>
        ''' <Updated>[Created=2019/04/23 23h38:851][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. Indicates that this event implements an event of an interface."), Browsable(True)>
        Public Property [Implements]() As String
            Get
                Return _Implements
            End Get
            Set(ByVal Value As String)
                If Value <> "" Then
                    Value = "Implements " & Value
                End If
                _Implements = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates that this event implements an event of an interface.
#Region "|2019/04/23 23h41:902| <01.00.07> <Property> <Constructor> [Call=Customs|String]"'(Set|Get) Required. Events declared as Custom must define custom AddHandler, RemoveHandler, and RaiseEvent accessors.
        Private _Customs As String
        ''' <Summary>
        ''' Required. Events declared as Custom must define custom AddHandler, RemoveHandler, and RaiseEvent accessors.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h41:902 </Published>
        ''' <Updated>[Created=2019/04/23 23h41:902][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required. Events declared as Custom must define custom AddHandler, RemoveHandler, and RaiseEvent accessors."), Browsable(True)>
        Public Property Customs() As String
            Get
                Return _Customs
            End Get
            Set(ByVal Value As String)

                _Customs = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Events declared as Custom must define custom AddHandler, RemoveHandler, and RaiseEvent accessors.
#Region "|2019/04/23 23h42:811| <01.00.08> <Property> <Constructor> [Call=DelegateName|String]"'(Set|Get) Optional. The name of a delegate that specifies the event-handler signature.
        Private _DelegateName As String
        ''' <Summary>
        ''' Optional. The name of a delegate that specifies the event-handler signature.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h42:811 </Published>
        ''' <Updated>[Created=2019/04/23 23h42:811][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. The name of a delegate that specifies the event-handler signature."), Browsable(True)>
        Public Property DelegateName() As String
            Get
                Return _DelegateName
            End Get
            Set(ByVal Value As String)

                _DelegateName = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. The name of a delegate that specifies the event-handler signature.
#Region "|2019/04/23 23h46:389| <01.00.09> <Property> <Constructor> [Call=AddHandler|String]"'(Set|Get) Required. Declares an AddHandler accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the AddHandler statement or implicitly by using the Handles clause.
        Private _AddHandler As String
        ''' <Summary>
        ''' Required. Declares an AddHandler accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the AddHandler statement or implicitly by using the Handles clause.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h46:389 </Published>
        ''' <Updated>[Created=2019/04/23 23h46:389][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''  <param name="attrlist">Optional. List of attributes that apply to this event. Multiple attributes are separated by commas. You must enclose the Attribute List in angle brackets ( ). </param>
        '''  <param name="DelegateName">Optional. The name of a delegate that specifies the event-handler signature. </param>
        '''  <param name="Statements">The innerStatement </param>

        <CategoryAttribute("Constructor"), Description("Required. Declares an AddHandler accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the AddHandler statement or implicitly by using the Handles clause."), Browsable(True)>
        Public Property [AddHandler](ByVal DelegateName As String, ByVal Statements As String, Optional ByVal attrlist As List(Of String) = Nothing) As String
            Get
                Return _AddHandler
            End Get
            Set(ByVal Value As String)
                If DelegateName <> "" AndAlso Statements <> "" Then
                    Dim Temp As String = ""
                    If Not IsNothing(attrlist) Then
                        For Each Str As String In attrlist
                            Temp += "<" & Str & ">" & Environment.NewLine
                        Next
                    End If
                    Temp += "AddHandler(ByVal value As " & DelegateName & ")" & Environment.NewLine &
                            Statements & Environment.NewLine & "End AddHandler"
                    Value = Temp
                End If
                _AddHandler = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Declares an AddHandler accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the AddHandler statement or implicitly by using the Handles clause.
#Region "|2019/04/23 23h54:834| <01.00.10> <Property> <Constructor> [Call=RemoveHandler|String]"'(Set|Get) Required. Declares an AddHandler accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the AddHandler statement or implicitly by using the Handles clause.
        Private _RemoveHandler As String
        ''' <Summary>
        ''' Required. Declares an AddHandler accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the AddHandler statement or implicitly by using the Handles clause.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h54:834 </Published>
        ''' <Updated>[Created=2019/04/23 23h54:834][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''  <param name="attrlist">Optional. List of attributes that apply to this event. Multiple attributes are separated by commas. You must enclose the Attribute List in angle brackets (). </param>
        '''  <param name="Statements">The innerStatement </param>

        <CategoryAttribute("Constructor"), Description("Required. Declares an AddHandler accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the AddHandler statement or implicitly by using the Handles clause."), Browsable(True)>
        Public Property [RemoveHandler](ByVal DelegateName As String, ByVal Statements As String, Optional ByVal attrlist As List(Of String) = Nothing) As String
            Get
                Return _RemoveHandler
            End Get
            Set(ByVal Value As String)
                If DelegateName <> "" AndAlso Statements <> "" Then
                    Dim Temp As String = ""
                    If Not IsNothing(attrlist) Then
                        For Each Str As String In attrlist
                            Temp += "<" & Str & ">" & Environment.NewLine
                        Next
                    End If
                    Temp += "RemoveHandler(ByVal value As " & DelegateName & ")" & Environment.NewLine &
                            Statements & Environment.NewLine & "End RemoveHandler"
                    Value = Temp
                End If
                _RemoveHandler = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Declares an AddHandler accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the AddHandler statement or implicitly by using the Handles clause.
#Region "|2019/04/23 23h59:917| <01.00.11> <Property> <Constructor> [Call=RaiseEvent|String]"'(Set|Get) Required. List of parameters that matches the parameters required by the delegatename delegate. You must enclose the Parameter List in parentheses.
        Private _RaiseEvent As String
        ''' <Summary>
        ''' Required. List of parameters that matches the parameters required by the delegatename delegate. You must enclose the Parameter List in parentheses.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h59:917 </Published>
        ''' <Updated>[Created=2019/04/23 23h59:917][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''  <param name="Statements">The innerStatement </param>
        '''  <param name="DelegateSignature">Required. List of parameters that matches the parameters required by the delegatename delegate. You must enclose the Parameter List in parentheses. </param>
        '''  <param name="AttrList">Optional. List of attributes that apply to this event. Multiple attributes are separated by commas. You must enclose the Attribute List in angle brackets (). </param>

        <CategoryAttribute("Constructor"), Description("Required. List of parameters that matches the parameters required by the delegatename delegate. You must enclose the Parameter List in parentheses."), Browsable(True)>
        Public Property [RaiseEvent](ByVal Statements As String, ByVal DelegateSignature As String, Optional ByVal AttrList As List(Of String) = Nothing) As String
            Get
                Return _RaiseEvent
            End Get
            Set(ByVal Value As String)
                If DelegateSignature <> "" AndAlso Statements <> "" Then
                    Dim Temp As String = ""
                    If Not IsNothing(AttrList) Then
                        For Each Str As String In AttrList
                            Temp += "<" & Str & ">" & Environment.NewLine
                        Next
                    End If
                    Temp += "RaiseEvent(ByVal value As " & DelegateSignature & ")" & Environment.NewLine &
                            Statements & Environment.NewLine & "End RaiseEvent"
                    Value = Temp
                End If
                _RaiseEvent = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. List of parameters that matches the parameters required by the delegatename delegate. You must enclose the Parameter List in parentheses.
#Region "|2019/05/07 14h58:939| <01.00.12> <Property> <Constructor> [Call=RaiseventStatement|String]"'(Set|Get) The RaiseEvent Statement.
        Private _RaiseventStatement As String
        ''' <Summary>
        ''' The RaiseEvent Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 14h58:939 </Published>
        ''' <Updated>[Created=2019/05/07 14h58:939][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("The RaiseEvent Statement."), Browsable(True)>
        Public Property RaiseventStatement() As String
            Get
                Return _RaiseventStatement
            End Get
            Set(ByVal Value As String)
                _RaiseventStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) The RaiseEvent Statement.
#Region "|2019/05/07 15h00:970| <01.00.13> <Property> <Constructor> [Call=AddHandlerStatement|String]"'(Set|Get) The AddHandler Statement.
        Private _AddHandlerStatement As String
        ''' <Summary>
        ''' The AddHandler Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 15h00:970 </Published>
        ''' <Updated>[Created=2019/05/07 15h00:970][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("The AddHandler Statement."), Browsable(True)>
        Public Property AddHandlerStatement() As String
            Get
                Return _AddHandlerStatement
            End Get
            Set(ByVal Value As String)
                _AddHandlerStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) The AddHandler Statement.
#Region "|2019/05/07 15h11:784| <01.00.14> <Property> <Constructor> [Call=RemoveHandlerStatement|String]"'(Set|Get) The RemoveHandler Statement.
        Private _RemoveHandlerStatement As String
        ''' <Summary>
        ''' The RemoveHandler Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 15h11:784 </Published>
        ''' <Updated>[Created=2019/05/07 15h11:784][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("The RemoveHandler Statement."), Browsable(True)>
        Public Property RemoveHandlerStatement() As String
            Get
                Return _RemoveHandlerStatement
            End Get
            Set(ByVal Value As String)
                _RemoveHandlerStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) The RemoveHandler Statement.
#Region "|2019/05/07 15h14:792| <01.00.15> <Property> <Constructor> [Call=DelegateSignature|String]"'(Set|Get) Required. List of parameters that matches the parameters required by the delegatename delegate. You must enclose the Parameter List in parentheses.
        Private _DelegateSignature As String
        ''' <Summary>
        ''' Required. List of parameters that matches the parameters required by the delegatename delegate. You must enclose the Parameter List in parentheses.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 15h14:792 </Published>
        ''' <Updated>[Created=2019/05/07 15h14:792][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required. List of parameters that matches the parameters required by the delegatename delegate. You must enclose the Parameter List in parentheses."), Browsable(True)>
        Public Property DelegateSignature() As String
            Get
                Return _DelegateSignature
            End Get
            Set(ByVal Value As String)
                _DelegateSignature = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. List of parameters that matches the parameters required by the delegatename delegate. You must enclose the Parameter List in parentheses.
#Region "|2019/05/07 15h22:671| <01.00.16> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) the SummaryStatement as Summary
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' (Set|Get) the SummaryStatement as Summary
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 15h22:671 </Published>
        ''' <Updated>[Created=2019/05/07 15h22:671][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the SummaryStatement as Summary"), Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get
                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)
                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the SummaryStatement as Summary
#End Region
#Region "|01.03| <Property> [Parent]{4}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h26:392| <01.03.01> <Property> <Parent> |.ParentStructure()|VbNET.Structure|"' (Set|Get) The ParentStructure as VbNET.Structure.
        Private _ParentStructure As VbNET.Structure
        '''    <Summary>
        '''     (Set|Get) The ParentStructure as VbNET.Structure.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h26:413 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentStructure as VbNET.Structure."), XmlIgnore>
        Property ParentStructure() As VbNET.Structure
            Get
                Return _ParentStructure
            End Get
            Set(ByVal Value As VbNET.Structure)
                _ParentStructure = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentStructure as VbNET.Structure.
#Region "[On] |2019/05/22 13h27:647| <01.03.02> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.03> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#Region "|01.01| <Property> [Price]{4}"
#Region "[On] |2019/06/12 16h50:602| <01.00.00> <Property> <Info> |.Production_Cost()|Double|"' (Set|Get) The Production_Cost as Double.
        Private _Production_Cost As Double
        '''    <Summary>
        '''     (Set|Get) The Production_Cost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h50:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Production_Cost as Double.")>
        Property Production_Cost() As Double
            Get
                Return _Production_Cost
            End Get
            Set(ByVal Value As Double)
                _Production_Cost = Value
            End Set
        End Property
#End Region '(Set|Get) The Production_Cost as Double.
#Region "[On] |2019/06/12 16h51:619| <01.00.01> <Property> <Info> |.Quantity_Parameters()|Integer|"' (Set|Get) The Quantity_Parameters as Integer.
        Private _Quantity_Parameters As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Parameters as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h51:635 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Quantity_Parameters as Integer.")>
        Property Quantity_Parameters() As Integer
            Get
                Return _Quantity_Parameters
            End Get
            Set(ByVal Value As Integer)
                If Value < 0 Then
                    Value = 0
                Else

                End If
                _Quantity_Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Parameters as Integer.
#Region "[On] |2019/06/12 16h55:025| <01.00.02> <Property> <Info> |.Unit_Cost_Event()|Double|"' (Set|Get) The Unit_Cost_Event as Double.
        Private _Unit_Cost_Event As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Event as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:025 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Event as Double.")>
        Property Unit_Cost_Event() As Double
            Get
                Return _Unit_Cost_Event
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Event = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Event as Double.
#Region "[On] |2019/06/12 16h55:615| <01.00.03> <Property> <Info> |.Unit_Cost_Parameters()|Double|"' (Set|Get) The Unit_Cost_Parameters as Double.
        Private _Unit_Cost_Parameters As Double
        '''    <Summary>
        '''     (Set|Get) The Unit_Cost_Parameters as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/12 16h55:635 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Unit_Cost_Parameters as Double.")>
        Property Unit_Cost_Parameters() As Double
            Get
                Return _Unit_Cost_Parameters
            End Get
            Set(ByVal Value As Double)
                _Unit_Cost_Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Unit_Cost_Parameters as Double.
#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            With Me
                .AttrList = New List(Of String)
                .AccessModifier = AccessModifiers.Public
                .Shadows = False
                .Shared = False
                .EventName = ""
                .ParameterList = New List(Of InnerStatement.ParameterList_Statement)
                .Implements = ""
                .Custom = New Attributelist.Attribute
                .DelegateName = ""
                .AddHandler(.DelegateName, " ") = ""
                .RemoveHandler(.DelegateName, " ") = ""
                .RaiseEvent("", "") = Nothing

                .ID = 0
                .ImageIndex = Format.Event
                .RegionCategory = 0
                .StatementFormat = Format.Event
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)


                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = ""
                .F_CloseStatement = ":"
                .VB_OpenStatement = ""
                .VB_CloseStatement = ""
                .Python_OpenStatement = ""
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""


            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable]|Boolean(True))]"
        ''' <summary>
        ''' Print the statement
        ''' </summary>
        ''' <param name="Enable">This parameter will overide the Me.Enable Property! ByDefault is set on True.</param>
        Public Function PrintStatement(Optional ByVal Enable As Boolean = True) As TestItem
            Dim Result As New TestItem("Printing Module", "Printing a Module Statement")

            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            Me.Production_Cost = 0
            Me.Unit_Cost_Parameters = My.Settings.Price_Parameter
            Me.Unit_Cost_Event = My.Settings.Price_Events
            Me.Production_Cost += Me.Unit_Cost_Event
            If Not IsNothing(Me.ParameterList) Then
                Me.Quantity_Parameters = Me.ParameterList.Count
            End If
            Me.Production_Cost += Me.Quantity_Parameters * Me._Unit_Cost_Parameters
            If Me.Enable = True Then
            Else
            End If
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next
            Dim O_VB As New Input_Parameters("VbNET", "String", Me.VB)
            Dim O_C As New Input_Parameters("C#", "String", Me.C)
            Dim O_F As New Input_Parameters("F#", "String", Me.F)
            Dim O_Python As New Input_Parameters("Python", "String", Me.Python)
            Dim O_JavaScript As New Input_Parameters("JavaScript", "String", Me.JavaScript)
            Result.AddOutputParam("VbNET", "String", Me.VB)
            Result.AddOutputParam("C#", "String", Me.C)
            Result.AddOutputParam("F#", "String", Me.F)
            Result.AddOutputParam("Python", "String", Me.Python)
            Result.AddOutputParam("JavaScript", "String", Me.JavaScript)
            Return Result
        End Function
#End Region
#Region "<04.01.01> <Sub> <Print> [PrinStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]|Boolean(True))]"

        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub

#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Event]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Event\" & Statement.Name & ".Event"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Event") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Event")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Event],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Event"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Event"
                        FilePath = My.Application.Info.DirectoryPath & "\Event\" & Statement.Name & ".Event"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Event]
            Dim Result As New [Event]
            Dim Serializer As New XmlSerializer(GetType([Event]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type [Event].")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Event]
                    Temp = VbNET.[Event].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier
                        .AddHandler(DelegateName, AddHandlerStatement) = ""
                        .AddHandlerStatement = Temp.AddHandlerStatement
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri
                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty
                        .Customs = Temp.Customs

                        .DefaultValue = Temp.DefaultValue
                        .DelegateName = Temp.DelegateName
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .EventName = Temp.EventName
                        .Example = Temp.Example

                        .F = Temp.F

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex
                        .Implements = Temp.Implements

                        .JavaScript = Temp.JavaScript

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .Params = Temp.Params
                        .ParameterList = Temp.ParameterList
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RaiseEvent(RaiseventStatement, DelegateName) = ""
                        .RaiseventStatement = Temp.RaiseventStatement
                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .RemoveHandlerStatement = Temp.RemoveHandlerStatement
                        .RemoveHandler(Temp.DelegateName, Temp.RemoveHandlerStatement) = ""
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Shared = Temp.Shared
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Summary = Temp.Summary

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .VB = Temp.VB
                        .Variables = Temp.Variables

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot
                    End With

                    Result.Output = New VbNET.Event(Temp.Name, Temp.DelegateSignature, Temp.AddHandlerStatement, Temp.RaiseventStatement, Temp.RemoveHandlerStatement, Temp.Customs, Temp.DelegateName, Temp.AccessModifier, Temp.ParameterList, Temp.Shadows, Temp.Shared, Temp.Statement, Temp.Implements, Temp.Enable, Temp.Description, Temp.AttributeList, Temp.AuthorName, Temp.AuthorEmail, Temp.AuthorUri, Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Usage, Temp.Remarks, Temp.Example, Temp.Note, Temp.Published, Temp.Rights, Temp.Title, Temp.See, Temp.SeeAlso, Temp.Status, "", Now)
                    'Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Browsable, Temp.Enable, Temp.CustomProperty, Temp.DllImport, Temp.Remarks, Temp.Usage, Temp.Example, Temp.Note,, Temp.Rights, Temp.See, Temp.SeeAlso)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Event.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="Name">Required. Name of this external reference. For more information, see Declared Element Names.</param>
        ''' <param name="AccessModifier">Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected</param>
        ''' <param name="Parameters">Required if the procedure takes parameters. See Parameter List.</param>
        ''' <param name="MakeShadows">Optional. See Shadows.</param>
        ''' <param name="Statement">The inner statement</param>
        ''' <param name="Enable">Enable the statement or disable it.</param>
        ''' <param name="Description">The summary statement.</param>
        ''' <param name="Attributes">[AttributeList]The AttributesList</param>
        ''' <param name="AuthorName">[Summary]The Author Name</param>
        ''' <param name="AuthorEmail">[Summary]The Author Email</param>
        ''' <param name="AuthorUrl">[Summary]The Author Url</param>
        ''' <param name="ContributorName">[Summary]The ContributorName</param>
        ''' <param name="ContributorEmail">[Summary]The ContributorEmail</param>
        ''' <param name="ContributorUrl">[Summary]The ContributorUrl</param>
        ''' <param name="Usage">[Summary]How to use this statement.</param>
        ''' <param name="Remark">[Summary]Special remarks regardinig this statment.</param>
        ''' <param name="Example">[Summary]Example of how to use this statment.</param>
        ''' <param name="Note">[Summary]Note regarding this statement.</param>
        ''' <param name="Published">[Summary]When this statment has been published.</param>
        ''' <param name="Rights">[Summary]The rights and authorisation for the usage of this command.</param>
        ''' <param name="Title">[Summary]The title of the statement</param>
        ''' <param name="See">[Summary]Reference to an external URl reference or internal object.</param>
        ''' <param name="SeeAlso">[Summary]Reference to an external URl reference or internal object.</param>
        ''' <param name="Status">[Summary]Status of this Statment.</param>
        ''' <param name="SituationLog">[Summary]Log report of this Statment.</param>
        ''' <param name="LogTime">[Summary]Log report time of this statment.</param>
        ''' <param name="AddHandlerStatement">Required. Declares an AddHandler accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the AddHandler statement or implicitly by using the Handles clause.</param>
        ''' <param name="Customs">Required. Events declared as Custom must define custom AddHandler, RemoveHandler, and RaiseEvent accessors.</param>
        ''' <param name="DelegateName">Optional. The name of a delegate that specifies the event-handler signature.</param>
        ''' <param name="DelegateSignature">Required. List of parameters that matches the parameters required by the delegatename delegate. You must enclose the Parameter List in parentheses.</param>
        ''' <param name="Implementation">Optional. Indicates that this event implements an event of an interface.</param>
        ''' <param name="MakeShared">Optional. Specifies that this event is not associated with a specific instance of a class or structure.</param>
        ''' <param name="RaiseEventStatement">Required. Declares a RaiseEvent accessor, which specifies the statements to execute when the event is raised using the RaiseEvent statement. Typically, this invokes a list of delegates maintained by the AddHandler and RemoveHandler accessors.</param>
        ''' <param name="RemoveHandlerStatement">Required. Declares a RemoveHandler accessor, which specifies the statements to execute when an event handler is removed using the RemoveHandler statement.</param>
        Public Sub New(ByVal Name As String,
                       ByVal DelegateSignature As String,
                       ByVal AddHandlerStatement As String,
                       ByVal RaiseEventStatement As String,
                       ByVal RemoveHandlerStatement As String,
                       ByVal Customs As Boolean,
              Optional ByVal DelegateName As String = "",
              Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Public,
              Optional ByVal Parameters As List(Of InnerStatement.ParameterList_Statement) = Nothing,
              Optional ByVal MakeShadows As Boolean = False,
              Optional ByVal MakeShared As Boolean = False,
              Optional ByVal Statement As String = Nothing,
              Optional ByVal Implementation As String = "",
              Optional ByVal Enable As Boolean = True,
              Optional ByVal Description As String = "",
              Optional ByVal Attributes As Attributelist = Nothing,
              Optional ByVal AuthorName As String = "",
              Optional ByVal AuthorEmail As String = "",
              Optional ByVal AuthorUrl As String = "",
              Optional ByVal ContributorName As String = "",
              Optional ByVal ContributorEmail As String = "",
              Optional ByVal ContributorUrl As String = "",
              Optional ByVal Usage As String = "",
              Optional ByVal Remark As String = "",
              Optional ByVal Example As String = "",
              Optional ByVal Note As String = "",
              Optional ByVal Published As String = "",
              Optional ByVal Rights As String = "",
              Optional ByVal Title As String = "",
              Optional ByVal See As String = "",
              Optional ByVal SeeAlso As String = "",
              Optional ByVal Status As Status = Status.Running,
              Optional ByVal SituationLog As String = "",
              Optional ByVal LogTime As Date = Nothing)
            Clear()

            With Me
                .Name = Name
                .Shadows = MakeShadows
                .Statement = Statement
                .DelegateName = DelegateName
                .Description = Description
                .AddHandlerStatement = AddHandlerStatement
                .RaiseventStatement = RaiseventStatement
                .RemoveHandlerStatement = RemoveHandlerStatement
                .DelegateSignature = DelegateSignature
                .RaiseEvent(.RaiseventStatement, .DelegateSignature) = ""
                .AddHandler(.DelegateSignature, .AddHandlerStatement) = ""
                .RemoveHandler(.DelegateName, .RemoveHandlerStatement) = ""
                If IsNothing(LogTime) Then
                    LogTime = New Date
                    LogTime = Now
                End If
                .Updated(Status, SituationLog & Environment.NewLine & "Need to construct the printing methods and also make the necessary research to find out how to convert this method to other languages.",, LogTime) = ""
                If Not IsNothing(Attributes) Then
                    With Attributes
                        Me.Browsable = .Browsable
                        Me.Category = .Category
                        Me.Custom = .Custom
                        Me.DefaultValue = .DefaultValue
                        Me.Description = .Description
                        Me.Deserializable = .Deserializable
                        Me.DllImport = .DllImport
                        Me.Editor = .Editor
                        Me.NonSerialized = .NonSerialized
                        Me.RelatedImageList = .RelatedImageList
                        Me.Serializable = .Serializable
                        Me.XmlIgnore = .XmlIgnore
                        Me.XmlInclude = .XmlInclude
                        Me.XmlRoot = .XmlRoot
                    End With
                End If
                If Me.Description = "" Then
                    .Description = Description
                End If
                If Not IsNothing(Parameters) Then
                    .ParameterList = Parameters
                End If
                .AuthorName = AuthorName
                .AuthorEmail = AuthorEmail
                .AuthorUri = AuthorUri
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUri
                .Usage = Usage
                .Remarks = Remark
                .Example = Example
                .Published = Published
                .Rights = Rights
                .Note = Note
                .Title = Title
                .See = See
                .SeeAlso = SeeAlso
                Dim Params As New List(Of Summary.Param)
                If Not IsNothing(Me.ParameterList) Then
                    For i = 0 To Me.ParameterList.Count - 1
                        Dim P As New Summary.Param(Me.ParameterList(i).ParameterName, Me.ParameterList(i).Definition)
                        Params.Add(P)
                    Next
                End If
                .SummaryStatement = New Summary(Me.Description, Params, Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage,
                Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)

            End With
        End Sub
#End Region
#End Region
    End Class
#End Region
#Region "|08.00.11| <Class> <Statement> [Delegate]"
    ''' <summary>
    ''' Used to declare a delegate. A delegate is a reference type that refers to a Shared method of a type or to an instance method of an object. Any procedure with matching parameter and return types can be used to create an instance of this delegate class. The procedure can then later be invoked by means of the delegate instance.
    ''' </summary>
    Public Class [Delegate]
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]"
#Region "|2019/04/13 15h06:865| <01.00.00> <Property> <Constructor> [Call=Attribute|AttributeList]"'(Set|Get) Optional. List of attributes that apply to this delegate. Multiple attributes are separated by commas. You must enclose the Attribute List in angle brackets ("<" and ">").
        Private _Attribute As Attributelist
        ''' <Summary>
        ''' Optional. List of attributes that apply to this delegate. Multiple attributes are separated by commas. You must enclose the Attribute List in angle brackets ( and ).
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 15h06:864 </Published>
        ''' <Updated>[Created=2019/04/13 15h06:856][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. List of attributes that apply to this delegate. Multiple attributes are separated by commas. You must enclose the Attribute List in angle brackets ( <  and > )."),
Browsable(True)>
        Public Property Attribute() As Attributelist
            Get
                Return _Attribute
            End Get
            Set(ByVal Value As Attributelist)
                _Attribute = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. List of attributes that apply to this delegate. Multiple attributes are separated by commas. You must enclose the Attribute List in angle brackets ("<" and ">").
#Region "|2019/04/13 15h08:101| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) Optional. Specifies what code can access the delegate. Can be one of the following:
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' Optional. Specifies what code can access the delegate. Can be one of the following:
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 15h08:101 </Published>
        ''' <Updated>[Created=2019/04/13 15h08:101][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Specifies what code can access the delegate. Can be one of the following:"),
Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)
                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Specifies what code can access the delegate. Can be one of the following:
#Region "|2019/04/13 15h09:541| <01.00.02> <Property> <Constructor> [Call=Shadows|Boolean]"'(Set|Get) Optional. Indicates that this delegate redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can shadow any kind of declared element with any other kind. A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible. For example, if a Private element shadows a base class element, code that does not have permission to access the Private element accesses the base class element instead.
        Private _Shadows As Boolean
        ''' <Summary>
        ''' Optional. Indicates that this delegate redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can shadow any kind of declared element with any other kind. A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible. For example, if a Private element shadows a base class element, code that does not have permission to access the Private element accesses the base class element instead.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 15h09:541 </Published>
        ''' <Updated>[Created=2019/04/13 15h09:541][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Indicates that this delegate redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can shadow any kind of declared element with any other kind. A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible. For example, if a Private element shadows a base class element, code that does not have permission to access the Private element accesses the base class element instead."),
DefaultValue(False),
Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)
                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates that this delegate redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can shadow any kind of declared element with any other kind. A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible. For example, if a Private element shadows a base class element, code that does not have permission to access the Private element accesses the base class element instead.
#Region "|2019/04/13 15h10:729| <01.00.03> <Property> <Constructor> [Call=Sub|Boolean]"'(Set|Get) Optional, but either Sub or Function must appear. Declares this procedure as a delegate Sub procedure that does not return a value.
        Private _Sub As Boolean
        ''' <Summary>
        ''' Optional, but either Sub or Function must appear. Declares this procedure as a delegate Sub procedure that does not return a value.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 15h10:729 </Published>
        ''' <Updated>[Created=2019/04/13 15h10:729][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional, but either Sub or Function must appear. Declares this procedure as a delegate Sub procedure that does not return a value."),
DefaultValue(False),
Browsable(True)>
        Public Property [Sub]() As Boolean
            Get
                Return _Sub
            End Get
            Set(ByVal Value As Boolean)
                _Sub = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional, but either Sub or Function must appear. Declares this procedure as a delegate Sub procedure that does not return a value.
#Region "|2019/04/13 15h11:415| <01.00.04> <Property> <Constructor> [Call=[Function]|Boolean]"'(Set|Get) Optional, but either Sub or Function must appear. Declares this procedure as a delegate Function procedure that returns a value.
        Private _Function As Boolean
        ''' <Summary>
        ''' Optional, but either Sub or Function must appear. Declares this procedure as a delegate Function procedure that returns a value.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 15h11:415 </Published>
        ''' <Updated>[Created=2019/04/13 15h11:415][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional, but either Sub or Function must appear. Declares this procedure as a delegate Function procedure that returns a value."),
DefaultValue(False),
Browsable(True)>
        Public Property [Function]() As Boolean
            Get
                Return _Function
            End Get
            Set(ByVal Value As Boolean)
                _Function = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional, but either Sub or Function must appear. Declares this procedure as a delegate Function procedure that returns a value.
#Region "|2019/04/13 15h12:411| <01.00.05> <Property> <Constructor> [Call=DelegateName|String]"'(Set|Get) Required. Name of the delegate type; follows standard variable naming conventions.
        Private _DelegateName As String
        ''' <Summary>
        ''' Required. Name of the delegate type; follows standard variable naming conventions.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/13 15h12:411 </Published>
        ''' <Updated>[Created=2019/04/13 15h12:411][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required. Name of the delegate type; follows standard variable naming conventions."),
Browsable(True)>
        Public Property DelegateName() As String
            Get
                Return _DelegateName
            End Get
            Set(ByVal Value As String)
                _DelegateName = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Name of the delegate type; follows standard variable naming conventions.
#Region "|2019/05/07 13h13:664| <01.00.06> <Property> <Constructor> [Call=ParameterList|List(Of Innerstatement.ParameterList_Statement)]"'(Set|Get) Optional. List of parameters that are passed to the procedure when it is called. You must enclose the Parameter List in parentheses.
        Private _ParameterList As List(Of InnerStatement.ParameterList_Statement)
        ''' <Summary>
        ''' Optional. List of parameters that are passed to the procedure when it is called. You must enclose the Parameter List in parentheses.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 13h13:664 </Published>
        ''' <Updated>[Created=2019/05/07 13h13:657][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. List of parameters that are passed to the procedure when it is called. You must enclose the Parameter List in parentheses."), Browsable(True)>
        Public Property ParameterList() As List(Of InnerStatement.ParameterList_Statement)
            Get
                Return _ParameterList
            End Get
            Set(ByVal Value As List(Of InnerStatement.ParameterList_Statement))
                _ParameterList = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. List of parameters that are passed to the procedure when it is called. You must enclose the Parameter List in parentheses.
#Region "|2019/05/07 13h43:112| <01.00.07> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) the SummaryStatement as Summary
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' (Set|Get) the SummaryStatement as Summary
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 13h43:112 </Published>
        ''' <Updated>[Created=2019/05/07 13h43:112][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the SummaryStatement as Summary"), Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get
                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)
                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the SummaryStatement as Summary
#Region "|2019/05/07 14h31:643| <01.00.08> <Property> <Constructor> [Call=ReturnType|String]"'(Set|Get) Required if you specify a Function procedure. Data type of the return value.
        Private _ReturnType As String
        ''' <Summary>
        ''' Required if you specify a Function procedure. Data type of the return value.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 14h31:643 </Published>
        ''' <Updated>[Created=2019/05/07 14h31:643][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required if you specify a Function procedure. Data type of the return value."), Browsable(True)>
        Public Property ReturnType() As String
            Get
                Return _ReturnType
            End Get
            Set(ByVal Value As String)
                _ReturnType = Value
            End Set
        End Property
#End Region ' (Set|Get) Required if you specify a Function procedure. Data type of the return value.

#End Region
#Region "|01.03| <Property> [Parent]{3}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h27:647| <01.03.01> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.02> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#End Region
#Region "<2> [Enumeration]{1}"
#Region "|2019/05/07 13h17:518| <02.00.01> <Enumeration> <DeclareFormat> [Call=DeclareFormat|Enumeration]"'The enumeration of DeclareFormat.
        ''' <Summary>
        ''' (Set|Get) The enumeration of DeclareFormat.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 13h17:518 </Published>
        ''' <Updated>[Created=2019/05/07 13h17:518][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        Public Enum DeclareFormat
            ''' <summary>Optional, but either Sub or Function must appear. Declares this procedure as a delegate Sub procedure that does not return a value.  </summary>
            [Sub] = 0
            ''' <summary>Optional, but either Sub or Function must appear. Declares this procedure as a delegate Sub procedure that does not return a value.  </summary>
            [Function] = 1
        End Enum
#End Region ' The enumeration of DeclareFormat.

#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()
            With Me
                .Attribute = New Attributelist
                .AccessModifier = AccessModifiers.Public
                .Shadows = False
                .Sub = False
                .Function = True
                .DelegateName = ""
                .DefaultValue = ""
                .DelegateName = ""
                .ParameterList = New List(Of InnerStatement.ParameterList_Statement)
                .Params = New List(Of Summary.Param)
                .Published = ""
                .Statement = ""

                .ID = 0
                .RegionCategory = 0
                .StatementFormat = Format.[Delegate]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)

                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = ""
                .F_CloseStatement = ":"
                .VB_OpenStatement = ""
                .VB_CloseStatement = ""
                .Python_OpenStatement = ""
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""


            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable]|Boolean(True))]"
        ''' <summary>
        ''' Print the statement
        ''' </summary>
        ''' <param name="Enable">This parameter will overide the Me.Enable Property! ByDefault is set on True.</param>
        Public Function PrintStatement(Optional ByVal Enable As Boolean = True) As TestItem
            Dim Result As New TestItem("Printing Module", "Printing a Module Statement")

            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable

            If Me.Enable = True Then
            Else
            End If
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next
            Dim O_VB As New Input_Parameters("VbNET", "String", Me.VB)
            Dim O_C As New Input_Parameters("C#", "String", Me.C)
            Dim O_F As New Input_Parameters("F#", "String", Me.F)
            Dim O_Python As New Input_Parameters("Python", "String", Me.Python)
            Dim O_JavaScript As New Input_Parameters("JavaScript", "String", Me.JavaScript)
            Result.AddOutputParam("VbNET", "String", Me.VB)
            Result.AddOutputParam("C#", "String", Me.C)
            Result.AddOutputParam("F#", "String", Me.F)
            Result.AddOutputParam("Python", "String", Me.Python)
            Result.AddOutputParam("JavaScript", "String", Me.JavaScript)
            Return Result
        End Function
#End Region
#Region "<04.01.01> <Sub> <Print> [PrinStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]|Boolean(True))]"

        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub

#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Delegate]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Delegate\" & Statement.Name & ".Delegate"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Delegate") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Delegate")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Delegate],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Delegate"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Delegate"
                        FilePath = My.Application.Info.DirectoryPath & "\Delegate\" & Statement.Name & ".Delegate"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Delegate]
            Dim Result As New [Delegate]
            Dim Serializer As New XmlSerializer(GetType([Delegate]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type [Delegate].")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Delegate]
                    Temp = VbNET.[Delegate].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier

                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri
                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .DefaultValue = Temp.DefaultValue
                        .DelegateName = Temp.DelegateName
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .Example = Temp.Example

                        .F = Temp.F
                        .Function = Temp.Function

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex

                        .JavaScript = Temp.JavaScript

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .Params = Temp.Params
                        .ParameterList = Temp.ParameterList
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Sub = Temp.Sub
                        .Summary = Temp.Summary

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .VB = Temp.VB
                        .Variables = Temp.Variables

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot
                    End With
                    Dim TF As DeclareFormat = DeclareFormat.Function
                    If Temp.Function = True Then
                        TF = DeclareFormat.Function
                    Else
                        TF = DeclareFormat.Sub
                    End If
                    Result.Output = New VbNET.Delegate(Temp.Name, TF, Temp.AccessModifier, Temp.ParameterList, Temp.Shadows, Temp.ReturnType, Temp.Statement, Temp.Enable, Temp.Description, Temp.AttributeList, Temp.AuthorName, Temp.AuthorEmail, Temp.AuthorUri, Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Usage, Temp.Remarks, Temp.Example, Temp.Note, Temp.Published, Temp.Rights, Temp.Title, Temp.See, Temp.SeeAlso, Temp.Status, "", Now)
                    'Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Browsable, Temp.Enable, Temp.CustomProperty, Temp.DllImport, Temp.Remarks, Temp.Usage, Temp.Example, Temp.Note,, Temp.Rights, Temp.See, Temp.SeeAlso)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Delegate.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="Name">Required. Name of the delegate type; follows standard variable naming conventions.</param>
        ''' <param name="Format">Optional, but either Sub or Function must appear. Declares this procedure as a delegate Sub procedure that does not return a value.</param>
        ''' <param name="AccessModifier">Optional. Specifies what code can access the delegate. Can be one of the following: Public / Protected / Friend / Private / Protected Friend / Private Protected</param>
        ''' <param name="Parameters">Optional. List of parameters that are passed to the procedure when it is called. You must enclose the Parameter List in parentheses.</param>
        ''' <param name="MakeShadows">Optional. Indicates that this delegate redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can shadow any kind of declared element with any other kind.</param>
        ''' <param name="ReturnType">Required if you specify a Function procedure. Data type of the return value.</param>
        ''' <param name="Statement">The innerstatement</param>
        ''' <param name="Enable">Enable or Disable the statement</param>
        ''' <param name="Description">The Description Summary of the Statement</param>
        ''' <param name="Attributes">Optional. List of attributes that apply to this delegate. Multiple attributes are separated by commas. You must enclose the Attribute List in angle brackets.</param>
        ''' <param name="AuthorName">The Author Name</param>
        ''' <param name="AuthorEmail">The Author Email</param>
        ''' <param name="AuthorUrl">The Author Url</param>
        ''' <param name="ContributorName">The Contributor Name</param>
        ''' <param name="ContributorEmail">The Contributor Email</param>
        ''' <param name="ContributorUrl">The Contributor Url</param>
        ''' <param name="Usage">How to use the control</param>
        ''' <param name="Remark">Information about the control</param>
        ''' <param name="Example">Example of how to use the control</param>
        ''' <param name="Note">Special note information about the control</param>
        ''' <param name="See">Add Referencing of Url or Object</param>
        ''' <param name="SeeAlso">Add Referencing of Url or Object</param>
        ''' <param name="Published">When was the control published</param>
        ''' <param name="Rights">Rights and limitation on usage of the control</param>
        ''' <param name="Title">The Tile of the Control displayed in summary</param>
        ''' <param name="Status">The status of this Statement.</param>
        ''' <param name="SituationLog">Log information regarding this Statement.</param>
        ''' <param name="LogTime">The log inscription time.</param>
        Public Sub New(ByVal Name As String,
                       ByVal Format As DeclareFormat,
              Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Public,
              Optional ByVal Parameters As List(Of InnerStatement.ParameterList_Statement) = Nothing,
              Optional ByVal MakeShadows As Boolean = False,
              Optional ByVal ReturnType As String = "",
              Optional ByVal Statement As String = Nothing,
              Optional ByVal Enable As Boolean = True,
              Optional ByVal Description As String = "",
              Optional ByVal Attributes As Attributelist = Nothing,
              Optional ByVal AuthorName As String = "",
              Optional ByVal AuthorEmail As String = "",
              Optional ByVal AuthorUrl As String = "",
              Optional ByVal ContributorName As String = "",
              Optional ByVal ContributorEmail As String = "",
              Optional ByVal ContributorUrl As String = "",
              Optional ByVal Usage As String = "",
              Optional ByVal Remark As String = "",
              Optional ByVal Example As String = "",
              Optional ByVal Note As String = "",
              Optional ByVal Published As String = "",
              Optional ByVal Rights As String = "",
              Optional ByVal Title As String = "",
              Optional ByVal See As String = "",
              Optional ByVal SeeAlso As String = "",
              Optional ByVal Status As Status = Status.Running,
              Optional ByVal SituationLog As String = "",
              Optional ByVal LogTime As Date = Nothing)
            Clear()

            With Me
                .Name = Name
                .Shadows = MakeShadows
                .Statement = Statement
                .Updated(Status.Warning, "Need to construct the printing methods and also make the necessary research to find out how to convert this method to other languages.",, Now) = ""
                If Format = DeclareFormat.Function Then
                    .Function = True
                    .Sub = False
                Else
                    .Function = False
                    .Sub = True
                End If
                If Not IsNothing(Attributes) Then
                    With Attributes
                        Me.Browsable = .Browsable
                        Me.Category = .Category
                        Me.Custom = .Custom
                        Me.DefaultValue = .DefaultValue
                        Me.Description = .Description
                        Me.Deserializable = .Deserializable
                        Me.DllImport = .DllImport
                        Me.Editor = .Editor
                        Me.NonSerialized = .NonSerialized
                        Me.RelatedImageList = .RelatedImageList
                        Me.Serializable = .Serializable
                        Me.XmlIgnore = .XmlIgnore
                        Me.XmlInclude = .XmlInclude
                        Me.XmlRoot = .XmlRoot
                    End With
                End If
                If Me.Description = "" Then
                    .Description = Description
                End If
                If Not IsNothing(Parameters) Then
                    .ParameterList = Parameters
                End If
                .AuthorName = AuthorName
                .AuthorEmail = AuthorEmail
                .AuthorUri = AuthorUri
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUri
                .Usage = Usage
                .Remarks = Remark
                .Example = Example
                .Published = Published
                .Status = Status
                .Rights = Rights
                .Note = Note
                .Title = Title
                .See = See
                .SeeAlso = SeeAlso
                Dim Params As New List(Of Summary.Param)
                If Not IsNothing(Me.ParameterList) Then
                    For i = 0 To Me.ParameterList.Count - 1
                        Dim P As New Summary.Param(Me.ParameterList(i).ParameterName, Me.ParameterList(i).Definition)
                        Params.Add(P)
                    Next
                End If
                If IsNothing(LogTime) Then
                    LogTime = New Date
                    LogTime = Now
                End If
                .Updated(Status, SituationLog,, LogTime) = ""
                .SummaryStatement = New Summary(Me.Description, Params, Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage,
                Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)

            End With

        End Sub
#End Region
#End Region
    End Class
#End Region
#Region "|08.00.12| <Class> <Statement> [Declare]"
    ''' <summary>
    ''' https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/declare-statement
    ''' Declares a reference to a procedure implemented in an external file.
    ''' </summary>
    Public Class [Declare]
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]{11}"
#Region "|2019/04/23 23h09:662| <01.00.00> <Property> <Constructor> [Call=Attribute|Attributelist]"'(Set|Get) the Attribute as Attributelist.
        Private _Attribute As Attributelist
        ''' <Summary>
        ''' (Set|Get) the Attribute as Attributelist.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h09:661 </Published>
        ''' <Updated>[Created=2019/04/23 23h09:654][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Attribute as Attributelist."), Browsable(True)>
        Public Property Attribute() As Attributelist
            Get
                Return _Attribute
            End Get
            Set(ByVal Value As Attributelist)
                _Attribute = Value
            End Set
        End Property
#End Region ' (Set|Get) the Attribute as Attributelist.
#Region "|2019/04/23 23h10:895| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) the Accessmodifier as AccessModifiers.
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' (Set|Get) the Accessmodifier as AccessModifiers.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h10:895 </Published>
        ''' <Updated>[Created=2019/04/23 23h10:895][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Accessmodifier as AccessModifiers."), Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)
                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) the Accessmodifier as AccessModifiers.
#Region "|2019/04/23 23h11:148| <01.00.02> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) the Shadows as Boolean.
        Private _Shadows As Boolean
        ''' <Summary>
        ''' (Set|Get) the Shadows as Boolean.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h11:148 </Published>
        ''' <Updated>[Created=2019/04/23 23h11:148][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Shadows as Boolean."), Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)
                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) the Shadows as Boolean.
#Region "|2019/04/23 23h11:002| <01.00.03> <Property> <Constructor> [Call=CharsetModifier|CharsetModifiers]"'(Set|Get) the CharsetModifier as CharsetModifiers
        Private _CharsetModifier As CharsetModifiers
        ''' <Summary>
        ''' (Set|Get) the CharsetModifier as CharsetModifiers
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h11:002 </Published>
        ''' <Updated>[Created=2019/04/23 23h11:002][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the CharsetModifier as CharsetModifiers"), Browsable(True)>
        Public Property CharsetModifier() As CharsetModifiers
            Get
                Return _CharsetModifier
            End Get
            Set(ByVal Value As CharsetModifiers)
                _CharsetModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) the CharsetModifier as CharsetModifiers
#Region "|2019/04/23 23h16:761| <01.00.04> <Property> <Constructor> [Call=[Sub]|Boolean]"'(Set|Get) Optional, but either Sub or Function must appear. Indicates that the external procedure does not return a value.
        Private _Sub As Boolean
        ''' <Summary>
        ''' Optional, but either Sub or Function must appear. Indicates that the external procedure does not return a value.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h16:761 </Published>
        ''' <Updated>[Created=2019/04/23 23h16:761][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        <CategoryAttribute("Constructor"), Description("Optional, but either Sub or Function must appear. Indicates that the external procedure does not return a value."), Browsable(True)>
        Public Property [Sub]() As Boolean
            Get
                Return _Sub
            End Get
            Set(ByVal Value As Boolean)
                _Sub = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional, but either Sub or Function must appear. Indicates that the external procedure does not return a value.
#Region "|2019/04/23 23h17:970| <01.00.05> <Property> <Constructor> [Call=[Function]|Boolean]"'(Set|Get) Optional, but either Sub or Function must appear. Indicates that the external procedure does not return a value.
        Private _Function As Boolean
        ''' <Summary>
        ''' Optional, but either Sub or Function must appear. Indicates that the external procedure does not return a value.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h17:970 </Published>
        ''' <Updated>[Created=2019/04/23 23h17:970][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        <CategoryAttribute("Constructor"), Description("Optional, but either Sub or Function must appear. Indicates that the external procedure does not return a value."), Browsable(True)>
        Public Property [Function]() As Boolean
            Get
                Return _Function
            End Get
            Set(ByVal Value As Boolean)
                _Function = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional, but either Sub or Function must appear. Indicates that the external procedure does not return a value.
#Region "|2019/04/23 23h18:693| <01.00.06> <Property> <Constructor> [Call=DeclareName|String]"'(Set|Get) Required. Name of this external reference. For more information, see Declared Element Names.
        Private _DeclareName As String
        ''' <Summary>
        ''' Required. Name of this external reference. For more information, see Declared Element Names.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h18:693 </Published>
        ''' <Updated>[Created=2019/04/23 23h18:693][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required. Name of this external reference. For more information, see Declared Element Names."), Browsable(True)>
        Public Property DeclareName() As String
            Get
                Return _DeclareName
            End Get
            Set(ByVal Value As String)
                _DeclareName = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Name of this external reference. For more information, see Declared Element Names.
#Region "|2019/04/23 23h19:809| <01.00.07> <Property> <Constructor> [Call=Lib|String]"'(Set|Get) Required. Introduces a Lib clause, which identifies the external file (DLL or code resource) that contains an external procedure.
        Private _Lib As String
        ''' <Summary>
        ''' Required. Introduces a Lib clause, which identifies the external file (DLL or code resource) that contains an external procedure.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h19:809 </Published>
        ''' <Updated>[Created=2019/04/23 23h19:809][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required. Introduces a Lib clause, which identifies the external file (DLL or code resource) that contains an external procedure."), Browsable(True)>
        Public Property [Lib]() As String
            Get
                Return _Lib
            End Get
            Set(ByVal Value As String)
                If Value <> "" Then
                    Value = "Lib " & Space & Value & Space & " "
                End If
                _Lib = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Introduces a Lib clause, which identifies the external file (DLL or code resource) that contains an external procedure.
#Region "|2019/04/23 23h23:850| <01.00.08> <Property> <Constructor> [Call=Alias|String]"'(Set|Get) Optional. Indicates that the procedure being declared cannot be identified within its file by the name specified in name. You specify its identification in aliasname.
        Private _Alias As String
        ''' <Summary>
        ''' Optional. Indicates that the procedure being declared cannot be identified within its file by the name specified in name. You specify its identification in aliasname.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h23:850 </Published>
        ''' <Updated>[Created=2019/04/23 23h23:850][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. Indicates that the procedure being declared cannot be identified within its file by the name specified in name. You specify its identification in aliasname."), Browsable(True)>
        Public Property [Alias]() As String
            Get
                Return _Alias
            End Get
            Set(ByVal Value As String)
                If Value <> "" Then
                    Value = "Alias " & Space & Value & Space & " "
                End If
                _Alias = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates that the procedure being declared cannot be identified within its file by the name specified in name. You specify its identification in aliasname.
#Region "|2019/04/23 23h25:317| <01.00.09> <Property> <Constructor> [Call=ParameterList|List(Of InnerStatement.ParameterList_Statement)]"'(Set|Get) Required if the procedure takes parameters. See Parameter List.
        Private _ParameterList As List(Of InnerStatement.ParameterList_Statement)
        ''' <Summary>
        ''' Required if the procedure takes parameters. See Parameter List.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h25:317 </Published>
        ''' <Updated>[Created=2019/04/23 23h25:317][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required if the procedure takes parameters. See Parameter List."), Browsable(True)>
        Public Property ParameterList() As List(Of InnerStatement.ParameterList_Statement)
            Get
                Return _ParameterList
            End Get
            Set(ByVal Value As List(Of InnerStatement.ParameterList_Statement))
                _ParameterList = Value
            End Set
        End Property
#End Region ' (Set|Get) Required if the procedure takes parameters. See Parameter List.
#Region "|2019/04/23 23h26:350| <01.00.10> <Property> <Constructor> [Call=ReturnType|String]"'(Set|Get) Required if Function is specified and Option Strict is On. Data type of the value returned by the procedure.
        Private _ReturnType As String
        ''' <Summary>
        ''' Required if Function is specified and Option Strict is On. Data type of the value returned by the procedure.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h26:350 </Published>
        ''' <Updated>[Created=2019/04/23 23h26:350][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required if Function is specified and Option Strict is On. Data type of the value returned by the procedure."), Browsable(True)>
        Public Property ReturnType() As String
            Get
                Return _ReturnType
            End Get
            Set(ByVal Value As String)
                _ReturnType = Value
            End Set
        End Property
#End Region ' (Set|Get) Required if Function is specified and Option Strict is On. Data type of the value returned by the procedure.
#Region "|2019/05/07 13h58:146| <01.00.11> <Property> <Constructor> [Call=Overloads |Boolean]"'(Set|Get) Overloading is the practice of supplying more than one definition for a given property or procedure name in the same scope. Redeclaring a property or procedure with a different signature is sometimes called hiding by signature.
        Private _Overloads As Boolean
        ''' <Summary>
        ''' Overloading is the practice of supplying more than one definition for a given property or procedure name in the same scope. Redeclaring a property or procedure with a different signature is sometimes called hiding by signature.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 13h58:146 </Published>
        ''' <Updated>[Created=2019/05/07 13h58:146][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Overloading is the practice of supplying more than one definition for a given property or procedure name in the same scope. Redeclaring a property or procedure with a different signature is sometimes called hiding by signature."), Browsable(True)>
        Public Property [Overloads]() As Boolean
            Get
                Return _Overloads
            End Get
            Set(ByVal Value As Boolean)
                _Overloads = Value
            End Set
        End Property
#End Region ' (Set|Get) Overloading is the practice of supplying more than one definition for a given property or procedure name in the same scope. Redeclaring a property or procedure with a different signature is sometimes called hiding by signature.
#Region "|2019/05/07 13h59:222| <01.00.12> <Property> <Constructor> [Call=SummaryStatement|Summary]"'(Set|Get) the SummaryStatement as Summary
        Private _SummaryStatement As Summary
        ''' <Summary>
        ''' (Set|Get) the SummaryStatement as Summary
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 13h59:222 </Published>
        ''' <Updated>[Created=2019/05/07 13h59:222][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the SummaryStatement as Summary"), Browsable(True)>
        Public Property SummaryStatement() As Summary
            Get
                Return _SummaryStatement
            End Get
            Set(ByVal Value As Summary)
                _SummaryStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the SummaryStatement as Summary

#End Region
#Region "|01.03| <Property> [Parent]{3}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h27:647| <01.03.01> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.02> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#End Region
#Region "<2> [Enumeration]"

#Region "|2019/04/23 23h13:927| <02.00.00> <Enumeration> <CharsetModifiers> [Call=CharsetModifiers|Enumeration]"'The enumeration of CharsetModifiers.
        ''' <Summary>
        ''' (Set|Get) The enumeration of CharsetModifiers.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 23h13:927 </Published>
        ''' <Updated>[Created=2019/04/23 23h13:927][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        <DefaultValue(CharsetModifiers.Ansi)>
        Public Enum CharsetModifiers

            ''' <summary>Specifies that Visual Basic should marshal all strings to American National Standards Institute (ANSI) values regardless of the name of the external procedure being declared.
            '''When you call a procedure defined outside your project, the Visual Basic compiler does Not have access to the information it needs to call the procedure correctly. This information includes where the procedure Is located, how it Is identified, its calling sequence And return type, And the string character set it uses. The Declare Statement creates a reference to an external procedure And supplies this necessary information.
            '''The charsetmodifier part In the Declare statement supplies the character Set information For marshaling strings during a Call To the external procedure. It also affects how Visual Basic searches the external file For the external procedure name. The Ansi modifier specifies that Visual Basic should marshal all strings To ANSI values And should look up the procedure without modifying its name during the search.
            '''If no character Set modifier Is specified, Ansi Is the Default.  </summary>
            Ansi = 0
            ''' <summary>Specifies that Visual Basic should marshal all strings to Unicode values regardless of the name of the external procedure being declared.
            '''When you call a procedure defined outside your project, the Visual Basic compiler does Not have access to the information it must have in order to call the procedure correctly. This information includes where the procedure Is located, how it Is identified, its calling sequence And return type, And the string character set it uses. The Declare Statement creates a reference to an external procedure And supplies this necessary information.
            '''The charsetmodifier part In the Declare statement supplies the character Set information To marshal strings during a Call To the external procedure. It also affects how Visual Basic searches the external file For the external procedure name. The Unicode modifier specifies that Visual Basic should marshal all strings To Unicode values And should look up the procedure without modifying its name during the search.
            '''If no character Set modifier Is specified, Ansi Is the Default. </summary>
            Unicode = 1
            ''' <summary>Specifies that Visual Basic should marshal strings according to .NET Framework rules based on the external name of the external procedure being declared.
            '''When you call a procedure defined outside your project, the Visual Basic compiler does Not have access to the information it must have to call the procedure correctly. This information includes where the procedure Is located, how it Is identified, its calling sequence And return type, And the string character set it uses. The Declare Statement creates a reference to an external procedure And supplies this necessary information.
            '''The charsetmodifier part In the Declare statement supplies the character Set information For marshaling strings during a Call To the external procedure. It also affects how Visual Basic searches the external file For the external procedure name. The Auto modifier specifies that Visual Basic should marshal strings according To .NET Framework rules, And that it should determine the base character Set Of the run-time platform And possibly modify the external procedure name If the initial search fails. For more information, see "Character Sets" In Declare Statement.
            '''If no character Set modifier Is specified, Ansi Is the Default. </summary>
            Auto = 2
            ''' <summary>
            ''' Does not include a charset modifier.
            ''' </summary>
            [Nothing] = 3
        End Enum
#End Region ' The enumeration of CharsetModifiers.
#Region "|2019/05/07 13h17:518| <02.00.01> <Enumeration> <DeclareFormat> [Call=DeclareFormat|Enumeration]"'The enumeration of DeclareFormat.
        ''' <Summary>
        ''' (Set|Get) The enumeration of DeclareFormat.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 13h17:518 </Published>
        ''' <Updated>[Created=2019/05/07 13h17:518][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        Public Enum DeclareFormat
            ''' <summary>Optional, but either Sub or Function must appear. Declares this procedure as a delegate Sub procedure that does not return a value.  </summary>
            [Sub] = 0
            ''' <summary>Optional, but either Sub or Function must appear. Declares this procedure as a delegate Sub procedure that does not return a value.  </summary>
            [Function] = 1
        End Enum
#End Region ' The enumeration of DeclareFormat.

#End Region

#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()

            With Me
                .ID = 0
                .RegionCategory = 0
                .StatementFormat = Format.[Declare]
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)
                .Remarks = ""
                .Rights = ""
                .See = ""
                .SeeAlso = ""
                .Statement = ""
                .Statements = New List(Of Statement)
                .Status = Status.IsNothing
                .Summary = ""
                .Tag = Nothing
                .Text = ""
                .Title = ""
                .Tooltip = ""
                .Updated(Status.Online, "The test is successful.",, Now) = ""
                .Usage = ""
                .Variables = New List(Of InnerStatement)
                .VB = ""
                '.WindowStyle = ""
                '  .XmlFile = New Fichier


                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = ""
                .F_CloseStatement = ":"
                .VB_OpenStatement = ""
                .VB_CloseStatement = ""
                .Python_OpenStatement = ""
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""

                .Attribute = New Attributelist
                .AccessModifier = AccessModifiers.Public
                .Shadows = False
                .CharsetModifier = CharsetModifiers.Ansi
                .Sub = False
                .Function = True
                .DeclareName = ""
                .Lib = ""
                .Alias = ""
                .ParameterList = New List(Of InnerStatement.ParameterList_Statement)
                .ReturnType = ""
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable]|Boolean(True))]"
        ''' <summary>
        ''' Print the statement
        ''' </summary>
        ''' <param name="Enable">This parameter will overide the Me.Enable Property! ByDefault is set on True.</param>
        Public Function PrintStatement(Optional ByVal Enable As Boolean = True) As TestItem
            Dim Result As New TestItem("Printing Module", "Printing a Module Statement")

            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable

            If Me.Enable = True Then
            Else
            End If
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next
            Dim O_VB As New Input_Parameters("VbNET", "String", Me.VB)
            Dim O_C As New Input_Parameters("C#", "String", Me.C)
            Dim O_F As New Input_Parameters("F#", "String", Me.F)
            Dim O_Python As New Input_Parameters("Python", "String", Me.Python)
            Dim O_JavaScript As New Input_Parameters("JavaScript", "String", Me.JavaScript)
            Result.AddOutputParam("VbNET", "String", Me.VB)
            Result.AddOutputParam("C#", "String", Me.C)
            Result.AddOutputParam("F#", "String", Me.F)
            Result.AddOutputParam("Python", "String", Me.Python)
            Result.AddOutputParam("JavaScript", "String", Me.JavaScript)
            Return Result
        End Function
#End Region
#Region "<04.01.01> <Sub> <Print> [PrinStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]|Boolean(True))]"

        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub

#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Declare]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Declare\" & Statement.Name & ".Declare"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Declare") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Declare")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Declare],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Declare"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Declare"
                        FilePath = My.Application.Info.DirectoryPath & "\Declare\" & Statement.Name & ".Declare"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Declare]
            Dim Result As New [Declare]
            Dim Serializer As New XmlSerializer(GetType([Declare]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type [Declare].")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Declare]
                    Temp = VbNET.[Declare].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier
                        .Alias = Temp.Alias
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri
                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .DefaultValue = Temp.DefaultValue
                        .DeclareName = Temp.DeclareName
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .Example = Temp.Example

                        .F = Temp.F
                        .Function = Temp.Function

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex

                        .JavaScript = Temp.JavaScript

                        .Lib = Temp.Lib

                        .Name = Temp.Name
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note

                        .Params = Temp.Params
                        .ParameterList = Temp.ParameterList
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Rights = Temp.Rights

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Sub = Temp.Sub
                        .Summary = Temp.Summary

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .VB = Temp.VB
                        .Variables = Temp.Variables

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot
                    End With
                    Dim TF As DeclareFormat = DeclareFormat.Function
                    If Temp.Function = True Then
                        TF = DeclareFormat.Function
                    Else
                        TF = DeclareFormat.Sub
                    End If
                    Result.Output = New VbNET.Declare(Temp.Name, TF, Temp.AccessModifier, Temp.ParameterList, Temp.CharsetModifier, Temp.Lib, Temp.Alias, Temp.Shadows, Temp.Overloads, Temp.ReturnType, Temp.Statement, Temp.Enable, Temp.Description, Temp.AttributeList, Temp.AuthorName, Temp.AuthorEmail, Temp.AuthorUri, Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Usage, Temp.Remarks, Temp.Example, Temp.Note, Temp.Published, Temp.Rights, Temp.Title, Temp.See, Temp.SeeAlso, Temp.Status, "", Now)
                    'Temp.ContributorName, Temp.ContributorEmail, Temp.ContributorUri, Temp.Browsable, Temp.Enable, Temp.CustomProperty, Temp.DllImport, Temp.Remarks, Temp.Usage, Temp.Example, Temp.Note,, Temp.Rights, Temp.See, Temp.SeeAlso)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.Declare.Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="Name">Required. Name of this external reference. For more information, see Declared Element Names.</param>
        ''' <param name="Format">Optional, but either Sub or Function must appear. Indicates that the external procedure does not return a value.</param>
        ''' <param name="AccessModifier">Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected</param>
        ''' <param name="Parameters">Required if the procedure takes parameters. See Parameter List.</param>
        ''' <param name="Charset">Optional. Specifies character set and file search information. Can be one of the following: -Ainsi(Default)-Unicode-Auto</param>
        ''' <param name="MakeShadows">Optional. See Shadows.</param>
        ''' <param name="MakeOverloads">Overloading is the practice of supplying more than one definition for a given property or procedure name in the same scope. Redeclaring a property or procedure with a different signature is sometimes called hiding by signature.</param>
        ''' <param name="ReturnType">Required if Function is specified and Option Strict is On. Data type of the value returned by the procedure.</param>
        ''' <param name="Statement">The inner statement</param>
        ''' <param name="Enable">Enable the statement or disable it.</param>
        ''' <param name="Description">The summary statement.</param>
        ''' <param name="Attributes">The AttributesList</param>
        ''' <param name="AuthorName">[Summary]The Author Name</param>
        ''' <param name="AuthorEmail">[Summary]The Author Email</param>
        ''' <param name="AuthorUrl">[Summary]The Author Url</param>
        ''' <param name="ContributorName">[Summary]The ContributorName</param>
        ''' <param name="ContributorEmail">[Summary]The ContributorEmail</param>
        ''' <param name="ContributorUrl">[Summary]The ContributorUrl</param>
        ''' <param name="Usage">[Summary]How to use this statement.</param>
        ''' <param name="Remark">[Summary]Special remarks regardinig this statment.</param>
        ''' <param name="Example">[Summary]Example of how to use this statment.</param>
        ''' <param name="Note">[Summary]Note regarding this statement.</param>
        ''' <param name="Published">[Summary]When this statment has been published.</param>
        ''' <param name="Rights">[Summary]The rights and authorisation for the usage of this command.</param>
        ''' <param name="Title">[Summary]The title of the statement</param>
        ''' <param name="See">[Summary]Reference to an external URl reference or internal object.</param>
        ''' <param name="SeeAlso">[Summary]Reference to an external URl reference or internal object.</param>
        ''' <param name="Status">[Summary]Status of this Statment.</param>
        ''' <param name="SituationLog">[Summary]Log report of this Statment.</param>
        ''' <param name="LogTime">[Summary]Log report time of this statment.</param>
        ''' <param name="Alias">Required if you use the Alias keyword. String that identifies the procedure in one of two ways:The entry point name of the procedure within its file, within quotes ("")-or-A number sign (#) followed by an integer specifying the ordinal number of the procedure's entry point within its file</param>
        ''' <param name="Lib">Required. Name of the file that contains the declared procedure.</param>
        Public Sub New(ByVal Name As String,
                       ByVal Format As DeclareFormat,
              Optional ByVal AccessModifier As AccessModifiers = AccessModifiers.Public,
              Optional ByVal Parameters As List(Of InnerStatement.ParameterList_Statement) = Nothing,
              Optional ByVal Charset As CharsetModifiers = CharsetModifiers.Nothing,
              Optional ByVal [Lib] As String = "",
              Optional ByVal [Alias] As String = "",
              Optional ByVal MakeShadows As Boolean = False,
              Optional ByVal MakeOverloads As Boolean = False,
              Optional ByVal ReturnType As String = "",
              Optional ByVal Statement As String = Nothing,
              Optional ByVal Enable As Boolean = True,
              Optional ByVal Description As String = "",
              Optional ByVal Attributes As Attributelist = Nothing,
              Optional ByVal AuthorName As String = "",
              Optional ByVal AuthorEmail As String = "",
              Optional ByVal AuthorUrl As String = "",
              Optional ByVal ContributorName As String = "",
              Optional ByVal ContributorEmail As String = "",
              Optional ByVal ContributorUrl As String = "",
              Optional ByVal Usage As String = "",
              Optional ByVal Remark As String = "",
              Optional ByVal Example As String = "",
              Optional ByVal Note As String = "",
              Optional ByVal Published As String = "",
              Optional ByVal Rights As String = "",
              Optional ByVal Title As String = "",
              Optional ByVal See As String = "",
              Optional ByVal SeeAlso As String = "",
              Optional ByVal Status As Status = Status.Running,
              Optional ByVal SituationLog As String = "",
              Optional ByVal LogTime As Date = Nothing)
            Clear()

            With Me
                .Name = Name
                .Shadows = MakeShadows
                .Statement = Statement
                .CharsetModifier = Charset
                .Overloads = MakeOverloads
                .Lib = [Lib]
                .Alias = [Alias]
                If IsNothing(LogTime) Then
                    LogTime = New Date
                    LogTime = Now
                End If
                .Updated(Status, SituationLog & Environment.NewLine & "Need to construct the printing methods and also make the necessary research to find out how to convert this method to other languages.",, LogTime) = ""
                If Not IsNothing(Attributes) Then
                    With Attributes
                        Me.Browsable = .Browsable
                        Me.Category = .Category
                        Me.Custom = .Custom
                        Me.DefaultValue = .DefaultValue
                        Me.Description = .Description
                        Me.Deserializable = .Deserializable
                        Me.DllImport = .DllImport
                        Me.Editor = .Editor
                        Me.NonSerialized = .NonSerialized
                        Me.RelatedImageList = .RelatedImageList
                        Me.Serializable = .Serializable
                        Me.XmlIgnore = .XmlIgnore
                        Me.XmlInclude = .XmlInclude
                        Me.XmlRoot = .XmlRoot
                    End With
                End If
                If Me.Description = "" Then
                    .Description = Description
                End If
                If Not IsNothing(Parameters) Then
                    .ParameterList = Parameters
                End If
                .AuthorName = AuthorName
                .AuthorEmail = AuthorEmail
                .AuthorUri = AuthorUri
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUri
                .Usage = Usage
                .Remarks = Remark
                .Example = Example
                .Published = Published
                .Rights = Rights
                .Note = Note
                .Title = Title
                .See = See
                .SeeAlso = SeeAlso
                .ReturnType = ReturnType
                Dim Params As New List(Of Summary.Param)
                If Not IsNothing(Me.ParameterList) Then
                    For i = 0 To Me.ParameterList.Count - 1
                        Dim P As New Summary.Param(Me.ParameterList(i).ParameterName, Me.ParameterList(i).Definition)
                        Params.Add(P)
                    Next
                End If
                .SummaryStatement = New Summary(Me.Description, Params, Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage,
                Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)

            End With
        End Sub
#End Region
#End Region
    End Class
#End Region
#Region "|08.00.13| <Class> <Statement> [Namespace]"
    Public Class [Namespace]
        Inherits Statement
#Region "<1> [Property]"

#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()

            With Me
                .ID = 0
                .ImageIndex = Format.NamesPace
                .RegionCategory = 0
                .StatementFormat = Format.NamesPace
                .RegionCode = IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." & IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)
                .Updated(Status.Online, "The test is successful.",, Now) = ""

                .C_OpenStatement = " {"
                .C_CloseStatement = " }"

                .F_OpenStatement = "namespace "
                .VB_OpenStatement = "Namespace "
                .VB_CloseStatement = ""
                .Python_OpenStatement = "def "
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable]|Boolean(True))]"
        ''' <summary>
        ''' Print the statement
        ''' </summary>
        ''' <param name="Enable">This parameter will overide the Me.Enable Property! ByDefault is set on True.</param>
        Public Sub PrintStatement(Optional ByVal Enable As Boolean = True)
            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            If Me.Enable = True Then
                With Me
#Region "<Caller>"
                    .Print_VB.Add("Namespace " & Me.ToString)
                    .Print_C.Add("namespace " & Me.ToString & " {")
                    .Print_F.Add("namespace " & Me.ToString & " {")
                    .Print_Python.Add("namespace " & Me.ToString)
                    .Print_JavaScript.Add("var " & Me.ToString & " = {")
#End Region
#Region "<Statement>"
                    If Statement <> "" Then
                        .Print_VB.Add(Me.Statement)
                        .Print_C.Add(Me.Statement)
                        .Print_F.Add(Me.Statement)
                        .Print_Python.Add(Me.Statement)
                        .Print_JavaScript.Add(Me.Statement & ",")

                    End If
#End Region
#Region "<Closing Satement>"
                    .Print_VB.Add("End Namespace ")
                    .Print_C.Add("};")
                    .Print_F.Add("};")
                    .Print_Python.Add(":")
                    .Print_JavaScript.Add("};")
#End Region
#Region "<Printing>"
                    .VB = ""
                    .C = ""
                    .F = ""
                    .Python = ""
                    .JavaScript = ""
                    For Each Str As String In Me.Print_VB
                        .VB += Str & Environment.NewLine
                    Next
                    For Each Str As String In Me.Print_C
                        .C += Str & Environment.NewLine
                    Next
                    For Each Str As String In Me.Print_F
                        .F += Str & Environment.NewLine
                    Next
                    For Each Str As String In Me.Print_Python
                        .Python += Str & Environment.NewLine
                    Next
                    For Each Str As String In Me.Print_JavaScript
                        .JavaScript += Str & Environment.NewLine
                    Next
#End Region

                End With
            Else
                With Me
#Region "<Caller>"
                    .Print_VB.Add("'' Namespace " & Me.ToString)
                    .Print_C.Add("// namespace " & Me.ToString)
                    .Print_F.Add("// namespace " & Me.ToString)
                    .Print_Python.Add("// namespace " & Me.ToString)
                    .Print_JavaScript.Add("")
#End Region
#Region "<Statement>"
                    If Statement <> "" Then
                        .Print_VB.Add("'' " & Me.Statement)
                        .Print_C.Add("// " & Me.Statement)
                        .Print_F.Add("// " & Me.Statement)
                        .Print_Python.Add("// " & Me.Statement)
                    End If
#End Region
#Region "<Closing Satement>"
                    .Print_VB.Add("'' End Namespace ")
                    .Print_C.Add("// end namespace ")
                    .Print_F.Add("// end namespace ")
                    .Print_Python.Add("// end namespace ")
                    .Print_JavaScript.Add("")
#End Region
#Region "<Printing>"
                    .VB = ""
                    .C = ""
                    .F = ""
                    .Python = ""
                    .JavaScript = ""
                    For Each Str As String In Me.Print_VB
                        .VB += Str & Environment.NewLine
                    Next
                    For Each Str As String In Me.Print_C
                        .C += Str & Environment.NewLine
                    Next
                    For Each Str As String In Me.Print_F
                        .F += Str & Environment.NewLine
                    Next
                    For Each Str As String In Me.Print_Python
                        .Python += Str & Environment.NewLine
                    Next
                    For Each Str As String In Me.Print_JavaScript
                        .JavaScript += Str & Environment.NewLine
                    Next
#End Region


                End With
            End If
        End Sub
#End Region
#Region "<04.01.01> <Sub> <Print> [PrinStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]|Boolean(True))]"

        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub

#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As Import) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Importation\" & Statement.Name & ".Import"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Importation") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Importation")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ImportStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Namespace],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Namespace"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Namespace"
                        FilePath = My.Application.Info.DirectoryPath & "\Namespace\" & Statement.Name & ".Namespace"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Namespace]
            Dim Result As New [Namespace]
            Dim Serializer As New XmlSerializer(GetType([Namespace]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type Import.")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Namespace]
                    Temp = VbNET.[Namespace].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .Name = Temp.Name
                    End With
                    Result.Output = New VbNET.[Namespace](Temp.Name)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.[Namespace].Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        Public Sub New(ByVal Name As String)
            Clear()

            With Me
                .Name = Name
                .C = "namespace " & Name
                .Print_C.Add(.C)
                .Print_C.Add("{")
                .Print_C.Add("}")
                .VB = "Namespace " & Name & Environment.NewLine & "End Namespace"
                .Print_VB.Add(.VB)
                .F = "namespace " & Name
                .Print_F.Add(.F)
                .Python = ""
                .JavaScript = ""
            End With
        End Sub
#End Region
#End Region
    End Class
#End Region
#Region "|08.00.14| <Class> <Statement> [Module]"
    Public Class [Module]
        Inherits Statement
#Region "<1> [Property]"
#Region "[On] |2019/05/22 15h16:467| <01.00.10> <Property> <Constructor> |.[Namespace]()|List(Of ReferenceCaller)|"' (Set|Get) The [Namespace] as List(Of ReferenceCaller).
        Private _Namespace As List(Of ReferenceCaller)
        '''    <Summary>
        '''     (Set|Get) The [Namespace] as List(Of ReferenceCaller).
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h16:475 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Constructor"), Description("(Set|Get) The [Namespace] as List(Of ReferenceCaller).")>
        Public Property [Namespace]() As List(Of ReferenceCaller)
            Get
                Return _Namespace
            End Get
            Set(ByVal Value As List(Of ReferenceCaller))
                _Namespace = Value
            End Set
        End Property
#End Region '(Set|Get) The [Namespace] as List(Of ReferenceCaller).
#Region "[On] |2019/05/22 15h17:768| <01.00.11> <Property> <Constructor> |.Caller()|ReferenceCaller|"' (Set|Get) The Caller as ReferenceCaller.
        Private _Caller As ReferenceCaller
        '''    <Summary>
        '''     (Set|Get) The Caller as ReferenceCaller.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h17:775 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Constructor"), Description("(Set|Get) The Caller as ReferenceCaller.")>
        Public Property Caller() As ReferenceCaller
            Get
                Return _Caller
            End Get
            Set(ByVal Value As ReferenceCaller)
                _Caller = Value
            End Set
        End Property
#End Region '(Set|Get) The Caller as ReferenceCaller.

#Region "<01.00> <Property> [Constructor]"
#Region "|2019/04/14 11h40:458| <01.00.00> <Property> <Constructor> [Call=Attributes|AttributeList]"'(Set|Get) Optional. See Attribute List.
        Private _Attributes As Attributelist
        ''' <Summary>
        ''' Optional. See Attribute List.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h40:458 </Published>
        ''' <Updated>[Created=2019/04/14 11h40:458][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Attribute List."),
Browsable(True)>
        Public Property Attributes() As Attributelist
            Get
                Return _Attributes
            End Get
            Set(ByVal Value As Attributelist)
                _Attributes = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Attribute List.
#Region "|2019/04/14 11h41:035| <01.00.01> <Property> <Constructor> [Call=AccessModifier|AccessModifiers]"'(Set|Get) Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected See Access levels in Visual Basic.
        Private _AccessModifier As AccessModifiers
        ''' <Summary>
        ''' Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected See Access levels in Visual Basic.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h41:0035 </Published>
        ''' <Updated>[Created=2019/04/14 11h41:0035][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected See Access levels in Visual Basic."),
Browsable(True)>
        Public Property AccessModifier() As AccessModifiers
            Get
                Return _AccessModifier
            End Get
            Set(ByVal Value As AccessModifiers)
                _AccessModifier = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Can be one of the following:- Public- Protected- Friend- Private- Protected Friend- Private Protected See Access levels in Visual Basic.
#Region "|2019/04/14 11h43:019| <01.00.02> <Property> <Constructor> [Call=[Shadows]|Boolean]"'(Set|Get) Optional. See Shadows.
        Private _Shadows As Boolean
        ''' <Summary>
        ''' Optional. See Shadows.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h43:0019 </Published>
        ''' <Updated>[Created=2019/04/14 11h43:0019][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See Shadows."),
Browsable(True)>
        Public Property [Shadows]() As Boolean
            Get
                Return _Shadows
            End Get
            Set(ByVal Value As Boolean)
                _Shadows = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See Shadows.
#Region "|2019/04/14 11h44:563| <01.00.03> <Property> <Constructor> [Call=[MustInherit]|Boolean]"'(Set|Get) Optional. See MustInherit.
        Private _MustInherit As Boolean
        ''' <Summary>
        ''' Optional. See MustInherit.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h44:563 </Published>
        ''' <Updated>[Created=2019/04/14 11h44:563][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See MustInherit."),
Browsable(True)>
        Public Property [MustInherit]() As Boolean
            Get
                Return _MustInherit
            End Get
            Set(ByVal Value As Boolean)
                _MustInherit = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See MustInherit.
#Region "|2019/04/14 11h45:199| <01.00.04> <Property> <Constructor> [Call=[NotInheritable]|Boolean]"'(Set|Get) Optional. See NotInheritable.
        Private _NotInheritable As Boolean
        ''' <Summary>
        ''' Optional. See NotInheritable.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h45:199 </Published>
        ''' <Updated>[Created=2019/04/14 11h45:199][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. See NotInheritable."),
Browsable(True)>
        Public Property [NotInheritable]() As Boolean
            Get
                Return _NotInheritable
            End Get
            Set(ByVal Value As Boolean)
                _NotInheritable = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. See NotInheritable.
#Region "|2019/04/14 11h45:481| <01.00.05> <Property> <Constructor> [Call=[Partial]|Boolean]"'(Set|Get) Optional. Indicates a partial Description of the class. See Partial.
        Private _Partial As Boolean
        ''' <Summary>
        ''' Optional. Indicates a partial Description of the class. See Partial.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h45:481 </Published>
        ''' <Updated>[Created=2019/04/14 11h45:481][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Optional. Indicates a partial Description of the class. See Partial."),
Browsable(True)>
        Public Property [Partial]() As Boolean
            Get
                Return _Partial
            End Get
            Set(ByVal Value As Boolean)
                _Partial = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Indicates a partial Description of the class. See Partial.
#Region "|2019/04/14 11h46:977| <01.00.06> <Property> <Constructor> [Call=ModuleName|String]"'(Set|Get) Required. Name of this class. See Declared Element Names.
        Private _ModuleName As String
        ''' <Summary>
        ''' Required. Name of this class. See Declared Element Names.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h46:977 </Published>
        ''' <Updated>[Created=2019/04/14 11h46:977][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"),
Description("Required. Name of this class. See Declared Element Names."),
Browsable(True)>
        Public Property ModuleName() As String
            Get
                Return _ModuleName
            End Get
            Set(ByVal Value As String)
                _ModuleName = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Name of this class. See Declared Element Names.
#End Region
#Region "<01.01> <Property> [Statements]"
#Region "|2019/04/14 11h54:916| <01.01.00> <Property> <Statements> [Call=[Importation]|List(Of Import)]"'(Set|Get) Stores the list of Import Statement.
        Private _Importation As List(Of VbNET.Import)
        ''' <Summary>
        ''' Stores the list of Import Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h54:916 </Published>
        ''' <Updated>[Created=2019/04/14 11h54:916][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Import Statement."),
            Browsable(True)>
        Public Property [Importation]() As List(Of VbNET.Import)
            Get
                Return _Importation
            End Get
            Set(ByVal Value As List(Of VbNET.Import))
                _Importation = Value
            End Set
        End Property
        '<XmlIgnore()>
#End Region ' (Set|Get) Stores the list of Import Statement.
#Region "|2019/04/14 11h56:424| <01.01.01> <Property> <Statements> [Call=Properties|List(Of Property)]"'(Set|Get) Stores the list of Property Statement.
        Private _Properties As List(Of VbNET.Property)
        ''' <Summary>
        ''' Stores the list of Property Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h56:424 </Published>
        ''' <Updated>[Created=2019/04/14 11h56:424][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Property Statement."),
            Browsable(True)>
        Public Property Properties() As List(Of VbNET.Property)
            Get
                Return _Properties
            End Get
            Set(ByVal Value As List(Of VbNET.Property))
                _Properties = Value
            End Set
        End Property
#End Region ' (Set|Get) Stores the list of Property Statement.
#Region "|2019/04/14 11h56:180| <01.01.02> <Property> <Statements> [Call=Enumeration|List(Of Enumerate)]"'(Set|Get) Stores the list of Enumerate Statement.
        Private _Enumeration As List(Of VbNET.Enumeration)
        ''' <Summary>
        ''' Stores the list of Enumerate Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h56:180 </Published>
        ''' <Updated>[Created=2019/04/14 11h56:180][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Enumerate Statement."),
            Browsable(True)>
        Public Property Enumeration() As List(Of VbNET.Enumeration)
            Get
                Return _Enumeration
            End Get
            Set(ByVal Value As List(Of VbNET.Enumeration))
                _Enumeration = Value
            End Set
        End Property
#End Region ' (Set|Get) Stores the list of Enumerate Statement.
#Region "|2019/04/14 11h57:050| <01.01.03> <Property> <Statements> [Call=Structure|List(Of Structure)]"'(Set|Get) Stores the list of Structure Statement.
        Private _Structure As List(Of VbNET.Structure)
        ''' <Summary>
        ''' Stores the list of Structure Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h57:0050 </Published>
        ''' <Updated>[Created=2019/04/14 11h57:0050][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Structure Statement."),
            Browsable(True)>
        Public Property [Structure]() As List(Of VbNET.Structure)
            Get
                Return _Structure
            End Get
            Set(ByVal Value As List(Of VbNET.Structure))
                _Structure = Value
            End Set
        End Property
#End Region ' (Set|Get) Stores the list of Structure Statement.
#Region "|2019/04/14 11h59:278| <01.01.04> <Property> <Statements> [Call=Sub|List(Of Sub)]"'(Set|Get) Stores the list of Sub Statement.
        Private _Sub As List(Of VbNET.Sub)
        ''' <Summary>
        ''' Stores the list of Sub Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 11h59:278 </Published>
        ''' <Updated>[Created=2019/04/14 11h59:278][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Sub Statement."),
            Browsable(True)>
        Public Property [Sub]() As List(Of VbNET.Sub)
            Get
                Return _Sub
            End Get
            Set(ByVal Value As List(Of VbNET.Sub))
                _Sub = Value
            End Set
        End Property
#End Region ' (Set|Get) Stores the list of Sub Statement.
#Region "|2019/04/14 12h00:578| <01.01.05> <Property> <Statements> [Call=[Function]|List(Of Function)]"'(Set|Get) Stores the list of Function Statement.
        Private _Function As List(Of VbNET.Function)
        ''' <Summary>
        ''' Stores the list of Function Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 12h00:578 </Published>
        ''' <Updated>[Created=2019/04/14 12h00:578][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("Stores the list of Function Statement."),
            Browsable(True)>
        Public Property [Function]() As List(Of VbNET.Function)
            Get
                Return _Function
            End Get
            Set(ByVal Value As List(Of VbNET.Function))
                _Function = Value
            End Set
        End Property
#End Region ' (Set|Get) Stores the list of Function Statement.
#Region "|2019/04/14 14h01:945| <01.01.06> <Property> <Statements> [Call=[Runtime]|List(Of Runtime)]"'(Set|Get) List of Runtime
        Private _Runtime As List(Of VbNET.Runtime)
        ''' <Summary>
        ''' List of Runtime
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h01:945 </Published>
        ''' <Updated>[Created=2019/04/14 14h01:945][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("List of Runtime"),
                  Browsable(True)>
        Public Property [Runtime]() As List(Of VbNET.Runtime)
            Get
                Return _Runtime
            End Get
            Set(ByVal Value As List(Of VbNET.Runtime))
                _Runtime = Value
            End Set
        End Property
#End Region ' (Set|Get) List of Runtime
#Region "|2019/04/14 14h20:933| <01.01.07> <Property> <Statements> [Call=Loader|List(Of Loader)]"'(Set|Get) The list of Loader Statement. Example is Public Sub New().
        Private _Loader As List(Of VbNET.Loader)
        ''' <Summary>
        ''' The list of Loader Statement. Example is Public Sub New().
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h20:933 </Published>
        ''' <Updated>[Created=2019/04/14 14h20:933][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("The list of Loader Statement. Example is Public Sub New()."),
                     Browsable(True)>
        Public Property Loader() As List(Of VbNET.Loader)
            Get
                Return _Loader
            End Get
            Set(ByVal Value As List(Of VbNET.Loader))
                _Loader = Value
            End Set
        End Property
#End Region ' (Set|Get) The list of Loader Statement. Example is Public Sub New().
#Region "|2019/04/14 14h21:878| <01.01.08> <Property> <Statements> [Call=Classes|List(Of Class)]"'(Set|Get) The list of Class Statement.
        Private _Classes As List(Of VbNET.Class)
        ''' <Summary>
        ''' The list of Class Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h21:878 </Published>
        ''' <Updated>[Created=2019/04/14 14h21:878][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("The list of Class Statement."),
            Browsable(True)>
        Public Property Classes() As List(Of VbNET.Class)
            Get
                Return _Classes
            End Get
            Set(ByVal Value As List(Of VbNET.Class))
                _Classes = Value
            End Set
        End Property
#End Region ' (Set|Get) The list of Class Statement.
#Region "|2019/04/14 14h22:430| <01.01.09> <Property> <Statements> [Call=Constante|List(Of Constante)]"'(Set|Get) The list of Constante Statement.
        Private _Constante As List(Of Constante)
        ''' <Summary>
        ''' The list of Constante Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h22:430 </Published>
        ''' <Updated>[Created=2019/04/14 14h22:430][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("The list of Constante Statement."),
            Browsable(True)>
        Public Property Constante() As List(Of Constante)
            Get
                Return _Constante
            End Get
            Set(ByVal Value As List(Of Constante))
                _Constante = Value
            End Set
        End Property
#End Region ' (Set|Get) The list of Constante Statement.
#Region "|2019/04/14 14h23:536| <01.01.10> <Property> <Statements> [Call=Event|List(Of VBNET.Event)]"'(Set|Get) The list of Event Statement.
        Private _Event As List(Of VbNET.Event)
        ''' <Summary>
        ''' The list of Event Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h23:536 </Published>
        ''' <Updated>[Created=2019/04/14 14h23:536][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"),
            Description("The list of Event Statement."),
            Browsable(True)>
        Public Property [Event]() As List(Of VbNET.Event)
            Get
                Return _Event
            End Get
            Set(ByVal Value As List(Of VbNET.Event))
                _Event = Value
            End Set
        End Property
#End Region ' (Set|Get) The list of Event Statement.
#Region "|2019/05/07 17h06:518| <01.01.11> <Property> <Statements> [Call=Delegates|List(Of VbNET.Delegate)]"'(Set|Get) the Delegates as List(Of VbNET.Delegate).
        Private _Delegates As List(Of VbNET.Delegate)
        ''' <Summary>
        ''' (Set|Get) the Delegates as List(Of VbNET.Delegate).
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h06:518 </Published>
        ''' <Updated>[Created=2019/05/07 17h06:518][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"), Description("(Set|Get) the Delegates as List(Of VbNET.Delegate)."), Browsable(True)>
        Public Property Delegates() As List(Of VbNET.Delegate)
            Get
                Return _Delegates
            End Get
            Set(ByVal Value As List(Of VbNET.Delegate))
                _Delegates = Value
            End Set
        End Property
#End Region ' (Set|Get) the Delegates as List(Of VbNET.Delegate).
#Region "|2019/05/07 17h06:718| <01.01.12> <Property> <Statements> [Call=Declares|List(Of VbNET.Declare)]"'(Set|Get) the Declares as List(Of VbNET.Declare)
        Private _Declares As List(Of VbNET.Declare)
        ''' <Summary>
        ''' (Set|Get) the Declares as List(Of VbNET.Declare)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h06:718 </Published>
        ''' <Updated>[Created=2019/05/07 17h06:718][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"), Description("(Set|Get) the Declares as List(Of VbNET.Declare)"), Browsable(True)>
        Public Property Declares() As List(Of VbNET.Declare)
            Get
                Return _Declares
            End Get
            Set(ByVal Value As List(Of VbNET.Declare))
                _Declares = Value
            End Set
        End Property
#End Region ' (Set|Get) the Declares as List(Of VbNET.Declare)
#Region "|2019/05/07 17h06:783| <01.01.13> <Property> <Statements> [Call=Dims|List(Of VbNET.Dim)]"'(Set|Get) the Dims as List(Of VbNET.Dim)
        Private _Dims As List(Of VbNET.Dim)
        ''' <Summary>
        ''' (Set|Get) the Dims as List(Of VbNET.Dim)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h06:783 </Published>
        ''' <Updated>[Created=2019/05/07 17h06:783][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"), Description("(Set|Get) the Dims as List(Of VbNET.Dim)"), Browsable(True)>
        Public Property Dims() As List(Of VbNET.Dim)
            Get
                Return _Dims
            End Get
            Set(ByVal Value As List(Of VbNET.Dim))
                _Dims = Value
            End Set
        End Property
#End Region ' (Set|Get) the Dims as List(Of VbNET.Dim)
#Region "|2019/05/07 17h07:796| <01.01.14> <Property> <Statements> [Call=Modules|List(Of VbNET.Module)]"'(Set|Get) the Modules as List(Of VbNET.Module)
        Private _Modules As List(Of VbNET.Module)
        ''' <Summary>
        ''' (Set|Get) the Modules as List(Of VbNET.Module)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h07:796 </Published>
        ''' <Updated>[Created=2019/05/07 17h07:795][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"), Description("(Set|Get) the Modules as List(Of VbNET.Module)"), Browsable(True)>
        Public Property Modules() As List(Of VbNET.Module)
            Get
                Return _Modules
            End Get
            Set(ByVal Value As List(Of VbNET.Module))
                _Modules = Value
            End Set
        End Property
#End Region ' (Set|Get) the Modules as List(Of VbNET.Module)
#Region "|2019/06/07 17h33:796| <01.01.15> <Property> <Statements> [Call=MyNamespace|List(Of ReferenceCaller)]"'(Set|Get) the MyNamespace as List(Of ReferenceCaller)
        Private _MyNamespace As List(Of ReferenceCaller)
        ''' <Summary>
        ''' (Set|Get) the MyNamespace as List(Of ReferenceCaller)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h07:796 </Published>
        ''' <Updated>[Created=2019/05/07 17h07:795][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Statements"), Description("(Set|Get) the MyNamespace as List(Of ReferenceCaller)"), Browsable(True)>
        Public Property MyNamespace() As List(Of ReferenceCaller)
            Get
                Return _MyNamespace
            End Get
            Set(ByVal Value As List(Of ReferenceCaller))
                _MyNamespace = Value
            End Set
        End Property
#End Region ' (Set|Get) the MyNamespace as List(Of ReferenceCaller)

#End Region
#Region "<01.02> <Property> [FileInfo]"
#Region "|2019/04/14 14h15:073| <01.02.00> <Property> <FileInfo> [Call=DirectoryPath|IO.DirectoryInfo]"'(Set|Get) Using a Directory Output to store the created Files.
        Private _DirectoryPath As IO.DirectoryInfo
        ''' <Summary>
        ''' Using a Directory Output to store the created Files.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h15:0073 </Published>
        ''' <Updated>[Created=2019/04/14 14h15:0073][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"),
Description("Using a Directory Output to store the created Files."),
Browsable(True)>
        <XmlIgnore()>
        Public Property DirectoryPath() As IO.DirectoryInfo
            Get
                Return _DirectoryPath
            End Get
            Set(ByVal Value As IO.DirectoryInfo)
                _DirectoryPath = Value
            End Set
        End Property
#End Region ' (Set|Get) Using a Directory Output to store the created Files.
#Region "|2019/04/14 14h16:258| <01.02.01> <Property> <FileInfo> [Call=FileVB|Fichier]"'(Set|Get) The Vb.NET Class file.
        Private _FileVB As Fichier
        ''' <Summary>
        ''' The Vb.NET Class file.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h16:258 </Published>
        ''' <Updated>[Created=2019/04/14 14h16:257][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"),
Description("The Vb.NET Class file."),
Browsable(True)>
        Public Property FileVB() As Fichier
            Get
                Return _FileVB
            End Get
            Set(ByVal Value As Fichier)
                _FileVB = Value
            End Set
        End Property
#End Region ' (Set|Get) The Vb.NET Class file.
#Region "|2019/04/14 14h17:620| <01.02.02> <Property> <FileInfo> [Call=FileC|Fichier]"'(Set|Get) The C#.NET Class file.
        Private _FileC As Fichier
        ''' <Summary>
        ''' The C#.NET Class file.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h17:620 </Published>
        ''' <Updated>[Created=2019/04/14 14h17:620][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"),
Description("The C#.NET Class file."),
Browsable(True)>
        Public Property FileC() As Fichier
            Get
                Return _FileC
            End Get
            Set(ByVal Value As Fichier)
                _FileC = Value
            End Set
        End Property
#End Region ' (Set|Get) The C#.NET Class file.
#Region "|2019/04/14 14h18:224| <01.02.03> <Property> <FileInfo> [Call=FileF|Fichier]"'(Set|Get) The F#.NET Class file.
        Private _FileF As Fichier
        ''' <Summary>
        ''' The F#.NET Class file.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h18:224 </Published>
        ''' <Updated>[Created=2019/04/14 14h18:224][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"),
Description("The F#.NET Class file."),
Browsable(True)>
        Public Property FileF() As Fichier
            Get
                Return _FileF
            End Get
            Set(ByVal Value As Fichier)
                _FileF = Value
            End Set
        End Property
#End Region ' (Set|Get) The F#.NET Class file.
#Region "|2019/04/14 14h18:577| <01.02.04> <Property> <FileInfo> [Call=FilePython|Fichier]"'(Set|Get) The Python Class file.
        Private _FilePython As Fichier
        ''' <Summary>
        ''' The Python Class file.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h18:577 </Published>
        ''' <Updated>[Created=2019/04/14 14h18:577][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"),
Description("The Python Class file."),
Browsable(True)>
        Public Property FilePython() As Fichier
            Get
                Return _FilePython
            End Get
            Set(ByVal Value As Fichier)
                _FilePython = Value
            End Set
        End Property
#End Region ' (Set|Get) The Python Class file.
#Region "|2019/05/07 17h04:299| <01.02.05> <Property> <FileInfo> [Call=FileJavaScript|Fichier]"'(Set|Get) the FileJavaScript as Fichier.
        Private _FileJavaScript As Fichier
        ''' <Summary>
        ''' (Set|Get) the FileJavaScript as Fichier.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h04:299 </Published>
        ''' <Updated>[Created=2019/05/07 17h04:299][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("FileInfo"), Description("(Set|Get) the FileJavaScript as Fichier."), Browsable(True)>
        Public Property FileJavaScript() As Fichier
            Get
                Return _FileJavaScript
            End Get
            Set(ByVal Value As Fichier)
                _FileJavaScript = Value
            End Set
        End Property
#End Region ' (Set|Get) the FileJavaScript as Fichier.
#End Region
#Region "<01.03> <Property> [Nodes]"
#Region "|2019/04/14 14h26:881| <01.03.00> <Property> <Node> [Call=MainNode|DevComponents.AdvTree.Node]"'(Set|Get) The Main node of the Class.
        Private _MainNode As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The Main node of the Class.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h26:880 </Published>
        ''' <Updated>[Created=2019/04/14 14h26:880][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The Main node of the Class."),
Browsable(True)>
        <XmlIgnore()>
        Public Property MainNode() As DevComponents.AdvTree.Node
            Get
                Return _MainNode
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _MainNode = Value
            End Set
        End Property
#End Region ' (Set|Get) The Main node of the Class.
#Region "|2019/04/14 14h26:059| <01.03.01> <Property> <Node> [Call=Node_Importation|DevComponents.AdvTree.Node]"'(Set|Get) The node for Importations.
        Private _Node_Importation As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Importations.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h26:0059 </Published>
        ''' <Updated>[Created=2019/04/14 14h26:0059][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Importations."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Importation() As DevComponents.AdvTree.Node
            Get
                Return _Node_Importation
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Importation = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Importations.
#Region "|2019/04/14 14h27:218| <01.03.02> <Property> <Node> [Call=Node_Properties|DevComponents.AdvTree.Node]"'(Set|Get) The node for Properties.
        Private _Node_Properties As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Properties.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h27:218 </Published>
        ''' <Updated>[Created=2019/04/14 14h27:218][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Properties."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Properties() As DevComponents.AdvTree.Node
            Get
                Return _Node_Properties
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Properties = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Properties.
#Region "|2019/04/14 14h28:513| <01.03.03> <Property> <Node> [Call=Node_Enumerations|DevComponents.AdvTree.Node]"'(Set|Get) The node for Enumeration.
        Private _Node_Enumerations As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Enumeration.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h28:513 </Published>
        ''' <Updated>[Created=2019/04/14 14h28:513][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Enumeration."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Enumerations() As DevComponents.AdvTree.Node
            Get
                Return _Node_Enumerations
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Enumerations = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Enumeration.
#Region "|2019/04/14 14h28:671| <01.03.04> <Property> <Node> [Call=Node_Structure|DevComponents.AdvTree.Node]"'(Set|Get) The node for Structure.
        Private _Node_Structure As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Structure.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h28:671 </Published>
        ''' <Updated>[Created=2019/04/14 14h28:671][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Structure."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Structure() As DevComponents.AdvTree.Node
            Get
                Return _Node_Structure
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Structure = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Structure.
#Region "|2019/04/14 14h29:214| <01.03.05> <Property> <Node> [Call=Node_Sub|DevComponents.AdvTree.Node]"'(Set|Get) The node for Subs.
        Private _Node_Sub As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Subs.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h29:214 </Published>
        ''' <Updated>[Created=2019/04/14 14h29:214][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Subs."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Sub() As DevComponents.AdvTree.Node
            Get
                Return _Node_Sub
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Sub = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Subs.
#Region "|2019/04/14 14h29:257| <01.03.06> <Property> <Node> [Call=Node_Function|DevComponents.AdvTree.Node]"'(Set|Get) The node for Functions.
        Private _Node_Function As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Functions.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h29:257 </Published>
        ''' <Updated>[Created=2019/04/14 14h29:256][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Functions."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Function() As DevComponents.AdvTree.Node
            Get
                Return _Node_Function
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Function = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Functions.
#Region "|2019/04/14 14h30:681| <01.03.07> <Property> <Node> [Call=Node_Loader|DevComponents.AdvTree.Node]"'(Set|Get) The node for Loaders.
        Private _Node_Loader As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Loaders.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h30:681 </Published>
        ''' <Updated>[Created=2019/04/14 14h30:681][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Loaders."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Loader() As DevComponents.AdvTree.Node
            Get
                Return _Node_Loader
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Loader = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Loaders.
#Region "|2019/04/14 14h30:652| <01.03.08> <Property> <Node> [Call=Node_Class|DevComponents.AdvTree.Node]"'(Set|Get) The node for Classes.
        Private _Node_Class As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Classes.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h30:652 </Published>
        ''' <Updated>[Created=2019/04/14 14h30:652][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Classes."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Class() As DevComponents.AdvTree.Node
            Get
                Return _Node_Class
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Class = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Classes.
#Region "|2019/04/14 14h31:161| <01.03.09> <Property> <Node> [Call=Node_Constante|DevComponents.AdvTree.Node]"'(Set|Get) The node for Constantes.
        Private _Node_Constante As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Constantes.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h31:161 </Published>
        ''' <Updated>[Created=2019/04/14 14h31:161][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Constantes."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Constante() As DevComponents.AdvTree.Node
            Get
                Return _Node_Constante
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Constante = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Constantes.
#Region "|2019/04/14 14h31:886| <01.03.10> <Property> <Node> [Call=Node_Event|DevComponents.AdvTree.Node]"'(Set|Get) The node for Events.
        Private _Node_Event As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Events.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h31:886 </Published>
        ''' <Updated>[Created=2019/04/14 14h31:886][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Events."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Event() As DevComponents.AdvTree.Node
            Get
                Return _Node_Event
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Event = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Events.
#Region "|2019/04/14 14h32:189| <01.03.11> <Property> <Node> [Call=Node_Runtime|DevComponents.AdvTree.Node]"'(Set|Get) The node for Runtimes.
        Private _Node_Runtime As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' The node for Runtimes.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/14 14h32:189 </Published>
        ''' <Updated>[Created=2019/04/14 14h32:189][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"),
Description("The node for Runtimes."),
Browsable(True)>
        <XmlIgnore()>
        Public Property Node_Runtime() As DevComponents.AdvTree.Node
            Get
                Return _Node_Runtime
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Runtime = Value
            End Set
        End Property
#End Region ' (Set|Get) The node for Runtimes.
#Region "|2019/05/07 17h01:359| <01.03.12> <Property> <Node> [Call=Node_Delegate|DevComponents.AdvTree.Node]"'(Set|Get) the Node_Delegate as DevComponents.AdvTree.Node
        Private _Node_Delegate As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' (Set|Get) the Node_Delegate as DevComponents.AdvTree.Node
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h01:359 </Published>
        ''' <Updated>[Created=2019/05/07 17h01:359][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"), Description("(Set|Get) the Node_Delegate as DevComponents.AdvTree.Node"), Browsable(True)>
        Public Property Node_Delegate() As DevComponents.AdvTree.Node
            Get
                Return _Node_Delegate
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Delegate = Value
            End Set
        End Property
#End Region ' (Set|Get) the Node_Delegate as DevComponents.AdvTree.Node
#Region "|2019/05/07 17h02:638| <01.03.13> <Property> <Node> [Call=Node_Declare|DevComponents.AdvTree.Node]"'(Set|Get) the Node_Declare as DevComponents.AdvTree.Node
        Private _Node_Declare As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' (Set|Get) the Node_Declare as DevComponents.AdvTree.Node
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h02:638 </Published>
        ''' <Updated>[Created=2019/05/07 17h02:638][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"), Description("(Set|Get) the Node_Declare as DevComponents.AdvTree.Node"), Browsable(True)>
        Public Property Node_Declare() As DevComponents.AdvTree.Node
            Get
                Return _Node_Declare
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Declare = Value
            End Set
        End Property
#End Region ' (Set|Get) the Node_Declare as DevComponents.AdvTree.Node
#Region "|2019/05/07 17h02:062| <01.03.14> <Property> <Node> [Call=Node_Dim|DevComponents.AdvTree.Node]"'(Set|Get) the Node_Dim as DevComponents.AdvTree.Node
        Private _Node_Dim As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' (Set|Get) the Node_Dim as DevComponents.AdvTree.Node
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h02:062 </Published>
        ''' <Updated>[Created=2019/05/07 17h02:062][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"), Description("(Set|Get) the Node_Dim as DevComponents.AdvTree.Node"), Browsable(True)>
        Public Property Node_Dim() As DevComponents.AdvTree.Node
            Get
                Return _Node_Dim
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Dim = Value
            End Set
        End Property
#End Region ' (Set|Get) the Node_Dim as DevComponents.AdvTree.Node
#Region "|2019/05/07 17h03:805| <01.03.15> <Property> <Node> [Call=Node_Module|DevComponents.AdvTree.Node]"'(Set|Get) the Node_Module as DevComponents.AdvTree.Node
        Private _Node_Module As DevComponents.AdvTree.Node
        ''' <Summary>
        ''' (Set|Get) the Node_Module as DevComponents.AdvTree.Node
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/07 17h03:805 </Published>
        ''' <Updated>[Created=2019/05/07 17h03:804][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Node"), Description("(Set|Get) the Node_Module as DevComponents.AdvTree.Node"), Browsable(True)>
        Public Property Node_Module() As DevComponents.AdvTree.Node
            Get
                Return _Node_Module
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _Node_Module = Value
            End Set
        End Property
#End Region ' (Set|Get) the Node_Module as DevComponents.AdvTree.Node
#End Region
#Region "|01.04| <Property> [Parent]{3}"
#Region "[On] |2019/05/22 12h55:731| <01.04.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h27:647| <01.04.01> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.04.02> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.
#End Region
#Region "|01.05| <Property> [Quote]"
#Region "[On] |2019/06/07 17h35:731| <01.05.00> <Property> <Quote> |.ProductionCost()|Double|"' (Set|Get) The ProductionCost as Double.
        Private _ProductionCost As Double
        '''    <Summary>
        '''     (Set|Get) The ProductionCost as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The ProductionCost as Double.")>
        Property ProductionCost() As Double
            Get
                Return _ProductionCost
            End Get
            Set(ByVal Value As Double)
                _ProductionCost = Value
            End Set
        End Property
#End Region '(Set|Get) The ProductionCost as Double.
#Region "[On] |2019/06/07 17h39:796| <01.00.01> <Property> <Quote> |.Total_Importation()|Double|"' (Set|Get) The Total_Importation as Double.
        Private _Total_Importation As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Importation as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h39:796 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Importation as Double.")>
        Property Total_Importation() As Double
            Get
                Return _Total_Importation
            End Get
            Set(ByVal Value As Double)
                _Total_Importation = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Importation as Double.
#Region "[On] |2019/06/07 17h40:729| <01.00.02> <Property> <Quote> |.Total_Property()|Double|"' (Set|Get) The Total_Property as Double.
        Private _Total_Property As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Property as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h40:745 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Property as Double.")>
        Property Total_Property() As Double
            Get
                Return _Total_Property
            End Get
            Set(ByVal Value As Double)
                _Total_Property = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Property as Double.
#Region "[On] |2019/06/07 17h41:319| <01.00.03> <Property> <Quote> |.Total_Enumeration()|Double|"' (Set|Get) The Total_Enumeration as Double.
        Private _Total_Enumeration As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Enumeration as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:319 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Enumeration as Double.")>
        Property Total_Enumeration() As Double
            Get
                Return _Total_Enumeration
            End Get
            Set(ByVal Value As Double)
                _Total_Enumeration = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Enumeration as Double.
#Region "[On] |2019/06/07 17h41:979| <01.00.04> <Property> <Quote> |.Total_Structure()|Double|"' (Set|Get) The Total_Structure as Double.
        Private _Total_Structure As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Structure as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:994 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Structure as Double.")>
        Property Total_Structure() As Double
            Get
                Return _Total_Structure
            End Get
            Set(ByVal Value As Double)
                _Total_Structure = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Structure as Double.
#Region "[On] |2019/06/07 17h41:540| <01.00.05> <Property> <Quote> |.Total_Sub()|Double|"' (Set|Get) The Total_Sub as Double.
        Private _Total_Sub As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Sub as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:540 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Sub as Double.")>
        Property Total_Sub() As Double
            Get
                Return _Total_Sub
            End Get
            Set(ByVal Value As Double)
                _Total_Sub = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Sub as Double.
#Region "[On] |2019/06/07 17h41:228| <01.00.06> <Property> <Quote> |.Total_Function()|Double|"' (Set|Get) The Total_Function as Double.
        Private _Total_Function As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Function as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:244 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Function as Double.")>
        Property Total_Function() As Double
            Get
                Return _Total_Function
            End Get
            Set(ByVal Value As Double)
                _Total_Function = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Function as Double.
#Region "[On] |2019/06/07 17h42:269| <01.00.07> <Property> <Quote> |.Total_Runtime()|Double|"' (Set|Get) The Total_Runtime as Double.
        Private _Total_Runtime As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Runtime as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:269 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Runtime as Double.")>
        Property Total_Runtime() As Double
            Get
                Return _Total_Runtime
            End Get
            Set(ByVal Value As Double)
                _Total_Runtime = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Runtime as Double.
#Region "[On] |2019/06/07 17h42:669| <01.00.08> <Property> <Quote> |.Total_Loader()|Double|"' (Set|Get) The Total_Loader as Double.
        Private _Total_Loader As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Loader as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:685 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Loader as Double.")>
        Property Total_Loader() As Double
            Get
                Return _Total_Loader
            End Get
            Set(ByVal Value As Double)
                _Total_Loader = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Loader as Double.
#Region "[On] |2019/06/07 17h42:529| <01.00.09> <Property> <Quote> |.Total_Class()|Double|"' (Set|Get) The Total_Class as Double.
        Private _Total_Class As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Class as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:545 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Class as Double.")>
        Property Total_Class() As Double
            Get
                Return _Total_Class
            End Get
            Set(ByVal Value As Double)
                _Total_Class = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Class as Double.
#Region "[On] |2019/06/07 17h43:682| <01.00.10> <Property> <Quote> |.Total_Constante()|Double|"' (Set|Get) The Total_Constante as Double.
        Private _Total_Constante As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Constante as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Constante as Double.")>
        Property Total_Constante() As Double
            Get
                Return _Total_Constante
            End Get
            Set(ByVal Value As Double)
                _Total_Constante = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Constante as Double.
#Region "[On] |2019/06/07 17h43:565| <01.00.10> <Property> <Quote> |.Total_Event()|Double|"' (Set|Get) The Total_Event as Double.
        Private _Total_Event As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Event as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:565 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Event as Double.")>
        Property Total_Event() As Double
            Get
                Return _Total_Event
            End Get
            Set(ByVal Value As Double)
                _Total_Event = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Event as Double.
#Region "[On] |2019/06/07 17h43:970| <01.00.11> <Property> <Quote> |.Total_DataBase()|Double|"' (Set|Get) The Total_DataBase as Double.
        Private _Total_DataBase As Double
        '''    <Summary>
        '''     (Set|Get) The Total_DataBase as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:986 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_DataBase as Double.")>
        Property Total_DataBase() As Double
            Get
                Return _Total_DataBase
            End Get
            Set(ByVal Value As Double)
                _Total_DataBase = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_DataBase as Double.
#Region "[On] |2019/06/07 17h44:721| <01.00.12> <Property> <Quote> |.Total_Table()|Double|"' (Set|Get) The Total_Table as Double.
        Private _Total_Table As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Table as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:737 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Table as Double.")>
        Property Total_Table() As Double
            Get
                Return _Total_Table
            End Get
            Set(ByVal Value As Double)
                _Total_Table = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Table as Double.
#Region "[On] |2019/06/07 17h44:717| <01.00.13> <Property> <Quote> |.Total_Fichier()|Double|"' (Set|Get) The Total_Fichier as Double.
        Private _Total_Fichier As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Fichier as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:732 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Fichier as Double.")>
        Property Total_Fichier() As Double
            Get
                Return _Total_Fichier
            End Get
            Set(ByVal Value As Double)
                _Total_Fichier = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Fichier as Double.
#Region "[On] |2019/06/07 17h44:321| <01.00.14> <Property> <Quote> |.Total_Folder()|Double|"' (Set|Get) The Total_Folder as Double.
        Private _Total_Folder As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Folder as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:326 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Folder as Double.")>
        Property Total_Folder() As Double
            Get
                Return _Total_Folder
            End Get
            Set(ByVal Value As Double)
                _Total_Folder = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Folder as Double.
#Region "[On] |2019/06/07 17h45:044| <01.00.15> <Property> <Quote> |.Total_Parameter()|Double|"' (Set|Get) The Total_Parameter as Double.
        Private _Total_Parameter As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Parameter as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:047 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Parameter as Double.")>
        Property Total_Parameter() As Double
            Get
                Return _Total_Parameter
            End Get
            Set(ByVal Value As Double)
                _Total_Parameter = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Parameter as Double.
#Region "[On] |2019/06/07 17h45:059| <01.00.16> <Property> <Quote> |.Total_Member()|Double|"' (Set|Get) The Total_Member as Double.
        Private _Total_Member As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Member as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:059 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Member as Double.")>
        Property Total_Member() As Double
            Get
                Return _Total_Member
            End Get
            Set(ByVal Value As Double)
                _Total_Member = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Member as Double.
#Region "[On] |2019/06/07 17h45:899| <01.00.17> <Property> <Quote> |.Total_LineInfo()|Double|"' (Set|Get) The Total_LineInfo as Double.
        Private _Total_LineInfo As Double
        '''    <Summary>
        '''     (Set|Get) The Total_LineInfo as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:915 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_LineInfo as Double.")>
        Property Total_LineInfo() As Double
            Get
                Return _Total_LineInfo
            End Get
            Set(ByVal Value As Double)
                _Total_LineInfo = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_LineInfo as Double.
#Region "[On] |2019/06/07 17h47:510| <01.00.18> <Property> <Quote> |.Total_Brut()|Double|"' (Set|Get) The Total_Brut as Double.
        Private _Total_Brut As Double
        '''    <Summary>
        '''     (Set|Get) The Total_Brut as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h47:526 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Total_Brut as Double.")>
        Property Total_Brut() As Double
            Get
                Return _Total_Brut
            End Get
            Set(ByVal Value As Double)
                _Total_Brut = Value
            End Set
        End Property
#End Region '(Set|Get) The Total_Brut as Double.
#Region "[On] |2019/06/07 17h47:483| <01.00.19> <Property> <Quote> |.Montant_VAT()|Double|"' (Set|Get) The Montant_VAT as Double.
        Private _Montant_VAT As Double
        '''    <Summary>
        '''     (Set|Get) The Montant_VAT as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h47:504 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Montant_VAT as Double.")>
        Property Montant_VAT() As Double
            Get
                Return _Montant_VAT
            End Get
            Set(ByVal Value As Double)
                _Montant_VAT = Value
            End Set
        End Property
#End Region '(Set|Get) The Montant_VAT as Double.
#Region "[On] |2019/06/07 17h48:982| <01.00.20> <Property> <Quote> |.GrandTotal_TVA()|Double|"' (Set|Get) The GrandTotal_TVA as Double.
        Private _GrandTotal_TVA As Double
        '''    <Summary>
        '''     (Set|Get) The GrandTotal_TVA as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h48:982 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The GrandTotal_TVA as Double.")>
        Property GrandTotal_TVA() As Double
            Get
                Return _GrandTotal_TVA
            End Get
            Set(ByVal Value As Double)
                _GrandTotal_TVA = Value
            End Set
        End Property
#End Region '(Set|Get) The GrandTotal_TVA as Double.
#Region "[On] |2019/06/07 17h48:871| <01.00.21> <Property> <Quote> |.GrandTotal()|Double|"' (Set|Get) The GrandTotal as Double.
        Private _GrandTotal As Double
        '''    <Summary>
        '''     (Set|Get) The GrandTotal without VAT as Double.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h48:886 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The GrandTotal as Double.")>
        Property GrandTotal() As Double
            Get
                Return _GrandTotal
            End Get
            Set(ByVal Value As Double)
                _GrandTotal = Value
            End Set
        End Property
#End Region '(Set|Get) The GrandTotal as Double.

#Region "[On] |2019/06/07 17h39:796| <01.00.01> <Property> <Quote> |.Quantity_Importation()|Integer|"' (Set|Get) The Quantity_Importation as Integer.
        Private _Quantity_Importation As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Importation as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h39:796 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Importation as Integer.")>
        Property Quantity_Importation() As Integer
            Get
                Return _Quantity_Importation
            End Get
            Set(ByVal Value As Integer)
                Total_Importation = Value * My.Settings.Price_Import
                Total_Brut += Total_Importation
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Importation = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Importation as Integer.
#Region "[On] |2019/06/07 17h40:729| <01.00.02> <Property> <Quote> |.Quantity_Property()|Integer|"' (Set|Get) The Quantity_Property as Integer.
        Private _Quantity_Property As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Property as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h40:745 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Property as Integer.")>
        Property Quantity_Property() As Integer
            Get
                Return _Quantity_Property
            End Get
            Set(ByVal Value As Integer)
                Total_Property = Value * My.Settings.Price_Property
                Total_Brut += Total_Property
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Property = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Property as Integer.
#Region "[On] |2019/06/07 17h41:319| <01.00.03> <Property> <Quote> |.Quantity_Enumeration()|Integer|"' (Set|Get) The Quantity_Enumeration as Integer.
        Private _Quantity_Enumeration As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Enumeration as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:319 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Enumeration as Integer.")>
        Property Quantity_Enumeration() As Integer
            Get
                Return _Quantity_Enumeration
            End Get
            Set(ByVal Value As Integer)
                Total_Enumeration = Value * My.Settings.Price_Enumeration
                Total_Brut += Total_Enumeration
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Enumeration = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Enumeration as Integer.
#Region "[On] |2019/06/07 17h41:979| <01.00.04> <Property> <Quote> |.Quantity_Structure()|Integer|"' (Set|Get) The Quantity_Structure as Integer.
        Private _Quantity_Structure As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Structure as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:994 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Structure as Integer.")>
        Property Quantity_Structure() As Integer
            Get
                Return _Quantity_Structure
            End Get
            Set(ByVal Value As Integer)
                Total_Structure = Value * My.Settings.Price_Structure
                Total_Brut += Total_Structure
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Structure = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Structure as Integer.
#Region "[On] |2019/06/07 17h41:540| <01.00.05> <Property> <Quote> |.Quantity_Sub()|Integer|"' (Set|Get) The Quantity_Sub as Integer.
        Private _Quantity_Sub As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Sub as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:540 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Sub as Integer.")>
        Property Quantity_Sub() As Integer
            Get
                Return _Quantity_Sub
            End Get
            Set(ByVal Value As Integer)
                Total_Sub = Value * My.Settings.Price_Sub
                Total_Brut += Total_Sub
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Sub = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Sub as Integer.
#Region "[On] |2019/06/07 17h41:228| <01.00.06> <Property> <Quote> |.Quantity_Function()|Integer|"' (Set|Get) The Quantity_Function as Integer.
        Private _Quantity_Function As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Function as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h41:244 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Function as Integer.")>
        Property Quantity_Function() As Integer
            Get
                Return _Quantity_Function
            End Get
            Set(ByVal Value As Integer)
                Total_Function = Value * My.Settings.Price_Function
                Total_Brut += Total_Function
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Function = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Function as Integer.
#Region "[On] |2019/06/07 17h42:269| <01.00.07> <Property> <Quote> |.Quantity_Runtime()|Integer|"' (Set|Get) The Quantity_Runtime as Integer.
        Private _Quantity_Runtime As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Runtime as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:269 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Runtime as Integer.")>
        Property Quantity_Runtime() As Integer
            Get
                Return _Quantity_Runtime
            End Get
            Set(ByVal Value As Integer)
                Total_Runtime = Value * My.Settings.Price_Runtime
                Total_Brut += Total_Runtime
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Runtime = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Runtime as Integer.
#Region "[On] |2019/06/07 17h42:669| <01.00.08> <Property> <Quote> |.Quantity_Loader()|Integer|"' (Set|Get) The Quantity_Loader as Integer.
        Private _Quantity_Loader As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Loader as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:685 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Loader as Integer.")>
        Property Quantity_Loader() As Integer
            Get
                Return _Quantity_Loader
            End Get
            Set(ByVal Value As Integer)
                Total_Loader = Value * My.Settings.Price_Loader
                Total_Brut += Total_Loader
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Loader = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Loader as Integer.
#Region "[On] |2019/06/07 17h42:529| <01.00.09> <Property> <Quote> |.Quantity_Class()|Integer|"' (Set|Get) The Quantity_Class as Integer.
        Private _Quantity_Class As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Class as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h42:545 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Class as Integer.")>
        Property Quantity_Class() As Integer
            Get
                Return _Quantity_Class
            End Get
            Set(ByVal Value As Integer)
                Total_Class = Value * My.Settings.Price_Class
                Total_Brut += Total_Class
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Class = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Class as Integer.
#Region "[On] |2019/06/07 17h43:682| <01.00.10> <Property> <Quote> |.Quantity_Constante()|Integer|"' (Set|Get) The Quantity_Constante as Integer.
        Private _Quantity_Constante As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Constante as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:682 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Constante as Integer.")>
        Property Quantity_Constante() As Integer
            Get
                Return _Quantity_Constante
            End Get
            Set(ByVal Value As Integer)
                Total_Constante = Value * My.Settings.Price_Constante
                Total_Brut += Total_Constante
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Constante = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Constante as Integer.
#Region "[On] |2019/06/07 17h43:565| <01.00.10> <Property> <Quote> |.Quantity_Event()|Integer|"' (Set|Get) The Quantity_Event as Integer.
        Private _Quantity_Event As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Event as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:565 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Event as Integer.")>
        Property Quantity_Event() As Integer
            Get
                Return _Quantity_Event
            End Get
            Set(ByVal Value As Integer)
                Total_Event = Value * My.Settings.Price_Events
                Total_Brut += Total_Event
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Event = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Event as Integer.
#Region "[On] |2019/06/07 17h43:970| <01.00.11> <Property> <Quote> |.Quantity_DataBase()|Integer|"' (Set|Get) The Quantity_DataBase as Integer.
        Private _Quantity_DataBase As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_DataBase as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h43:986 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_DataBase as Integer.")>
        Property Quantity_DataBase() As Integer
            Get
                Return _Quantity_DataBase
            End Get
            Set(ByVal Value As Integer)
                Total_DataBase = Value * My.Settings.Price_DataBase
                Total_Brut += Total_DataBase
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_DataBase = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_DataBase as Integer.
#Region "[On] |2019/06/07 17h44:721| <01.00.12> <Property> <Quote> |.Quantity_Table()|Integer|"' (Set|Get) The Quantity_Table as Integer.
        Private _Quantity_Table As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Table as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:737 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Table as Integer.")>
        Property Quantity_Table() As Integer
            Get
                Return _Quantity_Table
            End Get
            Set(ByVal Value As Integer)
                Total_Table = Value * My.Settings.Price_Table
                Total_Brut += Total_Table
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Table = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Table as Integer.
#Region "[On] |2019/06/07 17h44:717| <01.00.13> <Property> <Quote> |.Quantity_Fichier()|Integer|"' (Set|Get) The Quantity_Fichier as Integer.
        Private _Quantity_Fichier As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Fichier as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:732 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Fichier as Integer.")>
        Property Quantity_Fichier() As Integer
            Get
                Return _Quantity_Fichier
            End Get
            Set(ByVal Value As Integer)
                Total_Fichier = Value * My.Settings.Price_Fichier
                Total_Brut += Total_Fichier
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Fichier = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Fichier as Integer.
#Region "[On] |2019/06/07 17h44:321| <01.00.14> <Property> <Quote> |.Quantity_Folder()|Integer|"' (Set|Get) The Quantity_Folder as Integer.
        Private _Quantity_Folder As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Folder as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h44:326 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Folder as Integer.")>
        Property Quantity_Folder() As Integer
            Get
                Return _Quantity_Folder
            End Get
            Set(ByVal Value As Integer)
                Total_Folder = Value * My.Settings.Price_Folder
                Total_Brut += Total_Folder
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Folder = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Folder as Integer.
#Region "[On] |2019/06/07 17h45:044| <01.00.15> <Property> <Quote> |.Quantity_Parameter()|Integer|"' (Set|Get) The Quantity_Parameter as Integer.
        Private _Quantity_Parameter As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Parameter as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:047 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Parameter as Integer.")>
        Property Quantity_Parameter() As Integer
            Get
                Return _Quantity_Parameter
            End Get
            Set(ByVal Value As Integer)
                Total_Parameter = Value * My.Settings.Price_Parameter
                Total_Brut += Total_Parameter
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Parameter = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Parameter as Integer.
#Region "[On] |2019/06/07 17h45:059| <01.00.16> <Property> <Quote> |.Quantity_Member()|Integer|"' (Set|Get) The Quantity_Member as Integer.
        Private _Quantity_Member As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_Member as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:059 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_Member as Integer.")>
        Property Quantity_Member() As Integer
            Get
                Return _Quantity_Member
            End Get
            Set(ByVal Value As Integer)
                Total_Member = Value * My.Settings.Price_Member
                Total_Brut += Total_Member
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_Member = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_Member as Integer.
#Region "[On] |2019/06/07 17h45:899| <01.00.17> <Property> <Quote> |.Quantity_LineInfo()|Integer|"' (Set|Get) The Quantity_LineInfo as Integer.
        Private _Quantity_LineInfo As Integer
        '''    <Summary>
        '''     (Set|Get) The Quantity_LineInfo as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/07 17h45:915 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Quote"), Description("(Set|Get) The Quantity_LineInfo as Integer.")>
        Property Quantity_LineInfo() As Integer
            Get
                Return _Quantity_LineInfo
            End Get
            Set(ByVal Value As Integer)
                Total_LineInfo = Value * My.Settings.Price_LineInfo
                Total_Brut += Total_LineInfo
                Montant_VAT = (Total_Brut * My.Settings.VAT) * 100
                GrandTotal_TVA = Total_Brut + Montant_VAT
                GrandTotal = Total_Brut
                _Quantity_LineInfo = Value
            End Set
        End Property
#End Region '(Set|Get) The Quantity_LineInfo as Integer.
#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()

            With Me
                .AccessModifier = AccessModifiers.Public

                .Classes = New List(Of [Class])
                .Constante = New List(Of Constante)

                .Declares = New List(Of [Declare])
                .Delegates = New List(Of [Delegate])
                .Dims = New List(Of [Dim])
                .DirectoryPath = New DirectoryInfo(My.Application.Info.DirectoryPath)

                .Enable = True
                .Enumeration = New List(Of Enumeration)
                .Event = New List(Of [Event])

                .FileC = New Fichier
                .FileF = New Fichier
                .FilePython = New Fichier
                .FileVB = New Fichier
                .FileJavaScript = New Fichier
                .Function = New List(Of [Function])

                .ID = 0
                .ImageIndex = Format.Module
                .Importation = New List(Of Import)

                .Loader = New List(Of Loader)

                .MainNode = New DevComponents.AdvTree.Node
                .ModuleName = ""
                .Modules = New List(Of [Module])
                .MustInherit = False

                .Name = ""
                Dim EStyle As New DevComponents.DotNetBar.ElementStyle(Color.White, Color.Blue)

                .Node_Class = New DevComponents.AdvTree.Node("<0> [Importation]{0}", EStyle)
                .Node_Constante = New DevComponents.AdvTree.Node("<9> [Constante]{0}", EStyle)
                .Node_Declare = New DevComponents.AdvTree.Node("<11> [Declare]{0}", EStyle)
                .Node_Delegate = New DevComponents.AdvTree.Node("<12> [Delegate]{0}", EStyle)
                .Node_Dim = New DevComponents.AdvTree.Node("<13> [Dim]{0}", EStyle)
                .Node_Enumerations = New DevComponents.AdvTree.Node("<2> [Enumerations]{0}", EStyle)
                .Node_Event = New DevComponents.AdvTree.Node("<10> [Event]{0}", EStyle)
                .Node_Function = New DevComponents.AdvTree.Node("<4> [Function]{0}", EStyle)
                .Node_Importation = New DevComponents.AdvTree.Node("<0> [Importation]{0}", EStyle)
                .Node_Loader = New DevComponents.AdvTree.Node("<7> [Loader]{0}", EStyle)
                .Node_Module = New DevComponents.AdvTree.Node("<0> [Module]{0}", EStyle)
                .Node_Properties = New DevComponents.AdvTree.Node("<1> [Properties]{0}", EStyle)
                .Node_Runtime = New DevComponents.AdvTree.Node("<6> [Runtime]{0}", EStyle)
                .Node_Structure = New DevComponents.AdvTree.Node("<2> [Structure]{0}", EStyle)
                .Node_Sub = New DevComponents.AdvTree.Node("<3> [Sub]{0}", EStyle)

                .Node_Importation.ImageIndex = 0
                .Node_Properties.ImageIndex = 1
                .Node_Enumerations.ImageIndex = 2
                .Node_Structure.ImageIndex = 3
                .Node_Sub.ImageIndex = 4
                .Node_Function.ImageIndex = 5
                .Node_Runtime.ImageIndex = 6
                .Node_Loader.ImageIndex = 7
                .Node_Class.ImageIndex = 8
                .Node_Module.ImageIndex = 8
                .Node_Constante.ImageIndex = 9
                .Node_Event.ImageIndex = 10
                .Node_Declare.ImageIndex = 11
                .Node_Delegate.ImageIndex = 12
                .Node_Dim.ImageIndex = 6

                .NotInheritable = False

                .Partial = False
                .Properties = New List(Of [Property])

                .RegionCategory = 0
                .Runtime = New List(Of Runtime)

                .Shadows = False
                .StatementFormat = Format.Module
                .Structure = New List(Of [Structure])
                .Sub = New List(Of [Sub])

                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                       "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                       "." & IIf(.ID < 10, "0" & .ID, ID)
                .Updated(Status.Online, "The test is successful.",, Now) = ""

                .C_OpenStatement = " {"
                .C_CloseStatement = " }"
                .F_OpenStatement = "def "
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Module "
                .VB_CloseStatement = "End Module"
                .Python_OpenStatement = "def "
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""
            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable]|Boolean(True))]"
        ''' <summary>
        ''' Print the statement
        ''' </summary>
        ''' <param name="Enable">This parameter will overide the Me.Enable Property! ByDefault is set on True.</param>
        Public Function PrintStatement(Optional ByVal Enable As Boolean = True) As TestItem
            Dim Result As New TestItem("Printing Module", "Printing a Module Statement")

            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable

            If Me.Enable = True Then
#Region "|StackFlow|"
#Region "|Step 01|<Formatting Nodes>"
                Dim EStyle As New DevComponents.DotNetBar.ElementStyle(Color.White, Color.Black)
                Me.MainNode = New DevComponents.AdvTree.Node(Me.Name)
                Me.Node_Importation = New DevComponents.AdvTree.Node("<0> [Importation]{" & Me.Importation.Count - 1 & "}", EStyle)
                Me.Node_Properties = New DevComponents.AdvTree.Node("<1> [Properties]{" & Me.Properties.Count - 1 & "}", EStyle)
                Me.Node_Enumerations = New DevComponents.AdvTree.Node("<2> [Enumerations]{" & Me.Enumeration.Count - 1 & "}", EStyle)
                Me.Node_Structure = New DevComponents.AdvTree.Node("<3> [Structure]{" & Me.Structure.Count - 1 & "}", EStyle)
                Me.Node_Sub = New DevComponents.AdvTree.Node("<4> [Sub]{" & Me.Sub.Count - 1 & "}", EStyle)
                Me.Node_Function = New DevComponents.AdvTree.Node("<5> [Function]{" & Me.Function.Count - 1 & "}", EStyle)
                Me.Node_Runtime = New DevComponents.AdvTree.Node("<6> [Runtime]{" & Me.Runtime.Count - 1 & "}", EStyle)
                Me.Node_Loader = New DevComponents.AdvTree.Node("<7> [Loader]{" & Me.Loader.Count - 1 & "}", EStyle)
                Me.Node_Class = New DevComponents.AdvTree.Node("<8> [Class]{" & Me.Classes.Count - 1 & "}", EStyle)
                Me.Node_Constante = New DevComponents.AdvTree.Node("<9> [Constante]{" & Me.Constante.Count - 1 & "}", EStyle)
                Me.Node_Event = New DevComponents.AdvTree.Node("<10> [Event]{" & Me.Event.Count - 1 & "}", EStyle)
                Me.Node_Declare = New DevComponents.AdvTree.Node("<11> [Declare]{" & Me.Declares.Count - 1 & "}", EStyle)
                Me.Node_Delegate = New DevComponents.AdvTree.Node("<12> [Delegate]{" & Me.Delegates.Count - 1 & "}", EStyle)
                Me.Node_Dim = New DevComponents.AdvTree.Node("<13> [Dim]{" & Me.Dims.Count - 1 & "}", EStyle)
                Me.Node_Module = New DevComponents.AdvTree.Node("<14> [Module]{" & Me.Modules.Count - 1 & "}", EStyle)
                With Me
                    .MainNode.ImageIndex = 8
                    .Node_Importation.ImageIndex = 0
                    .Node_Properties.ImageIndex = 1
                    .Node_Enumerations.ImageIndex = 2
                    .Node_Structure.ImageIndex = 3
                    .Node_Sub.ImageIndex = 4
                    .Node_Function.ImageIndex = 5
                    .Node_Runtime.ImageIndex = 6
                    .Node_Loader.ImageIndex = 7
                    .Node_Class.ImageIndex = 8
                    .Node_Module.ImageIndex = 8
                    .Node_Constante.ImageIndex = 9
                    .Node_Event.ImageIndex = 10
                    .Node_Declare.ImageIndex = 11
                    .Node_Delegate.ImageIndex = 12
                    .Node_Dim.ImageIndex = 6
                End With
#End Region
#Region "|>>|Adding To Result|<<|"
                Result.Write("Object Name :             " & VbNET.AccessModifiers_ToString(Me.AccessModifier) & " Module " & Me.Name)
                Result.Write("Author Information :      " & Me.AuthorName & "|" & Me.AuthorEmail & "|" & Me.AuthorUri)
                Result.Write("Contributor Information : " & Me.ContributorName & "|" & Me.ContributorEmail & "|" & Me.ContributorUri)
                Result.Write("Creation Date :           " & Me.CreationDate)
                Result.Write("")
                Result.Write("")
                Result.Write("|Schema|")
                Result.Write("<ID> |ObjectType |{Quantity}")
                Result.Write("<00> |Importation|{" & Me.Importation.Count - 1 & "}")
                Result.Write("<01> |Properties |{" & Me.Properties.Count - 1 & "}")
                Result.Write("<02> |Enumeration|{" & Me.Enumeration.Count - 1 & "}")
                Result.Write("<03> |Structure  |{" & Me.Structure.Count - 1 & "}")
                Result.Write("<04> |Sub        |{" & Me.Sub.Count - 1 & "}")
                Result.Write("<05> |Function   |{" & Me.Function.Count - 1 & "}")
                Result.Write("<06> |Runtime    |{" & Me.Runtime.Count - 1 & "}")
                Result.Write("<07> |Loader     |{" & Me.Loader.Count - 1 & "}")
                Result.Write("<08> |Class      |{" & Me.Classes.Count - 1 & "}")
                Result.Write("<09> |Constante  |{" & Me.Constante.Count - 1 & "}")
                Result.Write("<10> |Event      |{" & Me.Event.Count - 1 & "}")
                Result.Write("<11> |Declare    |{" & Me.Declares.Count - 1 & "}")
                Result.Write("<12> |Delegate   |{" & Me.Delegates.Count - 1 & "}")
                Result.Write("<13> |Dim        |{" & Me.Dims.Count - 1 & "}")
                Result.Write("<14> |Module     |{" & Me.Modules.Count - 1 & "}")
                Result.Write("|/Schema|")
                Result.Write("")
                Result.Write("")
#End Region
#Region "|Step 02|<Filling Nodes>"
#Region "|Step 02|<Printing> |00|Importation|"
#Region "0-<Importation>"
                If Me.Importation.Count - 1 >= 0 Then

#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<0> [Importation]{" & Me.Importation.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<0> [Importation]{" & Me.Importation.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                    Me.Print_F.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                    Me.Print_Python.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
#End Region
#Region "|PRINTING|Importation"
                    For Each Statement As VbNET.Import In Me.Importation
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Importation Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 0
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Importation.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#End Region
#Region "|Step 03|<Printing> |!|Caller|"
                Dim Vb_Caller As String = VbNET.AccessModifiers_ToString(Me.AccessModifier)
                Dim C_Caller As String = VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
                Dim F_Caller As String = VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
                Dim Python_Caller As String = "def "
                Dim Java_Caller As String = VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
#Region "<Caller>"
                If Me.Shadows = True Then
                    Vb_Caller += " Shadows "
                End If
                If Me.Partial = True Then
                    Vb_Caller += " Partial "
                End If
                If Me.MustInherit = True Then
                    Me.NotInheritable = False
                    Vb_Caller += " MustInherit "
                    C_Caller += " abstract "
                    F_Caller += " abstract "
                    Java_Caller += " abstract "

                End If
                If Me.NotInheritable = True Then
                    Me.MustInherit = False
                    Vb_Caller += " NotInheritable "
                    C_Caller += " sealed "
                    Java_Caller += " final "
                End If
                Vb_Caller += " Module " & Me.Name
                C_Caller += " class " & Me.Name & "{"
                F_Caller += " class " & Me.Name & "{"
                Java_Caller += " class " & Me.Name & "{"
                Me.Print_VB.Add(Vb_Caller)
                Me.Print_C.Add(C_Caller)
                Me.Print_F.Add(F_Caller)
                Me.Print_Python.Add(Python_Caller)
                Me.Print_JavaScript.Add(Java_Caller)
#End Region

#End Region
#Region "|Step 04|<Printing> |01|Property|"
#Region "1-<Property>"
                If Me.Properties.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<1> [Property]{" & Me.Properties.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<1> [Property]{" & Me.Properties.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
                    Me.Print_F.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
                    Me.Print_Python.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Property In Me.Properties
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 1
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Properties.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 05|<Printing> |02|Enumeration|"
#Region "2-<Enumeration>"
                If Me.Enumeration.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
                    Me.Print_F.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
                    Me.Print_Python.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Enumeration In Me.Enumeration
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 2
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Enumerations.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 04|<Printing> |03|Structure|"
#Region "3-<Structure>"
                If Me.Structure.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<3> [Structure]{" & Me.Structure.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<3> [Structure]{" & Me.Structure.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
                    Me.Print_F.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
                    Me.Print_Python.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Structure In Me.Structure
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 3
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Structure.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 05|<Printing> |04|Sub|"
#Region "4-<Sub>"
                If Me.Sub.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<4> [Sub]{" & Me.Sub.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<4> [Sub]{" & Me.Sub.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
                    Me.Print_F.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
                    Me.Print_Python.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Sub In Me.Sub
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 4
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Sub.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 06|<Printing> |05|Function|"
#Region "5-<Function>"
                If Me.Function.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<5> [Function]{" & Me.Function.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<5> [Function]{" & Me.Function.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
                    Me.Print_F.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
                    Me.Print_Python.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Function In Me.Function
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 5
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Function.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 07|<Printing> |06|Runtime|"
#Region "6-<Runtime>"
                If Me.Runtime.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<6> [Runtime]{" & Me.Runtime.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<6> [Runtime]{" & Me.Runtime.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
                    Me.Print_F.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
                    Me.Print_Python.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Runtime In Me.Runtime
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 6
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Runtime.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 08|<Printing> |07|Loader|"
#Region "7-<Loader>"
                If Me.Loader.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<7> [Loader]{" & Me.Loader.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<7> [Loader]{" & Me.Loader.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
                    Me.Print_F.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
                    Me.Print_Python.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Loader In Me.Loader
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 7
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Loader.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 09|<Printing> |08|Class|"
#Region "8-<Class>"
                If Me.Classes.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<8> [Class]{" & Me.Classes.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<8> [Class]{" & Me.Classes.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
                    Me.Print_F.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
                    Me.Print_Python.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Class In Me.Classes
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 8
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Class.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 10|<Printing> |09|Constante|"
#Region "9-<Constante>"
                If Me.Constante.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<9> [Constante]{" & Me.Constante.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<9> [Constante]{" & Me.Constante.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
                    Me.Print_F.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
                    Me.Print_Python.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Constante In Me.Constante
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 9
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Constante.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 11|<Printing> |10|Event|"
#Region "10-<Event>"
                If Me.Event.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<10> [Event]{" & Me.Event.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<10> [Event]{" & Me.Event.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
                    Me.Print_F.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
                    Me.Print_Python.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Event In Me.Event
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 10
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Event.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 12|<Printing> |11|Declare|"
#Region "11-<Declare>"
                If Me.Declares.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<11> [Declare]{" & Me.Declares.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<11> [Declare]{" & Me.Declares.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                    Me.Print_F.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                    Me.Print_Python.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Declare In Me.Declares
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 11
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Declare.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 13|<Printing> |12|Delegate|"
#Region "12-<Delegate>"
                If Me.Delegates.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<12> [Delegate]{" & Me.Delegates.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<12> [Delegate]{" & Me.Delegates.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                    Me.Print_F.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                    Me.Print_Python.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Delegate In Me.Delegates
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 12
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Delegate.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 14|<Printing> |13|Dim|"
#Region "13-<Dim>"
                If Me.Dims.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<13> [Dim]{" & Me.Dims.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<13> [Dim]{" & Me.Dims.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                    Me.Print_F.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                    Me.Print_Python.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Dim In Me.Dims
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 6
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Dim.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 15|<Printing> |14|Module|"
#Region "14-<Module>"
                If Me.Modules.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<14> [Module]{" & Me.Modules.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<14> [Module]{" & Me.Modules.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                    Me.Print_F.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                    Me.Print_Python.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Module In Me.Modules
                        Statement.PrintStatement(Me.Enable)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 8
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Module.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 17|<Printing Nodes>"
                Me.MainNode.Nodes.Add(Me.Node_Importation)
                Me.MainNode.Nodes.Add(Me.Node_Properties)
                Me.MainNode.Nodes.Add(Me.Node_Enumerations)
                Me.MainNode.Nodes.Add(Me.Node_Structure)
                Me.MainNode.Nodes.Add(Me.Node_Sub)
                Me.MainNode.Nodes.Add(Me.Node_Function)
                Me.MainNode.Nodes.Add(Me.Node_Runtime)
                Me.MainNode.Nodes.Add(Me.Node_Loader)
                Me.MainNode.Nodes.Add(Me.Node_Class)
                Me.MainNode.Nodes.Add(Me.Node_Constante)
                Me.MainNode.Nodes.Add(Me.Node_Event)
                Me.MainNode.Nodes.Add(Me.Node_Declare)
                Me.MainNode.Nodes.Add(Me.Node_Delegate)
                Me.MainNode.Nodes.Add(Me.Node_Dim)
                Me.MainNode.Nodes.Add(Me.Node_Module)

#End Region
#Region "<Closing Caller>"
                Me.Print_VB.Add("End Module")
                Me.Print_C.Add("}")
                Me.Print_F.Add("}")
                Me.Print_JavaScript.Add("}")
#End Region
#End Region
            Else
#Region "|StackFlow|"
#Region "|Step 01|<Formatting Nodes>"
                Dim EStyle As New DevComponents.DotNetBar.ElementStyle(Color.White, Color.Black)
                Me.MainNode = New DevComponents.AdvTree.Node(Me.Name)
                Me.Node_Importation = New DevComponents.AdvTree.Node("<0> [Importation]{" & Me.Importation.Count - 1 & "}", EStyle)
                Me.Node_Properties = New DevComponents.AdvTree.Node("<1> [Properties]{" & Me.Properties.Count - 1 & "}", EStyle)
                Me.Node_Enumerations = New DevComponents.AdvTree.Node("<2> [Enumerations]{" & Me.Enumeration.Count - 1 & "}", EStyle)
                Me.Node_Structure = New DevComponents.AdvTree.Node("<3> [Structure]{" & Me.Structure.Count - 1 & "}", EStyle)
                Me.Node_Sub = New DevComponents.AdvTree.Node("<4> [Sub]{" & Me.Sub.Count - 1 & "}", EStyle)
                Me.Node_Function = New DevComponents.AdvTree.Node("<5> [Function]{" & Me.Function.Count - 1 & "}", EStyle)
                Me.Node_Runtime = New DevComponents.AdvTree.Node("<6> [Runtime]{" & Me.Runtime.Count - 1 & "}", EStyle)
                Me.Node_Loader = New DevComponents.AdvTree.Node("<7> [Loader]{" & Me.Loader.Count - 1 & "}", EStyle)
                Me.Node_Class = New DevComponents.AdvTree.Node("<8> [Class]{" & Me.Classes.Count - 1 & "}", EStyle)
                Me.Node_Constante = New DevComponents.AdvTree.Node("<9> [Constante]{" & Me.Constante.Count - 1 & "}", EStyle)
                Me.Node_Event = New DevComponents.AdvTree.Node("<10> [Event]{" & Me.Event.Count - 1 & "}", EStyle)
                Me.Node_Declare = New DevComponents.AdvTree.Node("<11> [Declare]{" & Me.Declares.Count - 1 & "}", EStyle)
                Me.Node_Delegate = New DevComponents.AdvTree.Node("<12> [Delegate]{" & Me.Delegates.Count - 1 & "}", EStyle)
                Me.Node_Dim = New DevComponents.AdvTree.Node("<13> [Dim]{" & Me.Dims.Count - 1 & "}", EStyle)
                Me.Node_Module = New DevComponents.AdvTree.Node("<14> [Module]{" & Me.Modules.Count - 1 & "}", EStyle)
                With Me
                    .MainNode.ImageIndex = 8
                    .Node_Importation.ImageIndex = 0
                    .Node_Properties.ImageIndex = 1
                    .Node_Enumerations.ImageIndex = 2
                    .Node_Structure.ImageIndex = 3
                    .Node_Sub.ImageIndex = 4
                    .Node_Function.ImageIndex = 5
                    .Node_Runtime.ImageIndex = 6
                    .Node_Loader.ImageIndex = 7
                    .Node_Class.ImageIndex = 8
                    .Node_Module.ImageIndex = 8
                    .Node_Constante.ImageIndex = 9
                    .Node_Event.ImageIndex = 10
                    .Node_Declare.ImageIndex = 11
                    .Node_Delegate.ImageIndex = 12
                    .Node_Dim.ImageIndex = 6
                End With
#End Region
#Region "|>>|Adding To Result|<<|"
                Result.Write("Object Name :             " & VbNET.AccessModifiers_ToString(Me.AccessModifier) & " Module " & Me.Name)
                Result.Write("Author Information :      " & Me.AuthorName & "|" & Me.AuthorEmail & "|" & Me.AuthorUri)
                Result.Write("Contributor Information : " & Me.ContributorName & "|" & Me.ContributorEmail & "|" & Me.ContributorUri)
                Result.Write("Creation Date :           " & Me.CreationDate)
                Result.Write("")
                Result.Write("")
                Result.Write("|Schema|")
                Result.Write("<ID> |ObjectType |{Quantity}")
                Result.Write("<00> |Importation|{" & Me.Importation.Count - 1 & "}")
                Result.Write("<01> |Properties |{" & Me.Properties.Count - 1 & "}")
                Result.Write("<02> |Enumeration|{" & Me.Enumeration.Count - 1 & "}")
                Result.Write("<03> |Structure  |{" & Me.Structure.Count - 1 & "}")
                Result.Write("<04> |Sub        |{" & Me.Sub.Count - 1 & "}")
                Result.Write("<05> |Function   |{" & Me.Function.Count - 1 & "}")
                Result.Write("<06> |Runtime    |{" & Me.Runtime.Count - 1 & "}")
                Result.Write("<07> |Loader     |{" & Me.Loader.Count - 1 & "}")
                Result.Write("<08> |Class      |{" & Me.Classes.Count - 1 & "}")
                Result.Write("<09> |Constante  |{" & Me.Constante.Count - 1 & "}")
                Result.Write("<10> |Event      |{" & Me.Event.Count - 1 & "}")
                Result.Write("<11> |Declare    |{" & Me.Declares.Count - 1 & "}")
                Result.Write("<12> |Delegate   |{" & Me.Delegates.Count - 1 & "}")
                Result.Write("<13> |Dim        |{" & Me.Dims.Count - 1 & "}")
                Result.Write("<14> |Module     |{" & Me.Modules.Count - 1 & "}")
                Result.Write("|/Schema|")
                Result.Write("")
                Result.Write("")
#End Region
#Region "|Step 02|<Filling Nodes>"
#Region "|Step 02|<Printing> |00|Importation|"
#Region "0-<Importation>"
                If Me.Importation.Count - 1 >= 0 Then

#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<0> [Importation]{" & Me.Importation.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<0> [Importation]{" & Me.Importation.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                    Me.Print_F.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                    Me.Print_Python.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <0> [Importation]{" & Me.Importation.Count - 1 & "}")
#End Region
#Region "|PRINTING|Importation"
                    For Each Statement As VbNET.Import In Me.Importation
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Importation Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 0
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Importation.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#End Region
#Region "|Step 03|<Printing> |!|Caller|"
                Dim Vb_Caller As String = "'' " & VbNET.AccessModifiers_ToString(Me.AccessModifier)
                Dim C_Caller As String = "// " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
                Dim F_Caller As String = "// " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
                Dim Python_Caller As String = "// def "
                Dim Java_Caller As String = "// " & VbNET.AccessModifiers_ToString(Me.AccessModifier).ToLower
#Region "<Caller>"
                If Me.Shadows = True Then
                    Vb_Caller += " Shadows "
                End If
                If Me.Partial = True Then
                    Vb_Caller += " Partial "
                End If
                If Me.MustInherit = True Then
                    Me.NotInheritable = False
                    Vb_Caller += " MustInherit "
                    C_Caller += " abstract "
                    F_Caller += " abstract "
                    Java_Caller += " abstract "

                End If
                If Me.NotInheritable = True Then
                    Me.MustInherit = False
                    Vb_Caller += " NotInheritable "
                    C_Caller += " sealed "
                    Java_Caller += " final "
                End If
                Vb_Caller += " Module " & Me.Name
                C_Caller += " class " & Me.Name & "{"
                F_Caller += " class " & Me.Name & "{"
                Java_Caller += " class " & Me.Name & "{"
                Me.Print_VB.Add(Vb_Caller)
                Me.Print_C.Add(C_Caller)
                Me.Print_F.Add(F_Caller)
                Me.Print_Python.Add(Python_Caller)
                Me.Print_JavaScript.Add(Java_Caller)
#End Region

#End Region
#Region "|Step 04|<Printing> |01|Property|"
#Region "1-<Property>"
                If Me.Properties.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<1> [Property]{" & Me.Properties.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<1> [Property]{" & Me.Properties.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
                    Me.Print_F.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
                    Me.Print_Python.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <1> [Property]{" & Me.Properties.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Property In Me.Properties
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 1
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Properties.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 05|<Printing> |02|Enumeration|"
#Region "2-<Enumeration>"
                If Me.Enumeration.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
                    Me.Print_F.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
                    Me.Print_Python.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <2> [Enumeration]{" & Me.Enumeration.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Enumeration In Me.Enumeration
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 2
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Enumerations.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 04|<Printing> |03|Structure|"
#Region "3-<Structure>"
                If Me.Structure.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<3> [Structure]{" & Me.Structure.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<3> [Structure]{" & Me.Structure.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
                    Me.Print_F.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
                    Me.Print_Python.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <3> [Structure]{" & Me.Structure.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Structure In Me.Structure
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 3
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Structure.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 05|<Printing> |04|Sub|"
#Region "4-<Sub>"
                If Me.Sub.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<4> [Sub]{" & Me.Sub.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<4> [Sub]{" & Me.Sub.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
                    Me.Print_F.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
                    Me.Print_Python.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <4> [Sub]{" & Me.Sub.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Sub In Me.Sub
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 4
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Sub.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 06|<Printing> |05|Function|"
#Region "5-<Function>"
                If Me.Function.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<5> [Function]{" & Me.Function.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<5> [Function]{" & Me.Function.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
                    Me.Print_F.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
                    Me.Print_Python.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <5> [Function]{" & Me.Function.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Function In Me.Function
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 5
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Function.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 07|<Printing> |06|Runtime|"
#Region "6-<Runtime>"
                If Me.Runtime.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<6> [Runtime]{" & Me.Runtime.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<6> [Runtime]{" & Me.Runtime.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
                    Me.Print_F.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
                    Me.Print_Python.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <6> [Runtime]{" & Me.Runtime.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Runtime In Me.Runtime
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 6
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Runtime.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 08|<Printing> |07|Loader|"
#Region "7-<Loader>"
                If Me.Loader.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<7> [Loader]{" & Me.Loader.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<7> [Loader]{" & Me.Loader.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
                    Me.Print_F.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
                    Me.Print_Python.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <7> [Loader]{" & Me.Loader.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Loader In Me.Loader
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 7
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Loader.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 09|<Printing> |08|Class|"
#Region "8-<Class>"
                If Me.Classes.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<8> [Class]{" & Me.Classes.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<8> [Class]{" & Me.Classes.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
                    Me.Print_F.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
                    Me.Print_Python.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <8> [Class]{" & Me.Classes.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Class In Me.Classes
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 8
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Class.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 10|<Printing> |09|Constante|"
#Region "9-<Constante>"
                If Me.Constante.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<9> [Constante]{" & Me.Constante.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<9> [Constante]{" & Me.Constante.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
                    Me.Print_F.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
                    Me.Print_Python.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <9> [Constante]{" & Me.Constante.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Constante In Me.Constante
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 9
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Constante.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 11|<Printing> |10|Event|"
#Region "10-<Event>"
                If Me.Event.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<10> [Event]{" & Me.Event.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<10> [Event]{" & Me.Event.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
                    Me.Print_F.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
                    Me.Print_Python.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <10> [Event]{" & Me.Event.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Event In Me.Event
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 10
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Event.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 12|<Printing> |11|Declare|"
#Region "11-<Declare>"
                If Me.Declares.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<11> [Declare]{" & Me.Declares.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<11> [Declare]{" & Me.Declares.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                    Me.Print_F.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                    Me.Print_Python.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <11> [Declare]{" & Me.Declares.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Declare In Me.Declares
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 11
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Declare.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 13|<Printing> |12|Delegate|"
#Region "12-<Delegate>"
                If Me.Delegates.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<12> [Delegate]{" & Me.Delegates.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<12> [Delegate]{" & Me.Delegates.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                    Me.Print_F.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                    Me.Print_Python.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <12> [Delegate]{" & Me.Delegates.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Delegate In Me.Delegates
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 12
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Delegate.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 14|<Printing> |13|Dim|"
#Region "13-<Dim>"
                If Me.Dims.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<13> [Dim]{" & Me.Dims.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<13> [Dim]{" & Me.Dims.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                    Me.Print_F.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                    Me.Print_Python.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <13> [Dim]{" & Me.Dims.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Dim In Me.Dims
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 6
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Dim.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 15|<Printing> |14|Module|"
#Region "14-<Module>"
                If Me.Modules.Count - 1 >= 0 Then
#Region "<Opening Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#Region " & Space & "<14> [Module]{" & Me.Modules.Count - 1 & "}" & Space)
#End Region
                    Me.Print_VB.Add("#Region " & Space & "<14> [Module]{" & Me.Modules.Count - 1 & "}" & Space)
                    Me.Print_C.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                    Me.Print_F.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                    Me.Print_Python.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
                    Me.Print_JavaScript.Add("#region <14> [Module]{" & Me.Modules.Count - 1 & "}")
#End Region
#Region "|PRINTING|"
                    For Each Statement As VbNET.Module In Me.Modules
                        Statement.PrintStatement(False)
                        Me.Print_VB.Add(Statement.VB)
                        Me.Print_C.Add(Statement.C)
                        Me.Print_F.Add(Statement.F)
                        Me.Print_Python.Add(Statement.Python)
                        Me.Print_JavaScript.Add(Statement.JavaScript)
#Region "|>>|Adding To Node|<<|"
                        Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                        N.ImageIndex = 8
                        N.Tag = Statement
                        N.Tooltip = Statement.Description
                        Me.Node_Module.Nodes.Add(N)
#End Region
#Region "|>>|Adding To Result|<<|"
                        Result.Write(Statement.VB)
#End Region
                    Next
#End Region
#Region "<Closing Region>"
#Region "|>>|Adding To Result|<<|"
                    Result.Write("#End Region ")
#End Region
                    Me.Print_VB.Add("#End Region ")
                    Me.Print_C.Add("#end region ")
                    Me.Print_F.Add("#end region ")
                    Me.Print_Python.Add("#end region ")
                    Me.Print_JavaScript.Add("#end region ")
#End Region
                End If
#End Region
#End Region
#Region "|Step 17|<Printing Nodes>"
                Me.MainNode.Nodes.Add(Me.Node_Importation)
                Me.MainNode.Nodes.Add(Me.Node_Properties)
                Me.MainNode.Nodes.Add(Me.Node_Enumerations)
                Me.MainNode.Nodes.Add(Me.Node_Structure)
                Me.MainNode.Nodes.Add(Me.Node_Sub)
                Me.MainNode.Nodes.Add(Me.Node_Function)
                Me.MainNode.Nodes.Add(Me.Node_Runtime)
                Me.MainNode.Nodes.Add(Me.Node_Loader)
                Me.MainNode.Nodes.Add(Me.Node_Class)
                Me.MainNode.Nodes.Add(Me.Node_Constante)
                Me.MainNode.Nodes.Add(Me.Node_Event)
                Me.MainNode.Nodes.Add(Me.Node_Declare)
                Me.MainNode.Nodes.Add(Me.Node_Delegate)
                Me.MainNode.Nodes.Add(Me.Node_Dim)
                Me.MainNode.Nodes.Add(Me.Node_Module)

#End Region
#Region "<Closing Caller>"
                Me.Print_VB.Add("'' End Module")
                Me.Print_C.Add("// }")
                Me.Print_F.Add("// }")
                Me.Print_JavaScript.Add("// }")
#End Region
#End Region
            End If
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next
            Dim O_VB As New Input_Parameters("VbNET", "String", Me.VB)
            Dim O_C As New Input_Parameters("C#", "String", Me.C)
            Dim O_F As New Input_Parameters("F#", "String", Me.F)
            Dim O_Python As New Input_Parameters("Python", "String", Me.Python)
            Dim O_JavaScript As New Input_Parameters("JavaScript", "String", Me.JavaScript)
            Result.AddOutputParam("VbNET", "String", Me.VB)
            Result.AddOutputParam("C#", "String", Me.C)
            Result.AddOutputParam("F#", "String", Me.F)
            Result.AddOutputParam("Python", "String", Me.Python)
            Result.AddOutputParam("JavaScript", "String", Me.JavaScript)
            Return Result
        End Function
#End Region
#Region "<04.01.01> <Sub> <Print> [PrinStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]|Boolean(True))]"

        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub

#End Region
#End Region
#Region "<04.02> <Sub> [Add]"
#Region "<04.02.00> <Sub> <Add> [Add_Importation(Statement|VbNET.Import)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Importation(ByVal Statement As VbNET.Import)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Importation) Then
                    Me.Importation = New List(Of Import)
                End If
                For Each S As VbNET.Import In Me.Importation
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Me.Quantity_Importation += 1
                    Statement.ID = Me.Importation.Count
                    ' Log.Add(Statement.Save())
                    Me.Importation.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 0
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Importation.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Import", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Import Statement", Result, "Public Sub Add_Importation(ByVal Statement As VbNET.Import)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.01> <Sub> <Add> [Add_Property(Statement|VbNET.Property)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Property(ByVal Statement As VbNET.Property)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then

                ' Dim addit As Boolean = True
                'If Me.Properties.Count - 1 < 0 Then
                'Else
                '   Dim i As Integer = 0
                '  For Each S As VbNET.Property In Me.Properties
                ' ResultString += "     >(" & i & ") " & S.Name
                'If S.Name = Statement.Name Then
                'ResultString += "S.Name=" & S.Name & " <Duplicate> Statement.Name=" & Statement.Name
                'addit = False
                'Exit For
                'End If
                '   i += 1
                '  Next
                'End If

                'If addit = True Then
                Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                Statement.ID = Me.Properties.Count
                Me.Quantity_Property += 1
                If Not IsNothing(Statement.ParameterList) Then
                    Me.Quantity_Parameter += Statement.ParameterList.Count
                End If
                ' Log.Add(Statement.Save())
                Add_Namespace(New ReferenceCaller(Statement))
                Me.Properties.Add(Statement)
                Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                N.ImageIndex = 1
                N.Tag = Statement
                N.Tooltip = Statement.Description
                N.TagString = Statement.Description
                Me.Node_Properties.Nodes.Add(N)
                Log.AddParam("Statement", "VbNET.Property", Statement)
                ResultString += "Adding " & Statement.VB & Environment.NewLine
                'Else
                'Result = Status.Broken
                'ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine
                'MsgBox(ResultString)
                'End If
                Log.AddStep("[Class]", "Adding a new Property Statement", Result, "Public Sub Add_Property(ByVal Statement As VbNET.Property)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.02> <Sub> <Add> [Add_Enumeration(Statement|VbNET.Enumeration)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Enumeration(ByVal Statement As VbNET.Enumeration)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Enumeration) Then
                    Me.Enumeration = New List(Of VbNET.Enumeration)
                End If
                For Each S As VbNET.Enumeration In Me.Enumeration
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Enumeration.Count
                    '   Log.Add(Statement.Save())
                    Me.Enumeration.Add(Statement)
                    Me.Quantity_Enumeration += 1
                    Add_Namespace(New ReferenceCaller(Statement))
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 2
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description

                    For Each M As VbNET.Enumeration.Member In Statement.Members
                        Dim Mn As New DevComponents.AdvTree.Node(M.MemberName & " " & M.MemberValue)
                        Me.Quantity_Member += 1
                        Mn.Tooltip = M.Description
                        Mn.ImageIndex = 2
                        Mn.Tag = M
                        N.Nodes.Add(Mn)
                    Next


                    Me.Node_Enumerations.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Enumeration", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Enumeration Statement", Result, "Public Sub Add_Enumeration(ByVal Statement As VbNET.Enumeration)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.03> <Sub> <Add> [Add_Structure(Statement|VbNET.Structure)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Structure(ByVal Statement As VbNET.Structure)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Structure) Then
                    Me.Structure = New List(Of VbNET.Structure)
                End If
                For Each S As VbNET.Structure In Me.Structure
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Structure.Count
                    '     Log.Add(Statement.Save())
                    Me.Structure.Add(Statement)
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Quantity_Structure += 1
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 3
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description

                    If Statement.Property.Count - 1 >= 0 Then
                        For Each P As [Property] In Statement.Property
                            P.ParentStructure = Statement
                            Dim Str As String = ""
                            If P.Required = True Then
                                Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" & P.ReturnType
                            Else
                                Str = "[" & P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" & P.ReturnType & " = " & P.DefaultValue & "]"
                            End If
                            Me.Quantity_Property += 1
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 1
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Enumeration.Count - 1 >= 0 Then
                        For Each P As [Enumeration] In Statement.Enumeration
                            P.ParentStructure = Statement
                            Dim Str As String = ""
                            Str = P.Name & "|(" & P.Members.Count & ")"
                            If Not IsNothing(P.Members) Then
                                Me.Quantity_Member += P.Members.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Me.Quantity_Enumeration += 1
                            Nm.ImageIndex = 2
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Sub.Count - 1 >= 0 Then
                        For Each P As [Sub] In Statement.Sub
                            P.ParentStructure = Statement
                            Dim Str As String = ""
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Me.Quantity_Sub += 1
                            Nm.ImageIndex = 4
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Function.Count - 1 >= 0 Then
                        For Each P As [Function] In Statement.Function
                            P.ParentStructure = Statement
                            Me.Quantity_Function += 1
                            Dim Str As String = ""
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 5
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Runtime.Count - 1 >= 0 Then
                        For Each P As Runtime In Statement.Runtime
                            P.ParentStructure = Statement
                            Me.Quantity_Runtime += 1
                            Dim Str As String = ""
                            Str = P.Name & "|" & P.ReturnType

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 6
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Event.Count - 1 >= 0 Then
                        For Each P As [Event] In Statement.Event
                            P.ParentStructure = Statement
                            Me.Quantity_Event += 1
                            Dim Str As String = ""
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 10
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If

                    Me.Node_Structure.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Structure", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Structure Statement", Result, "Public Sub Add_Structure(ByVal Statement As VbNET.Structure)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.04> <Sub> <Add> [Add_Sub(Statement|VbNET.Sub)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Sub(ByVal Statement As VbNET.Sub)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Sub) Then
                    Me.Sub = New List(Of VbNET.Sub)
                End If
                For Each S As VbNET.Sub In Me.Sub
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Sub.Count
                    Me.Quantity_Sub += 1
                    If Not IsNothing(Statement.ParameterList) Then
                        Me.Quantity_Parameter += Statement.ParameterList.Count
                    End If
                    '     Log.Add(Statement.Save())
                    Me.Sub.Add(Statement)
                    Add_Namespace(New ReferenceCaller(Statement))
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 4
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Sub.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Sub", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Sub Statement", Result, "Public Sub Add_Sub(ByVal Statement As VbNET.Sub)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.05> <Sub> <Add> [Add_Function(Statement|VbNET.Function)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Function(ByVal Statement As VbNET.Function)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Function) Then
                    Me.Function = New List(Of VbNET.Function)
                End If
                For Each S As VbNET.Function In Me.Function
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Function.Count
                    '      Log.Add(Statement.Save())
                    If Not IsNothing(Statement.ParameterList) Then
                        Me.Quantity_Parameter += Statement.ParameterList.Count
                    End If
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Quantity_Function += 1
                    Me.Function.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 5
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Function.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Function", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Function Statement", Result, "Public Sub Add_Function(ByVal Statement As VbNET.Function)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.06> <Sub> <Add> [Add_Runtime(Statement|VbNET.Runtime)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Runtime(ByVal Statement As VbNET.Runtime)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Runtime) Then
                    Me.Runtime = New List(Of VbNET.Runtime)
                End If
                For Each S As VbNET.Runtime In Me.Runtime
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Runtime.Count
                    Me.Quantity_Runtime += 1
                    Log.Add(Statement.Save())
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Runtime.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 6
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Runtime.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Runtime", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Runtime Statement", Result, "Public Sub Add_Runtime(ByVal Statement As VbNET.Runtime)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.07> <Sub> <Add> [Add_Loader(Statement|VbNET.Loader)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Loader(ByVal Statement As VbNET.Loader)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Loader) Then
                    Me.Loader = New List(Of VbNET.Loader)
                End If
                For Each S As VbNET.Loader In Me.Loader
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    'Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Loader.Count
                    ' Log.Add(Statement.Save())
                    If Not IsNothing(Statement.ParameterList) Then
                        Me.Quantity_Parameter += Statement.ParameterList.Count
                    End If
                    Me.Quantity_Loader += 1
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Loader.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 7
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description


                    Me.Node_Loader.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Loader", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Loader Statement", Result, "Public Sub Add_Loader(ByVal Statement As VbNET.Loader)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.08> <Sub> <Add> [Add_Class(Statement|VbNET.Class)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Class(ByVal Statement As VbNET.Class)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Classes) Then
                    Me.Classes = New List(Of VbNET.Class)
                End If
                For Each S As VbNET.Class In Me.Classes
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Classes.Count
                    Me.Quantity_Class += 1
                    '      Log.Add(Statement.Save())
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Classes.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 8
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description


                    If Statement.Properties.Count - 1 >= 0 Then
                        For Each P As [Property] In Statement.Properties
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            If P.Required = True Then
                                Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" & P.ReturnType
                            Else
                                Str = "[" & P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" & P.ReturnType & " = " & P.DefaultValue & "]"
                            End If
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 1
                            Me.Quantity_Property += 1
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Enumeration.Count - 1 >= 0 Then
                        For Each P As [Enumeration] In Statement.Enumeration
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name & "|(" & P.Members.Count - 1 & ")"

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Me.Quantity_Enumeration += 1
                            If Not IsNothing(P.Members) Then
                                Me.Quantity_Member += P.Members.Count
                            End If
                            Nm.ImageIndex = 2
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Structure.Count - 1 >= 0 Then
                        For Each P As [Structure] In Statement.Structure
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 3
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            Me.Quantity_Structure += 1

                            If P.Property.Count - 1 >= 0 Then
                                For Each Pr As [Property] In P.Property
                                    Pr.ParentStructure = P
                                    Dim Str0 As String = ""
                                    If Pr.Required = True Then
                                        Str0 = Pr.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Pr.ParameterList) & ")|" & Pr.ReturnType
                                    Else
                                        Str0 = "[" & Pr.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Pr.ParameterList) & ")|" & Pr.ReturnType & " = " & P.DefaultValue & "]"
                                    End If
                                    Me.Quantity_Property += 1
                                    If Not IsNothing(Pr.ParameterList) Then
                                        Me.Quantity_Parameter += Pr.ParameterList.Count
                                    End If
                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 1
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = Pr
                                    N.Nodes.Add(Nm0)
                                Next
                            End If
                            If Statement.Enumeration.Count - 1 >= 0 Then
                                For Each Pr As [Enumeration] In Statement.Enumeration
                                    Pr.ParentStructure = P
                                    Dim Str0 As String = ""
                                    Str0 = P.Name & "|(" & Pr.Members.Count - 1 & ")"

                                    Me.Quantity_Enumeration += 1
                                    Me.Quantity_Member += Pr.Members.Count
                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 2
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = P
                                    N.Nodes.Add(Nm0)
                                Next
                            End If
                            If Statement.Sub.Count - 1 >= 0 Then
                                For Each Pr As [Sub] In Statement.Sub
                                    Pr.ParentStructure = P
                                    Dim Str0 As String = ""
                                    Str0 = Pr.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Pr.ParameterList) & ")|" '& P.ReturnType
                                    Me.Quantity_Sub += 1
                                    If Not IsNothing(Pr.ParameterList) Then
                                        Me.Quantity_Parameter += Pr.ParameterList.Count
                                    End If

                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 4
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = Pr
                                    N.Nodes.Add(Nm0)
                                Next
                            End If
                            If Statement.Function.Count - 1 >= 0 Then
                                For Each Pr As [Function] In Statement.Function
                                    Pr.ParentStructure = P
                                    Dim Str0 As String = ""
                                    Str0 = Pr.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Pr.ParameterList) & ")|" '& P.ReturnType
                                    Me.Quantity_Function += 1
                                    If Not IsNothing(Pr.ParameterList) Then
                                        Me.Quantity_Parameter += Pr.ParameterList.Count
                                    End If
                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 5
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = Pr
                                    N.Nodes.Add(Nm0)
                                Next
                            End If
                            If Statement.Runtime.Count - 1 >= 0 Then
                                For Each Pr As Runtime In Statement.Runtime
                                    Pr.ParentStructure = P
                                    Dim Str0 As String = ""
                                    Str0 = Pr.Name & "|" & Pr.ReturnType
                                    Me.Quantity_Runtime += 1

                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 6
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = P
                                    N.Nodes.Add(Nm0)
                                Next
                            End If
                            If Statement.Event.Count - 1 >= 0 Then
                                For Each Pr As [Event] In Statement.Event
                                    Pr.ParentStructure = P
                                    Me.Quantity_Event += 1
                                    Dim Str0 As String = ""
                                    Str = Pr.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Pr.ParameterList) & ")|" '& P.ReturnType
                                    Dim Nm0 As New DevComponents.AdvTree.Node(Str0)
                                    Nm0.ImageIndex = 10
                                    Nm0.Tooltip = P.Description
                                    Nm0.Tag = P
                                    N.Nodes.Add(Nm0)
                                Next
                            End If


                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Sub.Count - 1 >= 0 Then
                        For Each P As [Sub] In Statement.Sub
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            Me.Quantity_Sub += 1
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 4
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Function.Count - 1 >= 0 Then
                        For Each P As [Function] In Statement.Function
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Me.Quantity_Function += 1

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 5
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Runtime.Count - 1 >= 0 Then
                        For Each P As Runtime In Statement.Runtime
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name & "|" & P.ReturnType
                            Me.Quantity_Runtime += 1

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 6
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Loader.Count - 1 >= 0 Then
                        For Each P As Loader In Statement.Loader
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|"
                            Me.Quantity_Loader += 1
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If

                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 7
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If
                    If Statement.Event.Count - 1 >= 0 Then
                        For Each P As [Event] In Statement.Event
                            P.ParentClass = Statement
                            Dim Str As String = ""
                            Me.Quantity_Event += 1
                            Str = P.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(P.ParameterList) & ")|" '& P.ReturnType
                            If Not IsNothing(P.ParameterList) Then
                                Me.Quantity_Parameter += P.ParameterList.Count
                            End If
                            Dim Nm As New DevComponents.AdvTree.Node(Str)
                            Nm.ImageIndex = 10
                            Nm.Tooltip = P.Description
                            Nm.Tag = P
                            N.Nodes.Add(Nm)
                        Next
                    End If

                    Me.Node_Class.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Class", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Class Statement", Result, "Public Sub Add_Class(ByVal Statement As VbNET.Class)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.09> <Sub> <Add> [Add_Constante(Statement|VbNET.Constante)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Constante(ByVal Statement As VbNET.Constante)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Constante) Then
                    Me.Constante = New List(Of VbNET.Constante)
                End If
                For Each S As VbNET.Constante In Me.Constante
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Constante.Count
                    Log.Add(Statement.Save())
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Constante.Add(Statement)
                    Me.Quantity_Constante += 1
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 9
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Constante.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Constante", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Constante Statement", Result, "Public Sub Add_Constante(ByVal Statement As VbNET.Constante)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.10> <Sub> <Add> [Add_Event(Statement|VbNET.Event)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Event(ByVal Statement As VbNET.Event)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Event) Then
                    Me.Event = New List(Of VbNET.Event)
                End If
                For Each S As VbNET.Event In Me.Event
                    If S.Name = Statement.Name Then
                        addit = False

                        Exit For
                    End If
                Next
                If addit = True Then
                    Me.Quantity_Event += 1
                    If Not IsNothing(Statement.ParameterList) Then
                        Me.Quantity_Parameter += Statement.ParameterList.Count
                    End If
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Event.Count
                    Log.Add(Statement.Save())
                    Add_Namespace(New ReferenceCaller(Statement))
                    Me.Event.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 10
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Event.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Event", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Event Statement", Result, "Public Sub Add_Event(ByVal Statement As VbNET.Event)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.11> <Sub> <Add> [Add_Declare(Statement|VbNET.Declare)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Declare(ByVal Statement As VbNET.Declare)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Declares) Then
                    Me.Declares = New List(Of VbNET.Declare)
                End If
                For Each S As VbNET.Declare In Me.Declares
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Declares.Count
                    Log.Add(Statement.Save())
                    Me.Declares.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 11
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Declare.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Declare", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Declare Statement", Result, "Public Sub Add_Declare(ByVal Statement As VbNET.Declare)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.12> <Sub> <Add> [Add_Delegate(Statement|VbNET.Delegate)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Delegate(ByVal Statement As VbNET.Delegate)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Delegates) Then
                    Me.Delegates = New List(Of VbNET.Delegate)
                End If
                For Each S As VbNET.Delegate In Me.Delegates
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Delegates.Count
                    Log.Add(Statement.Save())
                    Me.Delegates.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 12
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Delegate.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Delegate", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Delegate Statement", Result, "Public Sub Add_Delegate(ByVal Statement As VbNET.Delegate)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.13> <Sub> <Add> [Add_Dim(Statement|VbNET.Dim)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Dim(ByVal Statement As VbNET.Dim)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Dims) Then
                    Me.Dims = New List(Of VbNET.Dim)
                End If
                For Each S As VbNET.Dim In Me.Dims
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.ID = Me.Dims.Count
                    '  Log.Add(Statement.Save())
                    Me.Dims.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 6
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Dim.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Dim", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Dim Statement", Result, "Public Sub Add_Dim(ByVal Statement As VbNET.Dim)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "<04.02.14> <Sub> <Add> [Add_Module(Statement|VbNET.Module)]"
        ''' <summary>
        ''' Adding a Statement
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Add_Module(ByVal Statement As VbNET.Module)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                Dim addit As Boolean = True
                If IsNothing(Me.Modules) Then
                    Me.Modules = New List(Of VbNET.Module)
                End If
                For Each S As VbNET.Module In Me.Modules
                    If S.Name = Statement.Name Then
                        addit = False
                        Exit For
                    End If
                Next
                If addit = True Then
                    Statement.XmlFile = New Fichier(Serializer.Serialize(Statement).OutputString).Target
                    Statement.ID = Me.Modules.Count
                    Log.Add(Statement.Save())
                    Me.Modules.Add(Statement)
                    Dim N As New DevComponents.AdvTree.Node(Statement.Name)
                    N.ImageIndex = 8
                    N.Tag = Statement
                    N.Tooltip = Statement.Description
                    N.TagString = Statement.Description
                    Me.Node_Module.Nodes.Add(N)
                    Log.AddParam("Statement", "VbNET.Module", Statement)
                    ResultString += "Adding " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment was not added beause it would create a duplicate! " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Adding a new Module Statement", Result, "Public Sub Add_Module(ByVal Statement As VbNET.Module)", "Add", ResultString)

            End If
            RefreshMainNode()
        End Sub
#End Region
#Region "[On] |2019/05/22 13h24:648| <04.02.15> <Sub> <> |.Add_Namespace()|Sub}|"' (Set|Get) The sub Add_Namespace.
        '''    <Summary>
        '''     (Set|Get) The sub Add_Namespace.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h25:648 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), Description("(Set|Get) The sub Add_Namespace.")>
        Public Sub Add_Namespace(ByVal Reference As ReferenceCaller)
            Dim Addit As Boolean = True
            If IsNothing(Me.Namespace) Then
                Me.Namespace = New List(Of ReferenceCaller)

            End If
            If Not IsNothing(Reference) Then
                If Me.Namespace.Count - 1 >= 0 Then
                    For i = 0 To Me.Namespace.Count - 1
                        If Me.Namespace(i).Name = Reference.Name Then
                            Addit = False
                            Exit For
                        End If
                    Next
                Else
                End If
                If Addit = True Then
                    Me.Namespace.Add(Reference)
                End If
            End If
        End Sub
#End Region '(Set|Get) The sub Add_Namespace.
#End Region
#Region "<04.03> <Sub> [Remove]"
#Region "<04.03.00> <Sub> <Add> [Remove_Importation(Statement|VbNET.Import)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Importation(ByVal Statement As VbNET.Import)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Importation) Then
                    Me.Importation = New List(Of Import)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Import = Nothing
                For Each S As VbNET.Import In Me.Importation
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Importation.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Importation.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Importation.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Import", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                    If Me.Quantity_Importation - 1 < 0 Then
                        Me.Quantity_Importation = 0
                    Else
                        Me.Quantity_Importation -= 1
                    End If

                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Import Statement", Result, "Public Sub Remove_Importation(ByVal Statement As VbNET.Import)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.01> <Sub> <Add> [Remove_Property(Statement|VbNET.Property)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Property(ByVal Statement As VbNET.Property)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Properties) Then
                    '  Me.Properties = New List(Of VbNET.Property)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Property = Nothing
                For Each S As VbNET.Property In Me.Properties
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Properties.Remove(ElementToDelete)
                    hasRemovedit = True
                    If Me.Quantity_Property - 1 < 0 Then
                        Me.Quantity_Property = 0
                    Else
                        Me.Quantity_Property -= 1
                    End If
                    If Me.Quantity_Parameter - ElementToDelete.ParameterList.Count < 0 Then
                        Me.Quantity_Parameter = 0
                    Else
                        Me.Quantity_Parameter -= ElementToDelete.ParameterList.Count
                    End If
                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Property", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Property Statement", Result, "Public Sub Remove_Property(ByVal Statement As VbNET.Property)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.02> <Sub> <Add> [Remove_Enumeration(Statement|VbNET.Enumeration)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Enumeration(ByVal Statement As VbNET.Enumeration)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Enumeration) Then
                    Me.Enumeration = New List(Of VbNET.Enumeration)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Enumeration = Nothing
                For Each S As VbNET.Enumeration In Me.Enumeration
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Enumeration - 1 < 0 Then
                            Me.Quantity_Enumeration = 0
                        Else
                            Me.Quantity_Enumeration -= 1
                        End If
                        If Me.Quantity_Member - ElementToDelete.Members.Count < 0 Then
                            Me.Quantity_Member = 0
                        Else
                            Me.Quantity_Member -= ElementToDelete.Members.Count
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Enumeration.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Enumeration", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Enumeration Statement", Result, "Public Sub Remove_Enumeration(ByVal Statement As VbNET.Enumeration)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.03> <Sub> <Add> [Remove_Structure(Statement|VbNET.Structure)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Structure(ByVal Statement As VbNET.Structure)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Structure) Then
                    Me.Structure = New List(Of VbNET.Structure)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Structure = Nothing
                For Each S As VbNET.Structure In Me.Structure
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Structure.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Structure.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True

                    If Me.Quantity_Structure - 1 < 0 Then
                        Me.Quantity_Structure = 0
                    Else
                        Me.Quantity_Structure -= 1
                    End If
                    For Each EnumE As VbNET.Enumeration In Statement.Enumeration
                        If Me.Quantity_Enumeration - 1 < 0 Then
                            Me.Quantity_Enumeration = 0
                        Else
                            Me.Quantity_Enumeration -= 1
                        End If
                        If Me.Quantity_Member - EnumE.Members.Count < 0 Then
                            Me.Quantity_Member = 0
                        Else
                            Me.Quantity_Member -= EnumE.Members.Count
                        End If
                    Next
                    For Each PropE As VbNET.Property In Statement.Property
                        If Me.Quantity_Property - 1 < 0 Then
                            Me.Quantity_Property = 0
                        Else
                            Me.Quantity_Property -= 1
                        End If
                        If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= PropE.ParameterList.Count
                        End If
                    Next
                    For Each PropE As VbNET.Sub In Statement.Sub
                        If Me.Quantity_Sub - 1 < 0 Then
                            Me.Quantity_Sub = 0
                        Else
                            Me.Quantity_Sub -= 1
                        End If
                        If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= PropE.ParameterList.Count
                        End If
                    Next
                    For Each PropE As VbNET.Function In Statement.Function
                        If Me.Quantity_Function - 1 < 0 Then
                            Me.Quantity_Function = 0
                        Else
                            Me.Quantity_Function -= 1
                        End If
                        If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= PropE.ParameterList.Count
                        End If
                    Next
                    For Each PropE As VbNET.Runtime In Statement.Runtime
                        If Me.Quantity_Runtime - 1 < 0 Then
                            Me.Quantity_Runtime = 0
                        Else
                            Me.Quantity_Runtime -= 1
                        End If
                    Next
                    For Each PropE As VbNET.Event In Statement.Event
                        If Me.Quantity_Event - 1 < 0 Then
                            Me.Quantity_Event = 0
                        Else
                            Me.Quantity_Event -= 1
                        End If

                    Next


                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Structure", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Structure Statement", Result, "Public Sub Remove_Structure(ByVal Statement As VbNET.Structure)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.04> <Sub> <Add> [Remove_Sub(Statement|VbNET.Sub)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Sub(ByVal Statement As VbNET.Sub)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Sub) Then
                    Me.Sub = New List(Of VbNET.Sub)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Sub = Nothing
                For Each S As VbNET.Sub In Me.Sub
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Sub - 1 < 0 Then
                            Me.Quantity_Sub = 0
                        Else
                            Me.Quantity_Sub -= 1
                        End If
                        If Me.Quantity_Parameter - S.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= S.ParameterList.Count
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Sub.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Sub.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Sub", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Sub Statement", Result, "Public Sub Remove_Sub(ByVal Statement As VbNET.Sub)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.05> <Sub> <Add> [Remove_Function(Statement|VbNET.Function)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Function(ByVal Statement As VbNET.Function)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Function) Then
                    Me.Function = New List(Of VbNET.Function)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Function = Nothing
                For Each S As VbNET.Function In Me.Function
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Function - 1 < 0 Then
                            Me.Quantity_Function = 0
                        Else
                            Me.Quantity_Function -= 1
                        End If
                        If Me.Quantity_Parameter - S.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= S.ParameterList.Count
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Function.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Function.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Function.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Function", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Function Statement", Result, "Public Function Remove_Function(ByVal Statement As VbNET.Function)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.06> <Sub> <Add> [Remove_Runtime(Statement|VbNET.Runtime)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Runtime(ByVal Statement As VbNET.Runtime)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Runtime) Then
                    Me.Runtime = New List(Of VbNET.Runtime)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Runtime = Nothing
                For Each S As VbNET.Runtime In Me.Runtime
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Runtime.Remove(ElementToDelete)
                    If Me.Quantity_Runtime - 1 < 0 Then
                        Me.Quantity_Runtime = 0
                    Else
                        Me.Quantity_Runtime -= 1
                    End If
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Runtime", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Runtime Statement", Result, "Public Runtime Remove_Runtime(ByVal Statement As VbNET.Runtime)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.07> <Sub> <Add> [Remove_Loader(Statement|VbNET.Loader)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Loader(ByVal Statement As VbNET.Loader)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Loader) Then
                    Me.Loader = New List(Of VbNET.Loader)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Loader = Nothing
                For Each S As VbNET.Loader In Me.Loader
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Loader - 1 < 0 Then
                            Me.Quantity_Loader = 0
                        Else
                            Me.Quantity_Loader -= 1
                        End If
                        If Me.Quantity_Parameter - S.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= S.ParameterList.Count
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Loader.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Loader", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Loader Statement", Result, "Public Loader Remove_Loader(ByVal Statement As VbNET.Loader)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.08> <Sub> <Add> [Remove_Class(Statement|VbNET.Class)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Class(ByVal Statement As VbNET.Class)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Classes) Then
                    Me.Classes = New List(Of VbNET.Class)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Class = Nothing
                For Each S As VbNET.Class In Me.Classes
                    If S.Name = Statement.Name Then

                        If Me.Quantity_Class - 1 < 0 Then
                            Me.Quantity_Class = 0
                        Else
                            Me.Quantity_Class -= 1
                        End If
                        For Each EnumE As VbNET.Import In S.Importation
                            If Me.Quantity_Importation - 1 < 0 Then
                                Me.Quantity_Importation = 0
                            Else
                                Me.Quantity_Importation -= 1
                            End If

                        Next
                        For Each EnumE As VbNET.Enumeration In S.Enumeration
                            If Me.Quantity_Enumeration - 1 < 0 Then
                                Me.Quantity_Enumeration = 0
                            Else
                                Me.Quantity_Enumeration -= 1
                            End If
                            If Me.Quantity_Member - EnumE.Members.Count < 0 Then
                                Me.Quantity_Member = 0
                            Else
                                Me.Quantity_Member -= EnumE.Members.Count
                            End If
                        Next
                        For Each PropE As VbNET.Property In S.Properties
                            If Me.Quantity_Property - 1 < 0 Then
                                Me.Quantity_Property = 0
                            Else
                                Me.Quantity_Property -= 1
                            End If
                            If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                                Me.Quantity_Parameter = 0
                            Else
                                Me.Quantity_Parameter -= PropE.ParameterList.Count
                            End If
                        Next
                        For Each PropE As VbNET.Sub In S.Sub
                            If Me.Quantity_Sub - 1 < 0 Then
                                Me.Quantity_Sub = 0
                            Else
                                Me.Quantity_Sub -= 1
                            End If
                            If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                                Me.Quantity_Parameter = 0
                            Else
                                Me.Quantity_Parameter -= PropE.ParameterList.Count
                            End If
                        Next
                        For Each PropE As VbNET.Function In S.Function
                            If Me.Quantity_Function - 1 < 0 Then
                                Me.Quantity_Function = 0
                            Else
                                Me.Quantity_Function -= 1
                            End If
                            If Me.Quantity_Parameter - PropE.ParameterList.Count < 0 Then
                                Me.Quantity_Parameter = 0
                            Else
                                Me.Quantity_Parameter -= PropE.ParameterList.Count
                            End If
                        Next
                        For Each PropE As VbNET.Runtime In S.Runtime
                            If Me.Quantity_Runtime - 1 < 0 Then
                                Me.Quantity_Runtime = 0
                            Else
                                Me.Quantity_Runtime -= 1
                            End If
                        Next
                        For Each PropE As VbNET.Event In S.Event
                            If Me.Quantity_Event - 1 < 0 Then
                                Me.Quantity_Event = 0
                            Else
                                Me.Quantity_Event -= 1
                            End If

                        Next
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Classes.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Class", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Class Statement", Result, "Public Class Remove_Class(ByVal Statement As VbNET.Class)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.09> <Sub> <Add> [Remove_Constante(Statement|VbNET.Constante)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Constante(ByVal Statement As VbNET.Constante)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Constante) Then
                    Me.Constante = New List(Of VbNET.Constante)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Constante = Nothing
                For Each S As VbNET.Constante In Me.Constante
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Constante - 1 < 0 Then
                            Me.Quantity_Constante = 0
                        Else
                            Me.Quantity_Constante -= 1
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Constante.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Constante", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Constante Statement", Result, "Public Constante Remove_Constante(ByVal Statement As VbNET.Constante)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.10> <Sub> <Add> [Remove_Event(Statement|VbNET.Event)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Event(ByVal Statement As VbNET.Event)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Event) Then
                    Me.Event = New List(Of VbNET.Event)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Event = Nothing
                For Each S As VbNET.Event In Me.Event
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        If Me.Quantity_Event - 1 < 0 Then
                            Me.Quantity_Event = 0
                        Else
                            Me.Quantity_Event -= 1
                        End If
                        If Me.Quantity_Parameter - S.ParameterList.Count < 0 Then
                            Me.Quantity_Parameter = 0
                        Else
                            Me.Quantity_Parameter -= S.ParameterList.Count
                        End If
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Event.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Event", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Event Statement", Result, "Public Event Remove_Event(ByVal Statement As VbNET.Event)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.11> <Sub> <Add> [Remove_Declare(Statement|VbNET.Declare)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Declare(ByVal Statement As VbNET.Declare)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Declares) Then
                    Me.Declares = New List(Of VbNET.Declare)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Declare = Nothing
                For Each S As VbNET.Declare In Me.Declares
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Declares.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Declare", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Declare Statement", Result, "Public Declare Remove_Declare(ByVal Statement As VbNET.Declare)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.12> <Sub> <Add> [Remove_Delegate(Statement|VbNET.Delegate)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Delegate(ByVal Statement As VbNET.Delegate)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Delegates) Then
                    Me.Delegates = New List(Of VbNET.Delegate)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Delegate = Nothing
                For Each S As VbNET.Delegate In Me.Delegates
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Delegates.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Delegate", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Delegate Statement", Result, "Public Delegate Remove_Delegate(ByVal Statement As VbNET.Delegate)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.13> <Sub> <Add> [Remove_Dim(Statement|VbNET.Dim)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Dim(ByVal Statement As VbNET.Dim)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Dims) Then
                    Me.Dims = New List(Of VbNET.Dim)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Dim = Nothing
                For Each S As VbNET.Dim In Me.Dims
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Dims.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Dim", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Dim Statement", Result, "Public Dim Remove_Dim(ByVal Statement As VbNET.Dim)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "<04.03.14> <Sub> <Add> [Remove_Module(Statement|VbNET.Module)]"
        ''' <summary>
        ''' Remove a Statement from List And Node
        ''' </summary>
        ''' <param name="Statement"></param>
        Public Sub Remove_Module(ByVal Statement As VbNET.Module)
            Dim Result As Status = Status.Online
            Dim ResultString As String = ""
            If Not IsNothing(Statement) Then
                If IsNothing(Me.Modules) Then
                    Me.Modules = New List(Of VbNET.Module)
                End If
                Dim hasRemovedit As Boolean = False
                Dim hasRemoveNode As Boolean = False
                Dim ElementToDelete As VbNET.Module = Nothing
                For Each S As VbNET.Module In Me.Modules
                    If S.Name = Statement.Name Then
                        ElementToDelete = S
                        Exit For
                    End If
                Next
                If Not IsNothing(ElementToDelete) Then
                    Me.Modules.Remove(ElementToDelete)
                    hasRemovedit = True

                End If
                Dim NodeToDelete As DevComponents.AdvTree.Node = Nothing
                For Each N As DevComponents.AdvTree.Node In Me.Node_Properties.Nodes
                    If N.Text = Statement.Name Then
                        NodeToDelete = N
                        Exit For
                    End If
                Next
                If Not IsNothing(NodeToDelete) Then
                    Me.Node_Properties.Nodes.Remove(NodeToDelete)
                    hasRemoveNode = True
                End If

                If hasRemoveNode = True And hasRemovedit = True Then
                    Log.AddParam("Statement", "VbNET.Module", Statement)
                    ResultString += "Removing " & Statement.VB & Environment.NewLine
                Else
                    Result = Status.Broken
                    ResultString += "The statment could not be removed " & Statement.VB & Environment.NewLine

                End If
                Log.AddStep("[Class]", "Removing Module Statement", Result, "Public Module Remove_Module(ByVal Statement As VbNET.Module)", "Remove", ResultString)

            End If

        End Sub
#End Region
#Region "[On] |2019/05/22 13h24:648| <04.03.15> <Sub> <> |.Remove_Namespace()|Sub}|"' (Set|Get) The sub Remove_Namespace.
        '''    <Summary>
        '''     (Set|Get) The sub Remove_Namespace.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h28:238 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), Description("(Set|Get) The sub Remove_Namespace.")>
        Public Sub Remove_Namespace(ByVal Reference As ReferenceCaller)
            Dim ElementToDelete As ReferenceCaller = Nothing
            If Not IsNothing(Reference) Then
                If Me.Namespace.Count - 1 >= 0 Then
                    For i = 0 To Me.Namespace.Count - 1
                        If Me.Namespace(i).Name = Reference.Name Then
                            ElementToDelete = Me.Namespace(i)
                            Exit For
                        End If
                    Next
                Else
                End If
                If Not IsNothing(ElementToDelete) Then
                    Try
                        Me.Namespace.Remove(ElementToDelete)
                    Catch ex As Exception

                    End Try
                End If
            End If
        End Sub
#End Region '(Set|Get) The sub Remove_Namespace.
#End Region
#Region "<04.04> <Sub> [Refresh]"
#Region "<04.04.00> <Sub> <Refresh> [RefreshMainNode]"
        Public Sub RefreshMainNode()
            MainNode = New DevComponents.AdvTree.Node(Me.ModuleName)
            MainNode.ImageIndex = 8
            MainNode.Nodes.Clear()
            Node_Importation.Nodes.Clear()

            Node_Importation.Text = "|0| Importation {" & Me.Importation.Count & "}"
            Node_Properties.Text = "|1| Property {" & Me.Properties.Count & "}"
            Node_Enumerations.Text = "|2| Enumeration {" & Me.Enumeration.Count & "}"
            Node_Structure.Text = "|3| Structure {" & Me.Structure.Count & "}"
            Node_Sub.Text = "|4| Sub {" & Me.Sub.Count & "}"
            Node_Function.Text = "|5| Function {" & Me.Function.Count & "}"
            Node_Runtime.Text = "|6| Runtime {" & Me.Runtime.Count & "}"
            Node_Loader.Text = "|7| Loader {" & Me.Loader.Count & "}"
            Node_Class.Text = "|8| Class {" & Me.Classes.Count & "}"
            Node_Constante.Text = "|9| Constante {" & Me.Constante.Count & "}"
            Node_Event.Text = "|10| Event {" & Me.Event.Count & "}"

            For Each Statement As VbNET.Import In Me.Importation
                Dim N As New DevComponents.AdvTree.Node(Statement.ToString)
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Importation.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Importation)

            Node_Properties.Nodes.Clear()
            For Each Statement As VbNET.Property In Me.Properties
                Dim Str As String = ""
                If Statement.Required = True Then
                    Str = (Statement.Name & "|" & Statement.ReturnType & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")")
                Else
                    Str = ("[" & Statement.Name & "]|" & Statement.ReturnType & "{" & Statement.DefaultValue & "} " & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")")
                End If
                Dim N As New DevComponents.AdvTree.Node(Str)
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Properties.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Properties)

            Node_Enumerations.Nodes.Clear()
            For Each Statement As VbNET.Enumeration In Me.Enumeration
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "|{" & Statement.Members.Count & "} " & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ") ")
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Enumerations.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Enumerations)

            Node_Structure.Nodes.Clear()
            For Each Statement As VbNET.Structure In Me.Structure
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "|{" & Statement.Statements.Count & "}" & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")")
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Structure.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Structure)

            Node_Sub.Nodes.Clear()

            For Each Statement As VbNET.Sub In Me.Sub
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Statement.ParameterList) & ")" & "|{" & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")" & "}")
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Sub.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Sub)

            Node_Function.Nodes.Clear()
            For Each Statement As VbNET.Function In Me.Function
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Statement.ParameterList) & ")" & "|" & Statement.ReturnType & "{" & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")" & "}")
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Function.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Function)

            Node_Runtime.Nodes.Clear()
            For Each Statement As VbNET.Runtime In Me.Runtime
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "|" & Statement.ReturnType)
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Runtime.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Runtime)


            Node_Loader.Nodes.Clear()
            For Each Statement As VbNET.Loader In Me.Loader
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "(" & InnerStatement.ParameterList_Statement.PrintCallRegion(Statement.ParameterList) & ")" & "{" & " Lines(" & FormatString_ToLines(Statement.VB).Count - 1 & ")" & "}")
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Loader.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Loader)

            Node_Class.Nodes.Clear()
            For Each Statement As VbNET.Class In Me.Classes
                Statement.RefreshMainNode()
                Node_Class.Nodes.Add(Statement.MainNode)
            Next
            MainNode.Nodes.Add(Node_Class)

            Node_Constante.Nodes.Clear()
            For Each Statement As VbNET.Constante In Me.Constante
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "|" & Statement.DefaultValue)
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Constante.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Constante)

            Node_Event.Nodes.Clear()
            For Each Statement As VbNET.Event In Me.Event
                Dim N As New DevComponents.AdvTree.Node(Statement.Name & "|" & Statement.DefaultValue)
                N.ImageIndex = Statement.ImageIndex
                N.Tag = Statement
                Node_Event.Nodes.Add(N)
            Next
            MainNode.Nodes.Add(Node_Event)
        End Sub

#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Module]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String = My.Application.Info.DirectoryPath & "\Module\" & Statement.Name & ".Module"
                    If Not IO.Directory.Exists(My.Application.Info.DirectoryPath & "\Module") Then
                        IO.Directory.CreateDirectory(My.Application.Info.DirectoryPath & "\Module")
                    End If
                    Dim Test As New StreamWriter(Path)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(Path)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
                ' Dim XmlTool As New Xml.Serialization.XmlSerializer(ModuleStatement.GetType())

            End If
            Return Result
        End Function
        ''' <summary>
        ''' Save Statement into a File with Xml Format.
        ''' </summary>
        ''' <param name="Statement"></param>
        ''' <returns></returns>
        Public Shared Function Serialization(ByVal Statement As [Module],
                                             Optional ByVal Directory As IO.DirectoryInfo = Nothing) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Try
                    Dim XmlTool As New Xml.Serialization.XmlSerializer(Statement.GetType)
                    Dim Path As String
                    Dim FilePath As String = ""
                    If Directory.Exists Then
                        Path = Directory.FullName
                        FilePath = Directory.FullName & "\" & Statement.Name & ".Module"
                    Else
                        Path = My.Application.Info.DirectoryPath & "\Module"
                        FilePath = My.Application.Info.DirectoryPath & "\Module\" & Statement.Name & ".Module"
                    End If
                    If Not IO.Directory.Exists(Path) Then
                        IO.Directory.CreateDirectory(Path)
                    End If
                    Dim Test As New StreamWriter(FilePath)
                    XmlTool.Serialize(Test, Statement)
                    Result = New Fichier(FilePath)
                Catch ex As Exception
                    MsgBox(ex.Message)
                End Try
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Module]
            Dim Result As New [Module]
            Dim Serializer As New XmlSerializer(GetType([Module]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Result.XmlFile = File.Target
            Return Result
        End Function
#End Region
#Region "<05.01> <Function> [Internal]"
#Region "<05.01.00> <Function> <Internal> [Open(File|String)|TestItem]"
        ''' <summary>
        ''' Open file path
        ''' </summary>
        ''' <param name="FilePath"></param>
        ''' <returns></returns>
        Public Function Open(ByVal FilePath As String) As TestItem
            Dim Result As New TestItem("Opening", "Opening a new FilePath of Type Module.")
            Result.WriteToHypothesis("Question > The file exist?")
            Result.Input = New Fichier(FilePath)
            If IO.File.Exists(FilePath) Then
                Result.WriteToHypothesis("Answer < Yes")
                Result.WriteToHypothesis("Question > Is the file type coherent?")
                Try
                    Dim Temp As New VbNET.[Module]
                    Temp = VbNET.[Module].Deserialize(New Fichier(FilePath))
                    Result.WriteToHypothesis("Answer < Yes")
                    With Me
                        .AccessModifier = Temp.AccessModifier
                        .AttributeList = New Attributelist(Temp.Category, Temp.Description, Temp.DefaultValue, Temp.Browsable, Temp.Deserializable, Temp.Editor,
                                                        Temp.Serializable, Temp.NonSerialized, Temp.RelatedImageList, Temp.XmlRoot, Temp.XmlIgnore, Temp.XmlInclude, Temp.Custom, Temp.DllImport)
                        .AuthorEmail = Temp.AuthorEmail
                        .AuthorName = Temp.AuthorName
                        .AuthorUri = Temp.AuthorUri

                        .Browsable = Temp.Browsable

                        .C = Temp.C
                        .Category = Temp.Category
                        .Classes = Temp.Classes
                        .Constante = Temp.Constante
                        .ContributorEmail = Temp.ContributorEmail
                        .ContributorName = Temp.ContributorName
                        .ContributorUri = Temp.ContributorUri
                        .Custom = Temp.Custom
                        .CustomProperty = Temp.CustomProperty

                        .DefaultValue = Temp.DefaultValue
                        .Description = Temp.Description
                        .Deserializable = Temp.Deserializable
                        .DirectoryPath = Temp.DirectoryPath
                        .DllImport = Temp.DllImport

                        .Editor = Temp.Editor
                        .Enable = Temp.Enable
                        .Enumeration = Temp.Enumeration
                        .Event = Temp.Event
                        .Example = Temp.Example

                        .F = Temp.F
                        .FileC = Temp.FileC
                        .FileF = Temp.FileF
                        .FilePython = Temp.FilePython
                        .FileVB = Temp.FileVB
                        .Function = Temp.Function

                        .ID = Temp.ID
                        .ImageIndex = Temp.ImageIndex
                        .Importation = Temp.Importation

                        .JavaScript = Temp.JavaScript

                        .Loader = Temp.Loader

                        .MainNode = Temp.MainNode
                        .ModuleName = Temp.ModuleName
                        .MustInherit = Temp.MustInherit

                        .Name = Temp.Name
                        .Node_Class = Temp.Node_Class
                        .Node_Constante = Temp.Node_Constante
                        .Node_Enumerations = Temp.Node_Enumerations
                        .Node_Event = Temp.Node_Event
                        .Node_Function = Temp.Node_Function
                        .Node_Importation = Temp.Node_Importation
                        .Node_Loader = Temp.Node_Loader
                        .Node_Properties = Temp.Node_Properties
                        .Node_Runtime = Temp.Node_Runtime
                        .Node_Structure = Temp.Node_Structure
                        .Node_Sub = Temp.Node_Sub
                        .NonSerialized = Temp.NonSerialized
                        .Note = Temp.Note
                        .NotInheritable = Temp.NotInheritable

                        .Partial = Temp.Partial
                        .Params = Temp.Params
                        .Print_C = Temp.Print_C
                        .Print_F = Temp.Print_F
                        .Print_JavaScript = Temp.Print_JavaScript
                        .Print_Python = Temp.Print_Python
                        .Print_VB = Temp.Print_VB
                        .Properties = Temp.Properties
                        .Published = Temp.Published
                        .Python = Temp.Python

                        .RegionCategory = Temp.RegionCategory
                        .RegionCode = Temp.RegionCode
                        .RelatedImageList = Temp.RelatedImageList
                        .Remarks = Temp.Remarks
                        .Rights = Temp.Rights
                        .Runtime = Temp.Runtime

                        .See = Temp.See
                        .SeeAlso = Temp.SeeAlso
                        .Serializable = Temp.Serializable
                        .Shadows = Temp.Shadows
                        .Statement = Temp.Statement
                        .StatementFormat = Temp.StatementFormat
                        .Statements = Temp.Statements
                        .Status = Temp.Status
                        .Structure = Temp.Structure
                        .Sub = Temp.Sub
                        .Summary = Temp.Summary

                        .Tag = Temp.Tag
                        .Title = Temp.Title
                        .Tooltip = Temp.Tooltip

                        .Updated = Temp.Updated
                        .Usage = Temp.Usage

                        .Variables = Temp.Variables
                        .VB = Temp.VB

                        .XmlFile = Temp.XmlFile
                        .XmlIgnore = Temp.XmlIgnore
                        .XmlInclude = Temp.XmlInclude
                        .XmlRoot = Temp.XmlRoot

                    End With
                    Result.Output = New VbNET.[Module](Temp.Name)
                    Result.Status = Status.Finished
                Catch ex As Exception
                    Result.Status = Status.Broken
                    Result.WriteToHypothesis("Answer < No")
                    Result.Why += Format_Error(ex)
                End Try
            Else
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
            End If
            Return Result
        End Function
#End Region
#Region "<05.01.01> <Function> <Internal> [Save([DirPath]|DirectoryInfo(Nothing))|TestItem]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="DirPath"></param>
        ''' <returns></returns>
        Public Function Save(Optional ByVal DirPath As IO.DirectoryInfo = Nothing) As TestItem
            Dim Result As New TestItem("Save", "Save the Statement into ")
            Result.WriteToHypothesis("Question > Is the Directory exisiting?")
            If Not IsNothing(DirPath) Then
                If DirPath.Exists = False Then
                    Result.WriteToHypothesis("Answer < No")
                    Result.WriteToHypothesis("Command |>= Creation of new Directory {" & DirPath.FullName & "}")
                    IO.Directory.CreateDirectory(DirPath.FullName)
                Else
                    Result.WriteToHypothesis("Answer < Yes")
                End If
            End If

            Result.WriteToHypothesis("Command |>= Saving the file.")
            Result.WriteToHypothesis("Question > Has the command completed correctly?")
            Result.Input = Me
            Try
                Dim Fi As New Fichier
                Fi = VbNET.[Module].Serialization(Me, DirPath)
                Result.Output = Fi
                If Fi.Exists Then
                    Result.WriteToHypothesis("Answer < Yes")
                    Result.Status = Status.Finished
                Else
                    Result.WriteToHypothesis("Answer < No")
                End If
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.WriteToHypothesis("Answer < No")
                Result.Why += Format_Error(ex)
            End Try
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02> <Function> [Select]"
#Region "<05.02.00> <Function> <Select> [Importation]"
#Region "<05.02.00.00> <Function> <Select> <Importation> [SelectImportation(ID|Integer)|VbNET.Import]"
        ''' <summary>
        ''' Select an Importation Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectImportation(ByVal ID As Integer) As VbNET.Import
            Dim Result As VbNET.Import = Nothing
            For Each S As VbNET.Import In Me.Importation
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Importation Statement by ID", Status.Online, "Public Function SelectImportation(ByVal ID As Integer) As VbNET.Import", "SelectImportation", ID)
            Else
                Log.AddStep("[Module]", "Select an Importation Statement by ID", Status.Broken, "Public Function SelectImportation(ByVal ID As Integer) As VbNET.Import", "SelectImportation", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.00.01> <Function> <Select> <Importation> [SelectImportation(Name|String)|VbNET.Import]"
        ''' <summary>
        ''' Select an Importation Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectImportation(ByVal Name As String) As VbNET.Import
            Dim Result As VbNET.Import = Nothing
            For Each S As VbNET.Import In Me.Importation
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Importation Statement by Name", Status.Online, "Public Function SelectImportation(ByVal Name As String) As VbNET.Import", "SelectImportation", Name)
            Else
                Log.AddStep("[Module]", "Select an Importation Statement by Name", Status.Broken, "Public Function SelectImportation(ByVal Name As String) As VbNET.Import", "SelectImportation", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.01> <Function> <Select> [Property]"
#Region "<05.02.01.00> <Function> <Select> <Property> [SelectProperty(ID|Integer)|VbNET.Property]"
        ''' <summary>
        ''' Select an Property Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectProperty(ByVal ID As Integer) As VbNET.Property
            Dim Result As VbNET.Property = Nothing
            For Each S As VbNET.Property In Me.Properties
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Property Statement by ID", Status.Online, "Public Function SelectProperty(ByVal ID As Integer) As VbNET.Property", "SelectProperty", ID)
            Else
                Log.AddStep("[Module]", "Select an Property Statement by ID", Status.Broken, "Public Function SelectProperty(ByVal ID As Integer) As VbNET.Property", "SelectProperty", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.01.01> <Function> <Select> <Property> [SelectProperty(Name|String)|VbNET.Property]"
        ''' <summary>
        ''' Select an Property Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectProperty(ByVal Name As String) As VbNET.Property
            Dim Result As VbNET.Property = Nothing
            For Each S As VbNET.Property In Me.Properties
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Property Statement by Name", Status.Online, "Public Function SelectProperty(ByVal Name As String) As VbNET.Property", "SelectProperty", Name)
            Else
                Log.AddStep("[Module]", "Select an Property Statement by Name", Status.Broken, "Public Function SelectProperty(ByVal Name As String) As VbNET.Property", "SelectProperty", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.02> <Function> <Select> [Enumeration]"
#Region "<05.02.02.00> <Function> <Select> <Enumeration> [SelectEnumeration(ID|Integer)|VbNET.Enumeration]"
        ''' <summary>
        ''' Select an Enumeration Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectEnumeration(ByVal ID As Integer) As VbNET.Enumeration
            Dim Result As VbNET.Enumeration = Nothing
            For Each S As VbNET.Enumeration In Me.Enumeration
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Enumeration Statement by ID", Status.Online, "Public Function SelectEnumeration(ByVal ID As Integer) As VbNET.Enumeration", "SelectEnumeration", ID)
            Else
                Log.AddStep("[Module]", "Select an Enumeration Statement by ID", Status.Broken, "Public Function SelectEnumeration(ByVal ID As Integer) As VbNET.Enumeration", "SelectEnumeration", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.02.01> <Function> <Select> <Enumeration> [SelectEnumeration(Name|String)|VbNET.Enumeration]"
        ''' <summary>
        ''' Select an Enumeration Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectEnumeration(ByVal Name As String) As VbNET.Enumeration
            Dim Result As VbNET.Enumeration = Nothing
            For Each S As VbNET.Enumeration In Me.Enumeration
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Enumeration Statement by Name", Status.Online, "Public Function SelectEnumeration(ByVal Name As String) As VbNET.Enumeration", "SelectEnumeration", Name)
            Else
                Log.AddStep("[Module]", "Select an Enumeration Statement by Name", Status.Broken, "Public Function SelectEnumeration(ByVal Name As String) As VbNET.Enumeration", "SelectEnumeration", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.03> <Function> <Select> [Structure]"
#Region "<05.02.03.00> <Function> <Select> <Structure> [SelectStructure(ID|Integer)|VbNET.Structure]"
        ''' <summary>
        ''' Select an Structure Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectStructure(ByVal ID As Integer) As VbNET.Structure
            Dim Result As VbNET.Structure = Nothing
            For Each S As VbNET.Structure In Me.Structure
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Structure Statement by ID", Status.Online, "Public Function SelectStructure(ByVal ID As Integer) As VbNET.Structure", "SelectStructure", ID)
            Else
                Log.AddStep("[Module]", "Select an Structure Statement by ID", Status.Broken, "Public Function SelectStructure(ByVal ID As Integer) As VbNET.Structure", "SelectStructure", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.03.01> <Function> <Select> <Structure> [SelectStructure(Name|String)|VbNET.Structure]"
        ''' <summary>
        ''' Select an Structure Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectStructure(ByVal Name As String) As VbNET.Structure
            Dim Result As VbNET.Structure = Nothing
            For Each S As VbNET.Structure In Me.Structure
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Structure Statement by Name", Status.Online, "Public Function SelectStructure(ByVal Name As String) As VbNET.Structure", "SelectStructure", Name)
            Else
                Log.AddStep("[Module]", "Select an Structure Statement by Name", Status.Broken, "Public Function SelectStructure(ByVal Name As String) As VbNET.Structure", "SelectStructure", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.04> <Function> <Select> [Sub]"
#Region "<05.02.04.00> <Function> <Select> <Sub> [SelectSub(ID|Integer)|VbNET.Sub]"
        ''' <summary>
        ''' Select an Sub Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectSub(ByVal ID As Integer) As VbNET.Sub
            Dim Result As VbNET.Sub = Nothing
            For Each S As VbNET.Sub In Me.Sub
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Sub Statement by ID", Status.Online, "Public Function SelectSub(ByVal ID As Integer) As VbNET.Sub", "SelectSub", ID)
            Else
                Log.AddStep("[Module]", "Select an Sub Statement by ID", Status.Broken, "Public Function SelectSub(ByVal ID As Integer) As VbNET.Sub", "SelectSub", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.04.01> <Function> <Select> <Sub> [SelectSub(Name|String)|VbNET.Sub]"
        ''' <summary>
        ''' Select an Sub Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectSub(ByVal Name As String) As VbNET.Sub
            Dim Result As VbNET.Sub = Nothing
            For Each S As VbNET.Sub In Me.Sub
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Sub Statement by Name", Status.Online, "Public Function SelectSub(ByVal Name As String) As VbNET.Sub", "SelectSub", Name)
            Else
                Log.AddStep("[Module]", "Select an Sub Statement by Name", Status.Broken, "Public Function SelectSub(ByVal Name As String) As VbNET.Sub", "SelectSub", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.05> <Function> <Select> [Function]"
#Region "<05.02.05.00> <Function> <Select> <Function> [SelectFunction(ID|Integer)|VbNET.Function]"
        ''' <summary>
        ''' Select an Function Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectFunction(ByVal ID As Integer) As VbNET.Function
            Dim Result As VbNET.Function = Nothing
            For Each S As VbNET.Function In Me.Function
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Function Statement by ID", Status.Online, "Public Function SelectFunction(ByVal ID As Integer) As VbNET.Function", "SelectFunction", ID)
            Else
                Log.AddStep("[Module]", "Select an Function Statement by ID", Status.Broken, "Public Function SelectFunction(ByVal ID As Integer) As VbNET.Function", "SelectFunction", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.05.01> <Function> <Select> <Function> [SelectFunction(Name|String)|VbNET.Function]"
        ''' <summary>
        ''' Select an Function Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectFunction(ByVal Name As String) As VbNET.Function
            Dim Result As VbNET.Function = Nothing
            For Each S As VbNET.Function In Me.Function
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Function Statement by Name", Status.Online, "Public Function SelectFunction(ByVal Name As String) As VbNET.Function", "SelectFunction", Name)
            Else
                Log.AddStep("[Module]", "Select an Function Statement by Name", Status.Broken, "Public Function SelectFunction(ByVal Name As String) As VbNET.Function", "SelectFunction", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.06> <Function> <Select> [Runtime]"
#Region "<05.02.06.00> <Function> <Select> <Runtime> [SelectRuntime(ID|Integer)|VbNET.Runtime]"
        ''' <summary>
        ''' Select an Runtime Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectRuntime(ByVal ID As Integer) As VbNET.Runtime
            Dim Result As VbNET.Runtime = Nothing
            For Each S As VbNET.Runtime In Me.Runtime
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Runtime Statement by ID", Status.Online, "Public Function SelectRuntime(ByVal ID As Integer) As VbNET.Runtime", "SelectRuntime", ID)
            Else
                Log.AddStep("[Module]", "Select an Runtime Statement by ID", Status.Broken, "Public Function SelectRuntime(ByVal ID As Integer) As VbNET.Runtime", "SelectRuntime", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.06.01> <Function> <Runtime> <Function> [SelectRuntime(Name|String)|VbNET.Runtime]"
        ''' <summary>
        ''' Select an Runtime Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectRuntime(ByVal Name As String) As VbNET.Runtime
            Dim Result As VbNET.Runtime = Nothing
            For Each S As VbNET.Runtime In Me.Runtime
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Runtime Statement by Name", Status.Online, "Public Function SelectRuntime(ByVal Name As String) As VbNET.Runtime", "SelectRuntime", Name)
            Else
                Log.AddStep("[Module]", "Select an Runtime Statement by Name", Status.Broken, "Public Function SelectRuntime(ByVal Name As String) As VbNET.Runtime", "SelectRuntime", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.07> <Function> <Select> [Loader]"
#Region "<05.02.07.00> <Function> <Select> <Loader> [SelectLoader(ID|Integer)|VbNET.Loader]"
        ''' <summary>
        ''' Select an Loader Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectLoader(ByVal ID As Integer) As VbNET.Loader
            Dim Result As VbNET.Loader = Nothing
            For Each S As VbNET.Loader In Me.Loader
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Loader Statement by ID", Status.Online, "Public Function SelectLoader(ByVal ID As Integer) As VbNET.Loader", "SelectLoader", ID)
            Else
                Log.AddStep("[Module]", "Select an Loader Statement by ID", Status.Broken, "Public Function SelectLoader(ByVal ID As Integer) As VbNET.Loader", "SelectLoader", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.07.01> <Function> <Select> <Loader> [SelectLoader(Name|String)|VbNET.Loader]"
        ''' <summary>
        ''' Select an Loader Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectLoader(ByVal Name As String) As VbNET.Loader
            Dim Result As VbNET.Loader = Nothing
            For Each S As VbNET.Loader In Me.Loader
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Loader Statement by Name", Status.Online, "Public Function SelectLoader(ByVal Name As String) As VbNET.Loader", "SelectLoader", Name)
            Else
                Log.AddStep("[Module]", "Select an Loader Statement by Name", Status.Broken, "Public Function SelectLoader(ByVal Name As String) As VbNET.Loader", "SelectLoader", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.08> <Function> <Select> [Class]"
#Region "<05.02.08.00> <Function> <Select> <Class> [SelectClass(ID|Integer)|VbNET.Class]"
        ''' <summary>
        ''' Select an Class Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectClass(ByVal ID As Integer) As VbNET.Class
            Dim Result As VbNET.Class = Nothing
            For Each S As VbNET.Class In Me.Classes
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Class Statement by ID", Status.Online, "Public Function SelectClass(ByVal ID As Integer) As VbNET.Class", "SelectClass", ID)
            Else
                Log.AddStep("[Module]", "Select an Class Statement by ID", Status.Broken, "Public Function SelectClass(ByVal ID As Integer) As VbNET.Class", "SelectClass", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.08.01> <Function> <Select> <Class> [SelectClass(Name|String)|VbNET.Class]"
        ''' <summary>
        ''' Select an Class Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectClass(ByVal Name As String) As VbNET.Class
            Dim Result As VbNET.Class = Nothing
            For Each S As VbNET.Class In Me.Classes
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Class Statement by Name", Status.Online, "Public Function SelectClass(ByVal Name As String) As VbNET.Class", "SelectClass", Name)
            Else
                Log.AddStep("[Module]", "Select an Class Statement by Name", Status.Broken, "Public Function SelectClass(ByVal Name As String) As VbNET.Class", "SelectClass", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.09> <Function> <Select> [Constante]"
#Region "<05.02.09.00> <Function> <Select> <Constante> [SelectConstante(ID|Integer)|VbNET.Constante]"
        ''' <summary>
        ''' Select an Constante Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectConstante(ByVal ID As Integer) As VbNET.Constante
            Dim Result As VbNET.Constante = Nothing
            For Each S As VbNET.Constante In Me.Constante
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Constante Statement by ID", Status.Online, "Public Function SelectConstante(ByVal ID As Integer) As VbNET.Constante", "SelectConstante", ID)
            Else
                Log.AddStep("[Module]", "Select an Constante Statement by ID", Status.Broken, "Public Function SelectConstante(ByVal ID As Integer) As VbNET.Constante", "SelectConstante", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.09.01> <Function> <Select> <Constante> [SelectConstante(Name|String)|VbNET.Constante]"
        ''' <summary>
        ''' Select an Constante Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectConstante(ByVal Name As String) As VbNET.Constante
            Dim Result As VbNET.Constante = Nothing
            For Each S As VbNET.Constante In Me.Constante
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Constante Statement by Name", Status.Online, "Public Function SelectConstante(ByVal Name As String) As VbNET.Constante", "SelectConstante", Name)
            Else
                Log.AddStep("[Module]", "Select an Constante Statement by Name", Status.Broken, "Public Function SelectConstante(ByVal Name As String) As VbNET.Constante", "SelectConstante", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.10> <Function> <Select> [Event]"
#Region "<05.02.10.00> <Function> <Select> <Event> [SelectEvent(ID|Integer)|VbNET.Event]"
        ''' <summary>
        ''' Select an Event Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectEvent(ByVal ID As Integer) As VbNET.Event
            Dim Result As VbNET.Event = Nothing
            For Each S As VbNET.Event In Me.Event
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Event Statement by ID", Status.Online, "Public Function SelectEvent(ByVal ID As Integer) As VbNET.Event", "SelectEvent", ID)
            Else
                Log.AddStep("[Module]", "Select an Event Statement by ID", Status.Broken, "Public Function SelectEvent(ByVal ID As Integer) As VbNET.Event", "SelectEvent", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.10.01> <Function> <Select> <Event> [SelectEvent(Name|String)|VbNET.Event]"
        ''' <summary>
        ''' Select an Event Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectEvent(ByVal Name As String) As VbNET.Event
            Dim Result As VbNET.Event = Nothing
            For Each S As VbNET.Event In Me.Event
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Event Statement by Name", Status.Online, "Public Function SelectEvent(ByVal Name As String) As VbNET.Event", "SelectEvent", Name)
            Else
                Log.AddStep("[Module]", "Select an Event Statement by Name", Status.Broken, "Public Function SelectEvent(ByVal Name As String) As VbNET.Event", "SelectEvent", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.11> <Function> <Select> [Declare]"
#Region "<05.02.11.00> <Function> <Select> <Declare> [SelectDeclare(ID|Integer)|VbNET.Declare]"
        ''' <summary>
        ''' Select an Declare Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectDeclare(ByVal ID As Integer) As VbNET.Declare
            Dim Result As VbNET.Declare = Nothing
            For Each S As VbNET.Declare In Me.Declares
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Declare Statement by ID", Status.Online, "Public Function SelectDeclare(ByVal ID As Integer) As VbNET.Declare", "SelectDeclare", ID)
            Else
                Log.AddStep("[Module]", "Select an Declare Statement by ID", Status.Broken, "Public Function SelectDeclare(ByVal ID As Integer) As VbNET.Declare", "SelectDeclare", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.11.01> <Function> <Select> <Declare> [SelectDeclare(Name|String)|VbNET.Declare]"
        ''' <summary>
        ''' Select an Declare Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectDeclare(ByVal Name As String) As VbNET.Declare
            Dim Result As VbNET.Declare = Nothing
            For Each S As VbNET.Declare In Me.Declares
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Declare Statement by Name", Status.Online, "Public Function SelectDeclare(ByVal Name As String) As VbNET.Declare", "SelectDeclare", Name)
            Else
                Log.AddStep("[Module]", "Select an Declare Statement by Name", Status.Broken, "Public Function SelectDeclare(ByVal Name As String) As VbNET.Declare", "SelectDeclare", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.12> <Function> <Select> [Delegate]"
#Region "<05.02.12.00> <Function> <Select> <Delegate> [SelectDelegate(ID|Integer)|VbNET.Delegate]"
        ''' <summary>
        ''' Select an Delegate Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectDelegate(ByVal ID As Integer) As VbNET.Delegate
            Dim Result As VbNET.Delegate = Nothing
            For Each S As VbNET.Delegate In Me.Delegates
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Delegate Statement by ID", Status.Online, "Public Function SelectDelegate(ByVal ID As Integer) As VbNET.Delegate", "SelectDelegate", ID)
            Else
                Log.AddStep("[Module]", "Select an Delegate Statement by ID", Status.Broken, "Public Function SelectDelegate(ByVal ID As Integer) As VbNET.Delegate", "SelectDelegate", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.12.01> <Function> <Select> <Delegate> [SelectDelegate(Name|String)|VbNET.Delegate]"
        ''' <summary>
        ''' Select an Delegate Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectDelegate(ByVal Name As String) As VbNET.Delegate
            Dim Result As VbNET.Delegate = Nothing
            For Each S As VbNET.Delegate In Me.Delegates
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Delegate Statement by Name", Status.Online, "Public Function SelectDelegate(ByVal Name As String) As VbNET.Delegate", "SelectDelegate", Name)
            Else
                Log.AddStep("[Module]", "Select an Delegate Statement by Name", Status.Broken, "Public Function SelectDelegate(ByVal Name As String) As VbNET.Delegate", "SelectDelegate", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.13> <Function> <Select> [Dim]"
#Region "<05.02.13.00> <Function> <Select> <Dim> [SelectDim(ID|Integer)|VbNET.Dim]"
        ''' <summary>
        ''' Select an Dim Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectDim(ByVal ID As Integer) As VbNET.Dim
            Dim Result As VbNET.Dim = Nothing
            For Each S As VbNET.Dim In Me.Dims
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Dim Statement by ID", Status.Online, "Public Function SelectDim(ByVal ID As Integer) As VbNET.Dim", "SelectDim", ID)
            Else
                Log.AddStep("[Module]", "Select an Dim Statement by ID", Status.Broken, "Public Function SelectDim(ByVal ID As Integer) As VbNET.Dim", "SelectDim", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.13.01> <Function> <Select> <Dim> [SelectDim(Name|String)|VbNET.Dim]"
        ''' <summary>
        ''' Select an Dim Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectDim(ByVal Name As String) As VbNET.Dim
            Dim Result As VbNET.Dim = Nothing
            For Each S As VbNET.Dim In Me.Dims
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Dim Statement by Name", Status.Online, "Public Function SelectDim(ByVal Name As String) As VbNET.Dim", "SelectDim", Name)
            Else
                Log.AddStep("[Module]", "Select an Dim Statement by Name", Status.Broken, "Public Function SelectDim(ByVal Name As String) As VbNET.Dim", "SelectDim", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<05.02.14> <Function> <Select> [Module]"
#Region "<05.02.14.00> <Function> <Select> <Module> [SelectModule(ID|Integer)|VbNET.Module]"
        ''' <summary>
        ''' Select an Module Statement by ID
        ''' </summary>
        ''' <param name="ID"></param>
        ''' <returns></returns>
        Public Function SelectModule(ByVal ID As Integer) As VbNET.Module
            Dim Result As VbNET.Module = Nothing
            For Each S As VbNET.Module In Me.Modules
                If S.ID = ID Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Module Statement by ID", Status.Online, "Public Function SelectModule(ByVal ID As Integer) As VbNET.Module", "SelectModule", ID)
            Else
                Log.AddStep("[Module]", "Select an Module Statement by ID", Status.Broken, "Public Function SelectModule(ByVal ID As Integer) As VbNET.Module", "SelectModule", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#Region "<05.02.14.01> <Function> <Select> <Module> [SelectModule(Name|String)|VbNET.Module]"
        ''' <summary>
        ''' Select an Module Statement by Name
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <returns></returns>
        Public Function SelectModule(ByVal Name As String) As VbNET.Module
            Dim Result As VbNET.Module = Nothing
            For Each S As VbNET.Module In Me.Modules
                If S.Name = Name Then
                    Result = S
                    Exit For
                End If
            Next
            If Not IsNothing(Result) Then
                Log.AddStep("[Module]", "Select an Module Statement by Name", Status.Online, "Public Function SelectModule(ByVal Name As String) As VbNET.Module", "SelectModule", Name)
            Else
                Log.AddStep("[Module]", "Select an Module Statement by Name", Status.Broken, "Public Function SelectModule(ByVal Name As String) As VbNET.Module", "SelectModule", "Could not find result")
            End If
            Return Result
        End Function
#End Region
#End Region
#End Region
#Region "<05.03> <Function> [ToString]"
        Public Overrides Function ToString() As String
            Dim Result As String = ""
            Result = Me.Name
            Return Result
        End Function
#End Region
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Log = New TestItem("[Module].Log", "Record all events")
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        Public Sub New(ByVal Name As String)
            Log = New TestItem("[Module].Log", "Record all events")
            Log.AddParam("Name", "String", Name)
            Clear()

            With Me
                .Name = Name
            End With

        End Sub
#End Region
#End Region
#Region "<7> [Runtime]"
        Public Temp_Import As Import
        Public Temp_Enumeration As Enumeration
        Public Temp_Structure As [Structure]
        Public Temp_Sub As [Sub]
        Public Temp_Function As [Function]
        Public Temp_Declare As [Declare]
        Public Temp_Loader As Loader
        Public Temp_Delegate As [Delegate]
        Public Temp_Constante As Constante
        Public Temp_Class As [Class]
        Public Temp_Dim As [Dim]
        Public Temp_Event As [Event]
        Public Temp_RaiseEvent As [RaiseEvent]
        Public Log As New TestItem("[Module].Log", "Record all events")
#End Region

    End Class
#End Region
#Region "|08.00.15| <Class> <Statement> [RaiseEvent]"
    ''' <summary>
    ''' https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/raiseevent-statement
    ''' </summary>
    Public Class [RaiseEvent]
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]"
#Region "|2019/04/24 00h03:866| <01.00.00> <Property> <Constructor> [Call=EventName|String]"'(Set|Get) Required. Name of the event to trigger.
        Private _EventName As String
        ''' <Summary>
        ''' Required. Name of the event to trigger.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h03:866 </Published>
        ''' <Updated>[Created=2019/04/24 00h03:866][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required. Name of the event to trigger."), Browsable(True)>
        Public Property EventName() As String
            Get
                Return _EventName
            End Get
            Set(ByVal Value As String)
                _EventName = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Name of the event to trigger.
#Region "|2019/04/24 00h03:269| <01.00.01> <Property> <Constructor> [Call=ArgumentList|List(Of String)]"'(Set|Get) Optional. Comma-delimited list of variables, arrays, or expressions. The argumentlist argument must be enclosed by parentheses. If there are no arguments, the parentheses must be omitted.
        Private _ArgumentList As List(Of String)
        ''' <Summary>
        ''' Optional. Comma-delimited list of variables, arrays, or expressions. The argumentlist argument must be enclosed by parentheses. If there are no arguments, the parentheses must be omitted.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h03:269 </Published>
        ''' <Updated>[Created=2019/04/24 00h03:269][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. Comma-delimited list of variables, arrays, or expressions. The argumentlist argument must be enclosed by parentheses. If there are no arguments, the parentheses must be omitted."), Browsable(True)>
        Public Property ArgumentList() As List(Of String)
            Get
                Return _ArgumentList
            End Get
            Set(ByVal Value As List(Of String))
                _ArgumentList = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Comma-delimited list of variables, arrays, or expressions. The argumentlist argument must be enclosed by parentheses. If there are no arguments, the parentheses must be omitted.

#End Region
#Region "|01.03| <Property> [Parent]{3}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h27:647| <01.03.01> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.02> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()
            With Me
                .EventName = ""
                .ArgumentList = New List(Of String)

                .ID = 0
                .ImageIndex = Format.RaiseEvent
                .RegionCategory = 0
                .StatementFormat = Format.RaiseEvent
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)

                .Updated(Status.Online, "The test is successful.",, Now) = ""

                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = ""
                .F_CloseStatement = ":"
                .VB_OpenStatement = ""
                .VB_CloseStatement = ""
                .Python_OpenStatement = ""
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""


            End With
        End Sub
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        Public Shared Function Serialization(ByVal Statement As [RaiseEvent]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Dim XmlTool As Xml.Serialization.XmlSerializer
                XmlTool = New Xml.Serialization.XmlSerializer(Statement.GetType)
                Dim Path As String = My.Application.Info.DirectoryPath & "\RaiseEvent\" & Statement.Name & ".RaiseEvent"
                Dim Test As New StreamWriter(Path)
                XmlTool.Serialize(Test, Statement)
                Result = New Fichier(Path)
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal Statement As String) As [RaiseEvent]
            Dim Result As New [RaiseEvent]
            Dim Serializer As New XmlSerializer(GetType([RaiseEvent]))
            Using Reader As TextReader = New StringReader(Statement)
                Result = Serializer.Deserialize(Reader)
            End Using
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [RaiseEvent]
            Dim Result As New [RaiseEvent]
            Dim Serializer As New XmlSerializer(GetType([RaiseEvent]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        Public Sub New(ByVal Name As String)
            Clear()

            With Me
                .Name = Name
            End With

        End Sub
#End Region
#End Region
    End Class
#End Region
#Region "|08.00.16| <Class> <Statement> [Dim]"
    ''' <summary>
    ''' https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/dim-statement
    ''' </summary>
    Public Class [Dim]
        Inherits Statement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Constructor]"
#Region "<01.00> <Property> [Constructor]"
#Region "|2019/04/24 00h18:732| <01.00.00> <Property> <Constructor> [Call=VariableName|String]"'(Set|Get) Required. Name of the variable. See Declared Element Names.
        Private _VariableName As String
        ''' <Summary>
        ''' Required. Name of the variable. See Declared Element Names.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h18:732 </Published>
        ''' <Updated>[Created=2019/04/24 00h18:730][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required. Name of the variable. See Declared Element Names."), Browsable(True)>
        Public Property VariableName() As String
            Get
                Return _VariableName
            End Get
            Set(ByVal Value As String)
                _VariableName = Value
            End Set
        End Property
#End Region ' (Set|Get) Required. Name of the variable. See Declared Element Names.
#Region "|2019/04/24 00h19:473| <01.00.01> <Property> <Constructor> [Call=BoundsList|String]"'(Set|Get) Optional. List of bounds of each dimension of an array variable.
        Private _BoundsList As String
        ''' <Summary>
        ''' Optional. List of bounds of each dimension of an array variable.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h19:473 </Published>
        ''' <Updated>[Created=2019/04/24 00h19:473][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. List of bounds of each dimension of an array variable."), Browsable(True)>
        Public Property BoundsList() As String
            Get
                Return _BoundsList
            End Get
            Set(ByVal Value As String)
                _BoundsList = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. List of bounds of each dimension of an array variable.
#Region "|2019/04/24 00h19:804| <01.00.02> <Property> <Constructor> [Call=[New]|Boolean]"'(Set|Get) Optional. Creates a new instance of the class when the Dim statement runs.
        Private _New As Boolean
        ''' <Summary>
        ''' Optional. Creates a new instance of the class when the Dim statement runs.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h19:804 </Published>
        ''' <Updated>[Created=2019/04/24 00h19:804][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. Creates a new instance of the class when the Dim statement runs."), Browsable(True)>
        Public Property [New]() As Boolean
            Get
                Return _New
            End Get
            Set(ByVal Value As Boolean)
                _New = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Creates a new instance of the class when the Dim statement runs.
#Region "|2019/04/24 00h20:780| <01.00.03> <Property> <Constructor> [Call=DataType|String]"'(Set|Get) Optional. Data type of the variable.
        Private _DataType As String
        ''' <Summary>
        ''' Optional. Data type of the variable.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h20:780 </Published>
        ''' <Updated>[Created=2019/04/24 00h20:779][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. Data type of the variable."), Browsable(True)>
        Public Property DataType() As String
            Get
                Return _DataType
            End Get
            Set(ByVal Value As String)
                _DataType = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Data type of the variable.
#Region "|2019/04/24 00h20:022| <01.00.04> <Property> <Constructor> [Call=[With]|String]"'(Set|Get) Optional. Introduces the object initializer list.
        Private _With As String
        ''' <Summary>
        ''' Optional. Introduces the object initializer list.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h20:022 </Published>
        ''' <Updated>[Created=2019/04/24 00h20:022][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. Introduces the object initializer list."), Browsable(True)>
        Public Property [With]() As String
            Get
                Return _With
            End Get
            Set(ByVal Value As String)
                _With = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. Introduces the object initializer list.
#Region "|2019/04/24 00h21:567| <01.00.05> <Property> <Constructor> [Call=PropertyName|String]"'(Set|Get) Optional. The name of a property in the class you are making an instance of.
        Private _PropertyName As String
        ''' <Summary>
        ''' Optional. The name of a property in the class you are making an instance of.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h21:567 </Published>
        ''' <Updated>[Created=2019/04/24 00h21:567][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional. The name of a property in the class you are making an instance of."), Browsable(True)>
        Public Property PropertyName() As String
            Get
                Return _PropertyName
            End Get
            Set(ByVal Value As String)
                _PropertyName = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional. The name of a property in the class you are making an instance of.
#Region "|2019/04/24 00h21:302| <01.00.06> <Property> <Constructor> [Call=PropInitializer|String]"'(Set|Get) Required after propertyname =. The expression that is evaluated and assigned to the property name.
        Private _PropInitializer As String
        ''' <Summary>
        ''' Required after propertyname =. The expression that is evaluated and assigned to the property name.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h21:302 </Published>
        ''' <Updated>[Created=2019/04/24 00h21:302][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Required after propertyname =. The expression that is evaluated and assigned to the property name."), Browsable(True)>
        Public Property PropInitializer() As String
            Get
                Return _PropInitializer
            End Get
            Set(ByVal Value As String)
                _PropInitializer = Value
            End Set
        End Property
#End Region ' (Set|Get) Required after propertyname =. The expression that is evaluated and assigned to the property name.
#Region "|2019/04/24 00h22:710| <01.00.07> <Property> <Constructor> [Call=Initializer|String]"'(Set|Get) Optional if New is not specified. Expression that is evaluated and assigned to the variable when it is created.
        Private _Initializer As String
        ''' <Summary>
        ''' Optional if New is not specified. Expression that is evaluated and assigned to the variable when it is created.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/24 00h22:710 </Published>
        ''' <Updated>[Created=2019/04/24 00h22:710][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Optional if New is not specified. Expression that is evaluated and assigned to the variable when it is created."), Browsable(True)>
        Public Property Initializer() As String
            Get
                Return _Initializer
            End Get
            Set(ByVal Value As String)
                _Initializer = Value
            End Set
        End Property
#End Region ' (Set|Get) Optional if New is not specified. Expression that is evaluated and assigned to the variable when it is created.
#End Region
#End Region
#Region "|01.03| <Property> [Parent]{3}"
#Region "[On] |2019/05/22 12h55:731| <01.03.00> <Property> <Parent> |.ParentClass()|VbNET.Class|"' (Set|Get) The ParentClass as VbNET.Class.
        Private _ParentClass As VbNET.Class
        '''    <Summary>
        '''     (Set|Get) The ParentClass as VbNET.Class.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 12h55:739 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentClass as VbNET.Class."), XmlIgnore>
        Property ParentClass() As VbNET.Class
            Get
                Return _ParentClass
            End Get
            Set(ByVal Value As VbNET.Class)
                _ParentClass = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentClass as VbNET.Class.
#Region "[On] |2019/05/22 13h27:647| <01.03.01> <Property> <Parent> |.ParentModule()|VbNET.Module|"' (Set|Get) The ParentModule as VbNET.Module.
        Private _ParentModule As VbNET.Module
        '''    <Summary>
        '''     (Set|Get) The ParentModule as VbNET.Module.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(False), CategoryAttribute("Parent"), Description("(Set|Get) The ParentModule as VbNET.Module."), XmlIgnore>
        Property ParentModule() As VbNET.Module
            Get
                Return _ParentModule
            End Get
            Set(ByVal Value As VbNET.Module)
                _ParentModule = Value
            End Set
        End Property
#End Region '(Set|Get) The ParentModule as VbNET.Module.
#Region "[On] |2019/06/10 16h04:647| <01.03.02> <Property> <Parent> |.ParentName|String|"' (Set|Get) The Parent as String.
        Private _ParentName As String
        '''    <Summary>
        '''     (Set|Get) The Parent as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 13h27:654 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Parent"), Description("(Set|Get) The Parent as String.")>
        Property ParentName() As String
            Get
                Return _ParentName
            End Get
            Set(ByVal Value As String)
                _ParentName = Value
            End Set
        End Property
#End Region '(Set|Get) The Parent as String.

#End Region
#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Clear]"
        ''' <summary>
        ''' Erase all Properties
        ''' </summary>
        Public Sub Clear()
            Reset()

            With Me
                .BoundsList = ""
                .DataType = ""
                .Initializer = ""
                .PropertyName = ""
                .PropInitializer = ""
                .VariableName = ""
                .With = ""

                .ID = 0
                .ImageIndex = Format.Runtime
                .RegionCategory = 0
                .StatementFormat = Format.Declare
                .RegionCode = IIf(Val(.StatementFormat) < 10, "0" & Val(.StatementFormat), Val(.StatementFormat)) &
                        "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) &
                        "." & IIf(.ID < 10, "0" & .ID, ID)

                .C_OpenStatement = "{"
                .C_CloseStatement = "}"

                .F_OpenStatement = ""
                .F_CloseStatement = ":"
                .VB_OpenStatement = "Dim "
                .VB_CloseStatement = ""
                .Python_OpenStatement = ""
                .Python_CloseStatement = ":"
                .JS_OpenStatement = ""
                .JS_CloseStatement = ""


            End With
        End Sub
#End Region
#Region "<04.01> <Sub> [Print]"
#Region "<04.01.00> <Sub> <Print> [PrintStatement([Enable|True])]"
        Public Sub PrintStatement(Optional ByVal Enable As Boolean = True)
            Me.VB = ""
            Me.C = ""
            Me.F = ""
            Me.Python = ""
            Me.JavaScript = ""
            Print_VB = New List(Of String)
            Print_C = New List(Of String)
            Print_F = New List(Of String)
            Print_Python = New List(Of String)
            Print_JavaScript = New List(Of String)
            Me.Enable = Enable
            With Me
                .RegionCode = IIf(.StatementFormat < 10, "0" & .StatementFormat, .StatementFormat) & "." & IIf(.RegionCategory < 10, "0" & .RegionCategory, .RegionCategory) & "." & IIf(.ID < 10, "0" & .ID, .ID)
            End With
            If Me.Description = "" Or IsNothing(Me.Description) Or Me.Description.Length < 1 Then
                Me.Description = "The Structure of " & Me.Name & "."
            End If
#Region "<Format Description>"
            If Description.Contains("(Set|Get)") Then
                Me.Description = Description
#End Region
            Else
                Me.Description = "(Set|Get) " & Me.Description
            End If

            'Me.Summary = Me.SummaryStatement.Print_VB
            'Me.SummaryStatement = New Summary(Me.Description, , Me.Remarks, Me.Published, Me.Rights, Me.Example, Me.Usage, Me.Note, Me.See, Me.SeeAlso, Me.Title, Me.AuthorName, Me.AuthorEmail, Me.AuthorUri, Me.ContributorName, Me.ContributorEmail, Me.ContributorUri)
            'Me.Attribute = New Attributelist(Me.Category, Me.Description, Me.DefaultValue, Me.Browsable, Me.Deserializable, Me.Editor, Me.Serializable, Me.NonSerialized, Me.RelatedImageList, Me.XmlRoot, Me.XmlIgnore, Me.XmlInclude, Custom, Me.DllImport)

            'Create 
            If Me.Enable = True Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|" & Space & "' " & Me.Description)


#Region "<Caller>"
                Dim P As String = ""
                For i = 0 To Me.BoundsList.Count - 2
                    P += Me.BoundsList(i).ToString & ","
                Next
                P += Me.BoundsList(Me.BoundsList.Count - 1).ToString
                Me.Print_VB.Add("   Dim " & Me.Name & " (" & IIf(P <> "", P, "") & ") As " & IIf([New] = True, "New ", "") & Me.DataType & IIf(Me.[With] <> "", " With {." & PropertyName & " = " & Me.PropInitializer & "} ", "") & IIf(Me.Initializer <> "", " = " & Me.Initializer, ""))
#End Region
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Caller>"
                Me.Print_C.Add("   " & Me.DataType & " " & Me.VariableName & " (" & IIf(P <> "", P, "") & IIf(Me.Initializer <> "", " = " & Me.Initializer, " = ") & IIf([New] = True, " new ", "") & Me.DataType & IIf(Me.[With] <> "", " With {." & PropertyName & " = " & Me.PropInitializer & "} ", ""))
#End Region
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Caller>"
                Me.Print_JavaScript.Add("   " & Me.DataType & " " & Me.VariableName & " (" & IIf(P <> "", P, "") & IIf(Me.Initializer <> "", " = " & Me.Initializer, " = ") & IIf([New] = True, " new ", "") & Me.DataType & IIf(Me.[With] <> "", " With {." & PropertyName & " = " & Me.PropInitializer & "} ", ""))
#End Region
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Caller>"
                Me.Print_F.Add("   " & Me.DataType & " " & Me.VariableName & " (" & IIf(P <> "", P, "") & IIf(Me.Initializer <> "", " = " & Me.Initializer, " = ") & IIf([New] = True, " new ", "") & Me.DataType & IIf(Me.[With] <> "", " With {." & PropertyName & " = " & Me.PropInitializer & "} ", ""))
#End Region
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Caller>"
                Me.Print_Python.Add("   " & Me.DataType & " " & Me.VariableName & " (" & IIf(P <> "", P, "") & IIf(Me.Initializer <> "", " = " & Me.Initializer, " = ") & IIf([New] = True, " new ", "") & Me.DataType & IIf(Me.[With] <> "", " With {." & PropertyName & " = " & Me.PropInitializer & "} ", ""))
#End Region
                Me.Print_Python.Add("#endregion " & Me.Description)
#End Region
#End Region
            ElseIf Me.Enable = False Then
#Region "<print vb>"
#Region "Region"
                Me.Print_VB.Add("#Region" & Space & "[On] |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|" & Space & "' " & Me.Description)


#Region "<Caller>"
                Dim P As String = ""
                For i = 0 To Me.BoundsList.Count - 2
                    P += Me.BoundsList(i).ToString & ","
                Next
                P += Me.BoundsList(Me.BoundsList.Count - 1).ToString
                Me.Print_VB.Add("''   Dim " & Me.Name & " (" & IIf(P <> "", P, "") & ") As " & IIf([New] = True, "New ", "") & Me.DataType & IIf(Me.[With] <> "", " With {." & PropertyName & " = " & Me.PropInitializer & "} ", "") & IIf(Me.Initializer <> "", " = " & Me.Initializer, ""))
#End Region
                Me.Print_VB.Add("#End Region '" & Me.Description)
#End Region
#End Region
#Region "<print C>"
#Region "Region"
                Me.Print_C.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Caller>"
                Me.Print_C.Add("//   " & Me.DataType & " " & Me.VariableName & " (" & IIf(P <> "", P, "") & IIf(Me.Initializer <> "", " = " & Me.Initializer, " = ") & IIf([New] = True, " new ", "") & Me.DataType & IIf(Me.[With] <> "", " With {." & PropertyName & " = " & Me.PropInitializer & "} ", ""))
#End Region
                Me.Print_C.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<print JavaScript>"
#Region "Region"
                Me.Print_JavaScript.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Caller>"
                Me.Print_JavaScript.Add("//   " & Me.DataType & " " & Me.VariableName & " (" & IIf(P <> "", P, "") & IIf(Me.Initializer <> "", " = " & Me.Initializer, " = ") & IIf([New] = True, " new ", "") & Me.DataType & IIf(Me.[With] <> "", " With {." & PropertyName & " = " & Me.PropInitializer & "} ", ""))
#End Region
                Me.Print_JavaScript.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print F>"
#Region "Region"
                Me.Print_F.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Caller>"
                Me.Print_F.Add("//   " & Me.DataType & " " & Me.VariableName & " (" & IIf(P <> "", P, "") & IIf(Me.Initializer <> "", " = " & Me.Initializer, " = ") & IIf([New] = True, " new ", "") & Me.DataType & IIf(Me.[With] <> "", " With {." & PropertyName & " = " & Me.PropInitializer & "} ", ""))
#End Region
                Me.Print_F.Add("#endregion " & Me.Description)
#End Region
#End Region
#Region "<Print Python>"
#Region "Region"
                Me.Print_Python.Add("#region |" & Me.CreationDate & "| <" & Me.RegionCode & "> " & "<Structure> <" & Me.Category & "> |." & Me.Name & "()" & "|Structure|  " & Me.Description)

#Region "<Caller>"
                Me.Print_Python.Add("//   " & Me.DataType & " " & Me.VariableName & " (" & IIf(P <> "", P, "") & IIf(Me.Initializer <> "", " = " & Me.Initializer, " = ") & IIf([New] = True, " new ", "") & Me.DataType & IIf(Me.[With] <> "", " With {." & PropertyName & " = " & Me.PropInitializer & "} ", ""))
#End Region
                Me.Print_Python.Add("#endregion " & Me.Description)
#End Region
#End Region
            End If

            Me.VB = ""
            Me.C = ""
            Me.Python = ""
            Me.JavaScript = ""
            Me.F = ""
            For Each Str As String In Me.Print_VB
                Me.VB += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_C
                Me.C += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_F
                Me.F += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_JavaScript
                Me.JavaScript += Str & Environment.NewLine
            Next
            For Each Str As String In Me.Print_Python
                Me.Python += Str & Environment.NewLine
            Next



        End Sub
#End Region
#Region "<04.01.01> <Sub> <Print> [PrintStatement(OutputVb|Object,OutputC|Object,OutputF|Object,OutputPython|Object,OutputJS|Object,[Enable]]"
        ''' <summary>
        ''' Print the Statements in TextBoxObject.
        ''' Be Aware that this Sub can only perform if the statement has been filled.
        ''' <see cref="RichTextBox"/>
        ''' <see cref="TextBox"/>
        ''' <see cref="Label"/>
        ''' <see cref="Panel"/>
        ''' </summary>
        ''' <param name="OutputVb">What ever object you use make sure to include a Text Property.</param>
        ''' <param name="OutputC"></param>
        ''' <param name="OutputF"></param>
        ''' <param name="OutputPython"></param>
        ''' <param name="OutputJS"></param>
        ''' <param name="[Enable]"></param>
        Public Sub PrintStatement(ByRef OutputVb As Object, ByRef OutputC As Object,
                                           ByRef OutputF As Object, ByRef OutputPython As Object,
                                           ByRef OutputJS As Object, Optional ByVal [Enable] As Boolean = True)
            Try
#Region "<0> [Clear Variables]"
                OutputVb.text = ""
                OutputC.text = ""
                OutputF.Text = ""
                OutputJS.Text = ""
                OutputPython.Text = ""
#End Region
                'Fill in the Statement.
                Me.PrintStatement([Enable])
#Region "<1> [Print the statement]"
                For Each Str As String In Print_VB
                    OutputVb.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_C
                    OutputC.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_F
                    OutputF.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_Python
                    OutputPython.text += Str & Environment.NewLine
                Next
                For Each Str As String In Print_JavaScript
                    OutputJS.text += Str & Environment.NewLine
                Next
#End Region


            Catch ex As Exception

            End Try
        End Sub
#End Region
#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Serialize]"
        Public Shared Function Serialization(ByVal Statement As [Dim]) As Fichier
            Dim Result As New Fichier()
            If Not IsNothing(Statement) Then
                Dim XmlTool As Xml.Serialization.XmlSerializer
                XmlTool = New Xml.Serialization.XmlSerializer(Statement.GetType)
                Dim Path As String = My.Application.Info.DirectoryPath & "\Declare\" & Statement.Name & ".Dim"
                Dim Test As New StreamWriter(Path)
                XmlTool.Serialize(Test, Statement)
                Result = New Fichier(Path)
            End If
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal Statement As String) As [Dim]
            Dim Result As New [Dim]
            Dim Serializer As New XmlSerializer(GetType([Dim]))
            Using Reader As TextReader = New StringReader(Statement)
                Result = Serializer.Deserialize(Reader)
            End Using
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As [Dim]
            Dim Result As New [Dim]
            Dim Serializer As New XmlSerializer(GetType([Dim]))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Return Result
        End Function
#End Region
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<06.01> <Loader> [New(Name|String)]"
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="VariableName">Required. Name of the variable. See Declared Element Names.</param>
        ''' <param name="PropertyInitializer">Required after propertyname =. The expression that is evaluated and assigned to the property name.</param>
        ''' <param name="BoudsList">Optional. List of bounds of each dimension of an array variable.</param>
        ''' <param name="[New]">Optional. Creates a new instance of the class when the Dim statement runs.</param>
        ''' <param name="DataType">Optional. Data type of the variable.</param>
        ''' <param name="[With]">Optional. Introduces the object initializer list.</param>
        ''' <param name="PropertyName">Optional. The name of a property in the class you are making an instance of.</param>
        ''' <param name="Initializer">Optional if New is not specified. Expression that is evaluated and assigned to the variable when it is created.</param>
        Public Sub New(ByVal VariableName As String,
                       ByVal PropertyInitializer As String,
              Optional ByVal BoudsList As List(Of String) = Nothing,
              Optional ByVal [New] As Boolean = False,
              Optional ByVal DataType As String = "",
              Optional ByVal [With] As String = "",
              Optional ByVal PropertyName As String = "",
              Optional ByVal Initializer As String = "")
            Clear()

            With Me
                .Name = VariableName
                .VariableName = VariableName
                .PropInitializer = PropInitializer
                .BoundsList = BoundsList
                .[New] = [New]
                .DataType = DataType
                .[With] = [With]
                .PropertyName = PropertyName
                .Initializer = Initializer
            End With

        End Sub
#End Region
#End Region
#Region "<8> [Class]"

#End Region
    End Class
#End Region

#Region "|08.00.17| <Class> <Statement> [Statement]"
    ''' <summary>
    ''' This Statement class is for :
    ''' - Importation
    ''' - Property
    ''' - Enumeration
    ''' - Structure
    ''' - Sub
    ''' - Function
    ''' - Runtime
    ''' - Loader
    ''' - Class
    ''' - Module
    ''' - Constante
    ''' - Event
    ''' - RaiseEvent
    ''' - Declare
    ''' - Delegate
    ''' </summary>
    Public Class Statement
#Region "<1> [Property]{5}"
#Region "<01.00> <Property> [Info]{5}"
#Region "|2019/04/20 15h54:731| <01.00.00> <Property> <Info> [Call=ImageIndex|Integer]"'(Set|Get) The ImageIndex of the Statement.
        Private _ImageIndex As Integer
        ''' <Summary>
        ''' The ImageIndex of the Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 15h54:731 </Published>
        ''' <Updated>[Created=2019/04/20 15h54:724][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("The ImageIndex of the Statement."), Browsable(True)>
        Public Property ImageIndex() As Integer
            Get
                Return _ImageIndex
            End Get
            Set(ByVal Value As Integer)
                _ImageIndex = Value
            End Set
        End Property
#End Region ' (Set|Get) The ImageIndex of the Statement.
#Region "|2019/04/20 15h55:031| <01.00.01> <Property> <Info> [Call=Name|String]"'(Set|Get) The name of the Statement method of call information.For example: Public Sub Subname() where SubName will be stored as a Name.
        Private _Name As String
        ''' <Summary>
        ''' The name of the Statement method of call information.For example: Public Sub Subname() where SubName will be stored as a Name.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 15h55:030 </Published>
        ''' <Updated>[Created=2019/04/20 15h55:030][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("The name of the Statement method of call information.For example: Public Sub Subname() where SubName will be stored as a Name."), Browsable(True)>
        Public Property Name() As String
            Get
                Return _Name
            End Get
            Set(ByVal Value As String)
                _Name = Value
            End Set
        End Property
#End Region ' (Set|Get) The name of the Statement method of call information.For example: Public Sub Subname() where SubName will be stored as a Name.
#Region "|2019/04/20 15h56:662| <01.00.02> <Property> <Info> [Call=Tag|Object]"'(Set|Get) the Tag as Object.
        Private _Tag As Object
        ''' <Summary>
        ''' (Set|Get) the Tag as Object.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 15h56:662 </Published>
        ''' <Updated>[Created=2019/04/20 15h56:662][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Tag as Object."), Browsable(True)>
        Public Property Tag() As Object
            Get
                Return _Tag
            End Get
            Set(ByVal Value As Object)
                _Tag = Value
            End Set
        End Property
#End Region ' (Set|Get) the Tag as Object.
#Region "|2019/04/20 15h56:619| <01.00.03> <Property> <Info> [Call=Text|String]"'(Set|Get) the Text as String .
        Private _Text As String
        ''' <Summary>
        ''' (Set|Get) the Text as String .
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 15h56:619 </Published>
        ''' <Updated>[Created=2019/04/20 15h56:619][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Text as String ."), Browsable(True)>
        Public Property Text() As String
            Get
                Return _Text
            End Get
            Set(ByVal Value As String)
                _Text = Value
            End Set
        End Property
#End Region ' (Set|Get) the Text as String .
#Region "|2019/04/20 15h57:012| <01.00.04> <Property> <Info> [Call=Tooltip|String]"'(Set|Get) The full statement string.
        Private _Tooltip As String
        ''' <Summary>
        ''' The full statement string.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 15h57:012 </Published>
        ''' <Updated>[Created=2019/04/20 15h57:012][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("The full statement string."), Browsable(True)>
        Public Property Tooltip() As String
            Get
                Return _Tooltip
            End Get
            Set(ByVal Value As String)
                _Tooltip = Value
            End Set
        End Property
#End Region ' (Set|Get) The full statement string.
#End Region
#Region "<01.01> <Property> [Status]{2}"
#Region "|2019/04/20 15h58:053| <01.01.00> <Property> <Status> [Call=[Enable]|Boolean]"'(Set|Get) Enable the Statement or transform it to comment.
        Private _Enable As Boolean
        ''' <Summary>
        ''' Enable the Statement or transform it to comment.
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 15h58:053 </Published>
        ''' <Updated>[Created=2019/04/20 15h58:053][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        ''' </Summary>

        <CategoryAttribute("Status"), Description("Enable the Statement or transform it to comment."), Browsable(True)>
        Public Property [Enable]() As Boolean
            Get
                Return _Enable
            End Get
            Set(ByVal Value As Boolean)
                _Enable = Value
            End Set
        End Property
#End Region ' (Set|Get) Enable the Statement or transform it to comment.
#Region "|2019/04/20 15h59:878| <01.01.01> <Property> <Status> [Call=Status|Status]"'(Set|Get) the Status as Status.
        Private _Status As Status
        ''' <Summary>
        ''' (Set|Get) the Status as Status.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 15h59:878 </Published>
        ''' <Updated>[Created=2019/04/20 15h59:878][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Status"), Description("(Set|Get) the Status as Status."), Browsable(True)>
        Public Property Status() As Status
            Get
                Return _Status
            End Get
            Set(ByVal Value As Status)
                _Status = Value
            End Set
        End Property
#End Region ' (Set|Get) the Status as Status.
#End Region
#Region "<01.02> <Property> [Constructor]{14}"
#Region "|2019/04/20 16h00:107| <01.02.00> <Property> <Constructor> [Call=Variables|List(Of InnerStatement)]"'(Set|Get) the Variables as List(Of InnerStatement).
        Private _Variables As List(Of InnerStatement)
        ''' <Summary>
        ''' (Set|Get) the Variables as List(Of InnerStatement).
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h00:107 </Published>
        ''' <Updated>[Created=2019/04/20 16h00:107][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Variables as List(Of InnerStatement)."), Browsable(True)>
        Public Property Variables() As List(Of InnerStatement)
            Get
                Return _Variables
            End Get
            Set(ByVal Value As List(Of InnerStatement))
                _Variables = Value
            End Set
        End Property
#End Region ' (Set|Get) the Variables as List(Of InnerStatement).
#Region "|2019/04/20 16h01:982| <01.02.01> <Property> <Constructor> [Call=Statements|List(Of Statement)]"'(Set|Get) the Statements as List(Of Statement).
        Private _Statements As List(Of Statement)
        ''' <Summary>
        ''' (Set|Get) the Statements as List(Of Statement).
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h01:982 </Published>
        ''' <Updated>[Created=2019/04/20 16h01:981][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("(Set|Get) the Statements as List(Of Statement)."), Browsable(True)>
        Public Property Statements() As List(Of Statement)
            Get
                Return _Statements
            End Get
            Set(ByVal Value As List(Of Statement))
                _Statements = Value
            End Set
        End Property
#End Region ' (Set|Get) the Statements as List(Of Statement).
#Region "|2019/04/20 16h02:086| <01.02.02> <Property> <Constructor> [Call=Statement|String]"'(Set|Get) The innerstatement.
        Private _Statement As String
        ''' <Summary>
        ''' The innerstatement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h02:086 </Published>
        ''' <Updated>[Created=2019/04/20 16h02:086][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("The innerstatement."), Browsable(True)>
        Public Property Statement() As String
            Get
                Return _Statement
            End Get
            Set(ByVal Value As String)
                _Statement = Value
            End Set
        End Property
#End Region ' (Set|Get) The innerstatement.
#Region "|2019/04/20 16h04:234| <01.02.03> <Property> <Constructor> [Call=XmlFile|String]"'(Set|Get) the XmlFile as Fichier
        Private _XmlFile As String
        ''' <Summary>
        ''' the XmlFile as Fichier
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h04:234 </Published>
        ''' <Updated>[Created=2019/04/20 16h04:234][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("the XmlFile as Fichier"), Browsable(True)>
        Public Property XmlFile() As String
            Get
                Return _XmlFile
            End Get
            Set(ByVal Value As String)
                _XmlFile = Value
            End Set
        End Property
#End Region ' (Set|Get) the XmlFile as Fichier
#Region "|2019/04/23 21h25:114| <01.02.04> <Property> <Constructors> [Call=VB_OpenStatement|String]"'(Set|Get) the VB_OpenStatement as String.
        Private _VB_OpenStatement As String
        ''' <Summary>
        ''' (Set|Get) the VB_OpenStatement as String.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 21h25:114 </Published>
        ''' <Updated>[Created=2019/04/23 21h25:114][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructors"), Description("(Set|Get) the VB_OpenStatement as String."), Browsable(True)>
        Public Property VB_OpenStatement() As String
            Get
                Return _VB_OpenStatement
            End Get
            Set(ByVal Value As String)
                _VB_OpenStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the VB_OpenStatement as String.
#Region "|2019/04/23 21h26:415| <01.02.05> <Property> <Constructors> [Call=VB_CloseStatement|String]"'(Set|Get) the VB_CloseStatement as String.
        Private _VB_CloseStatement As String
        ''' <Summary>
        ''' (Set|Get) the VB_CloseStatement as String.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 21h26:415 </Published>
        ''' <Updated>[Created=2019/04/23 21h26:415][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructors"), Description("(Set|Get) the VB_CloseStatement as String."), Browsable(True)>
        Public Property VB_CloseStatement() As String
            Get
                Return _VB_CloseStatement
            End Get
            Set(ByVal Value As String)
                _VB_CloseStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the VB_CloseStatement as String.
#Region "|2019/04/23 21h26:810| <01.02.06> <Property> <Constructors> [Call=C_OpenStatement|String]"'(Set|Get) the C_OpenStatement as String
        Private _C_OpenStatement As String
        ''' <Summary>
        ''' (Set|Get) the C_OpenStatement as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 21h26:810 </Published>
        ''' <Updated>[Created=2019/04/23 21h26:810][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructors"), Description("(Set|Get) the C_OpenStatement as String"), Browsable(True)>
        Public Property C_OpenStatement() As String
            Get
                Return _C_OpenStatement
            End Get
            Set(ByVal Value As String)
                _C_OpenStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the C_OpenStatement as String
#Region "|2019/04/23 21h27:892| <01.02.07> <Property> <Constructors> [Call=C_CloseStatement|String]"'(Set|Get) the C_CloseStatement as String
        Private _C_CloseStatement As String
        ''' <Summary>
        ''' (Set|Get) the C_CloseStatement as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 21h27:892 </Published>
        ''' <Updated>[Created=2019/04/23 21h27:892][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructors"), Description("(Set|Get) the C_CloseStatement as String"), Browsable(True)>
        Public Property C_CloseStatement() As String
            Get
                Return _C_CloseStatement
            End Get
            Set(ByVal Value As String)
                _C_CloseStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the C_CloseStatement as String
#Region "|2019/04/23 21h27:195| <01.02.08> <Property> <Constructors> [Call=F_OpenStatement|String]"'(Set|Get) the F_OpenStatement as String
        Private _F_OpenStatement As String
        ''' <Summary>
        ''' (Set|Get) the F_OpenStatement as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 21h27:195 </Published>
        ''' <Updated>[Created=2019/04/23 21h27:195][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructors"), Description("(Set|Get) the F_OpenStatement as String"), Browsable(True)>
        Public Property F_OpenStatement() As String
            Get
                Return _F_OpenStatement
            End Get
            Set(ByVal Value As String)
                _F_OpenStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the F_OpenStatement as String
#Region "|2019/04/23 21h28:912| <01.02.09> <Property> <Constructors> [Call=F_CloseStatement|String]"'(Set|Get) the F_CloseStatement as String
        Private _F_CloseStatement As String
        ''' <Summary>
        ''' (Set|Get) the F_CloseStatement as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 21h28:912 </Published>
        ''' <Updated>[Created=2019/04/23 21h28:912][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructors"), Description("(Set|Get) the F_CloseStatement as String"), Browsable(True)>
        Public Property F_CloseStatement() As String
            Get
                Return _F_CloseStatement
            End Get
            Set(ByVal Value As String)
                _F_CloseStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the F_CloseStatement as String
#Region "|2019/04/23 21h28:469| <01.02.10> <Property> <Constructors> [Call=Python_OpenStatement|String]"'(Set|Get) the Python_OpenStatement as String
        Private _Python_OpenStatement As String
        ''' <Summary>
        ''' (Set|Get) the Python_OpenStatement as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 21h28:469 </Published>
        ''' <Updated>[Created=2019/04/23 21h28:469][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructors"), Description("(Set|Get) the Python_OpenStatement as String"), Browsable(True)>
        Public Property Python_OpenStatement() As String
            Get
                Return _Python_OpenStatement
            End Get
            Set(ByVal Value As String)
                _Python_OpenStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the Python_OpenStatement as String
#Region "|2019/04/23 21h29:894| <01.02.11> <Property> <Constructors> [Call=Python_CloseStatement|String]"'(Set|Get) the Python_CloseStatement as String
        Private _Python_CloseStatement As String
        ''' <Summary>
        ''' (Set|Get) the Python_CloseStatement as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 21h29:894 </Published>
        ''' <Updated>[Created=2019/04/23 21h29:894][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructors"), Description("(Set|Get) the Python_CloseStatement as String"), Browsable(True)>
        Public Property Python_CloseStatement() As String
            Get
                Return _Python_CloseStatement
            End Get
            Set(ByVal Value As String)
                _Python_CloseStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the Python_CloseStatement as String
#Region "|2019/04/23 21h29:213| <01.02.12> <Property> <Constructors> [Call=JS_OpenStatement|String]"'(Set|Get) the JS_OpenStatement as String
        Private _JS_OpenStatement As String
        ''' <Summary>
        ''' (Set|Get) the JS_OpenStatement as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 21h29:213 </Published>
        ''' <Updated>[Created=2019/04/23 21h29:212][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructors"), Description("(Set|Get) the JS_OpenStatement as String"), Browsable(True)>
        Public Property JS_OpenStatement() As String
            Get
                Return _JS_OpenStatement
            End Get
            Set(ByVal Value As String)
                _JS_OpenStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the JS_OpenStatement as String
#Region "|2019/04/23 21h30:761| <01.02.13> <Property> <Constructors> [Call=JS_CloseStatement|String]"'(Set|Get) the JS_CloseStatement as String
        Private _JS_CloseStatement As String
        ''' <Summary>
        ''' (Set|Get) the JS_CloseStatement as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 21h30:761 </Published>
        ''' <Updated>[Created=2019/04/23 21h30:760][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructors"), Description("(Set|Get) the JS_CloseStatement as String"), Browsable(True)>
        Public Property JS_CloseStatement() As String
            Get
                Return _JS_CloseStatement
            End Get
            Set(ByVal Value As String)
                _JS_CloseStatement = Value
            End Set
        End Property
#End Region ' (Set|Get) the JS_CloseStatement as String

#End Region
#Region "<01.03> <Property> [AttributeList]{3}"
#Region "|2019/05/06 13h17:870| <01.03.00> <Property> <AttributeList> [Call=AttributeList|AttributeList]"'(Set|Get) the AttributeList as AttributeList
        Private _AttributeList As Attributelist
        ''' <Summary>
        ''' (Set|Get) the AttributeList as AttributeList
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 13h17:870 </Published>
        ''' <Updated>[Created=2019/05/06 13h17:870][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the AttributeList as AttributeList"), Browsable(True)>
        Public Property AttributeList() As Attributelist
            Get
                Return _AttributeList
            End Get
            Set(ByVal Value As Attributelist)
                _AttributeList = Value
            End Set
        End Property
#End Region ' (Set|Get) the AttributeList as AttributeList
#Region "|2019/05/06 14h12:316| <01.03.01> <Property> <AttributeList> [Call=Browsable|Boolean]"'(Set|Get) the Browsable as Boolean
        Private _Browsable As Boolean
        ''' <Summary>
        ''' (Set|Get) the Browsable as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h12:316 </Published>
        ''' <Updated>[Created=2019/05/06 14h12:316][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the Browsable as Boolean"), Browsable(True)>
        Public Property Browsable() As Boolean
            Get
                Return _Browsable
            End Get
            Set(ByVal Value As Boolean)
                _Browsable = Value
            End Set
        End Property
#End Region ' (Set|Get) the Browsable as Boolean
#Region "|2019/05/06 14h13:964| <01.03.02> <Property> <AttributeList> [Call=Category|String]"'(Set|Get) the Category as String
        Private _Category As String
        ''' <Summary>
        ''' (Set|Get) the Category as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h13:964 </Published>
        ''' <Updated>[Created=2019/05/06 14h13:964][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the Category as String"), Browsable(True)>
        Public Property Category() As String
            Get
                Return _Category
            End Get
            Set(ByVal Value As String)
                _Category = Value
            End Set
        End Property
#End Region ' (Set|Get) the Category as String
#Region "|2019/05/06 14h13:674| <01.03.03> <Property> <AttributeList> [Call=Description|String]"'(Set|Get) the Description as String
        Private _Description As String
        ''' <Summary>
        ''' (Set|Get) the Description as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h13:674 </Published>
        ''' <Updated>[Created=2019/05/06 14h13:674][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the Description as String"), Browsable(True)>
        Public Property Description() As String
            Get
                Return _Description
            End Get
            Set(ByVal Value As String)
                _Description = Value
            End Set
        End Property
#End Region ' (Set|Get) the Description as String
#Region "|2019/05/06 14h14:431| <01.03.04> <Property> <AttributeList> [Call=DefaultValue|String]"'(Set|Get) the DefaultValue as String
        Private _DefaultValue As String
        ''' <Summary>
        ''' (Set|Get) the DefaultValue as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h14:431 </Published>
        ''' <Updated>[Created=2019/05/06 14h14:431][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the DefaultValue as String"), Browsable(True)>
        Public Property DefaultValue() As String
            Get
                Return _DefaultValue
            End Get
            Set(ByVal Value As String)
                _DefaultValue = Value
            End Set
        End Property
#End Region ' (Set|Get) the DefaultValue as String
#Region "|2019/05/06 14h14:818| <01.03.05> <Property> <AttributeList> [Call=Editor|String]"'(Set|Get) the Editor as String
        Private _Editor As String
        ''' <Summary>
        ''' (Set|Get) the Editor as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h14:818 </Published>
        ''' <Updated>[Created=2019/05/06 14h14:818][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the Editor as String"), Browsable(True)>
        Public Property Editor() As String
            Get
                Return _Editor
            End Get
            Set(ByVal Value As String)
                _Editor = Value
            End Set
        End Property
#End Region ' (Set|Get) the Editor as String
#Region "|2019/05/06 14h15:813| <01.03.06> <Property> <AttributeList> [Call=DllImport|String]"'(Set|Get) the DllImport as String
        Private _DllImport As String
        ''' <Summary>
        ''' (Set|Get) the DllImport as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h15:813 </Published>
        ''' <Updated>[Created=2019/05/06 14h15:813][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the DllImport as String"), Browsable(True)>
        Public Property DllImport() As String
            Get
                Return _DllImport
            End Get
            Set(ByVal Value As String)
                _DllImport = Value
            End Set
        End Property
#End Region ' (Set|Get) the DllImport as String
#Region "|2019/05/06 14h15:689| <01.03.07> <Property> <AttributeList> [Call=Custom|AttributeList.Attribute]"'(Set|Get) the Custom as AttributeList.Attribute
        Private _Custom As Attributelist.Attribute
        ''' <Summary>
        ''' (Set|Get) the Custom as AttributeList.Attribute
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h15:689 </Published>
        ''' <Updated>[Created=2019/05/06 14h15:689][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the Custom as AttributeList.Attribute"), Browsable(True)>
        Public Property Custom() As Attributelist.Attribute
            Get
                Return _Custom
            End Get
            Set(ByVal Value As Attributelist.Attribute)
                _Custom = Value
            End Set
        End Property
#End Region ' (Set|Get) the Custom as AttributeList.Attribute
#Region "|2019/05/06 14h16:049| <01.03.08> <Property> <AttributeList> [Call=Deserializable|Boolean]"'(Set|Get) the Deserializable as Boolean
        Private _Deserializable As Boolean
        ''' <Summary>
        ''' (Set|Get) the Deserializable as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h16:049 </Published>
        ''' <Updated>[Created=2019/05/06 14h16:049][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the Deserializable as Boolean"), Browsable(True)>
        Public Property Deserializable() As Boolean
            Get
                Return _Deserializable
            End Get
            Set(ByVal Value As Boolean)
                _Deserializable = Value
            End Set
        End Property
#End Region ' (Set|Get) the Deserializable as Boolean
#Region "|2019/05/06 14h17:701| <01.03.09> <Property> <AttributeList> [Call=NonSerialized|Boolean]"'(Set|Get) the NonSerialized as Boolean
        Private _NonSerialized As Boolean
        ''' <Summary>
        ''' (Set|Get) the NonSerialized as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h17:701 </Published>
        ''' <Updated>[Created=2019/05/06 14h17:701][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the NonSerialized as Boolean"), Browsable(True)>
        Public Property NonSerialized() As Boolean
            Get
                Return _NonSerialized
            End Get
            Set(ByVal Value As Boolean)
                _NonSerialized = Value
            End Set
        End Property
#End Region ' (Set|Get) the NonSerialized as Boolean
#Region "|2019/05/06 14h18:245| <01.03.10> <Property> <AttributeList> [Call=Serializable|Boolean]"'(Set|Get) the Serializable as Boolean
        Private _Serializable As Boolean
        ''' <Summary>
        ''' (Set|Get) the Serializable as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h18:245 </Published>
        ''' <Updated>[Created=2019/05/06 14h18:245][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the Serializable as Boolean"), Browsable(True)>
        Public Property Serializable() As Boolean
            Get
                Return _Serializable
            End Get
            Set(ByVal Value As Boolean)
                _Serializable = Value
            End Set
        End Property
#End Region ' (Set|Get) the Serializable as Boolean
#Region "|2019/05/06 14h18:717| <01.03.11> <Property> <AttributeList> [Call=XmlRoot|String]"'(Set|Get) the XmlRoot as String
        Private _XmlRoot As String
        ''' <Summary>
        ''' (Set|Get) the XmlRoot as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h18:717 </Published>
        ''' <Updated>[Created=2019/05/06 14h18:717][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the XmlRoot as String"), Browsable(True)>
        Public Property XmlRoot() As String
            Get
                Return _XmlRoot
            End Get
            Set(ByVal Value As String)
                _XmlRoot = Value
            End Set
        End Property
#End Region ' (Set|Get) the XmlRoot as String
#Region "|2019/05/06 14h19:628| <01.03.12> <Property> <AttributeList> [Call=XmlIgnore|Boolean]"'(Set|Get) the XmlIgnore as Boolean
        Private _XmlIgnore As Boolean
        ''' <Summary>
        ''' (Set|Get) the XmlIgnore as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h19:628 </Published>
        ''' <Updated>[Created=2019/05/06 14h19:628][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the XmlIgnore as Boolean"), Browsable(True)>
        Public Property XmlIgnore() As Boolean
            Get
                Return _XmlIgnore
            End Get
            Set(ByVal Value As Boolean)
                _XmlIgnore = Value
            End Set
        End Property
#End Region ' (Set|Get) the XmlIgnore as Boolean
#Region "|2019/05/06 14h19:938| <01.03.13> <Property> <AttributeList> [Call=XmlInclude|Boolean]"'(Set|Get) the XmlInclude as Boolean
        Private _XmlInclude As Boolean
        ''' <Summary>
        ''' (Set|Get) the XmlInclude as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h19:938 </Published>
        ''' <Updated>[Created=2019/05/06 14h19:938][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the XmlInclude as Boolean"), Browsable(True)>
        Public Property XmlInclude() As Boolean
            Get
                Return _XmlInclude
            End Get
            Set(ByVal Value As Boolean)
                _XmlInclude = Value
            End Set
        End Property
#End Region ' (Set|Get) the XmlInclude as Boolean
#Region "|2019/05/06 14h20:500| <01.03.14> <Property> <AttributeList> [Call=RelatedImageList|String]"'(Set|Get) the RelatedImageList as String
        Private _RelatedImageList As String
        ''' <Summary>
        ''' (Set|Get) the RelatedImageList as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h20:500 </Published>
        ''' <Updated>[Created=2019/05/06 14h20:500][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("AttributeList"), Description("(Set|Get) the RelatedImageList as String"), Browsable(True)>
        Public Property RelatedImageList() As String
            Get
                Return _RelatedImageList
            End Get
            Set(ByVal Value As String)
                _RelatedImageList = Value
            End Set
        End Property
#End Region ' (Set|Get) the RelatedImageList as String
#End Region
#Region "<01.04> <Property> [Output]{10}"
#Region "|2019/04/20 16h09:078| <01.04.00> <Property> <Output> [Call=Print_VB|List(Of String)]"'(Set|Get) Printed List(Of String) for VB.NET.
        Private _Print_VB As List(Of String)
        ''' <Summary>
        ''' Printed List(Of String) for VB.NET.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h09:078 </Published>
        ''' <Updated>[Created=2019/04/20 16h09:078][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("Printed List(Of String) for VB.NET."), Browsable(True)>
        Public Property Print_VB() As List(Of String)
            Get
                Return _Print_VB
            End Get
            Set(ByVal Value As List(Of String))
                _Print_VB = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed List(Of String) for VB.NET.
#Region "|2019/04/20 16h10:628| <01.04.01> <Property> <Output> [Call=VB|String]"'(Set|Get) the VB Statement as String.
        Private _VB As String
        ''' <Summary>
        ''' (Set|Get) the VB Statement as String.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h10:628 </Published>
        ''' <Updated>[Created=2019/04/20 16h10:628][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("(Set|Get) the VB Statement as String."), Browsable(True)>
        Public Property VB() As String
            Get
                Return _VB
            End Get
            Set(ByVal Value As String)
                _VB = Value
            End Set
        End Property
#End Region ' (Set|Get) the VB Statement as String.
#Region "|2019/04/20 16h11:132| <01.04.02> <Property> <Output> [Call=Print_C|List(Of String)]"'(Set|Get) Printed List(Of String) for C#.
        Private _Print_C As List(Of String)
        ''' <Summary>
        ''' Printed List(Of String) for C#.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h11:132 </Published>
        ''' <Updated>[Created=2019/04/20 16h11:132][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("Printed List(Of String) for C#."), Browsable(True)>
        Public Property Print_C() As List(Of String)
            Get
                Return _Print_C
            End Get
            Set(ByVal Value As List(Of String))
                _Print_C = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed List(Of String) for C#.
#Region "|2019/04/20 16h11:740| <01.04.03> <Property> <Output> [Call=C|String]"'(Set|Get) the C as String
        Private _C As String
        ''' <Summary>
        ''' (Set|Get) the C as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h11:740 </Published>
        ''' <Updated>[Created=2019/04/20 16h11:740][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("(Set|Get) the C as String"), Browsable(True)>
        Public Property C() As String
            Get
                Return _C
            End Get
            Set(ByVal Value As String)
                _C = Value
            End Set
        End Property
#End Region ' (Set|Get) the C as String
#Region "|2019/04/20 16h13:201| <01.04.04> <Property> <Output> [Call=Print_F|List(Of String)]"'(Set|Get) Printed List(Of String) for F#.
        Private _Print_F As List(Of String)
        ''' <Summary>
        ''' Printed List(Of String) for F#.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h13:201 </Published>
        ''' <Updated>[Created=2019/04/20 16h13:201][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("Printed List(Of String) for F#."), Browsable(True)>
        Public Property Print_F() As List(Of String)
            Get
                Return _Print_F
            End Get
            Set(ByVal Value As List(Of String))
                _Print_F = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed List(Of String) for F#.
#Region "|2019/04/20 16h14:002| <01.04.05> <Property> <Output> [Call=F|String]"'(Set|Get) the F as String
        Private _F As String
        ''' <Summary>
        ''' (Set|Get) the F as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h14:002 </Published>
        ''' <Updated>[Created=2019/04/20 16h14:001][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("(Set|Get) the F as String"), Browsable(True)>
        Public Property F() As String
            Get
                Return _F
            End Get
            Set(ByVal Value As String)
                _F = Value
            End Set
        End Property
#End Region ' (Set|Get) the F as String
#Region "|2019/04/20 16h15:053| <01.04.06> <Property> <Output> [Call=Print_Python|List(Of String)]"'(Set|Get) Printed List(Of String) for Python.
        Private _Print_Python As List(Of String)
        ''' <Summary>
        ''' Printed List(Of String) for Python.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h15:053 </Published>
        ''' <Updated>[Created=2019/04/20 16h15:053][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("Printed List(Of String) for Python."), Browsable(True)>
        Public Property Print_Python() As List(Of String)
            Get
                Return _Print_Python
            End Get
            Set(ByVal Value As List(Of String))
                _Print_Python = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed List(Of String) for Python.
#Region "|2019/04/20 16h15:621| <01.04.07> <Property> <Output> [Call=Python|String]"'(Set|Get) the Python as String.
        Private _Python As String
        ''' <Summary>
        ''' (Set|Get) the Python as String.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h15:621 </Published>
        ''' <Updated>[Created=2019/04/20 16h15:621][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("(Set|Get) the Python as String."), Browsable(True)>
        Public Property Python() As String
            Get
                Return _Python
            End Get
            Set(ByVal Value As String)
                _Python = Value
            End Set
        End Property
#End Region ' (Set|Get) the Python as String.
#Region "|2019/04/20 16h16:208| <01.04.08> <Property> <Output> [Call=Print_JavaScript|List(Of String)]"'(Set|Get) Printed List(Of String) for JavaScript.
        Private _Print_JavaScript As List(Of String)
        ''' <Summary>
        ''' Printed List(Of String) for JavaScript.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h16:208 </Published>
        ''' <Updated>[Created=2019/04/20 16h16:208][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("Printed List(Of String) for JavaScript."), Browsable(True)>
        Public Property Print_JavaScript() As List(Of String)
            Get
                Return _Print_JavaScript
            End Get
            Set(ByVal Value As List(Of String))
                _Print_JavaScript = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed List(Of String) for JavaScript.
#Region "|2019/04/20 16h16:394| <01.04.09> <Property> <Output> [Call=JavaScript|String]"'(Set|Get) the JavaScript as String.
        Private _JavaScript As String
        ''' <Summary>
        ''' (Set|Get) the JavaScript as String.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h16:394 </Published>
        ''' <Updated>[Created=2019/04/20 16h16:394][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("(Set|Get) the JavaScript as String."), Browsable(True)>
        Public Property JavaScript() As String
            Get
                Return _JavaScript
            End Get
            Set(ByVal Value As String)
                _JavaScript = Value
            End Set
        End Property
#End Region ' (Set|Get) the JavaScript as String.
#End Region
#Region "<01.05> <Property> [Index]{4}"
#Region "|2019/04/23 19h11:264| <01.05.00> <Property> <Index> [Call=ID|Integer]"'(Set|Get) the ID as Integer
        Private _ID As Integer
        ''' <Summary>
        ''' (Set|Get) the ID as Integer
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h11:264 </Published>
        ''' <Updated>[Created=2019/04/23 19h11:264][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Index"), Description("(Set|Get) the ID as Integer"), DefaultValue(0), Browsable(True)>
        Public Property ID() As Integer
            Get
                Return _ID
            End Get
            Set(ByVal Value As Integer)
                _ID = Value
            End Set
        End Property
#End Region ' (Set|Get) the ID as Integer
#Region "|2019/04/23 19h12:267| <01.05.01> <Property> <Index> [Call=StatementFormat|Format]"'(Set|Get) the StatementFormat as Format
        Private _StatementFormat As Format
        ''' <Summary>
        ''' (Set|Get) the StatementFormat as Format
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h12:267 </Published>
        ''' <Updated>[Created=2019/04/23 19h12:267][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Index"), Description("(Set|Get) the StatementFormat as Format"), Browsable(True)>
        Public Property StatementFormat() As Format
            Get
                Return _StatementFormat
            End Get
            Set(ByVal Value As Format)
                _StatementFormat = Value
            End Set
        End Property
#End Region ' (Set|Get) the StatementFormat as Format
#Region "|2019/04/23 19h13:215| <01.05.02> <Property> <Index> [Call=RegionCategory|Integer]"'(Set|Get) the RegionCategory as Integer
        Private _RegionCategory As Integer
        ''' <Summary>
        ''' (Set|Get) the RegionCategory as Integer
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h13:215 </Published>
        ''' <Updated>[Created=2019/04/23 19h13:215][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Index"), Description("(Set|Get) the RegionCategory as Integer"), DefaultValue(0), Browsable(True)>
        Public Property RegionCategory() As Integer
            Get
                Return _RegionCategory
            End Get
            Set(ByVal Value As Integer)
                _RegionCategory = Value
            End Set
        End Property
#End Region ' (Set|Get) the RegionCategory as Integer
#Region "|2019/04/23 19h13:812| <01.05.03> <Property> <Index> [Call=RegionCode|String]"'(Set|Get) the RegionCode as String
        Private _RegionCode As String
        ''' <Summary>
        ''' (Set|Get) the RegionCode as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h13:812 </Published>
        ''' <Updated>[Created=2019/04/23 19h13:812][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Index"), Description("(Set|Get) the RegionCode as String"), DefaultValue("00.00.00"), Browsable(True)>
        Public Property RegionCode() As String
            Get
                Return _RegionCode
            End Get
            Set(ByVal Value As String)
                _RegionCode = Value
            End Set
        End Property
#End Region ' (Set|Get) the RegionCode as String
#End Region
#Region "<01.06> <Property> [Summary]{22}"
        'https://docs.microsoft.com/en-us/dotnet/api/system.data.metadata.edm.documentation.summary?view=netframework-4.7.2#System_Data_Metadata_Edm_Documentation_Summary
#Region "|2019/04/23 19h26:271| <01.06.00> <Property> <Summary> [Call=AuthorEmail|String]"'(Set|Get) Author email element.
        Private _AuthorEmail As String
        ''' <Summary>
        ''' Author email element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h26:271 </Published>
        ''' <Updated>[Created=2019/04/23 19h26:271][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Author email element."), Browsable(True)>
        Public Property AuthorEmail() As String
            Get
                Return _AuthorEmail
            End Get
            Set(ByVal Value As String)
                _AuthorEmail = Value
            End Set
        End Property
#End Region ' (Set|Get) Author email element.
#Region "|2019/04/23 19h26:617| <01.06.01> <Property> <Summary> [Call=AuthorName|String]"'(Set|Get) Author name element.
        Private _AuthorName As String
        ''' <Summary>
        ''' Author name element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h26:617 </Published>
        ''' <Updated>[Created=2019/04/23 19h26:617][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Author name element."), Browsable(True)>
        Public Property AuthorName() As String
            Get
                Return _AuthorName
            End Get
            Set(ByVal Value As String)
                _AuthorName = Value
            End Set
        End Property
#End Region ' (Set|Get) Author name element.
#Region "|2019/04/23 19h27:115| <01.06.02> <Property> <Summary> [Call=AuthorUri|String]"'(Set|Get) Author URI element.
        Private _AuthorUri As String
        ''' <Summary>
        ''' Author URI element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h27:115 </Published>
        ''' <Updated>[Created=2019/04/23 19h27:115][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Author URI element."), Browsable(True)>
        Public Property AuthorUri() As String
            Get
                Return _AuthorUri
            End Get
            Set(ByVal Value As String)
                _AuthorUri = Value
            End Set
        End Property
#End Region ' (Set|Get) Author URI element.
#Region "|2019/04/23 19h28:519| <01.06.03> <Property> <Summary> [Call=ContributorEmail|String]"'(Set|Get) Contributor email element.
        Private _ContributorEmail As String
        ''' <Summary>
        ''' Contributor email element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h28:519 </Published>
        ''' <Updated>[Created=2019/04/23 19h28:519][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Contributor email element."), Browsable(True)>
        Public Property ContributorEmail() As String
            Get
                Return _ContributorEmail
            End Get
            Set(ByVal Value As String)
                _ContributorEmail = Value
            End Set
        End Property
#End Region ' (Set|Get) Contributor email element.
#Region "|2019/04/23 19h28:620| <01.06.04> <Property> <Summary> [Call=ContributorName|String]"'(Set|Get) Contributor name element.
        Private _ContributorName As String
        ''' <Summary>
        ''' Contributor name element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h28:620 </Published>
        ''' <Updated>[Created=2019/04/23 19h28:620][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Contributor name element."), Browsable(True)>
        Public Property ContributorName() As String
            Get
                Return _ContributorName
            End Get
            Set(ByVal Value As String)
                _ContributorName = Value
            End Set
        End Property
#End Region ' (Set|Get) Contributor name element.
#Region "|2019/04/23 19h29:393| <01.06.05> <Property> <Summary> [Call=ContributorUri|String]"'(Set|Get) Contributor URI element.
        Private _ContributorUri As String
        ''' <Summary>
        ''' Contributor URI element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h29:393 </Published>
        ''' <Updated>[Created=2019/04/23 19h29:393][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Contributor URI element."), Browsable(True)>
        Public Property ContributorUri() As String
            Get
                Return _ContributorUri
            End Get
            Set(ByVal Value As String)
                _ContributorUri = Value
            End Set
        End Property
#End Region ' (Set|Get) Contributor URI element.
#Region "|2019/04/23 19h30:898| <01.06.06> <Property> <Summary> [Call=CustomProperty|String]"'(Set|Get) Custom property element.
        Private _CustomProperty As String
        ''' <Summary>
        ''' Custom property element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h30:898 </Published>
        ''' <Updated>[Created=2019/04/23 19h30:898][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Custom property element."), Browsable(True)>
        Public Property CustomProperty() As String
            Get
                Return _CustomProperty
            End Get
            Set(ByVal Value As String)
                _CustomProperty = Value
            End Set
        End Property
#End Region ' (Set|Get) Custom property element.
#Region "|2019/04/23 19h30:792| <01.06.07> <Property> <Summary> [Call=Published|String]"'(Set|Get) Published resource element.
        Private _Published As String
        ''' <Summary>
        ''' Published resource element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h30:792 </Published>
        ''' <Updated>[Created=2019/04/23 19h30:792][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Published resource element."), Browsable(True)>
        Public Property Published() As String
            Get
                Return _Published
            End Get
            Set(ByVal Value As String)
                _Published = Value
            End Set
        End Property
#End Region ' (Set|Get) Published resource element.
#Region "|2019/04/23 19h31:605| <01.06.08> <Property> <Summary> [Call=Rights|String]"'(Set|Get) Rights protected resource element.
        Private _Rights As String
        ''' <Summary>
        ''' Rights protected resource element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h31:605 </Published>
        ''' <Updated>[Created=2019/04/23 19h31:605][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Rights protected resource element."), Browsable(True)>
        Public Property Rights() As String
            Get
                Return _Rights
            End Get
            Set(ByVal Value As String)
                _Rights = Value
            End Set
        End Property
#End Region ' (Set|Get) Rights protected resource element.
#Region "|2019/04/23 19h31:985| <01.06.09> <Property> <Summary> [Call=Summary|String]"'(Set|Get) Summary Statement element.
        Private _Summary As String
        ''' <Summary>
        ''' Summary Statement element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h31:985 </Published>
        ''' <Updated>[Created=2019/04/23 19h31:985][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Summary Statement element."), Browsable(True)>
        Public Property Summary() As String
            Get
                Return _Summary
            End Get
            Set(ByVal Value As String)
                _Summary = Value
            End Set
        End Property
#End Region ' (Set|Get) Summary Statement element.
#Region "|2019/04/23 19h32:372| <01.06.10> <Property> <Summary> [Call=Title|String]"'(Set|Get) Title element.
        Private _Title As String
        ''' <Summary>
        ''' Title element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h32:372 </Published>
        ''' <Updated>[Created=2019/04/23 19h32:372][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Title element."), Browsable(True)>
        Public Property Title() As String
            Get
                Return _Title
            End Get
            Set(ByVal Value As String)
                _Title = Value
            End Set
        End Property
#End Region ' (Set|Get) Title element.
#Region "|2019/04/23 19h34:029| <01.06.11> <Property> <Summary> [Call=Updated|String]"'(Set|Get) Title element.
        Private _Updated As String
        ''' <Summary>
        ''' Title element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h34:029 </Published>
        ''' <Updated>[Created=2019/04/23 19h34:029][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''  <param name="Status"> The Status of the Element. </param>
        '''  <param name="Situation"> The stituation. </param>
        '''  <param name="Ex"> The exception. </param>
        '''  <param name="Tested">Date Tested. </param>

        <CategoryAttribute("Summary"), Description("Title element."), Browsable(True)>
        Public Property Updated(Optional ByVal Status As Status = Nothing, Optional ByVal Situation As String = Nothing, Optional ByVal Ex As Exception = Nothing, Optional ByVal Tested As Date = Nothing) As String
            Get
                Return _Updated
            End Get
            Set(ByVal Value As String)
                If IsNothing(Status) Then
                Else
                    Dim Str As String = ""
                    If Status = Status.Broken Then
                        Str = "Broken"
                    ElseIf Status = Status.Finished Then
                        Str = "Finished"
                    ElseIf Status = Status.IsNothing Then
                        Str = "IsNothing"
                    ElseIf Status = Status.NotTested Then
                        Str = "NotTested"
                    ElseIf Status = Status.Offline Then
                        Str = "Offline"
                    ElseIf Status = Status.Online Then
                        Str = "Online"
                    ElseIf Status = Status.Running Then
                        Str = "Running"
                    ElseIf Status = Status.StandBye Then
                        Str = "StandBye"
                    ElseIf Status = Status.Warning Then
                        Str = "Warning"
                    End If
                    Dim T As String = "[Created=" & CreationDate & "][Status=" & Str & "]"
                    If Not IsNothing(Tested) Then
                        Dim Test As String = PrintTime(Tested)
                        Dim D As String = "[Tested On]" & Test & "[/Tested On]"
                        T += D
                    End If
                    If Not IsNothing(Ex) Then
                        Dim Err As String = "     [Error]"
                        Dim EndErr As String = "     [/Error]"
                        T += Err & Format_Error(Ex, Me.Title) & EndErr
                    End If
                    If Situation <> "" Then
                        T += "[Situation]" & Situation & "[/Situation]"
                    End If
                    Value = T
                End If
                _Updated = Value
            End Set
        End Property
#End Region ' (Set|Get) Title element.
#Region "|2019/04/23 19h35:292| <01.06.12> <Property> <Summary> [Call=Usage|String]"'(Set|Get)  Usage Statement to Describe how is the object suposed to be used.
        Private _Usage As String
        ''' <Summary>
        '''  Usage Statement to Describe how is the object suposed to be used.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h35:292 </Published>
        ''' <Updated>[Created=2019/04/23 19h35:292][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description(" Usage Statement to Describe how is the object suposed to be used."), Browsable(True)>
        Public Property Usage() As String
            Get
                Return _Usage
            End Get
            Set(ByVal Value As String)
                _Usage = Value
            End Set
        End Property
#End Region ' (Set|Get)  Usage Statement to Describe how is the object suposed to be used.
#Region "|2019/04/23 19h36:910| <01.06.13> <Property> <Summary> [Call=Remarks|String]"'(Set|Get) Any Remarks
        Private _Remarks As String
        ''' <Summary>
        ''' Any Remarks
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h36:910 </Published>
        ''' <Updated>[Created=2019/04/23 19h36:910][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Any Remarks"), Browsable(True)>
        Public Property Remarks() As String
            Get
                Return _Remarks
            End Get
            Set(ByVal Value As String)
                _Remarks = Value
            End Set
        End Property
#End Region ' (Set|Get) Any Remarks
#Region "|2019/04/23 19h37:220| <01.06.14> <Property> <Summary> [Call=Example|String]"'(Set|Get) Example Statement.
        Private _Example As String
        ''' <Summary>
        ''' Example Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h37:220 </Published>
        ''' <Updated>[Created=2019/04/23 19h37:220][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Example Statement."), Browsable(True)>
        Public Property Example() As String
            Get
                Return _Example
            End Get
            Set(ByVal Value As String)
                _Example = Value
            End Set
        End Property
#End Region ' (Set|Get) Example Statement.
#Region "|2019/04/23 19h38:927| <01.06.15> <Property> <Summary> [Call=Note|String]"'(Set|Get) Note Statement.
        Private _Note As String
        ''' <Summary>
        ''' Note Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h38:927 </Published>
        ''' <Updated>[Created=2019/04/23 19h38:927][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        <CategoryAttribute("Summary"), Description("Note Statement."), Browsable(True)>
        Public Property Note() As String
            Get
                Return _Note
            End Get
            Set(ByVal Value As String)
                _Note = Value
            End Set
        End Property
#End Region ' (Set|Get) Note Statement.
#Region "|2019/04/23 19h39:488| <01.06.16> <Property> <Summary> [Call=CreationDate|String]"'(Get) The date time when the object was written
        Private _CreationDate As String = PrintTime()
        ''' <Summary>
        ''' The date time when the object was written
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h39:488 </Published>
        ''' <Updated>[Created=2019/04/23 19h39:488][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("The date time when the object was written"), Browsable(True)>
        Public ReadOnly Property CreationDate() As String
            Get
                Return _CreationDate
            End Get
        End Property
#End Region ' (Get) The date time when the object was written
#Region "|2019/04/23 19h41:005| <01.06.17> <Property> <Summary> [Call=See|String]"'(Set|Get) Reference to an object or Namespace.
        Private _See As String
        ''' <Summary>
        ''' Reference to an object or Namespace.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h41:005 </Published>
        ''' <Updated>[Created=2019/04/23 19h41:005][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Reference to an object or Namespace."), Browsable(True)>
        Public Property See() As String
            Get
                Return _See
            End Get
            Set(ByVal Value As String)
                _See = Value
            End Set
        End Property
#End Region ' (Set|Get) Reference to an object or Namespace.
#Region "|2019/04/23 19h42:383| <01.06.18> <Property> <Summary> [Call=SeeAlso|String]"'(Set|Get) Reference to an object or Namespace.
        Private _SeeAlso As String
        ''' <Summary>
        ''' Reference to an object or Namespace.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h42:383 </Published>
        ''' <Updated>[Created=2019/04/23 19h42:383][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("Reference to an object or Namespace."), Browsable(True)>
        Public Property SeeAlso() As String
            Get
                Return _SeeAlso
            End Get
            Set(ByVal Value As String)
                _SeeAlso = Value
            End Set
        End Property
#End Region ' (Set|Get) Reference to an object or Namespace.
#Region "|2019/04/23 22h30:242| <01.06.19> <Property> <Summary> [Call=Params|List(Of Summary.Param)]"'(Set|Get) the Params as List(Of Summary.Param)
        Private _Params As List(Of Summary.Param)
        ''' <Summary>
        ''' (Set|Get) the Params as List(Of Summary.Param)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 22h30:242 </Published>
        ''' <Updated>[Created=2019/04/23 22h30:242][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("(Set|Get) the Params as List(Of Summary.Param)"), Browsable(True)>
        Public Property Params() As List(Of Summary.Param)
            Get
                Return _Params
            End Get
            Set(ByVal Value As List(Of Summary.Param))
                _Params = Value
            End Set
        End Property
#End Region ' (Set|Get) the Params as List(Of Summary.Param)
#Region "|2019/05/09 16h10:474| <01.06.20> <Property> <Summary> [Call=Rules|String]"'(Set|Get) the Rules as String
        Private _Rules As String
        ''' <Summary>
        ''' (Set|Get) the Rules as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/09 16h10:474 </Published>
        ''' <Updated>[Created=2019/05/09 16h10:474][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("(Set|Get) the Rules as String"), Browsable(True)>
        Public Property Rules() As String
            Get
                Return _Rules
            End Get
            Set(ByVal Value As String)
                _Rules = Value
            End Set
        End Property
#End Region ' (Set|Get) the Rules as String
#Region "|2019/05/09 16h11:397| <01.06.21> <Property> <Summary> [Call=Syntax|String]"'(Set|Get) the Syntax as String
        Private _Syntax As String
        ''' <Summary>
        ''' (Set|Get) the Syntax as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/09 16h11:397 </Published>
        ''' <Updated>[Created=2019/05/09 16h11:397][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("(Set|Get) the Syntax as String"), Browsable(True)>
        Public Property Syntax() As String
            Get
                Return _Syntax
            End Get
            Set(ByVal Value As String)
                _Syntax = Value
            End Set
        End Property
#End Region ' (Set|Get) the Syntax as String

#End Region
#End Region
#Region "<2> [Enumeration]"
#Region "|2019/04/23 19h03:796| <02.00.00> <Enumeration> <Format> [Call=Format|Enumeration]{15}"'The enumeration of Format.
        ''' <Summary>
        ''' (Set|Get) The enumeration of Format.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 19h03:791 </Published>
        ''' <Updated>[Created=2019/04/23 19h03:785][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        Public Enum Format
            ''' <summary> Import Statement. </summary>
            [Import] = 0
            ''' <summary> Property Statement. </summary>
            [Property] = 1
            ''' <summary> Enumeration Statement. </summary>
            [Enumeration] = 2
            ''' <summary> Structure Statement. </summary>
            [Structure] = 3
            ''' <summary>Sub Statement. </summary>
            [Sub] = 4
            ''' <summary>Function Statement. </summary>
            [Function] = 5
            ''' <summary>Loader Statement. </summary>
            [Loader] = 6
            ''' <summary>Declare Statement. </summary>
            [Declare] = 7
            ''' <summary>Class Statement. </summary>
            [Class] = 8
            ''' <summary>Constante Statement. </summary>
            [Constante] = 9
            ''' <summary>Delegate Statement. </summary>
            [Delegate] = 10
            ''' <summary>Event Statement. </summary>
            [Event] = 11
            ''' <summary>RaiseEvent Statement. </summary>
            [RaiseEvent] = 12
            ''' <summary>Module Statement. </summary>
            [Module] = 13
            ''' <summary>Namespace Statement.</summary>
            [NamesPace] = 14
            ''' <summary>Runtime Statement. </summary>
            [Runtime] = 15
            ''' <summary>No Statement. </summary>
            [Nothing] = 16
        End Enum
#End Region ' The enumeration of Format.

#End Region
#Region "<3> [Structures]"

#End Region
#Region "<4> [Sub]"
#Region "<04.00> <Sub> [Reset]"
        Public Sub Reset()
            With Me
                .AttributeList = New Attributelist
                .AuthorEmail = My.Settings.AuthorEmail
                .AuthorName = My.Settings.AuthorName
                .AuthorUri = My.Settings.AuthorUrl

                .Browsable = True

                .C = ""
                .Category = ""
                .ContributorEmail = ""
                .ContributorName = ""
                .ContributorUri = ""
                .Custom = New Attributelist.Attribute
                .CustomProperty = ""

                .DefaultValue = ""
                .Description = ""
                .Deserializable = False
                .DllImport = ""

                .Editor = ""
                .Enable = True
                .Example = ""

                .F = ""

                .ID = 0
                .ImageIndex = 0

                .JavaScript = ""

                .Name = ""
                .NonSerialized = False
                .Note = ""

                .Params = New List(Of Summary.Param)
                .Print_C = New List(Of String)
                .Print_F = New List(Of String)
                .Print_JavaScript = New List(Of String)
                .Print_Python = New List(Of String)
                .Print_VB = New List(Of String)
                .Published = ""
                .Python = ""

                .RegionCategory = 0
                .RelatedImageList = ""
                .Remarks = ""
                .Rights = ""
                .Rules = ""

                .See = ""
                .SeeAlso = ""
                .Serializable = False
                .Statement = ""
                .StatementFormat = Format.Nothing
                .Statements = New List(Of Statement)
                .Status = Status.StandBye
                .Summary = ""
                .Syntax = ""

                .Tag = Nothing
                .Text = ""
                .Title = ""
                .Tooltip = ""

                .Updated(.Status, "reseting the class",, Now) = ""
                .Usage = ""

                .Variables = New List(Of InnerStatement)
                .VB = ""

                .XmlFile = ""
                .XmlIgnore = False
                .XmlInclude = False
                .XmlRoot = ""
            End With
        End Sub
#End Region
        Public Overrides Function ToString() As String
            If Me.Name = "" Then
                Return "NewStatement"
            Else
                Return Me.Name
            End If
        End Function
#End Region
#Region "<5> [Function]"
        ''' <summary>
        ''' Serialize an object statement accroding to project name
        ''' </summary>
        ''' <param name="Obj"></param>
        ''' <returns></returns>
        Public Shared Function Serialize(ByVal Obj As Object) As TestItem
            Dim Result As New TestItem("Builder.Serialize", "Serialize a Statement")
            Dim Path As String = My.Application.Info.DirectoryPath & "\Serialized object\"

            If Not IsNothing(Obj) Then
                ' Result.AddParam("Obj", Obj, Obj.Name)
            End If

            'If Not IsNothing(Virtual) Then
            ' If Virtual.ClassName <> "" Then
            ' Path += Virtual.ClassName & "\"
            ' End If
            ' End If
#Region "<Possibilities>"
            Dim Obj_Importation As New VbNET.Import
            Dim Obj_Property As New VbNET.Property
            Dim Obj_Enumeration As New VbNET.Enumeration
            Dim Obj_Structure As New VbNET.Structure
            Dim Obj_Sub As New VbNET.Sub
            Dim Obj_Function As New VbNET.Function
            ' Dim Obj_Runtime As New VB.Runtime
            Dim Obj_Loader As New VbNET.Loader
            Dim Obj_Class As New VbNET.Class
            Dim Obj_Module As New VbNET.Module
            Dim Obj_Constante As New VbNET.Constante
            Dim Obj_Event As New VbNET.Event
            Dim Obj_Declare As New VbNET.Declare
            Dim Obj_Delegate As New VbNET.Delegate
#End Region
            If TypeOf Obj Is VbNET.Import Then
                Obj_Importation = Obj
                Path += "\Importation\" & Obj_Importation.Name & ".Import "
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Importation", Obj_Importation, Obj_Importation.Name)
            ElseIf TypeOf Obj Is VbNET.Property Then
                Obj_Property = Obj
                Path += "\Property\" & Obj_Property.Name & ".Property "
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Property", Obj_Property, Obj_Property.Name)
            ElseIf TypeOf Obj Is VbNET.Enumeration Then
                Obj_Enumeration = Obj
                Path += "\Enumerate\" & Obj_Enumeration.Name & ".Enumeration"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Enumeration", Obj_Enumeration, Obj_Enumeration.Name)
            ElseIf TypeOf Obj Is VbNET.Structure Then
                Obj_Structure = Obj
                Path += "\Structure\" & Obj_Structure.Name & ".Structure"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                '' Result.AddParam("Obj_Structure", Obj_Structure, Obj_Structure.Name)
            ElseIf TypeOf Obj Is VbNET.Sub Then
                Obj_Sub = Obj
                Path += "\Sub\" & Obj_Sub.Name & ".Sub"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                '  Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Sub", Obj_Sub, Obj_Sub.Name)

            ElseIf TypeOf Obj Is VbNET.Function Then
                Obj_Function = Obj
                Path += "\Function\" & Obj_Function.Name & ".Function"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Function", Obj_Function, Obj_Function.Name)
                ' ElseIf TypeOf Obj Is VB.Runtime Then
                '     Obj_Runtime = Obj
                '     Path += "\Runtime\" & Obj_Runtime.Name & ".Runtime_Statement"
                '     If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                '     IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                ' End If
                ' Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Runtime", Obj_Runtime, Obj_Runtime.Name)
            ElseIf TypeOf Obj Is VbNET.Loader Then
                Obj_Loader = Obj
                Path += "\Loader\" & Obj_Loader.Name & ".Loader"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Loader", Obj_Loader, Obj_Loader.Name)
            ElseIf TypeOf Obj Is VbNET.Class Then
                Obj_Class = Obj
                Path += "\Class\" & Obj_Class.Name & ".Class"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Class", Obj_Class, Obj_Class.Name)
            ElseIf TypeOf Obj Is VbNET.Module Then
                Obj_Module = Obj
                Path += "\Module\" & Obj_Module.Name & ".Module"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                '  Result.AddParam("Obj_Module", Obj_Module, Obj_Module.Name)
            ElseIf TypeOf Obj Is VbNET.Constante Then
                Obj_Constante = Obj
                Path += "\Constante\" & Obj_Constante.Name & ".Constante"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                'Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Constante", Obj_Constante, Obj_Constante.Name)
            ElseIf TypeOf Obj Is VbNET.Event Then
                Obj_Event = Obj
                Path += "\Event\" & Obj_Event.Name & ".Event"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Event", Obj_Event, Obj_Event.Name)
            ElseIf TypeOf Obj Is VbNET.Declare Then
                Obj_Declare = Obj
                Path += "\Declare\" & Obj_Declare.Name & ".Declare"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Declare", Obj_Declare, Obj_Declare.Name)
            ElseIf TypeOf Obj Is VbNET.Delegate Then
                Obj_Delegate = Obj
                Path += "\Delegate\" & Obj_Delegate.Name & ".Delegate"
                If IO.Directory.Exists(IO.Path.GetDirectoryName(Path)) = False Then
                    IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(Path))
                End If
                ' Result.AddParam("Path", Path, Path)
                ' Result.AddParam("Obj_Delegate", Obj_Delegate, Obj_Delegate.Name)
            End If
            Try
                Dim XmlTool = New Xml.Serialization.XmlSerializer(Obj.GetType)
                Dim StrWriter As New StreamWriter(Path)
                XmlTool.Serialize(StrWriter, Obj)
                Result.Status = Status.Online
            Catch ex As Exception
                Result.Status = Status.Broken
                Result.AddBug(ex, "Serialization", "Seralize")
            End Try

            Dim Fi As New IO.FileInfo(Path)
            Result.Output = Fi
            Result.OutputString = Fi.FullName
            Return Result
        End Function
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            Reset()
        End Sub
#End Region
#Region "<06.00> <Loader> [Simple]"
        ''' <summary>
        ''' Opening a simple new Statement
        ''' </summary>
        ''' <param name="StatementName">Stroring the name of the statement of indexation purposes.</param>
        ''' <param name="StatementContent">Storing the statement body.</param>
        ''' <param name="AttributeList"></param>
        ''' <param name="Summary"></param>
        Public Sub New(ByVal StatementName As String,
                       ByVal StatementContent As String,
                       Optional ByVal AttributeList As Attributelist = Nothing,
                       Optional ByVal Summary As Summary = Nothing)
            Reset()
            With Me
                .Name = StatementName
                .Statement = StatementContent
                If Not IsNothing(AttributeList) Then
                    .AttributeList = AttributeList
                    With .AttributeList
                        Me.Browsable = .Browsable
                        Me.Category = .Category
                        If Not IsNothing(.Custom) Then
                            Me.Custom = .Custom
                        End If
                        Me.DefaultValue = .DefaultValue
                        Me.Description = .Description
                        Me.Deserializable = .Deserializable
                        If Not IsNothing(.DllImport) Then
                            Me.DllImport = .DllImport
                        End If
                        Me.Editor = .Editor
                        Me.NonSerialized = .NonSerialized
                        Me.RelatedImageList = .RelatedImageList
                        Me.Serializable = .Serializable
                        Me.XmlIgnore = .XmlIgnore
                        Me.XmlInclude = .XmlInclude
                        Me.XmlRoot = .XmlRoot
                    End With
                End If
                If Not IsNothing(Summary) Then
                    With Summary
                        Me.Summary = .Summary
                        Me.AuthorEmail = .AuthorEmail
                        Me.AuthorName = .AuthorName
                        Me.AuthorUri = .AuthorUri
                        Me.ContributorEmail = .ContributorEmail
                        Me.ContributorName = .ContributorName
                        Me.ContributorUri = .ContributorUri
                        Me.CustomProperty = .CustomProperty
                        Me.Example = .Example
                        Me.Note = .Note
                        Me.Params = .Params
                        Me.Published = .Published
                        Me.Rights = .Rights
                        Me.See = .See
                        Me.SeeAlso = .SeeAlso
                    End With
                End If
                '  .XmlFile = New Fichier
            End With
        End Sub
#End Region
#Region "<06.01> <Loader> [Filled]"
        Public Sub New(ByVal Name As String,
                 Optional ByVal AttributeList As Attributelist = Nothing,
                 Optional ByVal AuthorEmail As String = "saadry.dunkel@outlook.com",
                 Optional ByVal AuthorName As String = "Saadry Dunkel",
                 Optional ByVal AuthorUri As String = "https://www.saadry-dunkel.com",
                 Optional ByVal Browsable As Boolean = True,
                 Optional ByVal CategoryName As String = "",
                 Optional ByVal ContributorEmail As String = "",
                 Optional ByVal ContributorName As String = "",
                 Optional ByVal ContributorUri As String = "",
                 Optional ByVal CustomProperty As String = "",
                 Optional ByVal DefaultValue As String = "",
                 Optional ByVal DllImport As String = "",
                 Optional ByVal Example As String = "",
                 Optional ByVal ID As String = "",
                 Optional ByVal Note As String = "",
                 Optional ByVal Params As List(Of Summary.Param) = Nothing,
                 Optional ByVal RegionCategory As Integer = 0,
                 Optional ByVal Statement As String = "",
                 Optional ByVal Definition As String = "",
                 Optional ByVal Enable As Boolean = True)
            With Me
                .Name = Name
                .AttributeList = AttributeList
                .AuthorEmail = AuthorEmail
                .AuthorName = AuthorName
                .AuthorUri = AuthorUri
                .Browsable = Browsable
                .Category = CategoryName
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUri

            End With
        End Sub
#End Region
#End Region
#Region "<7> [Runtime]"

#End Region
#Region "<8> [Class]"

#End Region

    End Class
#End Region
#Region "|08.00.18| <Class> <Statement> [InnerStatement]"
    ''' <summary>
    ''' The inner statement contains element which are inside a Class / Const / Delcare / Delegate / Enum / Erase / Event / Implements / Imports / Inherits / Interface / Module / Namespace / Option Explicit / Option Infer / Option Strict / Property / Structure
    ''' Possible formulation : [AddHandler] / [Call] / [Case] / [Continue] / [Dim] / [Do_Loop] / [Else] /  [ElseIf] / [End] / [End_keyword] / [Error] /
    ''' [Exit] / [For_Each] / [For_Next] / [Function] / [Get] / [GoTo] / [If_Then_Else] / [Mid] / [OnError] / [Operator] / [Option_keyword] /
    ''' [Option_Compare] / [RaiseEvent] / [ReDim] / [REM] / [RemoveHandler] / [Resume] / [Return] / [Select_Case] / [Set] / 
    ''' [Stop] / [Sub] / [SyncLock] / [Then] / [Throw] / [Try_Catch_Finally] / [Using] / [While_EndWhile] / [With_EndWith] / [Yield]
    ''' </summary>
    <Serializable>
    Public Class InnerStatement
#Region "<1> [Property]"
#Region "<01.00> <Property> [Info]"
#Region "|2019/04/21 17h36:625| <01.00.00> <Property> <Info> [Call=ImageIndex|Integer]"'(Set|Get) The ImageIndex of the Statement.
        Private _ImageIndex As Integer
        ''' <Summary>
        ''' The ImageIndex of the Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h36:624 </Published>
        ''' <Updated>[Created=2019/04/21 17h36:617][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("The ImageIndex of the Statement."), Browsable(True)>
        Public Property ImageIndex() As Integer
            Get
                Return _ImageIndex
            End Get
            Set(ByVal Value As Integer)
                _ImageIndex = Value
            End Set
        End Property
#End Region ' (Set|Get) The ImageIndex of the Statement.
#Region "|2019/04/21 17h36:022| <01.00.01> <Property> <Info> [Call=Name|String]"'(Set|Get) the Name as String
        Private _Name As String
        ''' <Summary>
        ''' (Set|Get) the Name as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h36:022 </Published>
        ''' <Updated>[Created=2019/04/21 17h36:022][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Name as String"), Browsable(True)>
        Public Property Name() As String
            Get
                Return _Name
            End Get
            Set(ByVal Value As String)
                _Name = Value
            End Set
        End Property
#End Region ' (Set|Get) the Name as String
#Region "|2019/04/21 17h37:833| <01.00.02> <Property> <Info> [Call=Tag|Object]"'(Set|Get) the Tag as Object
        Private _Tag As Object
        ''' <Summary>
        ''' (Set|Get) the Tag as Object
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h37:833 </Published>
        ''' <Updated>[Created=2019/04/21 17h37:833][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Tag as Object"), Browsable(True)>
        Public Property Tag() As Object
            Get
                Return _Tag
            End Get
            Set(ByVal Value As Object)
                _Tag = Value
            End Set
        End Property
#End Region ' (Set|Get) the Tag as Object
#Region "|2019/04/21 17h38:665| <01.00.03> <Property> <Info> [Call=Text|String]"'(Set|Get) the Text as String
        Private _Text As String
        ''' <Summary>
        ''' (Set|Get) the Text as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h38:665 </Published>
        ''' <Updated>[Created=2019/04/21 17h38:665][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Text as String"), Browsable(True)>
        Public Property Text() As String
            Get
                Return _Text
            End Get
            Set(ByVal Value As String)
                _Text = Value
            End Set
        End Property
#End Region ' (Set|Get) the Text as String
#Region "|2019/04/21 17h39:890| <01.00.04> <Property> <Info> [Call=Tooltip|String]"'(Set|Get) The full statement string.
        Private _Tooltip As String
        ''' <Summary>
        ''' The full statement string.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h39:890 </Published>
        ''' <Updated>[Created=2019/04/21 17h39:890][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("The full statement string."), Browsable(True)>
        Public Property Tooltip() As String
            Get
                Return _Tooltip
            End Get
            Set(ByVal Value As String)
                _Tooltip = Value
            End Set
        End Property
#End Region ' (Set|Get) The full statement string.
#Region "|2019/04/21 17h40:038| <01.00.05> <Property> <Info> [Call=[Enable]|Boolean]"'(Set|Get) Enable the Statement or transform it to comment.
        Private _Enable As Boolean
        ''' <Summary>
        ''' Enable the Statement or transform it to comment.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h40:038 </Published>
        ''' <Updated>[Created=2019/04/21 17h40:038][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Enable the Statement or transform it to comment."), Browsable(True)>
        Public Property [Enable]() As Boolean
            Get
                Return _Enable
            End Get
            Set(ByVal Value As Boolean)
                _Enable = Value
            End Set
        End Property
#End Region ' (Set|Get) Enable the Statement or transform it to comment.
#Region "|2019/04/21 17h41:638| <01.00.06> <Property> <Info> [Call=Items|List(Of InnerStatement)]"'(Set|Get) the Items as List(Of InnerStatement).
        Private _Items As List(Of InnerStatement)
        ''' <Summary>
        ''' (Set|Get) the Items as List(Of InnerStatement).
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h41:638 </Published>
        ''' <Updated>[Created=2019/04/21 17h41:638][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Items as List(Of InnerStatement)."), Browsable(True)>
        Public Property Items() As List(Of InnerStatement)
            Get
                Return _Items
            End Get
            Set(ByVal Value As List(Of InnerStatement))
                _Items = Value
            End Set
        End Property
#End Region ' (Set|Get) the Items as List(Of InnerStatement).
#End Region
#Region "<01.01> <Property> [Help]"
#Region "|2019/04/21 17h52:403| <01.01.00> <Property> <Help> [Call=Syntax|String]"'(Set|Get) the Syntax as String
        Private _Syntax As String
        ''' <Summary>
        ''' (Set|Get) the Syntax as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h52:403 </Published>
        ''' <Updated>[Created=2019/04/21 17h52:403][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Help"), Description("(Set|Get) the Syntax as String"), Browsable(True)>
        Public Property Syntax() As String
            Get
                Return _Syntax
            End Get
            Set(ByVal Value As String)
                _Syntax = Value
            End Set
        End Property
#End Region ' (Set|Get) the Syntax as String
#Region "|2019/04/21 17h53:513| <01.01.01> <Property> <Help> [Call=Example|String]"'(Set|Get) the Example as String
        Private _Example As String
        ''' <Summary>
        ''' (Set|Get) the Example as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h53:513 </Published>
        ''' <Updated>[Created=2019/04/21 17h53:513][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Help"), Description("(Set|Get) the Example as String"), Browsable(True)>
        Public Property Example() As String
            Get
                Return _Example
            End Get
            Set(ByVal Value As String)
                _Example = Value
            End Set
        End Property
#End Region ' (Set|Get) the Example as String
#Region "|2019/04/21 17h54:538| <01.01.02> <Property> <Help> [Call=Remarks|String]"'(Set|Get) the Example as String
        Private _Remarks As String
        ''' <Summary>
        ''' (Set|Get) the Example as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h54:538 </Published>
        ''' <Updated>[Created=2019/04/21 17h54:538][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Help"), Description("(Set|Get) the Example as String"), Browsable(True)>
        Public Property Remarks() As String
            Get
                Return _Remarks
            End Get
            Set(ByVal Value As String)
                _Remarks = Value
            End Set
        End Property
#End Region ' (Set|Get) the Example as String
#Region "|2019/04/21 17h55:955| <01.01.03> <Property> <Help> [Call=Rules|String]"'(Set|Get) the Rules as String
        Private _Rules As String
        ''' <Summary>
        ''' (Set|Get) the Rules as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h55:955 </Published>
        ''' <Updated>[Created=2019/04/21 17h55:955][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Help"), Description("(Set|Get) the Rules as String"), Browsable(True)>
        Public Property Rules() As String
            Get
                Return _Rules
            End Get
            Set(ByVal Value As String)
                _Rules = Value
            End Set
        End Property
#End Region ' (Set|Get) the Rules as String
#Region "|2019/04/21 17h55:595| <01.01.04> <Property> <Help> [Call=Definition|String]"'(Set|Get) the Definition as String
        Private _Definition As String
        ''' <Summary>
        ''' (Set|Get) the Definition as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 17h55:595 </Published>
        ''' <Updated>[Created=2019/04/21 17h55:595][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Help"), Description("(Set|Get) the Definition as String"), Browsable(True)>
        Public Property Definition() As String
            Get
                Return _Definition
            End Get
            Set(ByVal Value As String)
                _Definition = Value
            End Set
        End Property
#End Region ' (Set|Get) the Definition as String
#End Region
#Region "<01.02> <Property> [Localisation]"
#Region "|2019/04/21 18h01:182| <01.02.00> <Property> <Localisation> [Call=Parent|Statement]"'(Set|Get) the Parent as Statement
        Private _Parent As Statement
        ''' <Summary>
        ''' (Set|Get) the Parent as Statement
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/21 18h01:182 </Published>
        ''' <Updated>[Created=2019/04/21 18h01:182][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Localisation"), Description("(Set|Get) the Parent as Statement"), Browsable(True)>
        Public Property Parent() As Statement
            Get
                Return _Parent
            End Get
            Set(ByVal Value As Statement)
                _Parent = Value
            End Set
        End Property
#End Region ' (Set|Get) the Parent as Statement
#End Region
#Region "<01.03> <Property> [Output]"
#Region "|2019/04/20 16h09:078| <01.03.00> <Property> <Output> [Call=Print_VB|List(Of String)]"'(Set|Get) Printed List(Of String) for VB.NET.
        Private _Print_VB As List(Of String)
        ''' <Summary>
        ''' Printed List(Of String) for VB.NET.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h09:078 </Published>
        ''' <Updated>[Created=2019/04/20 16h09:078][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("Printed List(Of String) for VB.NET."), Browsable(True)>
        Public Property Print_VB() As List(Of String)
            Get
                Return _Print_VB
            End Get
            Set(ByVal Value As List(Of String))
                _Print_VB = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed List(Of String) for VB.NET.
#Region "|2019/04/20 16h10:628| <01.03.01> <Property> <Output> [Call=VB|String]"'(Set|Get) the VB Statement as String.
        Private _VB As String
        ''' <Summary>
        ''' (Set|Get) the VB Statement as String.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h10:628 </Published>
        ''' <Updated>[Created=2019/04/20 16h10:628][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("(Set|Get) the VB Statement as String."), Browsable(True)>
        Public Property VB() As String
            Get
                Return _VB
            End Get
            Set(ByVal Value As String)
                _VB = Value
            End Set
        End Property
#End Region ' (Set|Get) the VB Statement as String.
#Region "|2019/04/20 16h11:132| <01.03.02> <Property> <Output> [Call=Print_C|List(Of String)]"'(Set|Get) Printed List(Of String) for C#.
        Private _Print_C As List(Of String)
        ''' <Summary>
        ''' Printed List(Of String) for C#.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h11:132 </Published>
        ''' <Updated>[Created=2019/04/20 16h11:132][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("Printed List(Of String) for C#."), Browsable(True)>
        Public Property Print_C() As List(Of String)
            Get
                Return _Print_C
            End Get
            Set(ByVal Value As List(Of String))
                _Print_C = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed List(Of String) for C#.
#Region "|2019/04/20 16h11:740| <01.03.03> <Property> <Output> [Call=C|String]"'(Set|Get) the C as String
        Private _C As String
        ''' <Summary>
        ''' (Set|Get) the C as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h11:740 </Published>
        ''' <Updated>[Created=2019/04/20 16h11:740][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("(Set|Get) the C as String"), Browsable(True)>
        Public Property C() As String
            Get
                Return _C
            End Get
            Set(ByVal Value As String)
                _C = Value
            End Set
        End Property
#End Region ' (Set|Get) the C as String
#Region "|2019/04/20 16h13:201| <01.03.04> <Property> <Output> [Call=Print_F|List(Of String)]"'(Set|Get) Printed List(Of String) for F#.
        Private _Print_F As List(Of String)
        ''' <Summary>
        ''' Printed List(Of String) for F#.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h13:201 </Published>
        ''' <Updated>[Created=2019/04/20 16h13:201][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("Printed List(Of String) for F#."), Browsable(True)>
        Public Property Print_F() As List(Of String)
            Get
                Return _Print_F
            End Get
            Set(ByVal Value As List(Of String))
                _Print_F = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed List(Of String) for F#.
#Region "|2019/04/20 16h14:002| <01.03.05> <Property> <Output> [Call=F|String]"'(Set|Get) the F as String
        Private _F As String
        ''' <Summary>
        ''' (Set|Get) the F as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h14:002 </Published>
        ''' <Updated>[Created=2019/04/20 16h14:001][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("(Set|Get) the F as String"), Browsable(True)>
        Public Property F() As String
            Get
                Return _F
            End Get
            Set(ByVal Value As String)
                _F = Value
            End Set
        End Property
#End Region ' (Set|Get) the F as String
#Region "|2019/04/20 16h15:053| <01.03.06> <Property> <Output> [Call=Print_Python|List(Of String)]"'(Set|Get) Printed List(Of String) for Python.
        Private _Print_Python As List(Of String)
        ''' <Summary>
        ''' Printed List(Of String) for Python.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h15:053 </Published>
        ''' <Updated>[Created=2019/04/20 16h15:053][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("Printed List(Of String) for Python."), Browsable(True)>
        Public Property Print_Python() As List(Of String)
            Get
                Return _Print_Python
            End Get
            Set(ByVal Value As List(Of String))
                _Print_Python = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed List(Of String) for Python.
#Region "|2019/04/20 16h15:621| <01.03.07> <Property> <Output> [Call=Python|String]"'(Set|Get) the Python as String.
        Private _Python As String
        ''' <Summary>
        ''' (Set|Get) the Python as String.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h15:621 </Published>
        ''' <Updated>[Created=2019/04/20 16h15:621][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("(Set|Get) the Python as String."), Browsable(True)>
        Public Property Python() As String
            Get
                Return _Python
            End Get
            Set(ByVal Value As String)
                _Python = Value
            End Set
        End Property
#End Region ' (Set|Get) the Python as String.
#Region "|2019/04/20 16h16:208| <01.03.08> <Property> <Output> [Call=Print_JavaScript|List(Of String)]"'(Set|Get) Printed List(Of String) for JavaScript.
        Private _Print_JavaScript As List(Of String)
        ''' <Summary>
        ''' Printed List(Of String) for JavaScript.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h16:208 </Published>
        ''' <Updated>[Created=2019/04/20 16h16:208][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("Printed List(Of String) for JavaScript."), Browsable(True)>
        Public Property Print_JavaScript() As List(Of String)
            Get
                Return _Print_JavaScript
            End Get
            Set(ByVal Value As List(Of String))
                _Print_JavaScript = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed List(Of String) for JavaScript.
#Region "|2019/04/20 16h16:394| <01.03.09> <Property> <Output> [Call=JavaScript|String]"'(Set|Get) the JavaScript as String.
        Private _JavaScript As String
        ''' <Summary>
        ''' (Set|Get) the JavaScript as String.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/20 16h16:394 </Published>
        ''' <Updated>[Created=2019/04/20 16h16:394][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Output"), Description("(Set|Get) the JavaScript as String."), Browsable(True)>
        Public Property JavaScript() As String
            Get
                Return _JavaScript
            End Get
            Set(ByVal Value As String)
                _JavaScript = Value
            End Set
        End Property
#End Region ' (Set|Get) the JavaScript as String.
#End Region
#End Region


#Region "<2> [Enumeration]"

#End Region
#Region "<3> [Structures]"

#End Region
#Region "<4> [Sub]"

#End Region
#Region "<5> [Function]"

#End Region
#Region "<6> [Loader]"

#End Region
#Region "<7> [Runtime]"

#End Region
#Region "<8> [Class]"
#Region "<08.00.00> <Class> <InnerStatement> Statement.AddHandler]"
        ''' <summary>
        ''' Associates an event with an event handler at run time.
        ''' <see cref="vbnet.Event"/>
        ''' </summary>
        Public Class Handler_Statement
            Inherits InnerStatement

#Region "<1> [Property]{2}"
#Region "<01.00> <Property> [Variable]{2}"
#Region "[2019/04/06 13h57:922]<01.00.00> <Property> Statement.AddHandler.EventName|String"
            Private _EventName As String
            ''' <summary>
            ''' (Set|Get) The name of the event to handle.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 13:57</author>
            <CategoryAttribute("Variable"),
    Description("(Set|Get) The name of the event to handle."),
    Browsable(True)>
            Public Property EventName() As String
                Get
                    Return _EventName
                End Get
                Set(ByVal value As String)
                    _EventName = value
                End Set
            End Property
#End Region 'The name of the event to handle.
#Region "[2019/04/06 13h58:225]<01.00.01> <Property> Statement.AddHandler.Eventhandler|String"
            Private _Eventhandler As String
            ''' <summary>
            ''' (Set|Get) The name of a procedure that handles the event.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 13:58</author>
            <CategoryAttribute("Variable"),
    Description("(Set|Get) The name of a procedure that handles the event."),
    Browsable(True)>
            Public Property Eventhandler() As String
                Get
                    Return _Eventhandler
                End Get
                Set(ByVal value As String)
                    _Eventhandler = value
                End Set
            End Property
#End Region 'The name of a procedure that handles the event.
#End Region
#Region "<01.01> <Property> [Constructor]{1}"
#Region "[2019/04/06 14h25:470]<01.01.00> <Property> Statement.AddHandler.Obj|Object"
            Private _Obj As Object
            ''' <summary>
            ''' (Set|Get) The associated class object.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 14:25</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) The associated class object."),
    Browsable(True)>
            Public Property Obj() As Object
                Get
                    Return _Obj
                End Get
                Set(ByVal value As Object)
                    _Obj = value
                End Set
            End Property
#End Region 'The associated class object.
#End Region
#End Region
#Region "<4> [Sub]{1}"
#Region "<04.00> <Sub> [Help]{1}"
#Region "<04.00.00> <Sub> <Help> Statement.AddHandler.ConstructHelp()"
            Public Sub ConstructHelp()
                With Me
                    .Syntax = "|AddHandler| event |, AddressOf| eventhandler"
                    .Example = "Sub TestEvents()
    Dim Obj As New Class1
    ' Associate an event handler with an event.
    AddHandler Obj.Ev_Event, AddressOf EventHandler
    ' Call the method to raise the event.
    Obj.CauseSomeEvent()
    ' Stop handling events.
    RemoveHandler Obj.Ev_Event, AddressOf EventHandler
    ' This event will not be handled.
    Obj.CauseSomeEvent()
End Sub

Sub EventHandler()
    ' Handle the event.
    MsgBox(""""EventHandler caught event."""")
End Sub

Public Class Class1
    ' Declare an event.
    Public Event Ev_Event()
    Sub CauseSomeEvent()
        ' Raise an event.
        RaiseEvent Ev_Event()
    End Sub
End Class"
                    .Remarks = "The AddHandler and RemoveHandler statements allow you to start and stop event handling at any time during program execution.
                                    The signature of the eventhandler procedure must match the signature of the event event.
                                    The Handles keyword and the AddHandler statement both allow you to specify that particular procedures handle particular events, but there are differences. The AddHandler statement connects procedures to events at run time. Use the Handles keyword when defining a procedure to specify that it handles a particular event. For more information, see Handles."

                    .Definition = ""
                End With
            End Sub

#End Region
#End Region

#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Print]"
#Region "<05.00.00> <Function> <Print> [Print(Code|CodeLanguage)|String]"
            ''' <summary>
            ''' Print the code give information
            ''' </summary>
            ''' <param name="Add"></param>
            ''' <param name="Code"></param>
            ''' <returns></returns>
            Public Function Print(ByVal Add As Boolean,
                                      Optional ByVal Code As CodeLanguage = CodeLanguage.Vb) As String
                Dim Result As String = ""
                If Code = CodeLanguage.Vb Then
                    If Add = True Then
                        Result = [AddHandler] & EventName & ", " & [AddressOf] & Eventhandler & Environment.NewLine
                    Else
                        Result = [RemoveHandler] & EventName & ", " & [AddressOf] & Eventhandler & Environment.NewLine
                    End If
                ElseIf Code = CodeLanguage.C Then
                    If Add = True Then
                        Result = EventName & " += New " & Eventhandler & " ;" & Environment.NewLine
                    Else
                        Result = EventName & " -= New " & Eventhandler & " ;" & Environment.NewLine
                    End If
                ElseIf Code = CodeLanguage.F Then
                    'A vérifier
                    'https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/members/events

                    If Add = True Then
                        Result = "let " & EventName & " = New " & Eventhandler & Environment.NewLine &
                                EventName & ".Click.Add(fun " & Eventhandler & ")"
                    Else
                        Result = "let " & EventName & " = New " & Eventhandler & Environment.NewLine &
                                EventName & ".Click.Remove(fun " & Eventhandler & ")"
                    End If
                ElseIf Code = CodeLanguage.Python Then
                    Result = "// Not implemented"
                ElseIf Code = CodeLanguage.JavaScript Then
                    'Source
                    'https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/channel-integration-framework/reference/microsoft-ciframework/addhandler
                    If Add = True Then
                        Result = "Microsoft.CIFramework.addHandler(" & EventName & " ," & Eventhandler & ")" & Environment.NewLine
                    Else
                        Result = "Microsoft.CIFramework.removeHandler(" & EventName & " ," & Eventhandler & ")" & Environment.NewLine
                    End If
                End If
                Return Result
            End Function
#End Region
#End Region
#Region "<05.01> <Function> [Overrides]"
#Region "<05.02> <Function> <Overrides> [ToString()|String]"
            Public Overrides Function ToString() As String
                Return Print(True) & Print(False)
            End Function
#End Region
#End Region
#Region "<05.02> <Function> [Shared]"
#Region "<05.02.00> <Function> <Shared> [Detect(Str|String)|Handler_Statement"
            ''' <summary>
            ''' Detect if there exist any handler_Statement in a given string.
            ''' https://stackoverflow.com/questions/1244197/search-for-new-line-position-in-a-vb-net-string-variable-using-instr
            ''' </summary>
            ''' <param name="Str"></param>
            ''' <returns></returns>
            Public Shared Function Detect(ByVal Str As String) As List(Of Handler_Statement)
                Dim Result As New List(Of Handler_Statement)
                Dim FileContent As String = My.Computer.FileSystem.ReadAllText("C:\Temp\a.text")
                Dim a As Integer = 1
                For i = 1 To FileContent.Length
                    Dim xx As String = Mid(FileContent, i, 1)
                    If xx = Chr(10) Then
                        If Mid(FileContent, i - 1, 1) = Chr(13) Then
                            Dim Ligne As String = Mid(FileContent, a, (i - a) - 1)
                            'Test for vb
                            If Ligne.Contains([AddHandler]) Or Ligne.Contains([RemoveHandler]) Then
                                Dim Handler As New Handler_Statement()
                                Dim Ref As New List(Of String)
                                Ref = StringRange.GetNumberofWords(Ligne)
                                With Handler
                                    .EventName = Ref(2).ToString
                                    .Eventhandler = Ref(4).ToString
                                End With
                                Result.Add(Handler)
                            End If
                            a = i
                        End If
                    End If

                Next
                Return Result
            End Function
#End Region
#End Region
#End Region
#Region "<6> [Loader]{2}"
#Region "<06.00> <Loader> Statement.AddHandler.New()"
            ''' <summary>
            ''' 
            ''' </summary>
            Public Sub New()
                ConstructHelp()

            End Sub
#End Region
#Region "<06.00> <Loader> Statement.AddHandler.New(Parent|Statement,Name|String,EventHandler|String,[Obj]|Object)"
            ''' <summary>
            ''' 
            ''' </summary>
            Public Sub New(ByRef Parent As Statement,
                               ByVal Name As String,
                               Optional ByVal EventHandler As String = "",
                               Optional ByVal Obj As Object = Nothing)
                ConstructHelp()
                If Name <> "" Then
                    Me.Name = Name
                Else
                    Me.Name = "NewHandler"
                End If
                If IsNothing(Parent) Then
                Else
                    Me.Parent = Parent
                    Me.Text = Me.Parent.ToString & "." & Name
                End If
                If Not IsNothing(Obj) Then
                    Obj = Obj
                Else
                    If EventHandler <> "" Then
                        Me.Eventhandler = EventHandler
                    End If
                End If
                Me.Tooltip = Me.ToString
            End Sub
#End Region

#End Region
#Region "<9> [Constante]{1}"
#Region "<09.00> <Constante> Statement.AddHandler.KeyWords{3}"
            Public Const [AddHandler] As String = "AddHandler  "
            Public Const [RemoveHandler] As String = "RemoveHandler "
            Public Const [AddressOf] As String = "AddressOf "
#End Region
#End Region

        End Class
#End Region
#Region "<08.00.01> <Class> <InnerStatement> Statement.Call_Statement]"
        ''' <summary>
        '''Transfers control to a Function, Sub, or dynamic-link library (DLL) procedure.
        ''' <see cref="[Event]"/>
        ''' </summary>
        Public Class Call_Statement
            Inherits InnerStatement

#Region "<1> [Property]{2}"
#Region "<01.00> <Property> [Variable]{2}"
#Region "[2019/04/06 19h00:922]<01.00.00> <Property> Statement.Call_Statement.ProcedureName|String"
            Private _ProcedureName As String
            ''' <summary>
            ''' (Set|Get) Required. Name of the procedure to call.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 13:57</author>
            <CategoryAttribute("Variable"),
    Description("(Set|Get) Required. Name of the procedure to call."),
    Browsable(True)>
            Public Property ProcedureName() As String
                Get
                    Return _ProcedureName
                End Get
                Set(ByVal value As String)
                    _ProcedureName = value
                End Set
            End Property
#End Region 'Required. Name of the procedure to call.
#Region "[2019/04/06 19h01:225]<01.00.01> <Property> Statement.AddHandler.ArgumentList|String"
            Private _ArgumentList As String
            ''' <summary>
            ''' (Set|Get) Optional. List of variables or expressions representing arguments that are passed to the procedure when it is called. Multiple arguments are separated by commas. If you include argumentList, you must enclose it in parentheses.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 13:58</author>
            <CategoryAttribute("Variable"),
    Description("(Set|Get) Optional. List of variables or expressions representing arguments that are passed to the procedure when it is called. Multiple arguments are separated by commas. If you include argumentList, you must enclose it in parentheses."),
    Browsable(True)>
            Public Property ArgumentList() As String
                Get
                    Return _ArgumentList
                End Get
                Set(ByVal value As String)
                    _ArgumentList = value
                End Set
            End Property
#End Region 'Optional. List of variables or expressions representing arguments that are passed to the procedure when it is called. Multiple arguments are separated by commas. If you include argumentList, you must enclose it in parentheses.
#End Region
#Region "<01.01> <Property> [Constructor]{1}"
#Region "[2019/04/06 14h25:470]<01.01.00> <Property> Statement.AddHandler.Obj|Object"
            Private _Obj As Object
            ''' <summary>
            ''' (Set|Get) The associated class object.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 14:25</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) The associated class object."),
    Browsable(True)>
            Public Property Obj() As Object
                Get
                    Return _Obj
                End Get
                Set(ByVal value As Object)
                    _Obj = value
                End Set
            End Property
#End Region 'The associated class object.
#End Region
#End Region
#Region "<4> [Sub]{1}"
#Region "<04.00> <Sub> [Help]{1}"
#Region "<04.00.00> <Sub> <Help> Statement.AddHandler.ConstructHelp()"
            Public Sub ConstructHelp()
                'https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference//statements/call-statement
                With Me
                    .Syntax = "[ Call ] procedureName [ (argumentList) ]"
                    .Example = "The following code shows two examples where the Call keyword is necessary to call a procedure. In both examples, the called expression doesn't start with an identifier.

                                    Sub TestCall()
                                        Call (Sub() Console.Write(""""Hello""""))()

                                        Call New TheClass().ShowText()
                                    End Sub

                                    Class TheClass
                                        Public Sub ShowText()
                                            Console.Write("""" World"""")
                                        End Sub
                                    End Class"

                    .Remarks = "You can use the Call keyword when you call a procedure. For most procedure calls, you aren’t required to use this keyword." & Environment.NewLine &
                                    "You typically use the Call keyword when the called expression doesn’t start with an identifier. Use of the Call keyword for other uses isn’t recommended." & Environment.NewLine &
                                    "If theThen procedure returns a value, the Call statement discards it."

                    .Definition = "Transfers control to a Function, Sub, or dynamic-link library (DLL) procedure."
                End With
            End Sub

#End Region
#End Region

#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Print]"
#Region "<05.00.00> <Function> <Print> [Print(Code|CodeLanguage)|String]"
            ''' <summary>
            ''' Print the code give information
            ''' </summary>
            ''' <param name="Add"></param>
            ''' <param name="Code"></param>
            ''' <returns></returns>
            Public Function Print(ByVal Add As Boolean,
                                      Optional ByVal Code As CodeLanguage = CodeLanguage.Vb) As String
                Dim Result As String = ""
                If Code = CodeLanguage.Vb Then
                    Result = [Call] & ProcedureName & ", " & ArgumentList & Environment.NewLine
                ElseIf Code = CodeLanguage.C Then
                    Result = "// Not implemented"
                ElseIf Code = CodeLanguage.F Then
                    Result = "// Not implemented"
                ElseIf Code = CodeLanguage.Python Then
                    Result = "// Not implemented"
                ElseIf Code = CodeLanguage.JavaScript Then
                    Result = "// Not implemented"
                End If
                Return Result
            End Function
#End Region
#End Region
#Region "<05.01> <Function> [Overrides]"
#Region "<05.02> <Function> <Overrides> [ToString()|String]"
            Public Overrides Function ToString() As String
                Return Print(True) & Print(False)
            End Function
#End Region
#End Region
#Region "<05.02> <Function> [Shared]"
#Region "<05.02.00> <Function> <Shared> [Detect(Str|String)|Handler_Statement"
            ''' <summary>
            ''' Detect if there exist any handler_Statement in a given string.
            ''' https://stackoverflow.com/questions/1244197/search-for-new-line-position-in-a-vb-net-string-variable-using-instr
            ''' </summary>
            ''' <param name="Str"></param>
            ''' <returns></returns>
            Public Shared Function Detect(ByVal Str As String) As List(Of Call_Statement)
                Dim Result As New List(Of Call_Statement)
                Dim FileContent As String = My.Computer.FileSystem.ReadAllText("C:\Temp\a.text")
                Dim a As Integer = 1
                For i = 1 To FileContent.Length
                    Dim xx As String = Mid(FileContent, i, 1)
                    If xx = Chr(10) Then
                        If Mid(FileContent, i - 1, 1) = Chr(13) Then
                            Dim Ligne As String = Mid(FileContent, a, (i - a) - 1)
                            'Test for vb
                            If Ligne.Contains([Call]) Then
                                Dim Element As New Call_Statement()
                                Dim Ref As New List(Of String)
                                Ref = StringRange.GetNumberofWords(Ligne)
                                With Element
                                    .ProcedureName = Ref(2).ToString
                                    .ArgumentList = Ref(3).ToString
                                End With
                                Result.Add(Element)
                            End If
                            a = i
                        End If
                    End If

                Next
                Return Result
            End Function
#End Region
#End Region

#End Region
#Region "<6> [Loader]{2}"
#Region "<06.00> <Loader> Statement.AddHandler.New()"
            ''' <summary>
            ''' 
            ''' </summary>
            Public Sub New()
                ConstructHelp()

            End Sub
#End Region
#Region "<06.00> <Loader> Statement.AddHandler.New(Parent|Statement,Name|String,argumentList|String,[Obj]|Object)"
            ''' <summary>
            ''' 
            ''' </summary>
            Public Sub New(ByRef Parent As Statement,
                               ByVal Name As String,
                               Optional ByVal argumentList As String = "",
                               Optional ByVal Obj As Object = Nothing)
                ConstructHelp()
                If Name <> "" Then
                    Me.Name = Name
                Else
                    Me.Name = "NewHandler"
                End If
                If IsNothing(Parent) Then
                Else
                    Me.Parent = Parent
                    Me.Text = Me.Parent.ToString & "." & Name
                End If
                If Not IsNothing(Obj) Then
                    Obj = Obj
                Else
                    If argumentList <> "" Then
                        Me.ArgumentList = argumentList
                    End If
                End If
                Me.Tooltip = Me.ToString
            End Sub
#End Region

#End Region
#Region "<9> [Constante]{1}"
#Region "<09.00> <Constante> Statement.AddHandler.KeyWords{1}"
            Public Const [Call] As String = "Call "
#End Region
#End Region

        End Class
#End Region
#Region "<08.00.02> <Class> <InnerStatement> Statement.Continue_Statement]"
        ''' <summary>
        '''Transfers control immediately to the next iteration of a loop.
        ''' </summary>
        Public Class Continue_Statement
            Inherits InnerStatement

#Region "<1> [Property]{2}"
#Region "<01.00> <Property> [Variable]{0}"
#End Region
#Region "<01.01> <Property> [Constructor]{0}"
#End Region
#End Region
#Region "<4> [Sub]{1}"
#Region "<04.00> <Sub> [Help]{1}"
#Region "<04.00.00> <Sub> <Help> Statement.AddHandler.ConstructHelp()"
            Public Sub ConstructHelp()
                'https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference//statements/call-statement
                With Me
                    .Syntax = "Continue { Do | For | While }  "
                    .Example = "The following code example uses the Continue While statement to skip to the next column of an array if a divisor is zero. The Continue While is inside a For loop. It transfers to the While col < lastcol statement, which is the next iteration of the innermost While loop that contains the For loop.

                                    Dim row, col As Integer
                                    Dim lastrow As Integer = 6
                                    Dim lastcol As Integer = 10
                                    Dim a(,) As Double = New Double(lastrow, lastcol) {}
                                    Dim b(7) As Double
                                    row = -1
                                    While row < lastrow
                                        row += 1
                                        col = -1
                                        While col < lastcol
                                            col += 1
                                            a(row, col) = 0
                                            For i As Integer = 0 To b.GetUpperBound(0)
                                                If b(i) = col Then
                                                    Continue While
                                                Else
                                                    a(row, col) += (row + b(i)) / (col - b(i))
                                                End If
                                            Next i
                                        End While
                                    End While"

                    .Remarks = "You can transfer from inside a Do, For, or While loop to the next iteration of that loop. Control passes immediately to the loop condition test, which is equivalent to transferring to the For or While statement, or to the Do or Loop statement that contains the Until or While clause." & Environment.NewLine &
                                   "You can use Continue at any location in the loop that allows transfers. The rules allowing transfer of control are the same as with the GoTo Statement." & Environment.NewLine &
                                    "For example, if a loop is totally contained within a Try block, a Catch block, or a Finally block, you can use Continue to transfer out of the loop. If, on the other hand, the Try...End Try structure is contained within the loop, you cannot use Continue to transfer control out of the Finally block, and you can use it to transfer out of a Try or Catch block only if you transfer completely out of the Try...End Try structure." & Environment.NewLine &
                                    "If you have nested loops of the same type, for example a Do loop within another Do loop, a Continue Do statement skips to the next iteration of the innermost Do loop that contains it. You cannot use Continue to skip to the next iteration of a containing loop of the same type." & Environment.NewLine &
                                    "If you have nested loops of different types, for example a Do loop within a For loop, you can skip to the next iteration of either loop by using either Continue Do or Continue For."

                    .Definition = "Transfers control immediately to the next iteration of a loop."
                End With
            End Sub

#End Region
#End Region

#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Print]"
#Region "<05.00.00> <Function> <Print> [Print(Code|CodeLanguage)|String]"
            ''' <summary>
            ''' Print the code give information
            ''' </summary>
            ''' <param name="Add"></param>
            ''' <param name="Code"></param>
            ''' <returns></returns>
            Public Function Print(ByVal Add As Boolean,
                                      Optional ByVal Code As CodeLanguage = CodeLanguage.Vb) As String
                Dim Result As String = ""
                If Code = CodeLanguage.Vb Then
                    Result = [Continue] & Environment.NewLine
                ElseIf Code = CodeLanguage.C Then
                    Result = [Continue] & " ;" & Environment.NewLine
                ElseIf Code = CodeLanguage.F Then
                    Result = "// Not implemented"
                ElseIf Code = CodeLanguage.Python Then
                    Result = "// Not implemented"
                ElseIf Code = CodeLanguage.JavaScript Then
                    Result = "// Not implemented"
                End If
                Return Result
            End Function
#End Region
#End Region
#Region "<05.01> <Function> [Overrides]"
#Region "<05.02> <Function> <Overrides> [ToString()|String]"
            Public Overrides Function ToString() As String
                Return Print(True) & Print(False)
            End Function
#End Region
#End Region
#Region "<05.02> <Function> [Shared]"
#Region "<05.02.00> <Function> <Shared> [Detect(Str|String)|Handler_Statement"
            ''' <summary>
            ''' Detect if there exist any handler_Statement in a given string.
            ''' https://stackoverflow.com/questions/1244197/search-for-new-line-position-in-a-vb-net-string-variable-using-instr
            ''' </summary>
            ''' <param name="Str"></param>
            ''' <returns></returns>
            Public Shared Function Detect(ByVal Str As String) As List(Of Continue_Statement)
                Dim Result As New List(Of Continue_Statement)
                Dim FileContent As String = My.Computer.FileSystem.ReadAllText("C:\Temp\a.text")
                Dim a As Integer = 1
                For i = 1 To FileContent.Length
                    Dim xx As String = Mid(FileContent, i, 1)
                    If xx = Chr(10) Then
                        If Mid(FileContent, i - 1, 1) = Chr(13) Then
                            Dim Ligne As String = Mid(FileContent, a, (i - a) - 1)
                            'Test for vb
                            If Ligne.Contains([Continue]) Then
                                Dim Element As New Continue_Statement()
                                Dim Ref As New List(Of String)
                                Ref = StringRange.GetNumberofWords(Ligne)
                                Element.Tooltip += Ligne
                                Result.Add(Element)
                            End If
                            a = i
                        End If
                    End If

                Next
                Return Result
            End Function
#End Region
#End Region

#End Region
#Region "<6> [Loader]{2}"
#Region "<06.00> <Loader> Statement.AddHandler.New()"
            ''' <summary>
            ''' 
            ''' </summary>
            Public Sub New()
                ConstructHelp()

            End Sub
#End Region
#Region "<06.00> <Loader> Statement.AddHandler.New(Parent|Statement,Name|String)"
            ''' <summary>
            ''' 
            ''' </summary>
            Public Sub New(ByRef Parent As Statement,
                               ByVal Name As String)
                ConstructHelp()
                If Name <> "" Then
                    Me.Name = Name
                Else
                    Me.Name = "NewHandler"
                End If
                If IsNothing(Parent) Then
                Else
                    Me.Parent = Parent
                    Me.Text = Me.Parent.ToString & "." & Name
                End If
                'If Not IsNothing(Obj) Then
                ' Obj = Obj
                ' Else
                ' If argumentList <> "" Then
                ' 'Me.ArgumentList = argumentList
                ' End If
                'End If
                Me.Tooltip = Me.ToString
            End Sub
#End Region

#End Region
#Region "<9> [Constante]{1}"
#Region "<09.00> <Constante> Statement.AddHandler.KeyWords{1}"
#End Region
#End Region

        End Class
#End Region
#Region "<08.00.03> <Class> <InnerStatement> Statement.Dim_Statement]"
        ''' <summary>
        '''Declares and allocates storage space for one or more variables.
        ''' [ (attributelist) ] [ accessmodifier ] [[ Shared ] [ Shadows ] | [ Static ]] [ ReadOnly ]
        ''' Dim [ WithEvents ] variablelist 
        ''' </summary>
        Public Class Dim_Statement
            Inherits InnerStatement

#Region "<1> [Property]{2}"
#Region "<01.00> <Property> [Variable]{1}"
#Region "[2019/03/28 17h48:488]<01.00.00> <Property> [VariableLists|List(Of VariableList)]"
            Private _VariableLists As List(Of VariableList)
            ''' <summary>
            ''' (Set|Get) Required. List of variables being declared in this statement.. variable [ , variable ... ] Each variable has the following syntax and parts:variablename [ ( [ boundslist ] ) ] [ As [ New ] datatype [ With{[ .propertyname = propinitializer [ , ... ] ] } ] ] [ = initializer ]
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 28.03.2019 17:48</author>
            <CategoryAttribute("Variable"),
    Description("(Set|Get) Required. List of variables being declared in this statement.. variable [ , variable ... ] Each variable has the following syntax and parts:variablename [ ( [ boundslist ] ) ] [ As [ New ] datatype [ With{[ .propertyname = propinitializer [ , ... ] ] } ] ] [ = initializer ]"),
    Browsable(True)>
            Public Property VariableLists() As List(Of VariableList)
                Get
                    Return _VariableLists
                End Get
                Set(ByVal value As List(Of VariableList))
                    _VariableLists = value
                End Set
            End Property
#End Region 'Required. List of variables being declared in this statement.. variable [ , variable ... ] Each variable has the following syntax and parts:variablename [ ( [ boundslist ] ) ] [ As [ New ] datatype [ With{[ .propertyname = propinitializer [ , ... ] ] } ] ] [ = initializer ]
#End Region
#Region "<01.01> <Property> [Constructor]{2}"
#Region "<01.01.00> <Property> <Constructor> [Required]{2}"
#Region "[2019/03/28 17h23:615]<01.01.00.00> <Property> [VariableName|String]"
            Private _VariableName As String
            ''' <summary>
            ''' (Set|Get) Required. Name of the variable. See Declared Element Names.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 28.03.2019 17:23</author>
            <CategoryAttribute("Required"),
    Description("(Set|Get) Required. Name of the variable. See Declared Element Names."),
    Browsable(True)>
            Public Property VariableName() As String
                Get
                    Return _VariableName
                End Get
                Set(ByVal value As String)
                    _VariableName = value
                End Set
            End Property
#End Region 'Required. Name of the variable. See Declared Element Names.
#Region "[2019/03/28 17h24:874]<01.01.00.01> <Property> [PropInitializer|String]"
            Private _PropInitializer As String
            ''' <summary>
            ''' (Set|Get) Required after propertyname =. The expression that is evaluated and assigned to the property name.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 28.03.2019 17:24</author>
            <CategoryAttribute("Required"),
    Description("(Set|Get) Required after propertyname =. The expression that is evaluated and assigned to the property name."),
    Browsable(True)>
            Public Property PropInitializer() As String
                Get
                    Return _PropInitializer
                End Get
                Set(ByVal value As String)
                    _PropInitializer = value
                End Set
            End Property
#End Region 'Required after propertyname =. The expression that is evaluated and assigned to the property name.
#End Region
#Region "<01.01.01> <Property> <Constructor> [Optional]{6}"
#Region "[2019/03/28 17h25:003]<01.01.01.00> <Property> [BoundsList|String]"
            Private _BoundsList As String
            ''' <summary>
            ''' (Set|Get) Optional. List of bounds of each dimension of an array variable.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 28.03.2019 17:25</author>
            <CategoryAttribute("Optional"),
    Description("(Set|Get) Optional. List of bounds of each dimension of an array variable."),
    Browsable(True)>
            Public Property BoundsList() As String
                Get
                    Return _BoundsList
                End Get
                Set(ByVal value As String)
                    _BoundsList = value
                End Set
            End Property
#End Region 'Optional. List of bounds of each dimension of an array variable.
#Region "[2019/03/28 17h26:951]<01.01.01.01> <Property> [New|Boolean]"
            Private _New As Boolean
            ''' <summary>
            ''' (Set|Get) Optional. Creates a new instance of the class when the Dim statement runs.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 28.03.2019 17:26</author>
            <CategoryAttribute("Optional"),
    Description("(Set|Get) Optional. Creates a new instance of the class when the Dim statement runs."),
    Browsable(True)>
            Public Property [New]() As Boolean
                Get
                    Return _New
                End Get
                Set(ByVal value As Boolean)
                    _New = value
                End Set
            End Property
#End Region 'Optional. Creates a new instance of the class when the Dim statement runs.
#Region "[2019/03/28 17h27:183]<01.01.01.02> <Property> [DataType|String]"
            Private _DataType As String
            ''' <summary>
            ''' (Set|Get) Optional. Data type of the variable.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 28.03.2019 17:27</author>
            <CategoryAttribute("Optional"),
    Description("(Set|Get) Optional. Data type of the variable."),
    Browsable(True)>
            Public Property DataType() As String
                Get
                    Return _DataType
                End Get
                Set(ByVal value As String)
                    _DataType = value
                End Set
            End Property
#End Region 'Optional. Data type of the variable.
#Region "[2019/03/28 17h28:659]<01.01.01.03> <Property> [With|String]"
            Private _With As String
            ''' <summary>
            ''' (Set|Get) Optional. Introduces the object initializer list.With{[ .propertyname = propinitializer [ , ... ] ] }
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 28.03.2019 17:28</author>
            <CategoryAttribute("Optional"),
    Description("(Set|Get) Optional. Introduces the object initializer list.With{[ .propertyname = propinitializer [ , ... ] ] }"),
    Browsable(True)>
            Public Property [With]() As String
                Get
                    Return _With
                End Get
                Set(ByVal value As String)
                    _With = value
                End Set
            End Property
#End Region 'Optional. Introduces the object initializer list.With{[ .propertyname = propinitializer [ , ... ] ] }
#Region "[2019/03/28 17h29:027]<01.01.01.04> <Property> [PropertyName|String]"
            Private _PropertyName As String
            ''' <summary>
            ''' (Set|Get) Optional. The name of a property in the class you are making an instance of.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 28.03.2019 17:29</author>
            <CategoryAttribute("Optional"),
    Description("(Set|Get) Optional. The name of a property in the class you are making an instance of."),
    Browsable(True)>
            Public Property PropertyName() As String
                Get
                    Return _PropertyName
                End Get
                Set(ByVal value As String)
                    _PropertyName = value
                End Set
            End Property
#End Region 'Optional. The name of a property in the class you are making an instance of.
#Region "[2019/03/28 17h30:395]<01.01.01.05> <Property> [Initializer|String]"
            Private _Initializer As String
            ''' <summary>
            ''' (Set|Get) Optional if New is not specified. Expression that is evaluated and assigned to the variable when it is created.  [ = initializer ]
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 28.03.2019 17:30</author>
            <CategoryAttribute("Optional"),
    Description("(Set|Get) Optional if New is not specified. Expression that is evaluated and assigned to the variable when it is created.  [ = initializer ]"),
    Browsable(True)>
            Public Property Initializer() As String
                Get
                    Return _Initializer
                End Get
                Set(ByVal value As String)
                    _Initializer = value
                End Set
            End Property
#End Region 'Optional if New is not specified. Expression that is evaluated and assigned to the variable when it is created.  [ = initializer ]
#End Region
#End Region
#End Region
#Region "<4> [Sub]{1}"
#Region "<04.00> <Sub> [Help]{1}"
#Region "<04.00.00> <Sub> <Help> Statement.AddHandler.ConstructHelp()"
            Public Sub ConstructHelp()
                'https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference//statements/call-statement
                With Me
                    .Syntax = "[ <attributelist> ] [ accessmodifier ] [[ Shared ] [ Shadows ] | [ Static ]] [ ReadOnly ]   
                        Dim [ WithEvents ] variablelist"

                    .Example = "The following example declares variables by using the Dim statement with various options.
                                    ' Declare and initialize a Long variable.
                                    Dim startingAmount As Long = 500

                                    ' Declare a variable that refers to a Button object,
                                    ' create a Button object, and assign the Button object
                                    ' to the variable.
                                    Dim switchButton As New System.Windows.Forms.Button

                                    ' Declare a local variable that always retains its value,
                                    ' even after its procedure returns to the calling code.
                                    Static totalSales As Double

                                    ' Declare a variable that refers to an array.
                                    Dim highTemperature(31) As Integer

                                    ' Declare and initialize an array variable that
                                    ' holds four Boolean check values.
                                    Dim checkValues() As Boolean = {False, False, True, False}"

                    .Remarks = "The Visual Basic compiler uses the Dim statement to determine the variable's data type and other information, such as what code can access the variable. The following example declares a variable to hold an Integer value." & Environment.NewLine &
                                    "Dim numberOfStudents As Integer  " & Environment.NewLine &
                                    "You can specify any data type or the name of an enumeration, structure, class, or interface." & Environment.NewLine &
                                    "Dim finished As Boolean  " & Environment.NewLine &
                                    "Dim monitorBox As System.Windows.Forms.Form  " & Environment.NewLine &
                                    "For a reference type, you use the New keyword to create a new instance of the class or structure that is specified by the data type. If you use New, you do not use an initializer expression. Instead, you supply arguments, if they are required, to the constructor of the class from which you are creating the variable." & Environment.NewLine &
                                    "Dim bottomLabel As New System.Windows.Forms.Label  " & Environment.NewLine &
                                    "You can Declare a variable In a procedure, block, class, structure, Or module. You cannot declare a variable in a source file, namespace, Or interface. For more information, see Declaration Contexts And Default Access Levels." & Environment.NewLine &
                                    "A variable that is declared at module level, outside any procedure, is a member variable or field. Member variables are in scope throughout their class, structure, or module. A variable that is declared at procedure level is a local variable. Local variables are in scope only within their procedure or block." & Environment.NewLine &
                                    "The following access modifiers are used to declare variables outside a procedure: Public, Protected, Friend, Protected Friend, and Private. For more information, see Access levels in Visual Basic." & Environment.NewLine &
                                    "The Dim keyword Is Optional And usually omitted If you specify any Of the following modifiers: Public, Protected, Friend, Protected Friend, Private, Shared, Shadows, Static, ReadOnly, or WithEvents." & Environment.NewLine &
                                    "Public maximumAllowed As Double  " & Environment.NewLine &
                        "Protected Friend currentUserName As String  " & Environment.NewLine &
                        "Private salary As Decimal  " & Environment.NewLine &
                        "Static runningTotal As Integer" & Environment.NewLine &
                        "If Option Explicit Is on (the default), the compiler requires a declaration for every variable you use. For more information, see Option Explicit Statement." & Environment.NewLine & .Definition = "Transfers control immediately to the next iteration of a loop." & Environment.NewLine
                End With
            End Sub

#End Region
#End Region

#End Region
#Region "<5> [Function]{1}"
#Region "<05.00> <Function> [Print]{1}"
#Region "<05.00.00> <Function> <Print> [Print(Code|CodeLanguage)|String]"
            ''' <summary>
            ''' Print the code give information
            ''' </summary>
            ''' <param name="Add"></param>
            ''' <param name="Code"></param>
            ''' <returns></returns>
            Public Function Print(ByVal Add As Boolean,
                                      Optional ByVal Code As CodeLanguage = CodeLanguage.Vb) As String
                Dim Result As String = ""
                Dim Print_VB As String = ""
                Dim Print_C As String = ""
                Dim Print_F As String = ""
                Dim Print_Python As String = ""
                Dim Print_Javascript As String = ""
                Dim Print_Html As String = ""
                With Me
                    Dim StrPython As String = VariableName & " = "
                    Dim Str As String = VariableName & " As " '& Returns & " " 

                    If Initializer <> "" Then
                        .Initializer = Initializer
                    End If
                    If .[New] = True Then
                        Str += " New "
                    End If

                    Str += .PropInitializer
                    StrPython += .PropInitializer
                    If .With <> "" Then
                        Str += " With {" & [With] & "} "
                    End If
                    If Initializer <> "" Then
                        Str += " = "
                        ' StrPython += Initializer
                    End If
                    'Dim delayTask As  New Task(Of Integer) = (()) DelayAsync
                    If Enable = False Then
                        If .BoundsList <> "" Then
                            Print_VB += "' Dim " & Str & IIf(.Initializer <> "", " " & .Initializer, " ") & "(" & .BoundsList & ") "
                            Print_Python += "//" & StrPython & IIf(.Initializer <> "", " " & .Initializer, " ") & "(" & .BoundsList & ") "
                        Else
                            Print_Python += "//" & StrPython & IIf(.Initializer <> "", " " & .Initializer, " ")
                            Print_VB += "' Dim " & Str & IIf(.Initializer <> "", " " & .Initializer, " ") '& "() "
                        End If
                        If .[New] = True Then
                            If .Initializer <> "" Then
                                If Me.BoundsList.Length > 2 Then
                                    Print_C += "// private " & .PropInitializer & " " & .Name & " = New " & .PropInitializer & " " & .Initializer & "(" & .BoundsList & ") ;"
                                Else
                                    Print_C += "// Private " & .PropInitializer & " " & .Name & " = New " & .PropInitializer & " " & .Initializer & " ;"
                                End If
                            Else
                                If .BoundsList.Length > 2 Then
                                    Print_C += "// Private " & .PropInitializer & " " & .Name & " = New " & .PropInitializer & " (" & .BoundsList & ") ;"
                                Else
                                    Print_C += "// Private " & .PropInitializer & " " & .Name & " = New " & .PropInitializer & " ;"
                                End If
                            End If
                        Else

                            If .Initializer <> "" Then
                                If .BoundsList.Length > 2 Then
                                    Print_C += "// Private " & .PropInitializer & " " & .Name & " = " & .PropInitializer & " (" & .BoundsList & ") " & .Initializer & " ;"
                                Else
                                    Print_C += "// Private " & .PropInitializer & " " & .Name & " = " & .PropInitializer & " " & .Initializer & " ;" '() 
                                End If
                            Else
                                If .BoundsList.Length > 2 Then
                                    Print_C += "// Private " & .PropInitializer & " " & .Name & " = " & .PropInitializer & " (" & .BoundsList & ") ;"
                                Else
                                    Print_C += "// Private " & .PropInitializer & " " & .Name & " = " & .PropInitializer & " ;" '()
                                End If
                            End If
                        End If
                    Else
                        'Dim delayTask  As Task(Of Integer) =  DelayAsync()(()) 
                        If .BoundsList <> "" Then
                            Print_VB += "Dim " & Str & IIf(.Initializer <> "", " " & .Initializer, " ") & "(" & .BoundsList & ") "
                        Else
                            Print_VB += "Dim " & Str & IIf(.Initializer <> "", " " & .Initializer, " ") '& "() "
                        End If
                        Print_Python += StrPython & "(" & .BoundsList & ") " & IIf(.Initializer <> "", .Initializer, "")
                        If .[New] = True Then
                            If .Initializer <> "" Then
                                If .BoundsList <> "" Then
                                    Print_C += "Private " & .PropInitializer & " " & .Name & " = New " & .PropInitializer & " (" & .BoundsList & ") " & .Initializer & " ;"
                                    ' .Print_Python += .PropInitializer & " (" & .BoundsList & ") " & .Initializer
                                Else
                                    Print_C += "Private " & .PropInitializer & " " & .Name & " = New " & .PropInitializer & " " & .Initializer & " ;"
                                    '  .Print_Python += .PropInitializer & " " & .Name & " = New " & .PropInitializer & " () " & .Initializer
                                End If
                            Else
                                If .BoundsList <> "" Then
                                    Print_C += "Private " & .PropInitializer & " " & .Name & " = New " & .PropInitializer & " (" & .BoundsList & ") ;"
                                    '   .Print_Python += .PropInitializer & " " & .Name & " = New " & .PropInitializer & " (" & .BoundsList & ")"
                                Else
                                    Print_C += "Private " & .PropInitializer & " " & .Name & " = New " & .PropInitializer & " ;"
                                    ' .Print_Python += .PropInitializer & " " & .Name & " = New " & .PropInitializer & "()"
                                End If
                            End If
                        Else

                            If .Initializer <> "" Then
                                If .BoundsList <> "" Then
                                    Print_C += "Private " & .PropInitializer & " " & .Name & " = " & .PropInitializer & " (" & .BoundsList & ") " & .Initializer & " ;"
                                    '  .Print_Python += .PropInitializer & " " & .Name & " = " & .PropInitializer & " (" & .BoundsList & ") " & .Initializer
                                Else
                                    Print_C += "Private " & .PropInitializer & " " & .Name & " = " & .PropInitializer & " " & .Initializer & " ;"
                                    ' .Print_Python += .PropInitializer & " " & .Name & " = " & .PropInitializer & " () " & .Initializer

                                End If
                            Else
                                If .BoundsList <> "" Then
                                    Print_C += "Private " & .PropInitializer & " " & .Name & " = " & .PropInitializer & " (" & .BoundsList & ") ;"
                                    ' .Print_Python += .PropInitializer & " " & .Name & " = " & .PropInitializer & " (" & .BoundsList & ")"

                                Else
                                    Print_C += "Private " & .PropInitializer & " " & .Name & " = " & .PropInitializer & " ;"
                                    '  .Print_Python += .PropInitializer & " " & .Name & " = " & .PropInitializer & "()"

                                End If
                            End If
                        End If

                    End If
                End With
                If Code = CodeLanguage.Vb Then
                    Result = Print_VB & Environment.NewLine
                ElseIf Code = CodeLanguage.C Then
                    Result = Print_C & Environment.NewLine
                ElseIf Code = CodeLanguage.F Then
                    Result = Print_F & Environment.NewLine
                ElseIf Code = CodeLanguage.Python Then
                    Result = Print_Python & Environment.NewLine
                ElseIf Code = CodeLanguage.JavaScript Then
                    Result = "// Not implemented"
                End If
                Return Result
            End Function
#End Region
#End Region
#Region "<05.01> <Function> [Overrides]{1}"
#Region "<05.02> <Function> <Overrides> [ToString()|String]"
            Public Overrides Function ToString() As String
                Return Print(True) & Print(False)
            End Function
#End Region
#End Region
#Region "<05.02> <Function> [Shared]{1}"
#Region "<05.02.00> <Function> <Shared> [Detect(Str|String)|Handler_Statement"
            ''' <summary>
            ''' Detect if there exist any handler_Statement in a given string.
            ''' https://stackoverflow.com/questions/1244197/search-for-new-line-position-in-a-vb-net-string-variable-using-instr
            ''' </summary>
            ''' <param name="Str"></param>
            ''' <returns></returns>
            Public Shared Function Detect(ByVal Str As String) As List(Of Dim_Statement)
                Dim Result As New List(Of Dim_Statement)
                Dim FileContent As String = My.Computer.FileSystem.ReadAllText("C:\Temp\a.text")
                Dim a As Integer = 1
                For i = 1 To FileContent.Length
                    Dim xx As String = Mid(FileContent, i, 1)
                    If xx = Chr(10) Then
                        If Mid(FileContent, i - 1, 1) = Chr(13) Then
                            Dim Ligne As String = Mid(FileContent, a, (i - a) - 1)
                            'Test for vb
                            If Ligne.Contains([Dim]) Then
                                Dim Element As New Dim_Statement()
                                Dim Ref As New List(Of String)
                                Ref = StringRange.GetNumberofWords(Ligne)
                                Element.Tooltip += Ligne
                                Result.Add(Element)
                            End If
                            a = i
                        End If
                    End If

                Next
                Return Result
            End Function
#End Region
#End Region

#End Region
#Region "<6> [Loader]{2}"
#Region "<06.00> <Loader> Statement.AddHandler.New()"
            ''' <summary>
            ''' 
            ''' </summary>
            Public Sub New()
                ConstructHelp()

            End Sub
#End Region
#Region "<06.00> <Loader> Statement.AddHandler.New(Parent|Statement,Name|String,argumentList|String,[Obj]|Object)"
            ''' <summary>
            ''' 
            ''' </summary>
            Public Sub New(ByRef Parent As Statement,
                               ByVal Variablename As String,
                           ByVal Returns As String,
                           Optional ByVal BoundList As String = "",
                           Optional ByVal News As Boolean = False,
                           Optional ByVal DataType As String = "",
                           Optional ByVal Withs As String = "",
                           Optional ByVal PropName As String = "",
                           Optional ByVal Initializer As String = "",
                           Optional ByVal Enabled As Boolean = True)
                ConstructHelp()
                If Name <> "" Then
                    Me.Name = Name
                Else
                    Me.Name = "NewHandler"
                End If
                If IsNothing(Parent) Then
                Else
                    Me.Parent = Parent
                    Me.Text = Me.Parent.ToString & "." & Name
                End If
                With Me
                    .Name = Variablename
                    .VariableName = Variablename
                    .PropInitializer = Returns
                    If BoundList = "" Then
                        .BoundsList = ""
                    Else
                        .BoundsList = BoundList
                    End If
                    .[New] = News
                    .DataType = DataType
                    .With = [With]
                    .PropertyName = PropName
                End With

                Me.Tooltip = Me.ToString
            End Sub
#End Region

#End Region
#Region "<8> [Class]{1}"
#Region "<08.00> <Class> [VariableList]"
            Public Class VariableList
#Region "<0> [Property]"

#End Region
#Region "<00.02> <Property> [Print]"
#Region "[2019/03/21 21h49:658]<00.02.00> <Property> [Print_VB|String]"
                Private _Print_VB As String
                ''' <summary>
                ''' (Set|Get) Printed String for VB.NET
                ''' </summary>
                ''' <returns></returns>
                ''' <author>Saadry Dunkel Consultant 21.02.2019 21:49</author>
                <CategoryAttribute("Print"),
           Description("(Set|Get) Printed String for VB.NET"),
           Browsable(True)>
                Public Property Print_VB() As String
                    Get
                        Return _Print_VB
                    End Get
                    Set(ByVal value As String)
                        _Print_VB = value
                    End Set
                End Property
#End Region 'Printed String for VB.NET
#Region "[2019/03/21 21h49:281]<00.02.01> <Property> [Print_C|String]"
                Private _Print_C As String
                ''' <summary>
                ''' (Set|Get) Printed String for C#
                ''' </summary>
                ''' <returns></returns>
                ''' <author>Saadry Dunkel Consultant 21.02.2019 21:49</author>
                <CategoryAttribute("Print"),
           Description("(Set|Get) Printed String for C#"),
           Browsable(True)>
                Public Property Print_C() As String
                    Get
                        Return _Print_C
                    End Get
                    Set(ByVal value As String)
                        _Print_C = value
                    End Set
                End Property
#End Region 'Printed String for C#
#Region "[2019/03/21 22h42:848]<00.02.02> <Property> [Print_F|String]"
                Private _Print_F As String
                ''' <summary>
                ''' (Set|Get) Printed String for F#
                ''' </summary>
                ''' <returns></returns>
                ''' <author>Saadry Dunkel Consultant 21.02.2019 22:42</author>
                <CategoryAttribute("Print"),
           Description("(Set|Get) Printed String for F#"),
           Browsable(True)>
                Public Property Print_F() As String
                    Get
                        Return _Print_F
                    End Get
                    Set(ByVal value As String)
                        _Print_F = value
                    End Set
                End Property
#End Region 'Printed String for F#
#Region "[2019/03/28 09h45:808]<00.02.03> <Property> [Print_Python|String]"
                Private _Print_Python As String
                ''' <summary>
                ''' (Set|Get) Printed String for Python
                ''' </summary>
                ''' <returns></returns>
                ''' <author>Saadry Dunkel Consultant 21.02.2019 22:42</author>
                <CategoryAttribute("Print"),
           Description("(Set|Get) Printed String for Python"),
           Browsable(True)>
                Public Property Print_Python() As String
                    Get
                        Return _Print_Python
                    End Get
                    Set(ByVal value As String)
                        _Print_Python = value
                    End Set
                End Property
#End Region 'Printed String for Python
#End Region

            End Class
#End Region
#End Region
#Region "<9> [Constante]{1}"
#Region "<09.00> <Constante> Statement.AddHandler.KeyWords{1}"
            Public Const [Dim] As String = "Dim "
#End Region
#End Region

        End Class
#End Region
#Region "<08.00.04> <Class> <InnerStatement> Statement.Do_Loop_Statement"
        ''' <summary>
        ''' Repeats a block of statements while a Boolean condition is True or until the condition becomes True.
        ''' </summary>
        Public Class Do_Loop_Statement
            Inherits InnerStatement

#Region "<1> [Property]{2}"
#Region "<01.00> <Property> [Variable]{2}"
#Region "[2019/04/06 21h39:241]<01.00.00> <Property> [UseWhile|Boolean]"
            Private _UseWhile As Boolean
            ''' <summary>
            ''' (Set|Get) Required unless Until is used. Repeat the loop until condition is False. If False then change to Until.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 21:39</author>
            <CategoryAttribute("Variable"),
    Description("(Set|Get) Required unless Until is used. Repeat the loop until condition is False. If False then change to Until."),
    Browsable(True)>
            Public Property UseWhile() As Boolean
                Get
                    Return _UseWhile
                End Get
                Set(ByVal value As Boolean)
                    _UseWhile = value
                End Set
            End Property
#End Region 'Required unless Until is used. Repeat the loop until condition is False. If False then change to Until.
#Region "[2019/04/06 21h41:761]<01.00.01> <Property> [Condition|String]"
            Private _Condition As String
            ''' <summary>
            ''' (Set|Get) Optional. Boolean expression. If condition is Nothing, Visual Basic treats it as False.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 21:41</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) Optional. Boolean expression. If condition is Nothing, Visual Basic treats it as False."),
    Browsable(True)>
            Public Property Condition() As String
                Get
                    Return _Condition
                End Get
                Set(ByVal value As String)
                    _Condition = value
                End Set
            End Property
#End Region 'Optional. Boolean expression. If condition is Nothing, Visual Basic treats it as False.
#Region "[2019/04/06 22h20:518]<01.00.02> <Property> [UseUntil|Boolean]"
            Private _UseUntil As Boolean
            ''' <summary>
            ''' (Set|Get) Use until statement.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 22:20</author>
            <CategoryAttribute("Variable"),
    Description("(Set|Get) Use until statement."),
    Browsable(True)>
            Public Property UseUntil() As Boolean
                Get
                    Return _UseUntil
                End Get
                Set(ByVal value As Boolean)
                    _UseUntil = value
                End Set
            End Property
#End Region 'Use until statement.

#End Region
#Region "<01.01> <Property> [Constructor]{1}"
#Region "[2019/04/06 21h50:453]<01.01.00> <Property> [Variable|String]"
            Private _Variable As String
            ''' <summary>
            ''' (Set|Get) Variable Evaluated.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 21:50</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) Variable Evaluated."),
    Browsable(True)>
            Public Property Variable() As String
                Get
                    Return _Variable
                End Get
                Set(ByVal value As String)
                    _Variable = value
                End Set
            End Property
#End Region 'Variable Evaluated.
#Region "[2019/04/06 21h52:910]<01.01.01> <Property> [Statements|String]"
            Private _Statements As String
            ''' <summary>
            ''' (Set|Get) The Statement loop.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 06.04.2019 21:52</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) The Statement loop."),
    Browsable(True)>
            Public Property Statements() As String
                Get
                    Return _Statements
                End Get
                Set(ByVal value As String)
                    _Statements = value
                End Set
            End Property
#End Region 'The Statement loop.

#End Region
#End Region
#Region "<4> [Sub]{1}"
#Region "<04.00> <Sub> [Help]{1}"
#Region "<04.00.00> <Sub> <Help> Statement.AddHandler.ConstructHelp()"
            ''' <summary>
            ''' https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/do-loop-statement
            ''' </summary>
            Public Sub ConstructHelp()
                With Me
                    .Syntax = " Do { While | Until } condition  " & Environment.NewLine &
                                   "        [ statements ]  " & Environment.NewLine &
                                   "    [ Continue Do ]  " & Environment.NewLine &
                                   "        [ statements ]  " & Environment.NewLine &
                                   "    [ Exit Do ]  " & Environment.NewLine &
                                   "        [ statements ]  " & Environment.NewLine &
                                   " Loop  " & Environment.NewLine &
                                   " -or-  " & Environment.NewLine &
                                   " Do " & Environment.NewLine &
                                   "        [ statements ]  " & Environment.NewLine &
                                   "    [ Continue Do ]  " & Environment.NewLine &
                                   "        [ statements ]  " & Environment.NewLine &
                                   "    [ Exit Do ]  " & Environment.NewLine &
                                   "        [ statements ]  " & Environment.NewLine &
                                   " Loop { While | Until } condition"
                    .Example = "In the following example, the statements in the loop continue to run until the index variable is greater than 10. The Until clause is at the end of the loop." & Environment.NewLine &
                                    " Dim index As Integer = 0" & Environment.NewLine &
                                    " Do" & Environment.NewLine &
                                    "   Debug.Write(index.ToString  )" & Environment.NewLine &
                                    "   index += 1" & Environment.NewLine &
                                    " Loop Until index > 10" & Environment.NewLine &
                                    "Debug.WriteLine()"

                    .Remarks = "Use a Do...Loop structure when you want to repeat a set of statements an indefinite number of times, until a condition is satisfied. If you want to repeat the statements a set number of times, the For...Next Statement is usually a better choice." & Environment.NewLine &
                                   "You can use either While or Until to specify condition, but not both." & Environment.NewLine &
                                   "You can test condition only one time, at either the start or the end of the loop. If you test condition at the start of the loop (in the Do statement), the loop might not run even one time. If you test at the end of the loop (in the Loop statement), the loop always runs at least one time." & Environment.NewLine &
                                   "The condition usually results from a comparison of two values, but it can be any expression that evaluates to a Boolean Data Type value (True or False). This includes values of other data types, such as numeric types, that have been converted to Boolean." & Environment.NewLine &
                                   "You can nest Do loops by putting one loop within another. You can also nest different kinds of control structures within each other. For more information, see Nested Control Structures." & Environment.NewLine
                    .Definition = "Repeats a block of statements while a Boolean condition is True or until the condition becomes True."
                End With
            End Sub

#End Region
#End Region

#End Region
#Region "<5> [Function]{}"
#Region "<05.00> <Function> [Print]{}"
#Region "<05.00.00> <Function> <Print> [Print(Code|CodeLanguage)|String]"
            ''' <summary>
            ''' Print the code give information
            ''' </summary>
            ''' <param name="Code"></param>
            ''' <returns></returns>
            Public Function Print(Optional ByVal Code As CodeLanguage = CodeLanguage.Vb) As String
                Dim Result As String = ""
                If Code = CodeLanguage.Vb Then
                    If UseWhile = True Then
                        Result = [Do] & [While] & Variable & " = " & [Condition] & Environment.NewLine &
                                Me.Statements & Environment.NewLine &
                                [Loop]
                    End If
                    If UseUntil = True Then
                        Result = [Do] & [Until] & Variable & " = " & [Condition] & Environment.NewLine &
                                Me.Statements & Environment.NewLine &
                                [Loop]
                    Else
                        Result = [Do] & Environment.NewLine &
                               Me.Statements & Environment.NewLine &
                               [Loop] & [Until] & Variable & " = " & [Condition]
                    End If
                ElseIf Code = CodeLanguage.C Then
                    If UseWhile = True Then
                        Result = [Do] & Environment.NewLine &
                                " {" & Environment.NewLine &
                               Me.Statements & Environment.NewLine &
                                " } " & [While] & "(" & Variable & Condition & ") ;" & Environment.NewLine

                    Else
                        Result = [Do] & Environment.NewLine &
                                " {" & Environment.NewLine &
                               Me.Statements & Environment.NewLine &
                                " } " & [Until] & "(" & Variable & Condition & ") ;" & Environment.NewLine
                    End If
                ElseIf Code = CodeLanguage.F Then
                    Result = "// Not implemented"
                ElseIf Code = CodeLanguage.Python Then
                    Result = "// Not implemented"
                ElseIf Code = CodeLanguage.JavaScript Then
                    'Source


                    Result = "// Not implemented"

                End If
                Return Result
            End Function
#End Region
#End Region
#Region "<05.01> <Function> [Overrides]"
#Region "<05.02> <Function> <Overrides> [ToString()|String]"
            Public Overrides Function ToString() As String
                Return Print(True) & Print(False)
            End Function
#End Region
#End Region
#Region "<05.02> <Function> [Shared]"
#Region "<05.02.00> <Function> <Shared> [Detect(Str|String)|Handler_Statement"
            ''' <summary>
            ''' Detect if there exist any handler_Statement in a given string.
            ''' https://stackoverflow.com/questions/1244197/search-for-new-line-position-in-a-vb-net-string-variable-using-instr
            ''' </summary>
            ''' <param name="Str"></param>
            ''' <returns></returns>
            Public Shared Function Detect(ByVal Str As String) As List(Of Do_Loop_Statement)
                Dim Result As New List(Of Do_Loop_Statement)
                Dim FileContent As String = My.Computer.FileSystem.ReadAllText("C:\Temp\a.text")
                Dim a As Integer = 1
                For i = 1 To FileContent.Length
                    Dim xx As String = Mid(FileContent, i, 1)
                    If xx = Chr(10) Then
                        If Mid(FileContent, i - 1, 1) = Chr(13) Then
                            Dim Ligne As String = Mid(FileContent, a, (i - a) - 1)
                            'Test for vb
                            If Ligne.Contains([Do]) Then
                                Dim Handler As New Do_Loop_Statement()
                                Dim Ref As New List(Of String)
                                Ref = StringRange.GetNumberofWords(Ligne)
                                With Handler
                                    ' .EventName = Ref(2).ToString
                                    '0.3.0.2.3
                                    '.Eventhandler = Ref(4).ToString
                                End With
                                Result.Add(Handler)
                            End If
                            a = i
                        End If
                    End If

                Next
                Return Result
            End Function
#End Region
#End Region
#End Region
#Region "<6> [Loader]{2}"
#Region "<06.00> <Loader> Statement.Do_Loop_Statement.New()"
            ''' <summary>
            ''' 
            ''' </summary>
            Public Sub New()
                ConstructHelp()

            End Sub
#End Region
#Region "<06.00> <Loader> Statement.Do_Loop_Statement.New(Parent|Statement,Variable|String,Condition|String,StatementString|String,[UseWhile]|Boolean=False)"
            ''' <summary>
            ''' 
            ''' </summary>
            Public Sub New(ByRef Parent As Statement,
                               ByVal Variable As String,
                               ByVal Condition As String,
                               ByVal StatementString As String,
                               Optional ByVal UseWhile As Boolean = False,
                               Optional ByVal UseUntil As Boolean = False)
                ConstructHelp()
                If Variable <> "" Then
                    Me.Name = Variable
                Else
                    Me.Name = "NewDo_Loop"
                End If
                Me.Condition = Condition
                Me.UseWhile = UseWhile
                Me.Statements = StatementString
                If IsNothing(Parent) Then
                Else
                    Me.Parent = Parent
                    Me.Text = Me.Parent.ToString & "." & Name
                End If
                Me.Tooltip = Me.ToString
            End Sub
#End Region
#End Region
#Region "<9> [Constante]{1}"
#Region "<09.00> <Constante> Statement.AddHandler.KeyWords{4}"
            Public Const [Continue_Do] As String = "Continue Do  "
            Public Const [Do] As String = "Do "
            Public Const [Exit_Do] As String = "Exit Do "
            Public Const [While] As String = "While  "
            Public Const [Until] As String = "Until "
            Public Const [Loop] As String = "Loop "

#End Region
#End Region

        End Class
#End Region
#Region "<08.00.05> <Class> <InnerStatement> Statement.If_Then_Else"
        Public Class If_Then_Else_Statement
            Inherits InnerStatement

        End Class
#End Region
#Region "<08.00.06> <Class> <InnerStatement> Statement.ParameterList_Statement"
        Public Class ParameterList_Statement
            Inherits InnerStatement

#Region "<1> [Property]{1}"
#Region "<01.00> <Property> [Constructor]{}"
#Region "[2019/04/11 23h23:804]<01.00.00> <Property> [AttributeList|AttributeList]"
            Private _AttributeList As Attributelist
            ''' <summary>
            ''' (Set|Get) Optional. List of attributes that apply to this parameter. You must enclose the Attribute List in angle brackets .
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 11.04.2019 23:23</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) Optional. List of attributes that apply to this parameter. You must enclose the Attribute List in angle brackets ( <  and  > )."),
    Browsable(True)>
            Public Property AttributeList() As Attributelist
                Get
                    Return _AttributeList
                End Get
                Set(ByVal value As Attributelist)
                    _AttributeList = value
                End Set
            End Property
#End Region 'Optional. List of attributes that apply to this parameter. You must enclose the Attribute List in angle brackets ("<" and ">").
#Region "[2019/04/11 23h26:380]<01.00.01> <Property> [Optional|Boolean]"
            Private _Optional As Boolean
            ''' <summary>
            ''' (Set|Get) Optional. Specifies that this parameter is not required when the procedure is called.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 11.04.2019 23:26</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) Optional. Specifies that this parameter is not required when the procedure is called."),
    Browsable(True)>
            Public Property [Optional]() As Boolean
                Get
                    Return _Optional
                End Get
                Set(ByVal value As Boolean)
                    _Optional = value
                End Set
            End Property
#End Region 'Optional. Specifies that this parameter is not required when the procedure is called.
#Region "[2019/04/11 23h27:384]<01.00.02> <Property> [ByVal|Boolean]"
            Private _ByVal As Boolean
            ''' <summary>
            ''' (Set|Get) Optional. Specifies that the procedure cannot replace or reassign the variable element underlying the corresponding argument in the calling code.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 11.04.2019 23:27</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) Optional. Specifies that the procedure cannot replace or reassign the variable element underlying the corresponding argument in the calling code."),
    Browsable(True)>
            Public Property [ByVal]() As Boolean
                Get
                    Return _ByVal
                End Get
                Set(ByVal value As Boolean)
                    If Not IsNothing(value) Then
                        If value = True Then
                            If Not IsNothing([ByRef]) Then
                                [ByRef] = False
                            End If
                        End If
                    End If
                    _ByVal = value
                End Set
            End Property
#End Region 'Optional. Specifies that the procedure cannot replace or reassign the variable element underlying the corresponding argument in the calling code.
#Region "[2019/04/11 23h28:569]<01.00.03> <Property> [ByRef|Boolean]"
            Private _ByRef As Boolean
            ''' <summary>
            ''' (Set|Get) Optional. Specifies that the procedure can modify the underlying variable element in the calling code the same way the calling code itself can.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 11.04.2019 23:28</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) Optional. Specifies that the procedure can modify the underlying variable element in the calling code the same way the calling code itself can."),
    Browsable(True)>
            Public Property [ByRef]() As Boolean
                Get
                    Return _ByRef
                End Get
                Set(ByVal value As Boolean)
                    If Not IsNothing(value) Then
                        If value = True Then
                            If Not IsNothing([ByVal]) Then
                                [ByVal] = False
                            End If
                        End If
                    End If
                    _ByRef = value
                End Set
            End Property
#End Region 'Optional. Specifies that the procedure can modify the underlying variable element in the calling code the same way the calling code itself can.
#Region "[2019/04/11 23h29:196]<01.00.04> <Property> [ParamArray|Boolean]"
            Private _ParamArray As Boolean
            ''' <summary>
            ''' (Set|Get) Optional. Specifies that the last parameter in the parameter list is an optional array of elements of the specified data type. This lets the calling code pass an arbitrary number of arguments to the procedure.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 11.04.2019 23:29</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) Optional. Specifies that the last parameter in the parameter list is an optional array of elements of the specified data type. This lets the calling code pass an arbitrary number of arguments to the procedure."),
    Browsable(True)>
            Public Property [ParamArray]() As Boolean
                Get
                    Return _ParamArray
                End Get
                Set(ByVal value As Boolean)
                    _ParamArray = value
                End Set
            End Property
#End Region 'Optional. Specifies that the last parameter in the parameter list is an optional array of elements of the specified data type. This lets the calling code pass an arbitrary number of arguments to the procedure.
#Region "[2019/04/11 23h29:321]<01.00.05> <Property> [ParameterName|String]"
            Private _ParameterName As String
            ''' <summary>
            ''' (Set|Get) Required. Name of the local variable representing the parameter.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 11.04.2019 23:29</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) Required. Name of the local variable representing the parameter."),
    Browsable(True)>
            Public Property ParameterName() As String
                Get
                    Return _ParameterName
                End Get
                Set(ByVal value As String)
                    _ParameterName = value
                End Set
            End Property
#End Region 'Required. Name of the local variable representing the parameter.
#Region "[2019/04/11 23h30:124]<01.00.06> <Property> [ParameterType|String]"
            Private _ParameterType As String
            ''' <summary>
            ''' (Set|Get) Required if Option Strict is On. Data type of the local variable representing the parameter.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 11.04.2019 23:30</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) Required if Option Strict is On. Data type of the local variable representing the parameter."),
    Browsable(True)>
            Public Property ParameterType() As String
                Get
                    Return _ParameterType
                End Get
                Set(ByVal value As String)
                    _ParameterType = value
                End Set
            End Property
#End Region 'Required if Option Strict is On. Data type of the local variable representing the parameter.
#Region "[2019/04/11 23h30:912]<01.00.07> <Property> [DefaultValue|String]"
            Private _DefaultValue As String
            ''' <summary>
            ''' (Set|Get) Required for Optional parameters. Any constant or constant expression that evaluates to the data type of the parameter. If the type is Object, or a class, interface, array, or structure, the default value can only be Nothing.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 11.04.2019 23:30</author>
            <CategoryAttribute("Constructor"),
    Description("(Set|Get) Required for Optional parameters. Any constant or constant expression that evaluates to the data type of the parameter. If the type is Object, or a class, interface, array, or structure, the default value can only be Nothing."),
    Browsable(True)>
            Public Property DefaultValue() As String
                Get
                    Return _DefaultValue
                End Get
                Set(ByVal value As String)
                    _DefaultValue = value
                End Set
            End Property
#End Region 'Required for Optional parameters. Any constant or constant expression that evaluates to the data type of the parameter. If the type is Object, or a class, interface, array, or structure, the default value can only be Nothing.
#Region "|2019/05/17 13h58:730| <01.00.08> <Property> <Constructor> [Call=Modifier|String]"'(Set|Get) the Modifier as String
            Private _Modifier As String
            ''' <Summary>
            ''' (Set|Get) the Modifier as String
            ''' </Summary>
            ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
            ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
            ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/17 13h58:729 </Published>
            ''' <Updated>[Created=2019/05/17 13h58:722][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

            <CategoryAttribute("Constructor"), Description("(Set|Get) the Modifier as String"), Browsable(True)>
            Public Property Modifier() As String
                Get
                    Return _Modifier
                End Get
                Set(ByVal Value As String)
                    _Modifier = Value
                End Set
            End Property
#End Region ' (Set|Get) the Modifier as String

#End Region
#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [Print(Format|CodeLanguage)|String]"
            Public Shared Function Print(ByRef List As List(Of ParameterList_Statement),
                                         Optional ByVal Format As CodeLanguage = CodeLanguage.Vb) As String
                Dim Result As String = ""
                If IsNothing(List) Then
                Else
                    Dim ListByVal As New List(Of ParameterList_Statement)
                    Dim ListByRef As New List(Of ParameterList_Statement)
                    Dim ListOptional As New List(Of ParameterList_Statement)
                    Dim ListParamArray As New List(Of ParameterList_Statement)

                    For Each P As ParameterList_Statement In List
                        If P.ParamArray = True Then
                            ListParamArray.Add(P)
                        Else

                            If P.Optional = True Then
                                ListOptional.Add(P)
                            Else
                                If P.ByRef = True Then
                                    ListByRef.Add(P)
                                Else
                                    ListByVal.Add(P)
                                End If
                            End If
                        End If
                    Next

                    Dim FinalList As New List(Of ParameterList_Statement)

                    FinalList.AddRange(ListByVal)
                    FinalList.AddRange(ListByRef)
                    FinalList.AddRange(ListOptional)
                    FinalList.AddRange(ListParamArray)

                    If FinalList.Count - 1 >= 0 Then
                        If Format = CodeLanguage.Vb Then
                            For i = 0 To FinalList.Count - 2
                                Dim Pf As ParameterList_Statement = FinalList(i)
                                If Pf.Optional = True Then
                                    If Pf.DefaultValue = "Nothing" Then
                                        Result += "Optional ByVal [" & Pf.ParameterName & "] As " & Pf.ParameterType & " = Nothing, " & Environment.NewLine
                                    Else
                                        If Pf.ParameterType.ToLower = "string" Then
                                            Result += "Optional ByVal [" & Pf.ParameterName & "] As " & Pf.ParameterType & " = " & Space & Pf.DefaultValue & Space & ", " & Environment.NewLine
                                        Else 'If Pf.ParameterType.ToLower = "boolean" Then
                                            Result += "Optional ByVal [" & Pf.ParameterName & "] As " & Pf.ParameterType & " = " & Pf.DefaultValue & ", " & Environment.NewLine
                                        End If

                                    End If
                                Else
                                    If Pf.ParamArray = True Then
                                        Result += "ParamArray ByVal [" & Pf.ParameterName & "] As " & Pf.ParameterType & ", " & Environment.NewLine
                                    Else
                                        If Pf.ByRef = True Then
                                            Result += "ByRef [" & Pf.ParameterName & "] As " & Pf.ParameterType & ", " & Environment.NewLine
                                        Else
                                            Result += "ByVal [" & Pf.ParameterName & "] As " & Pf.ParameterType & ", " & Environment.NewLine
                                        End If
                                    End If

                                End If
                            Next
                            Dim Pf2 As ParameterList_Statement = FinalList(FinalList.Count - 1)
                            If Pf2.Optional = True Then
                                If Pf2.DefaultValue = "Nothing" Then
                                    Result += "Optional ByVal [" & Pf2.ParameterName & "] As " & Pf2.ParameterType & " = Nothing"
                                Else
                                    If Pf2.ParameterType.ToLower = "string" Then
                                        Result += "Optional ByVal [" & Pf2.ParameterName & "] As " & Pf2.ParameterType & " = " & Space & Pf2.DefaultValue & Space
                                    Else
                                        Result += "Optional ByVal [" & Pf2.ParameterName & "] As " & Pf2.ParameterType & " = " & Pf2.DefaultValue

                                    End If



                                End If
                                    Else
                                If Pf2.ParamArray = True Then
                                    Result += "ParamArray ByVal [" & Pf2.ParameterName & "] As " & Pf2.ParameterType
                                Else
                                    If Pf2.ByRef = True Then
                                        Result += "ByRef [" & Pf2.ParameterName & "] As " & Pf2.ParameterType
                                    Else
                                        Result += "ByVal [" & Pf2.ParameterName & "] As " & Pf2.ParameterType
                                    End If
                                End If

                            End If
                        ElseIf Format = CodeLanguage.C Or Format = CodeLanguage.F Or Format = CodeLanguage.Python Or Format = CodeLanguage.JavaScript Then
                            For i = 0 To FinalList.Count - 2
                                Dim Pf As ParameterList_Statement = FinalList(i)
                                If Pf.Optional = True Then
                                    Result += Pf.ParameterType & " " & Pf.ParameterName & ", " & Environment.NewLine
                                Else
                                    If Pf.ParamArray = True Then
                                        Result += Pf.ParameterType & " " & Pf.ParameterName & ", " & Environment.NewLine
                                    Else
                                        If Pf.ByRef = True Then
                                            Result += Pf.ParameterType & " " & Pf.ParameterName & ", " & Environment.NewLine
                                        Else
                                            Result += Pf.ParameterType & " " & Pf.ParameterName & ", " & Environment.NewLine
                                        End If
                                    End If

                                End If
                            Next
                            Dim Pf2 As ParameterList_Statement = FinalList(FinalList.Count - 1)
                            If Pf2.Optional = True Then
                                Result += Pf2.ParameterType & " " & Pf2.ParameterName '& " = " & Pf2.DefaultValue
                            Else
                                If Pf2.ParamArray = True Then
                                    Result += Pf2.ParameterType & " " & Pf2.ParameterName '
                                Else
                                    If Pf2.ByRef = True Then
                                        Result += Pf2.ParameterType & " " & Pf2.ParameterName '
                                    Else
                                        Result += Pf2.ParameterType & " " & Pf2.ParameterName '
                                    End If
                                End If


                            End If
                        End If
                    End If
                End If
                Return Result
            End Function

            Public Shared Function PrintCallRegion(ByRef List As List(Of ParameterList_Statement)) As String
                Dim Result As String = ""
                If IsNothing(List) Then
                Else
                    Dim ListByVal As New List(Of ParameterList_Statement)
                    Dim ListByRef As New List(Of ParameterList_Statement)
                    Dim ListOptional As New List(Of ParameterList_Statement)
                    Dim ListParamArray As New List(Of ParameterList_Statement)

                    For Each P As ParameterList_Statement In List
                        If P.ParamArray = True Then
                            ListParamArray.Add(P)
                        Else

                            If P.Optional = True Then
                                ListOptional.Add(P)
                            Else
                                If P.ByRef = True Then
                                    ListByRef.Add(P)
                                Else
                                    ListByVal.Add(P)
                                End If
                            End If
                        End If
                    Next

                    Dim FinalList As New List(Of ParameterList_Statement)

                    FinalList.AddRange(ListByVal)
                    FinalList.AddRange(ListByRef)
                    FinalList.AddRange(ListOptional)
                    FinalList.AddRange(ListParamArray)

                    If FinalList.Count - 1 >= 0 Then
                        For i = 0 To FinalList.Count - 1
                            Dim Pf As ParameterList_Statement = FinalList(i)
                            If Pf.Optional = True Then
                                Result += "[" & Pf.ParameterName & "{" & Pf.DefaultValue & "}]|" & Pf.ParameterType & "|"
                            Else
                                Result += Pf.ParameterName & "|" & Pf.ParameterType & "| "
                            End If
                        Next
                    End If
                End If
                Return Result
            End Function
#End Region
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
            Public Sub New()
                With Me
                    .AttributeList = New Attributelist
                    .ByRef = False
                    .ByVal = True
                    .DefaultValue = Nothing
                    .Definition = Nothing
                    .Enable = True
                    .Example = Nothing
                    .ImageIndex = 2
                    .Name = Nothing
                    .Optional = False
                    .ParamArray = False
                    .ParameterName = .Name
                    .Remarks = Nothing
                    .Rules = Nothing
                    .Syntax = "[ <attributelist> ] [ Optional ] [{ ByVal | ByRef }] [ ParamArray ]   parametername[( )] [ As parametertype ] [ = defaultvalue ]  "
                    .Tag = Nothing
                    .Text = "Builder.VB.InnerStatement.ParameterList_Statement"
                    .Tooltip = Nothing
                End With
            End Sub
#End Region
#Region "<06.01> <Loader> [Filled]"
            Public Sub New(ByVal Name As String,
                               ByVal ParameterType As String,
                      Optional ByVal DefaultValue As String = Nothing,
                      Optional ByVal [ByVal] As Boolean = True,
                      Optional ByVal [ByRef] As Boolean = False,
                      Optional ByVal [Optional] As Boolean = False,
                      Optional ByVal [ParamArray] As Boolean = False,
                      Optional ByVal Definition As String = "",
                      Optional ByVal [Enable] As Boolean = True,
                      Optional ByVal [Example] As String = "",
                      Optional ByVal [Rule] As String = "",
                      Optional ByVal [Remark] As String = "")
                With Me
                    .AttributeList = New Attributelist
                    .ByRef = [ByRef]
                    .ByVal = [ByVal]
                    .DefaultValue = IIf(IsDBNull(DefaultValue), Nothing, DefaultValue)
                    .Definition = Definition
                    .Enable = [Enable]
                    .Example = [Example]
                    .ImageIndex = 2
                    .Name = Name
                    .Optional = [Optional]
                    .ParamArray = [ParamArray]
                    .Modifier = ""
                    If .Optional = True Then
                        .Modifier = "Optional "
                    ElseIf .Optional = False Then
                        If .ParamArray = True Then
                            .Modifier = "ParamArray "
                        End If
                    End If
                    If .ByRef = True Then
                        .Modifier += "ByRef "
                    Else
                        .Modifier += "ByVal "
                    End If
                    .ParameterName = .Name
                    .ParameterType = ParameterType
                    .Remarks = [Remark]
                    .Rules = [Rule]
                    .Syntax = "[ <attributelist> ] [ Optional ] [{ ByVal | ByRef }] [ ParamArray ]   parametername[( )] [ As parametertype ] [ = defaultvalue ]  "
                    .Tag = Nothing
                    .Text = "CodeBuilder.VB.InnerStatement.ParameterList_Statement"
                    .Tooltip = Me.ToString
                End With
            End Sub
#End Region
#Region "<06.02> <Loader> [Filled]"
            Public Sub New(ByVal Name As String,
                               ByVal ParameterType As String,
                ByVal Modifier As String,
                Optional ByVal DefaultValue As String = Nothing,
                       Optional ByVal Definition As String = "",
                      Optional ByVal [Enable] As Boolean = True,
                      Optional ByVal [Example] As String = "",
                      Optional ByVal [Rule] As String = "",
                      Optional ByVal [Remark] As String = "")
                With Me
                    .AttributeList = New Attributelist
                    .ByRef = IIf(Modifier.Contains("ByRef"), True, False)
                    .ByVal = IIf(Modifier.Contains("ByVal"), True, False)
                    .DefaultValue = IIf(IsDBNull(DefaultValue), Nothing, DefaultValue)
                    .Definition = Definition
                    .Enable = [Enable]
                    .Example = [Example]
                    .ImageIndex = 2
                    .Name = Name
                    .Optional = IIf(Modifier.Contains("Optional"), True, False)
                    .ParamArray = IIf(Modifier.Contains("ParamArray"), True, False)
                    .Modifier = Modifier
                    .ParameterName = .Name
                    .ParameterType = ParameterType
                    .Remarks = [Remark]
                    .Rules = [Rule]
                    .Syntax = "[ <attributelist> ] [ Optional ] [{ ByVal | ByRef }] [ ParamArray ]   parametername[( )] [ As parametertype ] [ = defaultvalue ]  "
                    .Tag = Nothing
                    .Text = "CodeBuilder.VB.InnerStatement.ParameterList_Statement"
                    .Tooltip = Me.ToString
                End With
            End Sub
#End Region
#End Region
            Public Overrides Function ToString() As String
                Dim Result As String = ""
                If Me.Optional = True Then
                    Result += "Optional "
                ElseIf Me.Optional = False Then
                    If Me.ParamArray = True Then
                        Result += "ParamArray "
                    End If
                End If
                If Me.ByRef = True Then
                    Result += "ByRef "
                ElseIf Me.ByRef = False Then
                    If Me.ByVal = True Then
                        Result += "ByVal "
                    End If
                End If
                If Not IsNothing(DefaultValue) Then
                    If Not IsNothing(DefaultValue.ToString) Then
                        If DefaultValue.Length > 1 Then
                            Result += "[" & Me.ParameterName & "] As " & ParameterType & IIf(Me.DefaultValue <> "", " = " & Me.DefaultValue, "Nothing")
                        Else
                            Result += "[" & Me.ParameterName & "] As " & ParameterType & " = Nothing"

                        End If
                    End If
                Else
                    Result += "[" & Me.ParameterName & "] As " & ParameterType & IIf(Me.DefaultValue <> "", " = " & Me.DefaultValue, "Nothing")

                End If

                Return Result
            End Function
        End Class
#End Region
#End Region
#Region "<9> [Constante]"
        Const [Case] As String = "Case "
        Const [Catch] As String = "Catch "
        Const [Continue] As String = "Continue "
        Const [Else] As String = "Else "
        Const [ElseIf] As String = "ElseIf "
        Const [End] As String = "End "
        Const [Event] As String = "Event "
        Const [Exit] As String = "Exit "
        Const [For] As String = "For "
        Const [Finally] As String = "Finally "
        Const [Each] As String = "Each "
        Const [Next] As String = "Next "
        Const [Function] As String = "Function "
        Const [Get] As String = "Get "
        Const [GoTo] As String = "GoTo "
        Const [If] As String = "If "
        Const [OnError] As String = "On Error "
        Const [Operator] As String = "Operator "
        Const [Option_keyword] As String = "Option keyword"
        Const [Option_Compare] As String = "Option Compare "
        Const [RaiseEvent] As String = "RaiseEvent "
        Const [ReDim] As String = "ReDim "
        Const [REM] As String = "REM "
        Const [Resume] As String = "Resume "
        Const [Return] As String = "Return "
        Const [Select] As String = "Select "
        Const [Set] As String = "Set "
        Const [Stop] As String = "Stop "
        Const [Sub] As String = "Sub "
        Const [SyncLock] As String = "SyncLock "
        Const [Then] As String = "Then "
        Const [Throw] As String = "Throw "
        Const [Try] As String = "Try "
        Const [Using] As String = "Using "
        Const [Yield] As String = "Yield "
#End Region
    End Class
#End Region
#Region "|08.00.19| <Class> <Statement> [AttributeList]"
    ''' <summary>
    ''' This class helps construct attributes
    ''' Specifies the name of the category in which to group the property or event when displayed in a property grid control set to Categorized mode.
    ''' Inheritance Hierarchy
    ''' System.Object> System.Attribute>System.ComponentModel.CategoryAttribute
    ''' Namespace:  System.ComponentModel
    ''' Assembly:  System (in System.dll)
    ''' [Syntax]
    ''' Declaration
    ''' (AttributeUsageAttribute(AttributeTargets.All)> _
    ''' Public Class CategoryAttribute _
    ''' Inherits Attribute
    ''' The CategoryAttribute type exposes the following members.
    ''' [/Syntax]
    ''' 
    ''' <Status>Finished To be Tested</Status>
    ''' </summary>

    Public Class Attributelist
#Region "<1> [Property]{4}"
#Region "<01.00> <Property> [Info]{15}"
#Region "|2019/05/06 14h12:316| <01.00.00> <Property> <Info> [Call=Browsable|Boolean]"'(Set|Get) the Browsable as Boolean
        Private _Browsable As Boolean
        ''' <Summary>
        ''' (Set|Get) the Browsable as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h12:316 </Published>
        ''' <Updated>[Created=2019/05/06 14h12:316][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Browsable as Boolean"), Browsable(True)>
        Public Property Browsable() As Boolean
            Get
                Return _Browsable
            End Get
            Set(ByVal Value As Boolean)
                _Browsable = Value
            End Set
        End Property
#End Region ' (Set|Get) the Browsable as Boolean
#Region "|2019/05/06 14h13:964| <01.00.01> <Property> <Info> [Call=Category|String]"'(Set|Get) the Category as String
        Private _Category As String
        ''' <Summary>
        ''' (Set|Get) the Category as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h13:964 </Published>
        ''' <Updated>[Created=2019/05/06 14h13:964][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Category as String"), Browsable(True)>
        Public Property Category() As String
            Get
                Return _Category
            End Get
            Set(ByVal Value As String)
                _Category = Value
            End Set
        End Property
#End Region ' (Set|Get) the Category as String
#Region "|2019/05/06 14h13:674| <01.00.02> <Property> <Info> [Call=Description|String]"'(Set|Get) the Description as String
        Private _Description As String
        ''' <Summary>
        ''' (Set|Get) the Description as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h13:674 </Published>
        ''' <Updated>[Created=2019/05/06 14h13:674][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Description as String"), Browsable(True)>
        Public Property Description() As String
            Get
                Return _Description
            End Get
            Set(ByVal Value As String)
                _Description = Value
            End Set
        End Property
#End Region ' (Set|Get) the Description as String
#Region "|2019/05/06 14h14:431| <01.00.03> <Property> <Info> [Call=DefaultValue|String]"'(Set|Get) the DefaultValue as String
        Private _DefaultValue As String
        ''' <Summary>
        ''' (Set|Get) the DefaultValue as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h14:431 </Published>
        ''' <Updated>[Created=2019/05/06 14h14:431][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the DefaultValue as String"), Browsable(True)>
        Public Property DefaultValue() As String
            Get
                Return _DefaultValue
            End Get
            Set(ByVal Value As String)
                _DefaultValue = Value
            End Set
        End Property
#End Region ' (Set|Get) the DefaultValue as String
#Region "|2019/05/06 14h14:818| <01.00.04> <Property> <Info> [Call=Editor|String]"'(Set|Get) the Editor as String
        Private _Editor As String
        ''' <Summary>
        ''' (Set|Get) the Editor as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h14:818 </Published>
        ''' <Updated>[Created=2019/05/06 14h14:818][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Editor as String"), Browsable(True)>
        Public Property Editor() As String
            Get
                Return _Editor
            End Get
            Set(ByVal Value As String)
                _Editor = Value
            End Set
        End Property
#End Region ' (Set|Get) the Editor as String
#Region "|2019/05/06 14h15:813| <01.00.05> <Property> <Info> [Call=DllImport|String]"'(Set|Get) the DllImport as String
        Private _DllImport As String
        ''' <Summary>
        ''' (Set|Get) the DllImport as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h15:813 </Published>
        ''' <Updated>[Created=2019/05/06 14h15:813][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the DllImport as String"), Browsable(True)>
        Public Property DllImport() As String
            Get
                Return _DllImport
            End Get
            Set(ByVal Value As String)
                _DllImport = Value
            End Set
        End Property
#End Region ' (Set|Get) the DllImport as String
#Region "|2019/05/06 14h15:689| <01.00.06> <Property> <Info> [Call=Custom|Attribute]"'(Set|Get) the Custom as Attribute
        Private _Custom As Attribute
        ''' <Summary>
        ''' (Set|Get) the Custom as Attribute
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h15:689 </Published>
        ''' <Updated>[Created=2019/05/06 14h15:689][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Custom as Attribute"), Browsable(True)>
        Public Property Custom() As Attribute
            Get
                Return _Custom
            End Get
            Set(ByVal Value As Attribute)
                _Custom = Value
            End Set
        End Property
#End Region ' (Set|Get) the Custom as Attribute
#Region "|2019/05/06 14h16:049| <01.00.07> <Property> <Info> [Call=Deserializable|Boolean]"'(Set|Get) the Deserializable as Boolean
        Private _Deserializable As Boolean
        ''' <Summary>
        ''' (Set|Get) the Deserializable as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h16:049 </Published>
        ''' <Updated>[Created=2019/05/06 14h16:049][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Deserializable as Boolean"), Browsable(True)>
        Public Property Deserializable() As Boolean
            Get
                Return _Deserializable
            End Get
            Set(ByVal Value As Boolean)
                _Deserializable = Value
            End Set
        End Property
#End Region ' (Set|Get) the Deserializable as Boolean
#Region "|2019/05/06 14h17:701| <01.00.08> <Property> <Info> [Call=NonSerialized|Boolean]"'(Set|Get) the NonSerialized as Boolean
        Private _NonSerialized As Boolean
        ''' <Summary>
        ''' (Set|Get) the NonSerialized as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h17:701 </Published>
        ''' <Updated>[Created=2019/05/06 14h17:701][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the NonSerialized as Boolean"), Browsable(True)>
        Public Property NonSerialized() As Boolean
            Get
                Return _NonSerialized
            End Get
            Set(ByVal Value As Boolean)
                _NonSerialized = Value
            End Set
        End Property
#End Region ' (Set|Get) the NonSerialized as Boolean
#Region "|2019/05/06 14h18:245| <01.00.09> <Property> <Info> [Call=Serializable|Boolean]"'(Set|Get) the Serializable as Boolean
        Private _Serializable As Boolean
        ''' <Summary>
        ''' (Set|Get) the Serializable as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h18:245 </Published>
        ''' <Updated>[Created=2019/05/06 14h18:245][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Serializable as Boolean"), Browsable(True)>
        Public Property Serializable() As Boolean
            Get
                Return _Serializable
            End Get
            Set(ByVal Value As Boolean)
                _Serializable = Value
            End Set
        End Property
#End Region ' (Set|Get) the Serializable as Boolean
#Region "|2019/05/06 14h18:717| <01.00.10> <Property> <Info> [Call=XmlRoot|String]"'(Set|Get) the XmlRoot as String
        Private _XmlRoot As String
        ''' <Summary>
        ''' (Set|Get) the XmlRoot as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h18:717 </Published>
        ''' <Updated>[Created=2019/05/06 14h18:717][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the XmlRoot as String"), Browsable(True)>
        Public Property XmlRoot() As String
            Get
                Return _XmlRoot
            End Get
            Set(ByVal Value As String)
                _XmlRoot = Value
            End Set
        End Property
#End Region ' (Set|Get) the XmlRoot as String
#Region "|2019/05/06 14h19:628| <01.00.11> <Property> <Info> [Call=XmlIgnore|Boolean]"'(Set|Get) the XmlIgnore as Boolean
        Private _XmlIgnore As Boolean
        ''' <Summary>
        ''' (Set|Get) the XmlIgnore as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h19:628 </Published>
        ''' <Updated>[Created=2019/05/06 14h19:628][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the XmlIgnore as Boolean"), Browsable(True)>
        Public Property XmlIgnore() As Boolean
            Get
                Return _XmlIgnore
            End Get
            Set(ByVal Value As Boolean)
                _XmlIgnore = Value
            End Set
        End Property
#End Region ' (Set|Get) the XmlIgnore as Boolean
#Region "|2019/05/06 14h19:938| <01.00.12> <Property> <Info> [Call=XmlInclude|Boolean]"'(Set|Get) the XmlInclude as Boolean
        Private _XmlInclude As Boolean
        ''' <Summary>
        ''' (Set|Get) the XmlInclude as Boolean
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h19:938 </Published>
        ''' <Updated>[Created=2019/05/06 14h19:938][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the XmlInclude as Boolean"), Browsable(True)>
        Public Property XmlInclude() As Boolean
            Get
                Return _XmlInclude
            End Get
            Set(ByVal Value As Boolean)
                _XmlInclude = Value
            End Set
        End Property
#End Region ' (Set|Get) the XmlInclude as Boolean
#Region "|2019/05/06 14h20:500| <01.00.13> <Property> <Info> [Call=RelatedImageList|String]"'(Set|Get) the RelatedImageList as String
        Private _RelatedImageList As String
        ''' <Summary>
        ''' (Set|Get) the RelatedImageList as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h20:500 </Published>
        ''' <Updated>[Created=2019/05/06 14h20:500][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the RelatedImageList as String"), Browsable(True)>
        Public Property RelatedImageList() As String
            Get
                Return _RelatedImageList
            End Get
            Set(ByVal Value As String)
                _RelatedImageList = Value
            End Set
        End Property
#End Region ' (Set|Get) the RelatedImageList as String
#Region "|2019/05/06 14h21:237| <01.00.14> <Property> <Info> [Call=Attributes|List(Of Attribute)]"'(Set|Get) the Attributes as List(Of Attribute)
        Private _Attributes As List(Of Attribute)
        ''' <Summary>
        ''' (Set|Get) the Attributes as List(Of Attribute)
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h21:237 </Published>
        ''' <Updated>[Created=2019/05/06 14h21:237][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("(Set|Get) the Attributes as List(Of Attribute)"), Browsable(True)>
        Public Property Attributes() As List(Of Attribute)
            Get
                Return _Attributes
            End Get
            Set(ByVal Value As List(Of Attribute))
                _Attributes = Value
            End Set
        End Property
#End Region ' (Set|Get) the Attributes as List(Of Attribute)
#Region "[2019/03/23 16h10:333]<01.00.15> <Property> [Langue|CodeLanguage]"
        Private _CodeLangue As CodeLanguage
        ''' <summary>
        ''' (Set|Get) The language code.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 23.03.2019 16:12</author>
        <CategoryAttribute("Info"),
           Description("(Set|Get) The language code."),
           Browsable(True)>
        Public Property CodeLangue() As CodeLanguage
            Get
                Return _CodeLangue
            End Get
            Set(ByVal value As CodeLanguage)
                _CodeLangue = value
            End Set
        End Property
#End Region 'The language code.
#End Region
#Region "<01.01> <Property> [Docs.Microsoft.com]{10}"
#Region "[2019/03/27 23h47:018]<01.01.00> <Property> [HelpDescription|String]"
        Private Shared _HelpDescription As String
        ''' <summary>
        ''' (Set|Get) Help information about the class.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:47</author>
        <CategoryAttribute("Docs.Microsoft.com"),
    Description("(Set|Get) Help information about the class."),
    Browsable(True)>
        Public Shared Property HelpDescription() As String
            Get
                Return _HelpDescription
            End Get
            Set(ByVal value As String)
                _HelpDescription = value
            End Set
        End Property
#End Region 'Help information about the class.
#Region "[2019/03/27 23h48:486]<01.01.01> <Property> [HelpSyntax|String]"
        Private Shared _HelpSyntax As String
        ''' <summary>
        ''' (Set|Get) Help with the syntax.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:48</author>
        <CategoryAttribute("Docs.Microsoft.com"),
    Description("(Set|Get) Help with the syntax."),
    Browsable(True)>
        Public Shared Property HelpSyntax() As String
            Get
                Return _HelpSyntax
            End Get
            Set(ByVal value As String)
                _HelpSyntax = value
            End Set
        End Property
#End Region 'Help with the syntax.
#Region "[2019/03/27 23h48:549]<01.01.02> <Property> [HelpParts|String]"
        Private Shared _HelpParts As String
        ''' <summary>
        ''' (Set|Get) Help with the parts definition.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:48</author>
        <CategoryAttribute("Docs.Microsoft.com"),
    Description("(Set|Get) Help with the parts definition."),
    Browsable(True)>
        Public Shared Property HelpParts() As String
            Get
                Return _HelpParts
            End Get
            Set(ByVal value As String)
                _HelpParts = value
            End Set
        End Property
#End Region 'Help with the parts definition.
#Region "[2019/03/27 23h49:229]<01.01.03> <Property> [HelpRemarks|String]"
        Private Shared _HelpRemarks As String
        ''' <summary>
        ''' (Set|Get) Help with the remarks.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:49</author>
        <CategoryAttribute("Docs.Microsoft.com"),
    Description("(Set|Get) Help with the remarks."),
    Browsable(True)>
        Public Shared Property HelpRemarks() As String
            Get
                Return _HelpRemarks
            End Get
            Set(ByVal value As String)
                _HelpRemarks = value
            End Set
        End Property
#End Region 'Help with the remarks.
#Region "[2019/03/27 23h49:061]<01.01.04> <Property> [HelpRules|List(Of String)]"
        Private Shared _HelpRules As List(Of String)
        ''' <summary>
        ''' (Set|Get) Help with the rules.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:49</author>
        <CategoryAttribute("Docs.Microsoft.com"),
    Description("(Set|Get) Help with the rules."),
    Browsable(True)>
        Public Shared Property HelpRules() As List(Of String)
            Get
                Return _HelpRules
            End Get
            Set(ByVal value As List(Of String))
                _HelpRules = value
            End Set
        End Property
#End Region 'Help with the rules.
#Region "[2019/03/27 23h50:865]<01.01.05> <Property> [HelpBehavior|String]"
        Private Shared _HelpBehavior As String
        ''' <summary>
        ''' (Set|Get) Help with the behavior.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:50</author>
        <CategoryAttribute("Docs.Microsoft.com"),
    Description("(Set|Get) Help with the behavior."),
    Browsable(True)>
        Public Shared Property HelpBehavior() As String
            Get
                Return _HelpBehavior
            End Get
            Set(ByVal value As String)
                _HelpBehavior = value
            End Set
        End Property
#End Region 'Help with the behavior.
#Region "[2019/03/27 23h50:897]<01.01.06> <Property> [HelpExample|String]"
        Private Shared _HelpExample As List(Of String)
        ''' <summary>
        ''' (Set|Get) Help with the examples.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:50</author>
        <CategoryAttribute("Docs.Microsoft.com"),
    Description("(Set|Get) Help with the examples."),
    Browsable(True)>
        Public Shared Property HelpExample() As List(Of String)
            Get
                Return _HelpExample
            End Get
            Set(ByVal value As List(Of String))
                _HelpExample = value
            End Set
        End Property
#End Region 'Help with the examples.
#Region "[2019/03/27 23h51:315]<01.01.07> <Property> [HelpSeeAlso|List(Of String)]"
        Private Shared _HelpSeeAlso As List(Of String)
        ''' <summary>
        ''' (Set|Get) Help with see Also.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:51</author>
        <CategoryAttribute("Docs.Microsoft.com"),
    Description("(Set|Get) Help with see Also."),
    Browsable(True)>
        Public Shared Property HelpSeeAlso() As List(Of String)
            Get
                Return _HelpSeeAlso
            End Get
            Set(ByVal value As List(Of String))
                _HelpSeeAlso = value
            End Set
        End Property
#End Region 'Help with see Also.
#Region "[2019/03/27 23h52:859]<01.01.08> <Property> [HelpUrl|String]"
        Private Shared _HelpUrl As String
        ''' <summary>
        ''' (Set|Get) Help url.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:52</author>
        <CategoryAttribute("Docs.Microsoft.com"),
    Description("(Set|Get) Help url."),
    Browsable(True)>
        Public Shared Property HelpUrl() As String
            Get
                Return _HelpUrl
            End Get
            Set(ByVal value As String)
                _HelpUrl = value
            End Set
        End Property
#End Region 'Help url.
#Region "[2019/03/27 23h58:758]<01.01.09> <Property> [Help|String]"
        Private Shared _Help As String
        ''' <summary>
        ''' (Set|Get) Full Help documentation.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 27.03.2019 23:58</author>
        <CategoryAttribute("Docs.Microsoft.com"),
    Description("(Set|Get) Full Help documentation."),
    Browsable(True)>
        Public Shared Property Help() As String
            Get
                Return _Help
            End Get
            Set(ByVal value As String)
                _Help = value
            End Set
        End Property
#End Region 'Full Help documentation.
#End Region
#Region "<01.03> <Property> [Print]{10}"
#Region "[2019/03/21 21h49:658]<01.03.00> <Property> [Print_VB|List(Of String)]"
        Private _Print_VB As List(Of String)
        ''' <summary>
        ''' (Set|Get) Printed List(Of String) for VB.NET
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 21.03.2019 21:49</author>
        <CategoryAttribute("Print"),
           Description("(Set|Get) Printed List(Of String) for VB.NET"),
           Browsable(True)>
        Public Property Print_VB() As List(Of String)
            Get
                Return _Print_VB
            End Get
            Set(ByVal value As List(Of String))
                _Print_VB = value
            End Set
        End Property
#End Region 'Printed List(Of String) for VB.NET
#Region "[2019/03/21 21h49:381]<01.03.01> <Property> [Print_C|List(Of String)]"
        Private _Print_C As List(Of String)
        ''' <summary>
        ''' (Set|Get) Printed List(Of String) for C#
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 21.03.2019 21:49</author>
        <CategoryAttribute("Print"),
           Description("(Set|Get) Printed List(Of String) for C#"),
           Browsable(True)>
        Public Property Print_C() As List(Of String)
            Get
                Return _Print_C
            End Get
            Set(ByVal value As List(Of String))
                _Print_C = value
            End Set
        End Property
#End Region 'Printed List(Of String) for C#
#Region "[2019/03/21 23h43:848]<01.03.02> <Property> [Print_F|List(Of String)]"
        Private _Print_F As List(Of String)
        ''' <summary>
        ''' (Set|Get) Printed List(Of String) for F#
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 21.03.2019 23:43</author>
        <CategoryAttribute("Print"),
           Description("(Set|Get) Printed List(Of String) for F#"),
           Browsable(True)>
        Public Property Print_F() As List(Of String)
            Get
                Return _Print_F
            End Get
            Set(ByVal value As List(Of String))
                _Print_F = value
            End Set
        End Property
#End Region 'Printed List(Of String) for F#
#Region "[2019/03/28 09h45:808]<01.03.03> <Property> [Print_Python|List(Of String)]"
        Private _Print_Python As List(Of String)
        ''' <summary>
        ''' (Set|Get) Printed List(Of String) for Python
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 21.03.2019 23:43</author>
        <CategoryAttribute("Print"),
           Description("(Set|Get) Printed List(Of String) for Python"),
           Browsable(True)>
        Public Property Print_Python() As List(Of String)
            Get
                Return _Print_Python
            End Get
            Set(ByVal value As List(Of String))
                _Print_Python = value
            End Set
        End Property
#End Region 'Printed List(Of String) for Python
#Region "[2019/03/28 09h45:808]<01.03.04> <Property> [Print_JavaScript|List(Of String)]"
        Private _Print_JavaScript As List(Of String)
        ''' <summary>
        ''' (Set|Get) Printed List(Of String) for JavaScript
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 21.03.2019 23:43</author>
        <CategoryAttribute("Print"),
           Description("(Set|Get) Printed List(Of String) for JavaScript"),
           Browsable(True)>
        Public Property Print_JavaScript() As List(Of String)
            Get
                Return _Print_JavaScript
            End Get
            Set(ByVal value As List(Of String))
                _Print_JavaScript = value
            End Set
        End Property
#End Region 'Printed List(Of String) for JavaScript
#Region "|2019/05/06 14h40:280| <01.03.05> <Property> <Print> [Call=VB|String]"'(Set|Get) the VB as String
        Private _VB As String
        ''' <Summary>
        ''' (Set|Get) the VB as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h40:280 </Published>
        ''' <Updated>[Created=2019/05/06 14h40:280][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Print"), Description("(Set|Get) the VB as String"), Browsable(True)>
        Public Property VB() As String
            Get
                Return _VB
            End Get
            Set(ByVal Value As String)
                _VB = Value
            End Set
        End Property
#End Region ' (Set|Get) the VB as String
#Region "|2019/05/06 14h40:762| <01.03.06> <Property> <Print> [Call=C|String]"'(Set|Get) the C as String
        Private _C As String
        ''' <Summary>
        ''' (Set|Get) the C as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h40:762 </Published>
        ''' <Updated>[Created=2019/05/06 14h40:762][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Print"), Description("(Set|Get) the C as String"), Browsable(True)>
        Public Property C() As String
            Get
                Return _C
            End Get
            Set(ByVal Value As String)
                _C = Value
            End Set
        End Property
#End Region ' (Set|Get) the C as String
#Region "|2019/05/06 14h41:156| <01.03.07> <Property> <Print> [Call=F|String]"'(Set|Get) the F as String
        Private _F As String
        ''' <Summary>
        ''' (Set|Get) the F as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h41:156 </Published>
        ''' <Updated>[Created=2019/05/06 14h41:156][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Print"), Description("(Set|Get) the F as String"), Browsable(True)>
        Public Property F() As String
            Get
                Return _F
            End Get
            Set(ByVal Value As String)
                _F = Value
            End Set
        End Property
#End Region ' (Set|Get) the F as String
#Region "|2019/05/06 14h41:035| <01.03.08> <Property> <Print> [Call=Python|String]"'(Set|Get) the Python as String
        Private _Python As String
        ''' <Summary>
        ''' (Set|Get) the Python as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h41:035 </Published>
        ''' <Updated>[Created=2019/05/06 14h41:035][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Print"), Description("(Set|Get) the Python as String"), Browsable(True)>
        Public Property Python() As String
            Get
                Return _Python
            End Get
            Set(ByVal Value As String)
                _Python = Value
            End Set
        End Property
#End Region ' (Set|Get) the Python as String
#Region "|2019/05/06 14h41:899| <01.03.09> <Property> <Print> [Call=JavaScript|String]"'(Set|Get) the JavaScript as String
        Private _JavaScript As String
        ''' <Summary>
        ''' (Set|Get) the JavaScript as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 14h41:899 </Published>
        ''' <Updated>[Created=2019/05/06 14h41:899][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Print"), Description("(Set|Get) the JavaScript as String"), Browsable(True)>
        Public Property JavaScript() As String
            Get
                Return _JavaScript
            End Get
            Set(ByVal Value As String)
                _JavaScript = Value
            End Set
        End Property
#End Region ' (Set|Get) the JavaScript as String
#End Region
#End Region
#Region "<3> [Sub]"
#Region "<03.00> <Sub> [Clear]"
        Public Sub Clear()
            With Me
                .Attributes = New List(Of Attribute)
                .Browsable = True
                .C = ""
                .Category = ""
                .CodeLangue = CodeLanguage.Vb
                .Custom = New Attribute
                .DefaultValue = ""
                .Description = ""
                .Deserializable = False
                .DllImport = ""
                .Editor = ""
                .F = ""
                .JavaScript = ""
                .NonSerialized = False
                .Print_C = New List(Of String)
                .Print_F = New List(Of String)
                .Print_JavaScript = New List(Of String)
                .Print_Python = New List(Of String)
                .Print_VB = New List(Of String)
                .Python = ""
                .RelatedImageList = ""
                .Serializable = False
                .VB = ""
                .XmlIgnore = False
                .XmlInclude = False
                .XmlRoot = ""
            End With
        End Sub
#End Region
#End Region
#Region "<4> [Function]{1}"
#Region "<04.00> <Function> [Public]{1}"
#Region "<04.00.00> <Function> <Public> [Print(Code|CodeLanguage)]|String"
        ''' <summary>
        ''' Print Attribute list
        ''' <Status>Working Tested on 19.05.2019!</Status>
        ''' </summary>
        ''' <param name="code"></param>
        ''' <returns></returns>
        Public Function Print(ByVal code As CodeLanguage) As String
            'Storing values
            With Me
                .Attributes = New List(Of Attribute)
                If .Browsable = True Then
                    Dim A_Browsable As New Attribute("Browsable", True, True, Attribute.ReturnFormat.NoFormat)
                    .Attributes.Add(A_Browsable)
                End If
                If .Category.Length > 0 Then
                    Dim A_Category As New Attribute("CategoryAttribute", .Category, True, Attribute.ReturnFormat.String)
                    .Attributes.Add(A_Category)
                End If
                If .Description.Length > 0 Then
                    Dim A_Description As New Attribute("Description", .Description, True, Attribute.ReturnFormat.String)
                    .Attributes.Add(A_Description)
                End If
                If .DefaultValue.Length > 0 Then
                    Dim A_DefaultValue As New Attribute("DefaultValue", .DefaultValue, True, Attribute.ReturnFormat.NoFormat)
                    .Attributes.Add(A_DefaultValue)
                End If
                If .DllImport.Length > 0 Then
                    Dim A_DllImport As New Attribute("DllImport", .DllImport, True, Attribute.ReturnFormat.String)
                    .Attributes.Add(A_DllImport)
                End If
                If .Editor.Length > 0 Then
                    Dim A_Editor As New Attribute("Editor", .Editor, True, Attribute.ReturnFormat.String)
                    .Attributes.Add(A_Editor)
                End If
                If .Deserializable = True Then
                    Dim A_Deserializable As New Attribute("Deserializable", .Deserializable, True, Attribute.ReturnFormat.Boolean)
                    .Attributes.Add(A_Deserializable)
                End If
                If .Serializable = True Then
                    Dim A_Serialiazable As New Attribute("Serializable", .Serializable, True, Attribute.ReturnFormat.Boolean)
                    .Attributes.Add(A_Serialiazable)
                End If
                If .RelatedImageList.Length > 0 Then
                    'to be edited
                    Dim A_RelatedImageList As New Attribute("RelatedImageList", .RelatedImageList, True, Attribute.ReturnFormat.String)
                    .Attributes.Add(A_RelatedImageList)
                End If
                If .NonSerialized = True Then
                    Dim A_NonSerialized As New Attribute("NonSerialized", .NonSerialized, True, Attribute.ReturnFormat.Boolean)
                    .Attributes.Add(A_NonSerialized)
                End If
                If .XmlRoot.Length > 0 Then
                    Dim A_XmlRoot As New Attribute("XmlRoot", .XmlRoot, True, Attribute.ReturnFormat.String)
                    .Attributes.Add(A_XmlRoot)
                End If
                If .XmlIgnore = True Then
                    Dim A_XmlIgnore As New Attribute("XmlIgnore", .XmlIgnore, True, Attribute.ReturnFormat.Boolean)
                    .Attributes.Add(A_XmlIgnore)
                End If
                If .XmlInclude = True Then
                    Dim A_XmlInclude As New Attribute("XmlInclude", .XmlInclude, True, Attribute.ReturnFormat.Boolean)
                    .Attributes.Add(A_XmlInclude)
                End If
                If Not IsNothing(.Custom) Then
                    If .Custom.AttributeValue.Length > 0 Then
                        .Custom.AttributeInUse = True
                        .Attributes.Add(.Custom)
                    End If
                End If
            End With
            'Printing values
            With Me
                Dim Temp_C As String = "["
                Dim Temp_F As String = "["
                Dim Temp_Python As String = "["
                Dim Temp_VB As String = "<"
                Dim Temp_Java As String = "["
                Dim FinalList As New List(Of Attribute)
                For Each Att As Attribute In Me.Attributes
                    If Att.AttributeInUse = True And Att.ToString.Length > 0 Then
                        FinalList.Add(Att)
                    End If
                Next


                For i = 0 To FinalList.Count - 2
                    If Me.Attributes(i).AttributeInUse = True Then
                        Temp_VB += Me.Attributes(i).Print(CodeLanguage.Vb) & ", "
                        Temp_C += Me.Attributes(i).Print(CodeLanguage.C) & ", "
                        Temp_F += Me.Attributes(i).Print(CodeLanguage.F) & ", "
                        Temp_Python += Me.Attributes(i).Print(CodeLanguage.Python) & ", "
                        Temp_Java += Me.Attributes(i).Print(CodeLanguage.JavaScript) & ", "
                    End If
                Next
                If FinalList(FinalList.Count - 1).AttributeInUse = True Then
                    Temp_VB += FinalList(FinalList.Count - 1).Print(CodeLanguage.Vb) & ">"
                    Temp_C += FinalList(FinalList.Count - 1).Print(CodeLanguage.C) & "]"
                    Temp_F += FinalList(FinalList.Count - 1).Print(CodeLanguage.F) & "]"
                    Temp_Python += FinalList(FinalList.Count - 1).Print(CodeLanguage.Python) & "]"
                    Temp_Java += FinalList(FinalList.Count - 1).Print(CodeLanguage.JavaScript) & "]"
                End If
                Me.Print_VB.Add(Temp_VB)
                Me.Print_C.Add(Temp_C)
                Me.Print_F.Add(Temp_F)
                Me.Print_Python.Add(Temp_Python)
                Me.Print_JavaScript.Add(Temp_Java)
                Me.VB = Temp_VB
                Me.C = Temp_C
                Me.F = Temp_F
                Me.JavaScript = Temp_Java
                Me.Python = Temp_Python
            End With
            'Reporting values
            If code = CodeLanguage.C Then
                Return C
            ElseIf code = CodeLanguage.F Then
                Return F
            ElseIf code = CodeLanguage.JavaScript Then
                Return JavaScript
            ElseIf code = CodeLanguage.Python Then
                Return Python
            ElseIf code = CodeLanguage.Vb Then
                Return VB
            Else
                Return VB
            End If
        End Function
#End Region
#Region "<05.01> <Function> [Serialize]"

        Public Shared Function Deserialize(ByVal Statement As String) As Attributelist
            Dim Result As New Attributelist
            Dim Serializer As New XmlSerializer(GetType(Attributelist))
            Using Reader As TextReader = New StringReader(Statement)
                Result = Serializer.Deserialize(Reader)
            End Using
            Return Result
        End Function
        Public Shared Function Deserialize(ByVal File As Fichier) As Attributelist
            Dim Result As New Attributelist
            Dim Serializer As New XmlSerializer(GetType(Attributelist))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Return Result
        End Function
#End Region
#End Region
#End Region
#Region "<5> [Loader]{2}"
#Region "<05.00> <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "<05.01> <Loader> [Filled]"
        ''' <summary>
        ''' Create a new AttributeList
        ''' </summary>
        ''' <param name="Category">Specifies the name of the category in which to group the property or event when displayed in a System.Windows.Forms.PropertyGird control set to Categorized mode.</param>
        ''' <param name="Description">Specifies a description for a property or event. <see cref="VbNET.Property"/> <see cref="VbNET.Event"/></param>
        ''' <param name="DefaultValue">Set the default value for a property.<see cref="VbNET.Property"/></param>
        ''' <param name="Browsable">Specifies wheter a property or event should be displayed in a Properties window.</param>
        ''' <param name="Deserializable"></param>
        ''' <param name="Editor">Specifies the editor to use to change a property. This class cannot be inherited.<see cref="VbNET.Property"/></param>
        ''' <param name="Serializable">Indicates that a class can be serialized. This class cannot be inherited.<see cref="VbNET.Class"/></param>
        ''' <param name="NonSerialized">Indicates that a field of a serializable class should not be serialized. This class cannot be inherited.<see cref="VbNET.Class"/></param>
        ''' <param name="RelatedImageList">Indicates which System.Windows.Forms.Imagelist a property is related to. <see cref="VbNET.Property"/></param>
        ''' <param name="XmlRoot">Controls XML serialization of the attribute target as XML root element.</param>
        ''' <param name="XmlIgnore">Instructs the System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter.System.Object() method of the System.Xml.Serialization.XmlSerializer not to serialize the public field or public read/write property value. <see cref="VbNET.Property"/></param>
        ''' <param name="XmlInclude">Allows the System.Xml.Serialization.XmlSerializer to recognize a type when it serializes or deserializes an object.</param>
        ''' <param name="Custom">Custom Attributes.</param>
        ''' <param name="DllImport"></param>
        Public Sub New(ByVal Category As String,
                       ByVal Description As String,
              Optional ByVal DefaultValue As String = "",
              Optional ByVal Browsable As Boolean = True,
              Optional ByVal Deserializable As Boolean = False,
              Optional ByVal Editor As String = "",
              Optional ByVal Serializable As Boolean = False,
              Optional ByVal NonSerialized As Boolean = False,
              Optional ByVal RelatedImageList As String = "",
              Optional ByVal XmlRoot As String = "",
              Optional ByVal XmlIgnore As Boolean = False,
              Optional ByVal XmlInclude As Boolean = False,
              Optional ByVal Custom As Attribute = Nothing,
              Optional ByVal DllImport As String = Nothing)
            Clear()

            With Me
                .Category = Category
                .Description = Description
                .Deserializable = Deserializable
                If Not IsNothing(DllImport) Then
                    .DllImport = DllImport
                End If
                .Editor = Editor
                .NonSerialized = NonSerialized
                .RelatedImageList = RelatedImageList
                .Serializable = Serializable
                .XmlIgnore = XmlIgnore
                .XmlInclude = XmlInclude
                .XmlRoot = XmlRoot
                If Not IsNothing(Custom) Then
                    .Custom = Custom
                End If
            End With
            Print(CodeLanguage.Vb)
        End Sub
#End Region
#End Region

        ''' <summary>
        ''' Creation of Attribute 
        ''' </summary>
        Public Class Attribute
#Region "<1> [Property]"
#Region "<01.00> <Property> [Info]"
#Region "|2019/05/06 13h19:083| <01.00.00> <Property> <Info> [Call=AttributeName|String]"'(Set|Get) the AttributeName as String
            Private _AttributeName As String
            ''' <Summary>
            ''' (Set|Get) the AttributeName as String
            ''' </Summary>
            ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
            ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
            ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 13h19:083 </Published>
            ''' <Updated>[Created=2019/05/06 13h19:083][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

            <CategoryAttribute("Info"), Description("(Set|Get) the AttributeName as String"), Browsable(True)>
            Public Property AttributeName() As String
                Get
                    Return _AttributeName
                End Get
                Set(ByVal Value As String)
                    _AttributeName = Value
                End Set
            End Property
#End Region ' (Set|Get) the AttributeName as String
#Region "|2019/05/06 13h20:654| <01.00.01> <Property> <Info> [Call=AttributeValue|String]"'(Set|Get) the AttributeValue as String
            Private _AttributeValue As String
            ''' <Summary>
            ''' (Set|Get) the AttributeValue as String
            ''' </Summary>
            ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
            ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
            ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/06 13h20:654 </Published>
            ''' <Updated>[Created=2019/05/06 13h20:654][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

            <CategoryAttribute("Info"), Description("(Set|Get) the AttributeValue as String"), Browsable(True)>
            Public Property AttributeValue() As String
                Get
                    Return _AttributeValue
                End Get
                Set(ByVal Value As String)
                    _AttributeValue = Value
                End Set
            End Property
#End Region ' (Set|Get) the AttributeValue as String
#Region "|2019/05/19 13h41:690| <01.00.02> <Property> <Info> [Call=AttributeInUse|Boolean]"'(Set|Get) the AttributeInUse as Boolean
            Private _AttributeInUse As Boolean
            ''' <Summary>
            ''' (Set|Get) the AttributeInUse as Boolean
            ''' </Summary>
            ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
            ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
            ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/19 13h41:690 </Published>
            ''' <Updated>[Created=2019/05/19 13h41:690][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

            <CategoryAttribute("Info"), Description("(Set|Get) the AttributeInUse as Boolean"), DefaultValue(False), Browsable(True)>
            Public Property AttributeInUse() As Boolean
                Get
                    Return _AttributeInUse
                End Get
                Set(ByVal Value As Boolean)
                    _AttributeInUse = Value
                End Set
            End Property
#End Region ' (Set|Get) the AttributeInUse as Boolean
#Region "|2019/05/19 13h42:596| <01.00.03> <Property> <Info> [Call=AttributeFormat|ReturnFormat]"'(Set|Get) the AttributeFormat as ReturnFormat
            Private _AttributeFormat As ReturnFormat
            ''' <Summary>
            ''' (Set|Get) the AttributeFormat as ReturnFormat
            ''' </Summary>
            ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
            ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
            ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/19 13h42:596 </Published>
            ''' <Updated>[Created=2019/05/19 13h42:596][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

            <CategoryAttribute("Info"), Description("(Set|Get) the AttributeFormat as ReturnFormat"), DefaultValue(ReturnFormat.[NoFormat]), Browsable(True)>
            Public Property AttributeFormat() As ReturnFormat
                Get
                    Return _AttributeFormat
                End Get
                Set(ByVal Value As ReturnFormat)
                    _AttributeFormat = Value
                End Set
            End Property
#End Region ' (Set|Get) the AttributeFormat as ReturnFormat

#End Region
#End Region
#Region "<2> [Enumeration]"
#Region "|2019/05/19 13h39:845| <02.00.00> <Enumeration> <ReturnFormat> [Call=ReturnFormat|Enumeration]"'The enumeration of ReturnFormat.
            ''' <Summary>
            ''' (Set|Get) The enumeration of ReturnFormat.
            ''' </Summary>
            ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
            ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
            ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/19 13h39:840 </Published>
            ''' <Updated>[Created=2019/05/19 13h39:833][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            Public Enum ReturnFormat

                ''' <summary>Return a type String format which requires " brakets.  </summary>
                [String] = 0
                ''' <summary>Return a type Number format .  </summary>
                [Number] = 1
                ''' <summary>Return a type Boolean format .  </summary>
                [Boolean] = 2
                ''' <summary>Return a type without formating needed .  </summary>
                [NoFormat] = 3
            End Enum
#End Region ' The enumeration of ReturnFormat.

#End Region
#Region "<5> [Function]"
#Region "<05.00> <Function> [ToString]"
            Public Overrides Function ToString() As String
                If Me.AttributeName <> "" Then
                    If Me.AttributeFormat = ReturnFormat.String Then
                        Return Me.AttributeName & "(" & Space & Me.AttributeValue & Space & ") "
                    Else
                        Return Me.AttributeName & "(" & Me.AttributeValue & ") "
                    End If
                Else
                    Return ""
                End If
            End Function

            Public Function Print(ByVal lange As CodeLanguage) As String
                Dim Result As String = ""
                If Me.AttributeName <> "" Then
                    Select Case lange
                        Case CodeLanguage.Vb
                            If Me.AttributeFormat = ReturnFormat.String Then
                                Result = Me.AttributeName & "(" & Space & Me.AttributeValue & Space & ") "
                            Else
                                Result = Me.AttributeName & "(" & Me.AttributeValue & ") "
                            End If
                        Case CodeLanguage.C
                            If Me.AttributeFormat = ReturnFormat.String Then
                                Result = Me.AttributeName & "(" & Space & Me.AttributeValue & Space & ") "
                            ElseIf Me.AttributeFormat = ReturnFormat.Boolean Then
                                Result = Me.AttributeName & "(" & Me.AttributeValue.ToLower & ") "
                            Else
                                Result = Me.AttributeName & "(" & Me.AttributeValue.ToLower & ") "
                            End If
                        Case CodeLanguage.JavaScript
                            If Me.AttributeFormat = ReturnFormat.String Then
                                Result = Me.AttributeName & "(" & Space & Me.AttributeValue & Space & ") "
                            ElseIf Me.AttributeFormat = ReturnFormat.Boolean Then
                                Result = Me.AttributeName & "(" & Me.AttributeValue.ToLower & ") "
                            Else
                                Result = Me.AttributeName & "(" & Me.AttributeValue.ToLower & ") "
                            End If
                        Case Else
                            If Me.AttributeFormat = ReturnFormat.String Then
                                Result = Me.AttributeName & "(" & Space & Me.AttributeValue & Space & ") "
                            ElseIf Me.AttributeFormat = ReturnFormat.Boolean Then
                                Result = Me.AttributeName & "(" & Me.AttributeValue.ToLower & ") "
                            Else
                                Result = Me.AttributeName & "(" & Me.AttributeValue.ToLower & ") "
                            End If
                    End Select
                End If
                Return Result
            End Function
#End Region
#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
            Public Sub New()
                With Me
                    .AttributeName = ""
                    .AttributeValue = ""
                End With
            End Sub
#End Region
#Region "<06.01> <Loader> [Fill]"
            ''' <summary>
            ''' Creating a new Attribute Object with Name and Value.
            ''' </summary>
            ''' <param name="Name">The name of the attribute</param>
            ''' <param name="Value">The value of the attribute</param>
            ''' <param name="Inuse">Active or Deactivate the Attribute. By Default set to False.</param>
            ''' <param name="Format">See if needs barkets.</param>
            Public Sub New(ByVal Name As String,
                           ByVal Value As String,
                           Optional ByVal Inuse As Boolean = False,
                           Optional ByVal Format As ReturnFormat = ReturnFormat.NoFormat)
                With Me
                    .AttributeName = Name
                    .AttributeValue = Value
                    .AttributeInUse = Inuse
                    .AttributeFormat = Format
                End With
            End Sub
#End Region
#End Region
        End Class
    End Class
#End Region
#Region "|08.00.20| <Class> <Statement> [Summary]"
    ''' <summary>
    ''' https://docs.microsoft.com/en-us/dotnet/api/system.data.services.common.syndicationitemproperty?view=netframework-4.7.2#System_Data_Services_Common_SyndicationItemProperty_Summary
    ''' Gets the summary for this Documentation.
    ''' </summary>
    <Serializable>
    Public Class Summary
#Region "<1> [Property]"
#Region "<01.00> <Property> [Info]"
        'https://docs.microsoft.com/en-us/dotnet/api/system.data.metadata.edm.documentation.summary?view=netframework-4.7.2#System_Data_Metadata_Edm_Documentation_Summary
#Region "|2019/04/23 11h55:165| <01.00.00> <Property> <Info> [Call=AuthorEmail|String]"'(Set|Get) Author email element.
        Private _AuthorEmail As String
        ''' <Summary>
        ''' Author email element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 11h55:165 </Published>
        ''' <Updated>[Created=2019/04/23 11h55:157][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Author email element."), Browsable(True)>
        Public Property AuthorEmail() As String
            Get
                Return _AuthorEmail
            End Get
            Set(ByVal Value As String)
                _AuthorEmail = Value
            End Set
        End Property
#End Region ' (Set|Get) Author email element.
#Region "|2019/04/23 11h57:266| <01.00.01> <Property> <Info> [Call=AuthorName|String]"'(Set|Get) Author name element.
        Private _AuthorName As String
        ''' <Summary>
        ''' Author name element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 11h57:266 </Published>
        ''' <Updated>[Created=2019/04/23 11h57:266][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Author name element."), Browsable(True)>
        Public Property AuthorName() As String
            Get
                Return _AuthorName
            End Get
            Set(ByVal Value As String)
                _AuthorName = Value
            End Set
        End Property
#End Region ' (Set|Get) Author name element.
#Region "|2019/04/23 11h57:735| <01.00.02> <Property> <Info> [Call=AuthorUri|String]"'(Set|Get) Author URI element.
        Private _AuthorUri As String
        ''' <Summary>
        ''' Author URI element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 11h57:735 </Published>
        ''' <Updated>[Created=2019/04/23 11h57:735][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Author URI element."), Browsable(True)>
        Public Property AuthorUri() As String
            Get
                Return _AuthorUri
            End Get
            Set(ByVal Value As String)
                _AuthorUri = Value
            End Set
        End Property
#End Region ' (Set|Get) Author URI element.
#Region "|2019/04/23 11h58:159| <01.00.03> <Property> <Info> [Call=ContributorEmail|String]"'(Set|Get) Contributor email element.
        Private _ContributorEmail As String
        ''' <Summary>
        ''' Contributor email element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 11h58:158 </Published>
        ''' <Updated>[Created=2019/04/23 11h58:158][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Contributor email element."), Browsable(True)>
        Public Property ContributorEmail() As String
            Get
                Return _ContributorEmail
            End Get
            Set(ByVal Value As String)
                _ContributorEmail = Value
            End Set
        End Property
#End Region ' (Set|Get) Contributor email element.
#Region "|2019/04/23 11h58:111| <01.00.04> <Property> <Info> [Call=ContributorName|String]"'(Set|Get) Contributor name element.
        Private _ContributorName As String
        ''' <Summary>
        ''' Contributor name element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 11h58:111 </Published>
        ''' <Updated>[Created=2019/04/23 11h58:111][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Contributor name element."), Browsable(True)>
        Public Property ContributorName() As String
            Get
                Return _ContributorName
            End Get
            Set(ByVal Value As String)
                _ContributorName = Value
            End Set
        End Property
#End Region ' (Set|Get) Contributor name element.
#Region "|2019/04/23 11h58:535| <01.00.05> <Property> <Info> [Call=ContributorUri|String]"'(Set|Get) Contributor URI element.
        Private _ContributorUri As String
        ''' <Summary>
        ''' Contributor URI element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 11h58:535 </Published>
        ''' <Updated>[Created=2019/04/23 11h58:535][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Contributor URI element."), Browsable(True)>
        Public Property ContributorUri() As String
            Get
                Return _ContributorUri
            End Get
            Set(ByVal Value As String)
                _ContributorUri = Value
            End Set
        End Property
#End Region ' (Set|Get) Contributor URI element.
#Region "|2019/04/23 11h59:501| <01.00.06> <Property> <Info> [Call=CustomProperty|String]"'(Set|Get) Custom property element.
        Private _CustomProperty As String
        ''' <Summary>
        ''' Custom property element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 11h59:501 </Published>
        ''' <Updated>[Created=2019/04/23 11h59:501][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Custom property element."), Browsable(True)>
        Public Property CustomProperty() As String
            Get
                Return _CustomProperty
            End Get
            Set(ByVal Value As String)
                _CustomProperty = Value
            End Set
        End Property
#End Region ' (Set|Get) Custom property element.
#Region "|2019/04/23 11h59:132| <01.00.07> <Property> <Info> [Call=Published|String]"'(Set|Get) Published resource element.
        Private _Published As String
        ''' <Summary>
        ''' Published resource element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 11h59:132 </Published>
        ''' <Updated>[Created=2019/04/23 11h59:132][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Published resource element."), Browsable(True)>
        Public Property Published() As String
            Get
                Return _Published
            End Get
            Set(ByVal Value As String)
                _Published = Value
            End Set
        End Property
#End Region ' (Set|Get) Published resource element.
#Region "|2019/04/23 12h00:777| <01.00.08> <Property> <Info> [Call=Rights|String]"'(Set|Get) Rights protected resource element.
        Private _Rights As String
        ''' <Summary>
        ''' Rights protected resource element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h00:777 </Published>
        ''' <Updated>[Created=2019/04/23 12h00:777][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Rights protected resource element."), Browsable(True)>
        Public Property Rights() As String
            Get
                Return _Rights
            End Get
            Set(ByVal Value As String)
                _Rights = Value
            End Set
        End Property
#End Region ' (Set|Get) Rights protected resource element.
#Region "|2019/04/23 12h00:729| <01.00.09> <Property> <Info> [Call=Summary|String]"'(Set|Get) Summary element.
        Private _Summary As String
        ''' <Summary>
        ''' Summary element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h00:729 </Published>
        ''' <Updated>[Created=2019/04/23 12h00:729][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Summary element."), Browsable(True)>
        Public Property Summary() As String
            Get
                Return _Summary
            End Get
            Set(ByVal Value As String)
                _Summary = Value
            End Set
        End Property
#End Region ' (Set|Get) Summary element.
#Region "|2019/04/23 12h00:666| <01.00.10> <Property> <Info> [Call=Title|String]"'(Set|Get) Title element.
        Private _Title As String
        ''' <Summary>
        ''' Title element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h00:666 </Published>
        ''' <Updated>[Created=2019/04/23 12h00:665][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description("Title element."), Browsable(True)>
        Public Property Title() As String
            Get
                Return _Title
            End Get
            Set(ByVal Value As String)
                _Title = Value
            End Set
        End Property
#End Region ' (Set|Get) Title element.
#Region "|2019/04/23 12h03:964| <01.00.11> <Property> <Info> [Call=Updated|String]"'(Set|Get) Updated element.
        Private _Updated As String
        ''' <Summary>
        ''' Updated element.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h03:964 </Published>
        ''' <Updated>[Created=2019/04/23 12h03:964][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''  <param name="Status">The Status of the control.  </param>
        '''  <param name="Situation">The situation. </param>
        '''  <param name="Ex">Capture an Exception. </param>
        '''  <param name="Tested">The Date of the Test. </param>

        <CategoryAttribute("Info"), Description("Updated element."), Browsable(True)>
        Public Property Updated(Optional ByVal Status As Status = Nothing, Optional ByVal Situation As String = Nothing, Optional ByVal Ex As Exception = Nothing, Optional ByVal Tested As Date = Nothing) As String
            Get
                Return _Updated
            End Get
            Set(ByVal Value As String)
                If IsNothing(Status) Then
                Else
                    Dim Str As String = ""
                    If Status = Status.Broken Then
                        Str = "Broken"
                    ElseIf Status = Status.Finished Then
                        Str = "Finished"
                    ElseIf Status = Status.IsNothing Then
                        Str = "IsNothing"
                    ElseIf Status = Status.NotTested Then
                        Str = "NotTested"
                    ElseIf Status = Status.Offline Then
                        Str = "Offline"
                    ElseIf Status = Status.Online Then
                        Str = "Online"
                    ElseIf Status = Status.Running Then
                        Str = "Running"
                    ElseIf Status = Status.StandBye Then
                        Str = "StandBye"
                    ElseIf Status = Status.Warning Then
                        Str = "Warning"
                    End If
                    Dim T As String = "[Created=" & CreationDate & "][Status=" & Str & "]"
                    If Not IsNothing(Tested) Then
                        Dim Test As String = PrintTime(Tested)
                        Dim D As String = "[Tested On]" & Test & "[/Tested On]"
                        T += D
                    End If
                    If Not IsNothing(Ex) Then
                        Dim Err As String = "     [Error]"
                        Dim EndErr As String = "     [/Error]"
                        T += Err & Format_Error(Ex, Me.Title) & EndErr
                    End If
                    If Situation <> "" Then
                        T += "[Situation]" & Situation & "[/Situation]"
                    End If
                    Value = T
                End If
                _Updated = Value
            End Set
        End Property
#End Region ' (Set|Get) Updated element.
#Region "|2019/04/23 12h04:092| <01.00.12> <Property> <Info> [Call=Status|Status]"'(Set|Get)  Situation of the Object.
        Private _Status As Status
        ''' <Summary>
        '''  Situation of the Object.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h04:092 </Published>
        ''' <Updated>[Created=2019/04/23 12h04:092][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Info"), Description(" Situation of the Object."), Browsable(True)>
        Public Property Status() As Status
            Get
                Return _Status
            End Get
            Set(ByVal Value As Status)
                _Status = Value
            End Set
        End Property
#End Region ' (Set|Get)  Situation of the Object.
#Region "|2019/04/23 12h07:885| <01.01.00> <Property> <Constructor> [Call=Usage|String]"'(Set|Get) Usage Statement to Describe how is the object suposed to be used.
        Private _Usage As String
        ''' <Summary>
        ''' Usage Statement to Describe how is the object suposed to be used.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h07:885 </Published>
        ''' <Updated>[Created=2019/04/23 12h07:885][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Usage Statement to Describe how is the object suposed to be used."), Browsable(True)>
        Public Property Usage() As String
            Get
                Return _Usage
            End Get
            Set(ByVal Value As String)
                _Usage = Value
            End Set
        End Property
#End Region ' (Set|Get) Usage Statement to Describe how is the object suposed to be used.
#Region "|2019/04/23 12h07:402| <01.01.01> <Property> <Constructor> [Call=Remarks|String]"'(Set|Get) Any Remarks.
        Private _Remarks As String
        ''' <Summary>
        ''' Any Remarks.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h07:402 </Published>
        ''' <Updated>[Created=2019/04/23 12h07:402][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Any Remarks."), Browsable(True)>
        Public Property Remarks() As String
            Get
                Return _Remarks
            End Get
            Set(ByVal Value As String)
                _Remarks = Value
            End Set
        End Property
#End Region ' (Set|Get) Any Remarks.
#Region "|2019/04/23 12h07:384| <01.01.02> <Property> <Constructor> [Call=Example|String]"'(Set|Get) Example Statement.
        Private _Example As String
        ''' <Summary>
        ''' Example Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h07:384 </Published>
        ''' <Updated>[Created=2019/04/23 12h07:384][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Example Statement."), Browsable(True)>
        Public Property Example() As String
            Get
                Return _Example
            End Get
            Set(ByVal Value As String)
                _Example = Value
            End Set
        End Property
#End Region ' (Set|Get) Example Statement.
#Region "|2019/04/23 12h08:418| <01.01.03> <Property> <Constructor> [Call=Note|String]"'(Set|Get) Note Statement.
        Private _Note As String
        ''' <Summary>
        ''' Note Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h08:418 </Published>
        ''' <Updated>[Created=2019/04/23 12h08:418][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("Note Statement."), Browsable(True)>
        Public Property Note() As String
            Get
                Return _Note
            End Get
            Set(ByVal Value As String)
                _Note = Value
            End Set
        End Property
#End Region ' (Set|Get) Note Statement.
#Region "|2019/04/23 12h08:802| <01.01.04> <Property> <Constructor> [Call=CreationDate|String]"'(Set|Get) The date time when the object was written.
        Private _CreationDate As String
        ''' <Summary>
        ''' The date time when the object was written.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h08:802 </Published>
        ''' <Updated>[Created=2019/04/23 12h08:802][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("The date time when the object was written."), Browsable(True)>
        Public Property CreationDate() As String
            Get
                Return _CreationDate
            End Get
            Set(ByVal Value As String)
                _CreationDate = Value
            End Set
        End Property
#End Region ' (Set|Get) The date time when the object was written.
#Region "|2019/04/23 12h09:223| <01.01.05> <Property> <Constructor> [Call=Params|List(Of Param)]"'(Set|Get) The list of parameters.
        Private _Params As List(Of Param)
        ''' <Summary>
        ''' The list of parameters.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h09:223 </Published>
        ''' <Updated>[Created=2019/04/23 12h09:223][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("The list of parameters."), Browsable(True)>
        Public Property Params() As List(Of Param)
            Get
                Return _Params
            End Get
            Set(ByVal Value As List(Of Param))
                _Params = Value
            End Set
        End Property
#End Region ' (Set|Get) The list of parameters.
#Region "|2019/04/23 12h10:483| <01.01.06> <Property> <Constructor> [Call=Format|CodeLanguage]"'(Set|Get) The code language.
        Private _Format As CodeLanguage
        ''' <Summary>
        ''' The code language.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h10:483 </Published>
        ''' <Updated>[Created=2019/04/23 12h10:483][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Constructor"), Description("The code language."), DefaultValue(CodeLanguage.Vb), Browsable(True)>
        Public Property Format() As CodeLanguage
            Get
                Return _Format
            End Get
            Set(ByVal Value As CodeLanguage)
                _Format = Value
            End Set
        End Property
#End Region ' (Set|Get) The code language.
#Region "|2019/04/23 12h11:858| <01.02.00> <Property> <Reference> [Call=See|String]"'(Set|Get) Reference to an object or Namespace.
        Private _See As String
        ''' <Summary>
        ''' Reference to an object or Namespace.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h11:858 </Published>
        ''' <Updated>[Created=2019/04/23 12h11:858][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Reference"), Description("Reference to an object or Namespace."), Browsable(True)>
        Public Property See() As String
            Get
                Return _See
            End Get
            Set(ByVal Value As String)
                _See = Value
            End Set
        End Property
#End Region ' (Set|Get) Reference to an object or Namespace.
#Region "|2019/04/23 12h11:837| <01.02.01> <Property> <Reference> [Call=SeeAlso|String]"'(Set|Get) Reference to an object or Namespace.
        Private _SeeAlso As String
        ''' <Summary>
        ''' Reference to an object or Namespace.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h11:837 </Published>
        ''' <Updated>[Created=2019/04/23 12h11:837][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Reference"), Description("Reference to an object or Namespace."), Browsable(True)>
        Public Property SeeAlso() As String
            Get
                Return _SeeAlso
            End Get
            Set(ByVal Value As String)
                _SeeAlso = Value
            End Set
        End Property
#End Region ' (Set|Get) Reference to an object or Namespace.
#Region "|2019/04/23 12h17:893| <01.04.00> <Property> <Print> [Call=Print_VB|String]"'(Set|Get) Printed String for VB.NET.
        Private _Print_VB As String
        ''' <Summary>
        ''' Printed String for VB.NET.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h17:893 </Published>
        ''' <Updated>[Created=2019/04/23 12h17:893][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Print"), Description("Printed String for VB.NET."), Browsable(True)>
        Public Property Print_VB() As String
            Get
                Return _Print_VB
            End Get
            Set(ByVal Value As String)
                _Print_VB = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed String for VB.NET.
#Region "|2019/04/23 12h18:902| <01.04.01> <Property> <Print> [Call=Print_C|String]"'(Set|Get)  Printed String for C#.
        Private _Print_C As String
        ''' <Summary>
        '''  Printed String for C#.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h18:901 </Published>
        ''' <Updated>[Created=2019/04/23 12h18:901][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Print"), Description(" Printed String for C#."), Browsable(True)>
        Public Property Print_C() As String
            Get
                Return _Print_C
            End Get
            Set(ByVal Value As String)
                _Print_C = Value
            End Set
        End Property
#End Region ' (Set|Get)  Printed String for C#.
#Region "|2019/04/23 12h18:178| <01.04.02> <Property> <Print> [Call=Print_F|String]"'(Set|Get)  Printed String for F#.
        Private _Print_F As String
        ''' <Summary>
        '''  Printed String for F#.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h18:178 </Published>
        ''' <Updated>[Created=2019/04/23 12h18:178][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Print"), Description(" Printed String for F#."), Browsable(True)>
        Public Property Print_F() As String
            Get
                Return _Print_F
            End Get
            Set(ByVal Value As String)
                _Print_F = Value
            End Set
        End Property
#End Region ' (Set|Get)  Printed String for F#.
#Region "|2019/04/23 12h18:515| <01.04.03> <Property> <Print> [Call=Print_Python|String]"'(Set|Get) Printed String for Python.
        Private _Print_Python As String
        ''' <Summary>
        ''' Printed String for Python.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h18:515 </Published>
        ''' <Updated>[Created=2019/04/23 12h18:515][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Print"), Description("Printed String for Python."), Browsable(True)>
        Public Property Print_Python() As String
            Get
                Return _Print_Python
            End Get
            Set(ByVal Value As String)
                _Print_Python = Value
            End Set
        End Property
#End Region ' (Set|Get) Printed String for Python.
#Region "|2019/05/09 16h10:474| <01.06.20> <Property> <Summary> [Call=Rules|String]"'(Set|Get) the Rules as String
        Private _Rules As String
        ''' <Summary>
        ''' (Set|Get) the Rules as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/09 16h10:474 </Published>
        ''' <Updated>[Created=2019/05/09 16h10:474][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("(Set|Get) the Rules as String"), Browsable(True)>
        Public Property Rules() As String
            Get
                Return _Rules
            End Get
            Set(ByVal Value As String)
                _Rules = Value
            End Set
        End Property
#End Region ' (Set|Get) the Rules as String
#Region "|2019/05/09 16h11:397| <01.06.21> <Property> <Summary> [Call=Syntax|String]"'(Set|Get) the Syntax as String
        Private _Syntax As String
        ''' <Summary>
        ''' (Set|Get) the Syntax as String
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/05/09 16h11:397 </Published>
        ''' <Updated>[Created=2019/05/09 16h11:397][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Summary"), Description("(Set|Get) the Syntax as String"), Browsable(True)>
        Public Property Syntax() As String
            Get
                Return _Syntax
            End Get
            Set(ByVal Value As String)
                _Syntax = Value
            End Set
        End Property
#End Region ' (Set|Get) the Syntax as String
#End Region
#End Region

#Region "<2> [Enumeration]"

#End Region
#Region "<3> [Structures]"

#End Region
#Region "<4> [Sub]"
#Region "|2019/04/23 12h12:421| <04.00.00> <Sub> <Sub> [Call=Print|Sub]"'
        ''' <Summary>
        ''' (Set|Get) 
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 12h12:421 </Published>
        ''' <Updated>[Created=2019/04/23 12h12:421][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Sub"), Browsable(True)>
        Public Sub Print(Optional ByVal Parameters As List(Of VbNET.InnerStatement.ParameterList_Statement) = Nothing)
            Dim Result As String = ""
            Dim VbCom As String = "''' "
            Dim CCom As String = " ///"
            Print_VB = ""
            Print_C = ""
            Print_F = ""
            Print_Python = ""
            If Me.Summary <> "" Then
                Result += "     <Summary>" & Environment.NewLine
                Print_VB += VbCom & "   <Summary>" & Environment.NewLine
                Print_C += CCom & "     <Summary>" & Environment.NewLine

                Result += "    " & Me.Summary & Environment.NewLine
                Print_VB += VbCom & "    " & Me.Summary & Environment.NewLine
                Print_C += CCom & "    " & Me.Summary & Environment.NewLine
                If AuthorEmail = "" Or AuthorEmail.Length = 0 Then
                    AuthorEmail = My.Settings.AuthorEmail
                End If
                If AuthorName = "" Or AuthorName.Length = 0 Then
                    AuthorName = My.Settings.AuthorName
                End If
                If AuthorUri = "" Or AuthorUri.Length = 0 Then
                    AuthorUri = My.Settings.AuthorUrl
                End If
                If Not IsNothing(AuthorEmail) Then
                    Result += "     <AuthorEmail>" & AuthorEmail & "</AuthorEmail>" & Environment.NewLine
                    Print_VB += VbCom & "   <AuthorEmail>" & AuthorEmail & "</AuthorEmail>" & Environment.NewLine
                    Print_C += CCom & "     <AuthorEmail>" & AuthorEmail & "</AuthorEmail>" & Environment.NewLine
                End If
                If Not IsNothing(AuthorName) Then

                    Result += "     <AuthorName>" & AuthorName & "</AuthorName>" & Environment.NewLine
                    Print_VB += VbCom & "   <AuthorName>" & AuthorName & "</AuthorName>" & Environment.NewLine
                    Print_C += CCom & "     <AuthorName>" & AuthorName & "</AuthorName>" & Environment.NewLine
                End If
                If Not IsNothing(AuthorUri) Then
                    Result += "     <AuthorUri>" & AuthorUri & "</AuthorUri>" & Environment.NewLine
                    Print_VB += VbCom & "   <AuthorUri>" & AuthorUri & "</AuthorUri>" & Environment.NewLine
                    Print_C += CCom & "     <AuthorUri>" & AuthorUri & "</AuthorUri>" & Environment.NewLine
                End If
                If Not IsNothing(ContributorEmail) Then
                    If ContributorEmail = "" Or ContributorEmail.Length = 0 Then
                    Else
                        Result += "     <ContributorEmail>" & ContributorEmail & "</ContributorEmail>" & Environment.NewLine
                        Print_VB += VbCom & "   <ContributorEmail>" & ContributorEmail & "</ContributorEmail>" & Environment.NewLine
                        Print_C += CCom & "     <ContributorEmail>" & ContributorEmail & "</ContributorEmail>" & Environment.NewLine
                    End If
                End If
                If Not IsNothing(ContributorName) Then
                    If ContributorName = "" Or ContributorName.Length = 0 Then
                    Else
                        Result += "     <ContributorName>" & ContributorName & "</ContributorName>" & Environment.NewLine
                        Print_VB += VbCom & "   <ContributorName>" & ContributorName & "</ContributorName>" & Environment.NewLine
                        Print_C += CCom & "     <ContributorName>" & ContributorName & "</ContributorName>" & Environment.NewLine
                    End If
                End If
                If Not IsNothing(ContributorUri) Then
                    If ContributorUri = "" Or ContributorUri.Length = 0 Then
                    Else
                        Result += "     <ContributorUri>" & ContributorUri & "</ContributorUri>" & Environment.NewLine
                        Print_VB += VbCom & "   <ContributorUri>" & ContributorUri & "</ContributorUri>" & Environment.NewLine
                        Print_C += CCom & "     <ContributorUri>" & ContributorUri & "</ContributorUri>" & Environment.NewLine
                    End If

                End If
                If Not IsNothing(Published) Then
                    Result += "     <Published>" & My.Computer.Name & " From " & My.User.Name & " | Time : " & PrintTime() & " </Published>" & Environment.NewLine
                    Print_VB += VbCom & "   <Published>" & My.Computer.Name & " From " & My.User.Name & " | Time : " & PrintTime() & " </Published>" & Environment.NewLine
                    Print_C += CCom & "     <Published>" & My.Computer.Name & " From " & My.User.Name & " | Time : " & PrintTime() & " </Published>" & Environment.NewLine
                End If
                If Not IsNothing(Rights) Then
                    If Rights.Length > 0 And Trim(Rights) <> "" Then
                        Dim T As New TextBox
                        T.Multiline = True
                        T.Text = "  <Rights>" & Environment.NewLine
                        T.Text += "     " & Rights & Environment.NewLine
                        T.Text += "   </Rights>" & Environment.NewLine
                        For i = 0 To T.Lines.Count - 2
                            Result += T.Lines(i) & Environment.NewLine
                            Print_VB += VbCom & "   " & T.Lines(i) & Environment.NewLine
                            Print_C += VbCom & "   " & T.Lines(i) & Environment.NewLine
                        Next
                        Result += T.Lines(T.Lines.Count - 1)
                        Print_VB += VbCom & T.Lines(T.Lines.Count - 1)
                        Print_C += VbCom & T.Lines(T.Lines.Count - 1)
                        T.Dispose()
                    End If
                End If
                If Not IsNothing(Title) Then
                    If Title = "" Or Title.Length = 0 Then
                    Else
                        Result += "     <Title>" & Title & "</Title>" & Environment.NewLine
                        Print_VB += "   <Title>" & Title & "</Title>" & Environment.NewLine
                        Print_C += "     <Title>" & Title & "</Title>" & Environment.NewLine
                    End If
                End If
                If Not IsNothing(Updated) Then
                    If Updated = "" Or Updated.Length = 0 Then
                    Else
                        Result += "     <Updated>" & Updated & "</Updated>" & Environment.NewLine
                        Print_VB += VbCom & "   <Updated>" & Updated & "</Updated>" & Environment.NewLine
                        Print_C += CCom & "     <Updated>" & Updated & "</Updated>" & Environment.NewLine
                    End If

                End If

                If Not IsNothing(Usage) Then
                    If Usage.Length > 0 And Trim(Usage) <> "" Then
                        Dim T As New TextBox
                        T.Multiline = True
                        T.Text = "  <Usage>" & Environment.NewLine
                        T.Text += "   " & Usage & Environment.NewLine
                        T.Text += "   </Usage>" & Environment.NewLine
                        For i = 0 To T.Lines.Count - 2
                            Result += T.Lines(i) & Environment.NewLine
                            Print_VB += VbCom & T.Lines(i) & Environment.NewLine
                            Print_C += VbCom & T.Lines(i) & Environment.NewLine
                        Next
                        Result += T.Lines(T.Lines.Count - 1)
                        Print_VB += VbCom & T.Lines(T.Lines.Count - 1)
                        Print_C += VbCom & T.Lines(T.Lines.Count - 1)
                        T.Dispose()
                    End If
                End If
                If Not IsNothing(Remarks) Then
                    If Remarks.Length > 0 And Trim(Remarks) <> "" Then
                        Dim T As New TextBox
                        T.Multiline = True
                        T.Text = "  <Remarks>" & Environment.NewLine
                        T.Text += "   " & Remarks & Environment.NewLine
                        T.Text += "   </Remarks>" & Environment.NewLine
                        For i = 0 To T.Lines.Count - 2
                            Result += T.Lines(i) & Environment.NewLine
                            Print_VB += VbCom & T.Lines(i) & Environment.NewLine
                            Print_C += VbCom & T.Lines(i) & Environment.NewLine
                        Next
                        Result += T.Lines(T.Lines.Count - 1)
                        Print_VB += VbCom & T.Lines(T.Lines.Count - 1)
                        Print_C += VbCom & T.Lines(T.Lines.Count - 1)
                        T.Dispose()
                    End If
                End If
                If Not IsNothing(Example) Then
                    If Example.Length > 0 And Trim(Example) <> "" Then
                        Dim T As New TextBox
                        T.Multiline = True
                        T.Text = "  <Example>" & Environment.NewLine
                        T.Text += "   " & Example & Environment.NewLine
                        T.Text += "   </Example>" & Environment.NewLine
                        For i = 0 To T.Lines.Count - 2
                            Result += T.Lines(i) & Environment.NewLine
                            Print_VB += VbCom & T.Lines(i) & Environment.NewLine
                            Print_C += VbCom & T.Lines(i) & Environment.NewLine
                        Next
                        Result += T.Lines(T.Lines.Count - 1)
                        Print_VB += VbCom & T.Lines(T.Lines.Count - 1)
                        Print_C += VbCom & T.Lines(T.Lines.Count - 1)
                        T.Dispose()
                    End If
                End If
                If Not IsNothing(Note) Then
                    If Note.Length > 0 And Trim(Note) <> "" Then
                        Dim T As New TextBox
                        T.Multiline = True
                        T.Text = "  <Note>" & Environment.NewLine
                        T.Text += "   " & Note & Environment.NewLine
                        T.Text += "   </Note>" & Environment.NewLine
                        For i = 0 To T.Lines.Count - 2
                            Result += T.Lines(i) & Environment.NewLine
                            Print_VB += VbCom & T.Lines(i) & Environment.NewLine
                            Print_C += VbCom & T.Lines(i) & Environment.NewLine
                        Next
                        Result += T.Lines(T.Lines.Count - 1)
                        Print_VB += VbCom & T.Lines(T.Lines.Count - 1)
                        Print_C += VbCom & T.Lines(T.Lines.Count - 1)
                        T.Dispose()

                    End If
                End If
                Params = New List(Of Param)
                If Not IsNothing(Parameters) Then
                    For Each Parameter As VbNET.InnerStatement.ParameterList_Statement In Parameters
                        If Parameter.ParameterName = "" Then
                        Else

                            Dim P As New Param(Parameter.ParameterName, Parameter.Definition)
                            Params.Add(P)
                        End If
                    Next
                End If
                If Not IsNothing(Params) Then
                    For i = 0 To Params.Count - 1
                        Result += "     <param name=" & Space & Params(i).Name & Space & ">" & Params(i).Definition & " </param>" & Environment.NewLine

                        Print_VB += VbCom & "   <param name=" & Space & Params(i).Name & Space & ">" & Params(i).Definition & " </param>" & Environment.NewLine
                        Print_C += CCom & "     <param name=" & Space & Params(i).Name & Space & ">" & Params(i).Definition & " </param>" & Environment.NewLine
                    Next
                End If
                If Not IsNothing(See) Then
                    If See = "" Or See.Length = 0 Then
                    Else
                        Result += "     <see cref=" & See & "/>" & Environment.NewLine
                        Print_VB += VbCom & "   <see cref=" & See & "/>" & Environment.NewLine
                        Print_C += CCom & "     <see cref=" & See & "/>" & Environment.NewLine
                    End If

                End If
                If Not IsNothing(SeeAlso) Then
                    If SeeAlso = "" Or SeeAlso.Length = 0 Then
                    Else
                        Result += "     <see cref=" & SeeAlso & "/>" & Environment.NewLine
                        Print_VB += VbCom & "   <see cref=" & SeeAlso & "/>" & Environment.NewLine
                        Print_C += CCom & "     <see cref=" & SeeAlso & "/>" & Environment.NewLine
                    End If

                End If
                Result += "     </Summary>" & Environment.NewLine
                Print_VB += VbCom & "   </Summary>" & Environment.NewLine
                Print_C += CCom & "     </Summary>" & Environment.NewLine
            End If
            Print_F += Print_C
            Print_Python += Print_C
        End Sub
#End Region ' 

#End Region
#Region "<5> [Function]"
        'Public Shared Function Serialize(ByVal Statement As Summary) As Serializer
        ' Dim Result As New Serializer(Statement)
        '     Result.Show()
        '  Return Result
        '  End Function
#Region "|2019/04/23 13h45:056| <04.00.00> <Function> <Function> [Call=Deserialize|Summary]"'
        ''' <Summary>
        ''' (Set|Get) Deserialize the statement
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 13h45:056 </Published>
        ''' <Updated>[Created=2019/04/23 13h45:056][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        <CategoryAttribute("Function"), Browsable(True)>
        Public Shared Function Deserialize(ByVal Statement As String) As Summary
            Dim Result As New Summary
            Dim Serializer As New XmlSerializer(GetType(Summary))
            Using Reader As TextReader = New StringReader(Statement)
                Result = Serializer.Deserialize(Reader)
            End Using
            Return Result
        End Function
#End Region ' 
#Region "|2019/04/23 13h47:770| <04.00.01> <Function> <Function> [Call=Deserialize|Summary]"'Deserialize the File into a Summary Statement.
        ''' <Summary>
        ''' (Set|Get) Deserialize the File into a Summary Statement.
        ''' </Summary>
        ''' <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
        ''' <AuthorName>Saadry Dunkel Consultant</AuthorName>
        ''' <AuthorUri>http://www.saadry-dunkel.com</AuthorUri>
        ''' <Published>MASTER From MASTER\Saadry | Time : 2019/04/23 13h47:770 </Published>
        ''' <Updated>[Created=2019/04/23 13h47:770][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>

        <CategoryAttribute("Function"), Description("Deserialize the File into a Summary Statement."), Browsable(True)>
        Public Shared Function Deserialize(ByVal File As Fichier) As Summary
            Dim Result As New Summary
            Dim Serializer As New XmlSerializer(GetType(Summary))
            If File.Exists Then
                Dim Statement As String = IO.File.ReadAllText(File.Target)
                Using reader As TextReader = New StringReader(Statement)
                    Result = Serializer.Deserialize(reader)
                End Using
            End If
            Return Result
        End Function
#End Region ' Deserialize the File into a Summary Statement.

#End Region
#Region "<6> [Loader]"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()
            With Me
                .AuthorEmail = ""
                .AuthorName = ""
                .AuthorUri = ""
                .ContributorEmail = ""
                .ContributorName = ""
                .ContributorUri = ""
                .CustomProperty = ""
                .Example = ""
                .Note = ""
                .Params = New List(Of Param)
                .Published = ""
                .Remarks = ""
                .Rights = ""
                .See = ""
                .SeeAlso = ""
                .Status = Status.NotTested
                .Summary = ""
                .Title = ""
                .Updated(.Status) = "Not tested"
                .Usage = ""
            End With
        End Sub
#End Region
#Region "<06.01> <Loader> [Filled]"
        ''' <summary>
        ''' Open simple instance
        ''' </summary>
        ''' <param name="Summary"></param>
        ''' <param name="Params"></param>
        ''' <param name="Remarks"></param>
        ''' <param name="Published"></param>
        ''' <param name="Rights"></param>
        ''' <param name="Examples"></param>
        ''' <param name="Usage"></param>
        ''' <param name="Notes"></param>
        ''' <param name="See"></param>
        ''' <param name="SeeAlso"></param>
        ''' <param name="Title"></param>
        ''' <param name="AuthorName"></param>
        ''' <param name="AuthorEmail"></param>
        ''' <param name="AuthorUrl"></param>
        ''' <param name="Contributors"></param>
        ''' <param name="ContributorsEmail"></param>
        ''' <param name="ContributorUrl"></param>
        Public Sub New(ByVal Summary As String,
                       Optional ByVal Params As List(Of Param) = Nothing,
                       Optional ByVal Remarks As String = "",
                       Optional ByVal Published As String = "",
                       Optional ByVal Rights As String = "",
                       Optional ByVal Examples As String = "",
                       Optional ByVal Usage As String = "",
                       Optional ByVal Notes As String = "",
                       Optional ByVal See As String = "",
                       Optional ByVal SeeAlso As String = "",
                       Optional ByVal Title As String = "",
                       Optional ByVal AuthorName As String = "",
                       Optional ByVal AuthorEmail As String = "",
                       Optional ByVal AuthorUrl As String = "",
                       Optional ByVal Contributors As String = "",
                       Optional ByVal ContributorsEmail As String = "",
                       Optional ByVal ContributorUrl As String = "",
                       Optional ByVal Rules As String = "",
                       Optional ByVal Syntax As String = "")
            With Me
                .Format = CodeLanguage.Vb
                .AuthorEmail = AuthorEmail
                .AuthorName = AuthorName
                .AuthorUri = AuthorUrl
                .ContributorEmail = ContributorsEmail
                .ContributorName = Contributors
                .ContributorUri = ContributorUrl
                .CustomProperty = CustomProperty
                .Example = Examples
                .Note = Notes
                .Params = New List(Of Param)
                .Params = Params
                .Published = Published
                .Remarks = Remarks
                .Rights = Rights
                .See = See
                .SeeAlso = SeeAlso
                .Status = Status.NotTested
                .Syntax = Syntax
                .Rules = Rules
                .Summary = Summary
                .Title = Title
                .Updated(.Status) = Updated
                .Usage = Usage
            End With
            Print()
        End Sub
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="CodeLangue"></param>
        ''' <param name="AuthorEmail"></param>
        ''' <param name="AuthorName"></param>
        ''' <param name="AuthorUri"></param>
        ''' <param name="ContributorEmail"></param>
        ''' <param name="ContributorName"></param>
        ''' <param name="ContributorUri"></param>
        ''' <param name="CustomProperty"></param>
        ''' <param name="Example"></param>
        ''' <param name="Note"></param>
        ''' <param name="Params"></param>
        ''' <param name="Published"></param>
        ''' <param name="Remarks"></param>
        ''' <param name="Rights"></param>
        ''' <param name="See"></param>
        ''' <param name="SeeAlso"></param>
        ''' <param name="Status"></param>
        ''' <param name="Summary"></param>
        ''' <param name="Title"></param>
        ''' <param name="Updated"></param>
        ''' <param name="Usage"></param>
        ''' <param name="Syntax"></param>
        ''' <param name="Rules"></param>
        Public Sub New(Optional ByVal CodeLangue As CodeLanguage = CodeLanguage.Vb,
                          Optional ByVal AuthorEmail As String = "saadry.dunkel@outlook.com",
                    Optional ByVal AuthorName As String = "Saadry Dunkel",
                Optional ByVal AuthorUri As String = "http://www.saadry-dunkel.com",
                Optional ByVal ContributorEmail As String = "",
               Optional ByVal ContributorName As String = "",
                Optional ByVal ContributorUri As String = "",
                Optional ByVal CustomProperty As String = "",
                Optional ByVal Example As String = "",
                Optional ByVal Note As String = "",
                Optional ByVal Params As List(Of Param) = Nothing,
                Optional ByVal Published As String = "",
                Optional ByVal Remarks As String = "",
                Optional ByVal Rights As String = "",
                Optional ByVal See As String = "",
                Optional ByVal SeeAlso As String = "",
                Optional ByVal Status As Status = Status.NotTested,
                Optional ByVal Summary As String = "",
                Optional ByVal Title As String = "",
                Optional ByVal Updated As String = "",
                Optional ByVal Usage As String = "",
                Optional ByVal Syntax As String = "",
                Optional ByVal Rules As String = "")
            With Me
                .Format = CodeLanguage.Vb
                .AuthorEmail = AuthorEmail
                .AuthorName = AuthorName
                .AuthorUri = AuthorUri
                .ContributorEmail = ContributorEmail
                .ContributorName = ContributorName
                .ContributorUri = ContributorUri
                .CustomProperty = CustomProperty
                .Example = Example
                .Note = Note
                .Params = New List(Of Param)
                .Params = Params
                .Published = Published
                .Remarks = Remarks
                .Rights = Rights
                .See = See
                .SeeAlso = SeeAlso
                .Status = Status.NotTested
                .Summary = Summary
                .Title = Title
                .Updated(.Status) = Updated
                .Usage = Usage
            End With
            Print()
        End Sub

#End Region
#End Region
#Region "<7> [Runtime]"

#End Region
#Region "<8> [Class]"
#Region "<08.00> <Classes> [Param]"
        ''' <summary>
        ''' This class helps construction concatenated summary parameter name and information
        ''' </summary>
        Public Class Param
#Region "<0> [Property]"
#Region "<00.00> <Property> [Info]"
#Region "[2019/03/23 16h53:181]<00.00.00> <Property> [Name|String]"
            Private _Name As String
            ''' <summary>
            ''' (Set|Get) The parameter Name
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 23.03.2019 16:53</author>
            <CategoryAttribute("Info"),
           Description("(Set|Get) The parameter Name"),
           Browsable(True)>
            Public Property Name() As String
                Get
                    Return _Name
                End Get
                Set(ByVal value As String)
                    _Name = value
                End Set
            End Property
#End Region 'The parameter Name
#Region "[2019/03/23 16h57:765]<00.00.01> <Property> [Definition|String]"
            Private _Definition As String
            ''' <summary>
            ''' (Set|Get) The definition of the Parameter
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 23.03.2019 16:57</author>
            <CategoryAttribute("Info"),
           Description("(Set|Get) The definition of the Parameter"),
           Browsable(True)>
            Public Property Definition() As String
                Get
                    Return _Definition
                End Get
                Set(ByVal value As String)
                    _Definition = value
                End Set
            End Property
#End Region 'The definition of the Parameter
#End Region
#Region "<00.03> <Property> [Print]"
#Region "[2019/03/21 21h49:658]<00.03.00> <Property> [Print_VB|String]"
            Private _Print_VB As String
            ''' <summary>
            ''' (Set|Get) Printed String for VB.NET
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 21.03.2019 21:49</author>
            <CategoryAttribute("Print"),
           Description("(Set|Get) Printed String for VB.NET"),
           Browsable(True)>
            Public Property Print_VB() As String
                Get
                    Return _Print_VB
                End Get
                Set(ByVal value As String)
                    _Print_VB = "''' " & Me.ToString
                End Set
            End Property
#End Region 'Printed String for VB.NET
#Region "[2019/03/21 21h49:381]<00.03.01> <Property> [Print_C|String]"
            Private _Print_C As String
            ''' <summary>
            ''' (Set|Get) Printed String for C#
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 21.03.2019 21:49</author>
            <CategoryAttribute("Print"),
           Description("(Set|Get) Printed String for C#"),
           Browsable(True)>
            Public Property Print_C() As String
                Get
                    Return _Print_C
                End Get
                Set(ByVal value As String)
                    _Print_C = "/// " & Me.ToString

                End Set
            End Property
#End Region 'Printed String for C#
#Region "[2019/03/21 23h43:848]<00.03.02> <Property> [Print_F|String]"
            Private _Print_F As String
            ''' <summary>
            ''' (Set|Get) Printed String for F#
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 21.03.2019 23:43</author>
            <CategoryAttribute("Print"),
           Description("(Set|Get) Printed String for F#"),
           Browsable(True)>
            Public Property Print_F() As String
                Get
                    Return _Print_F
                End Get
                Set(ByVal value As String)
                    _Print_F = "/// " & Me.ToString
                End Set
            End Property
#End Region 'Printed String for F#
#Region "[2019/03/21 23h43:848]<00.03.02> <Property> [Print_Python|String]"
            Private _Print_Python As String
            ''' <summary>
            ''' (Set|Get) Printed String for Python.
            ''' </summary>
            ''' <returns></returns>
            ''' <author>Saadry Dunkel Consultant 21.03.2019 23:43</author>
            <CategoryAttribute("Print"),
           Description("(Set|Get) Printed String for Python."),
           Browsable(True)>
            Public Property Print_Python() As String
                Get
                    Return _Print_Python
                End Get
                Set(ByVal value As String)
                    _Print_Python = "/// " & Me.ToString
                End Set
            End Property
#End Region 'Printed String for Python.

#End Region
#End Region
            Public Sub New()
                Me.Name = ""
                Me.Definition = ""
            End Sub
            ''' <summary>
            ''' 
            ''' </summary>
            ''' <param name="Name"></param>
            ''' <param name="Definition"></param>
            Public Sub New(ByVal Name As String,
                               Optional ByVal Definition As String = "")
                Me.Name = Name
                Me.Definition = Definition

            End Sub
            Public Overrides Function ToString() As String
                Return "''' <param name=" & Space & Name & Space & ">" & Definition & "</param>"
            End Function
        End Class
#End Region

#End Region
    End Class 'Summary
#End Region
#Region "|08.00.21| <Class> <Statement> [InputParams]"
    ''' <summary>
    ''' Input Parameters class for method call
    ''' </summary>
    Public Class InputParams

#Region "<1> [Property]{1}"
#Region "<01.00> <Property> [Info]{4}"
#Region "[2019/04/06 16h27:551]<01.00.00> <Property> [Modifier|String]"
        Private _Modifier As String
        ''' <summary>
        ''' (Set|Get) The access modifier of the parameter
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 06.04.2019 16:27</author>
        <CategoryAttribute("Info"),
    Description("(Set|Get) The access modifier of the parameter"),
    Browsable(True)>
        Public Property Modifier() As String
            Get
                Return _Modifier
            End Get
            Set(ByVal value As String)
                _Modifier = value
            End Set
        End Property
#End Region 'The access modifier of the parameter
#Region "[2019/04/06 16h28:147]<01.00.01> <Property> [Name|String]"
        Private _Name As String
        ''' <summary>
        ''' (Set|Get) The name of the parameter.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 06.04.2019 16:28</author>
        <CategoryAttribute("Info"),
    Description("(Set|Get) The name of the parameter."),
    Browsable(True)>
        Public Property Name() As String
            Get
                Return _Name
            End Get
            Set(ByVal value As String)
                _Name = value
            End Set
        End Property
#End Region 'The name of the parameter.
#Region "[2019/04/06 16h28:609]<01.00.02> <Property> [ReturnType|String]"
        Private _ReturnType As String
        ''' <summary>
        ''' (Set|Get) The return type of the parameter.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 06.04.2019 16:28</author>
        <CategoryAttribute("Info"),
    Description("(Set|Get) The return type of the parameter."),
    Browsable(True)>
        Public Property ReturnType() As String
            Get
                Return _ReturnType
            End Get
            Set(ByVal value As String)
                _ReturnType = value
            End Set
        End Property
#End Region 'The return type of the parameter.
#Region "[2019/04/06 16h29:223]<01.00.03> <Property> [DefaultValue|String]"
        Private _DefaultValue As String
        ''' <summary>
        ''' (Set|Get) Optional defaultvalue of the parameter.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 06.04.2019 16:29</author>
        <CategoryAttribute("Info"),
    Description("(Set|Get) Optional defaultvalue of the parameter."),
    Browsable(True)>
        Public Property DefaultValue() As String
            Get
                Return _DefaultValue
            End Get
            Set(ByVal value As String)
                _DefaultValue = value
            End Set
        End Property
#End Region 'Optional defaultvalue of the parameter.
#Region "[2019/04/06 16h30:215]<01.00.04> <Property> [Description|String]"
        Private _Description As String
        ''' <summary>
        ''' (Set|Get) Optional the description information for the parameter.
        ''' </summary>
        ''' <returns></returns>
        ''' <author>Saadry Dunkel Consultant 06.04.2019 16:30</author>
        <CategoryAttribute("Info"),
    Description("(Set|Get) Optional the description information for the parameter."),
    Browsable(True)>
        Public Property Description() As String
            Get
                Return _Description
            End Get
            Set(ByVal value As String)
                _Description = value
            End Set
        End Property
#End Region 'Optional the description information for the parameter.
#End Region
#End Region
#Region "<2> [Enumeration]{1}"
#Region "<02.00> <Enumeration> [ModifierType]"
        Public Enum ModifierType
            [ByVal]
            [ByRef]
            [Optional_Byval]
            [ParamArray]
        End Enum
#End Region
#End Region
#Region "<5> [Function]{1}"
#Region "<05.00> <Function> [Overrides]{1}"
#Region "<05.00.00> <Function> <Overrides> [ToString()]"
        Public Overrides Function ToString() As String
            Return Modifier & " " & Name & " " & ReturnType & IIf(DefaultValue <> "", " = " & DefaultValue, "")
        End Function
#End Region
#End Region
        ''' <summary>
        ''' Convert String to ModifierType.
        ''' </summary>
        ''' <param name="Str"></param>
        ''' <returns></returns>
        Public Shared Function Detect_AccessModifier(ByVal Str As String) As ModifierType
            Dim Result As New ModifierType
            Result = ModifierType.ByVal
            If Str = "" Then
            Else
                If Str.Contains("Optional") Then
                    Result = ModifierType.Optional_Byval
                Else
                    If Str.Contains("ParamArray") Then
                        Result = ModifierType.ParamArray
                    Else
                        If Str.Contains("ByRef") Then
                            Result = ModifierType.ByRef
                        Else
                            Result = ModifierType.ByVal
                        End If
                    End If
                End If
            End If
            Return Result
        End Function
#End Region

#Region "<6> [Loader]{2}"
#Region "<06.00> <Loader> [Empty]"
        Public Sub New()

        End Sub
#End Region
#Region "<06.01> <Loader> [Filled]"
        Public Sub New(ByVal Modifier As ModifierType,
                       ByVal Name As String,
                       ByVal ReturnType As String,
                       Optional ByVal DefaultValue As String = "",
                       Optional ByVal Definition As String = "")
            With Me
                .Name = Name
                .ReturnType = ReturnType
                .DefaultValue = DefaultValue
                If Definition = "" Then
                    If Modifier = ModifierType.Optional_Byval Then
                        .Description = "[Optional](Set|Get) The " & Name & " As " & ReturnType & " |DefaultValue = " & DefaultValue & "."
                        .Modifier = "Optional ByVal "
                    ElseIf Modifier = ModifierType.ByRef Then
                        .Description = "[ByRef](Set|Get) The " & Name & " As " & ReturnType & "."
                        .Modifier = "ByRef "
                    ElseIf Modifier = ModifierType.ByVal Then
                        .Description = "[ByVal](Set|Get) The " & Name & " As " & ReturnType & "."
                        .Modifier = "ByVal "
                    ElseIf Modifier = ModifierType.ParamArray Then
                        .Description = "[ParamArray ByVal ](Set|Get) The " & Name & " As " & ReturnType & "."
                        .Modifier = "ParamArray ByVal "
                    End If
                Else
                    If Definition.Contains("(Set|Get)") Then
                        Me.Description = Definition
                    Else
                        If Modifier = ModifierType.Optional_Byval Then
                            .Description = "[Optional](Set|Get) " & Definition
                            .Modifier = "Optional ByVal "
                        ElseIf Modifier = ModifierType.ByRef Then
                            .Description = "[ByRef](Set|Get) " & Definition
                            .Modifier = "ByRef "
                        ElseIf Modifier = ModifierType.ByVal Then
                            .Description = "[ByVal](Set|Get) " & Definition
                            .Modifier = "ByVal "
                        ElseIf Modifier = ModifierType.ParamArray Then
                            .Description = "[ParamArray](Set|Get) " & Definition
                            .Modifier = "ParamArray ByVal "
                        End If
                    End If
                End If
            End With
        End Sub

#End Region 'ModifierType As ModifierType
#Region "<06.02> <Loader> [Filled]"
        Public Sub New(ByVal ModifierString As String,
                       ByVal Name As String,
                       ByVal ReturnType As String,
                       Optional ByVal DefaultValue As String = "",
                       Optional ByVal Definition As String = "")
            With Me
                .Name = Name
                .ReturnType = ReturnType
                .DefaultValue = DefaultValue
                Dim Modifier As New ModifierType
                Modifier = Detect_AccessModifier(ModifierString)
                If Definition = "" Then
                    If Modifier = ModifierType.Optional_Byval Then
                        .Description = "[Optional](Set|Get) The " & Name & " As " & ReturnType & " |DefaultValue = " & DefaultValue & "."
                        .Modifier = "Optional ByVal "
                    ElseIf Modifier = ModifierType.ByRef Then
                        .Description = "[ByRef](Set|Get) The " & Name & " As " & ReturnType & "."
                        .Modifier = "ByRef "
                    ElseIf Modifier = ModifierType.ByVal Then
                        .Description = "[ByVal](Set|Get) The " & Name & " As " & ReturnType & "."
                        .Modifier = "ByVal "
                    ElseIf Modifier = ModifierType.ParamArray Then
                        .Description = "[ParamArray ByVal ](Set|Get) The " & Name & " As " & ReturnType & "."
                        .Modifier = "ParamArray ByVal "
                    End If
                Else
                    If Definition.Contains("(Set|Get)") Then
                        Me.Description = Definition
                    Else
                        If Modifier = ModifierType.Optional_Byval Then
                            .Description = "[Optional](Set|Get) " & Definition
                            .Modifier = "Optional ByVal "
                        ElseIf Modifier = ModifierType.ByRef Then
                            .Description = "[ByRef](Set|Get) " & Definition
                            .Modifier = "ByRef "
                        ElseIf Modifier = ModifierType.ByVal Then
                            .Description = "[ByVal](Set|Get) " & Definition
                            .Modifier = "ByVal "
                        ElseIf Modifier = ModifierType.ParamArray Then
                            .Description = "[ParamArray](Set|Get) " & Definition
                            .Modifier = "ParamArray ByVal "
                        End If
                    End If
                End If
            End With
        End Sub

#End Region 'ModifierType As String
#End Region
    End Class
#End Region

#Region "|08.00.22| <Class> <Statement> [ReferenceCaller]"
    Public Class ReferenceCaller
#Region "|1| [Property]"
#Region "|01.00| <Property> [Info]"
#Region "[On] |2019/05/22 14h06:340| <01.00.00> <Property> <Info> |.Name()|String|"' (Set|Get) The Name as String.
        Private _Name As String
        '''    <Summary>
        '''     (Set|Get) The Name as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 14h06:347 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Name as String.")>
        Public Property Name() As String
            Get
                Return _Name
            End Get
            Set(ByVal Value As String)
                _Name = Value
            End Set
        End Property
#End Region '(Set|Get) The Name as String.
#Region "[On] |2019/05/22 14h08:249| <01.00.01> <Property> <Info> |.Format()|String|"' (Set|Get) The Format as String.
        Private _Format As String
        '''    <Summary>
        '''     (Set|Get) The Format as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 14h08:259 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Format as String.")>
        Public Property Format() As String
            Get
                Return _Format
            End Get
            Set(ByVal Value As String)
                _Format = Value
            End Set
        End Property
#End Region '(Set|Get) The Format as String.
#Region "[On] |2019/05/22 14h09:169| <01.00.02> <Property> <Info> |.Namespace()|String|"' (Set|Get) The Namespace as String.
        Private _Namespace As String
        '''    <Summary>
        '''     (Set|Get) The Namespace as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 14h09:178 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Namespace as String.")>
        Public Property [Namespace]() As String
            Get
                Return _Namespace
            End Get
            Set(ByVal Value As String)
                _Namespace = Value
            End Set
        End Property
#End Region '(Set|Get) The Namespace as String.
#Region "[On] |2019/05/22 14h11:138| <01.00.03> <Property> <Info> |.ReturnType()|String|"' (Set|Get) The ReturnType as String.
        Private _ReturnType As String
        '''    <Summary>
        '''     (Set|Get) The ReturnType as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 14h11:146 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The ReturnType as String.")>
        Public Property ReturnType() As String
            Get
                Return _ReturnType
            End Get
            Set(ByVal Value As String)
                _ReturnType = Value
            End Set
        End Property
#End Region '(Set|Get) The ReturnType as String.
#Region "[On] |2019/05/22 14h11:502| <01.00.04> <Property> <Info> |.Description()|String|"' (Set|Get) The Description as String.
        Private _Description As String
        '''    <Summary>
        '''     (Set|Get) The Description as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 14h11:513 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Description as String.")>
        Public Property Description() As String
            Get
                Return _Description
            End Get
            Set(ByVal Value As String)
                _Description = Value
            End Set
        End Property
#End Region '(Set|Get) The Description as String.
#Region "[On] |2019/05/22 14h17:514| <01.00.05> <Property> <Info> |.Parameters()|String|"' (Set|Get) The Parameters as String.
        Private _Parameters As String
        '''    <Summary>
        '''     (Set|Get) The Parameters as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 14h17:521 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Parameters as String.")>
        Public Property Parameters() As String
            Get
                Return _Parameters
            End Get
            Set(ByVal Value As String)
                _Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Parameters as String.
#Region "[On] |2019/05/22 14h26:194| <01.00.06> <Property> <Info> |.DefaultValue()|String|"' (Set|Get) The DefaultValue as String.
        Private _DefaultValue As String
        '''    <Summary>
        '''     (Set|Get) The DefaultValue as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 14h26:204 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The DefaultValue as String.")>
        Public Property DefaultValue() As String
            Get
                Return _DefaultValue
            End Get
            Set(ByVal Value As String)
                _DefaultValue = Value
            End Set
        End Property
#End Region '(Set|Get) The DefaultValue as String.
#Region "[On] |2019/05/22 14h27:013| <01.00.07> <Property> <Info> |.[Optional]()|Boolean|"' (Set|Get) The [Optional] as Boolean.
        Private _Optional As Boolean
        '''    <Summary>
        '''     (Set|Get) The [Optional] as Boolean.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 14h27:021 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The [Optional] as Boolean."), DefaultValue(False)>
        Public Property [Optional]() As Boolean
            Get
                Return _Optional
            End Get
            Set(ByVal Value As Boolean)
                _Optional = Value
            End Set
        End Property
#End Region '(Set|Get) The [Optional] as Boolean.
#Region "[On] |2019/05/22 15h01:751| <01.00.08> <Property> <Info> |.ImageIndex()|Integer|"' (Set|Get) The ImageIndex as Integer.
        Private _ImageIndex As Integer
        '''    <Summary>
        '''     (Set|Get) The ImageIndex as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h01:759 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The ImageIndex as Integer.")>
        Public Property ImageIndex() As Integer
            Get
                Return _ImageIndex
            End Get
            Set(ByVal Value As Integer)
                _ImageIndex = Value
            End Set
        End Property
#End Region '(Set|Get) The ImageIndex as Integer.
#Region "[On] |2019/05/22 15h07:779| <01.00.09> <Property> <Info> |.Item()|ListViewItem|"' (Set|Get) The Item as ListViewItem.
        Private _Item As ListViewItem
        '''    <Summary>
        '''     (Set|Get) The Item as ListViewItem.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h07:787 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Item as ListViewItem.")>
        Public Property Item() As ListViewItem
            Get
                Return _Item
            End Get
            Set(ByVal Value As ListViewItem)
                _Item = Value
            End Set
        End Property
#End Region '(Set|Get) The Item as ListViewItem.
#Region "[On] |2019/05/22 15h08:629| <01.00.10> <Property> <Info> |.Code()|String|"' (Set|Get) The Code as String.
        Private _Code As String
        '''    <Summary>
        '''     (Set|Get) The Code as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From  | Time : 2019/05/22 15h08:638 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''    
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Code as String.")>
        Public Property Code() As String
            Get
                Return _Code
            End Get
            Set(ByVal Value As String)
                _Code = Value
            End Set
        End Property
#End Region '(Set|Get) The Code as String.

#End Region
#End Region

#Region "|3| [Sub]"
#Region "|03.00| <Sub> [Clear()]"
        Public Sub Clear()
            With Me
                .Name = ""
                .Namespace = ""
                .Format = ""
                .ReturnType = ""
                .Description = ""
                .Parameters = ""
                .DefaultValue = ""
                .Optional = False

            End With
        End Sub
#End Region
#End Region
#Region "|7| [Loader]"
#Region "|07.00| <Loader> [Empty]"
        Public Sub New()
            Clear()
        End Sub
#End Region
#Region "|07.01| <Loader> [Property|VbNET.Property]"
        Public Sub New(ByRef [Property] As VbNET.Property)
            Clear()
            If Not IsNothing([Property]) Then
                With Me
                    .Name = [Property].Name
                    If Not IsNothing([Property].ParentClass) Then
                        .Namespace = [Property].ParentClass.Name
                    Else
                        If Not IsNothing([Property].ParentModule) Then
                            .Namespace = [Property].ParentModule.Name
                        Else
                            If Not IsNothing([Property].ParentStructure) Then
                                .Namespace = [Property].ParentStructure.Name
                            Else
                                If Not IsNothing(VirtualClass) Then
                                    [Property].ParentClass = VirtualClass
                                    .Namespace = VirtualClass.Name
                                Else
                                    VirtualClass = New [Class]("VirtualClass")
                                End If

                            End If
                        End If
                    End If
                    .ReturnType = [Property].ReturnType
                    .Optional = IIf([Property].Required = False, True, False)
                    If Not IsNothing([Property].ParameterList) Then
                        If [Property].ParameterList.Count - 1 >= 0 Then
                            For i = 0 To [Property].ParameterList.Count - 1

                                If i = [Property].ParameterList.Count - 2 Then
                                    If [Property].ParameterList(i).Optional = True Then
                                        .Parameters += "[" & [Property].ParameterList(i).ParameterName & " As " & [Property].ParameterList(i).ParameterType & " = " &
                                        IIf([Property].ParameterList(i).ParameterType = "String", Space & [Property].ParameterList(i).DefaultValue & Space, [Property].ParameterList(i).DefaultValue) & "] "
                                    Else
                                        .Parameters += [Property].ParameterList(i).ParameterName & " As " & [Property].ParameterList(i).ParameterType & " "

                                    End If
                                Else
                                    If [Property].ParameterList(i).Optional = True Then
                                        .Parameters += "[" & [Property].ParameterList(i).ParameterName & " As " & [Property].ParameterList(i).ParameterType & " = " &
                                        IIf([Property].ParameterList(i).ParameterType = "String", Space & [Property].ParameterList(i).DefaultValue & Space, [Property].ParameterList(i).DefaultValue) & "], "
                                    Else
                                        .Parameters += [Property].ParameterList(i).ParameterName & " As " & [Property].ParameterList(i).ParameterType & ", "

                                    End If
                                End If


                            Next
                        End If
                    End If
                    If IsNothing([Property].SummaryStatement) Then
                        [Property].SummaryStatement = New Summary([Property].Description,
                                                                [Property].Params,
                                                                [Property].Remarks,
                                                                [Property].Published,
                                                                [Property].Rights,
                                                                [Property].Example,
                                                                [Property].Usage,
                                                                [Property].Note,
                                                                [Property].See,
                                                                [Property].SeeAlso,
                                                                [Property].Title,
                                                                [Property].AuthorName,
                                                                [Property].AuthorEmail,
                                                                [Property].AuthorUri,
                                                                [Property].ContributorName,
                                                                [Property].ContributorEmail,
                                                                [Property].ContributorUri,
                                                                [Property].Rules,
                                                                [Property].Syntax)
                    End If
                    [Property].SummaryStatement.Print([Property].ParameterList)
                    .Description = [Property].SummaryStatement.Print_VB
                    .Format = "Property"
                    .ImageIndex = 1
                    .Code = [Property].RegionCode
                    .Item = New ListViewItem(Me.Code)
                    .Item.SubItems.Add(Me.Namespace & "." & Me.Name)
                    .Item.SubItems.Add(Me.Format)
                    .Item.SubItems.Add(Me.Parameters)
                    .Item.SubItems.Add(Me.Description)
                    .Item.ImageIndex = Me.ImageIndex
                    .Item.Tag = [Property]
                    .Item.ToolTipText = Me.Description
                End With
            End If
        End Sub
#End Region
#Region "|07.02| <Loader> [Property|VbNET.Enumeration]"
        Public Sub New(ByRef Enumeration As VbNET.Enumeration)
            Clear()
            If Not IsNothing(Enumeration) Then
                With Me
                    .Name = Enumeration.Name
                    If Not IsNothing(Enumeration.ParentClass) Then
                        .Namespace = Enumeration.ParentClass.Name
                    Else
                        If Not IsNothing(Enumeration.ParentModule) Then
                            .Namespace = Enumeration.ParentModule.Name
                        Else
                            If Not IsNothing(Enumeration.ParentStructure) Then
                                .Namespace = Enumeration.ParentStructure.Name
                            Else
                                If Not IsNothing(VirtualClass) Then
                                    Enumeration.ParentClass = VirtualClass
                                    .Namespace = VirtualClass.Name
                                Else
                                    VirtualClass = New [Class]("VirtualClass")
                                End If

                            End If
                        End If
                    End If
                    '.ReturnType = Enumeration.ReturnType
                    .Optional = False

                    .Description = Enumeration.SummaryStatement.Print_VB
                End With
                Me.Format = "Enumeration"
                Me.ImageIndex = 2

                Me.Code = Enumeration.RegionCode
                Me.Item = New ListViewItem(Me.Code)
                Me.Item.SubItems.Add(Me.Namespace & "." & Me.Name)
                Me.Item.SubItems.Add(Me.Format)
                Me.Item.SubItems.Add(Me.Parameters)
                Me.Item.SubItems.Add(Me.Description)
                Me.Item.ImageIndex = Me.ImageIndex
                Me.Item.Tag = Enumeration
                Me.Item.ToolTipText = Me.Description
            End If
        End Sub
#End Region
#Region "|07.03| <Loader> [Property|VbNET.Structure]"
        Public Sub New(ByRef [Structure] As VbNET.Structure)
            Clear()
            If Not IsNothing([Structure]) Then
                With Me
                    .Name = [Structure].Name
                    If Not IsNothing([Structure].ParentClass) Then
                        .Namespace = [Structure].ParentClass.Name
                    Else
                        If Not IsNothing([Structure].ParentModule) Then
                            .Namespace = [Structure].ParentModule.Name
                        Else

                            If Not IsNothing(VirtualClass) Then
                                [Structure].ParentClass = VirtualClass
                                .Namespace = VirtualClass.Name
                            Else
                                VirtualClass = New [Class]("VirtualClass")
                            End If

                        End If
                    End If
                    ' .ReturnType = [Structure].ReturnType
                    .Optional = False

                    .Description = [Structure].SummaryStatement.Print_VB
                End With
            End If
            Me.Format = "Structure"
            Me.ImageIndex = 3
            Me.Code = [Structure].RegionCode
            Me.Item = New ListViewItem(Me.Code)
            Me.Item.SubItems.Add(Me.Namespace & "." & Me.Name)
            Me.Item.SubItems.Add(Me.Format)
            Me.Item.SubItems.Add(Me.Parameters)
            Me.Item.SubItems.Add(Me.Description)
            Me.Item.ImageIndex = Me.ImageIndex
            Me.Item.Tag = [Structure]
            Me.Item.ToolTipText = Me.Description
        End Sub
#End Region
#Region "|07.04| <Loader> [Property|VbNET.Sub]"
        Public Sub New(ByRef [Sub] As VbNET.Sub)
            Clear()
            If Not IsNothing([Sub]) Then
                With Me
                    .Name = [Sub].Name
                    If Not IsNothing([Sub].ParentClass) Then
                        .Namespace = [Sub].ParentClass.Name
                    Else
                        If Not IsNothing([Sub].ParentModule) Then
                            .Namespace = [Sub].ParentModule.Name
                        Else
                            If Not IsNothing([Sub].ParentStructure) Then
                                .Namespace = [Sub].ParentStructure.Name
                            Else
                                If Not IsNothing(VirtualClass) Then
                                    [Sub].ParentClass = VirtualClass
                                    .Namespace = VirtualClass.Name
                                Else
                                    VirtualClass = New [Class]("VirtualClass")
                                End If

                            End If
                        End If
                    End If
                    '.ReturnType = [Sub].ReturnType
                    .Optional = False 'IIf([Property].Required = False, True, False)
                    If Not IsNothing([Sub].ParameterList) Then
                        If [Sub].ParameterList.Count - 1 >= 0 Then
                            For i = 0 To [Sub].ParameterList.Count - 1

                                If i = [Sub].ParameterList.Count - 2 Then
                                    If [Sub].ParameterList(i).Optional = True Then
                                        .Parameters += "[" & [Sub].ParameterList(i).ParameterName & " As " & [Sub].ParameterList(i).ParameterType & " = " &
                                        IIf([Sub].ParameterList(i).ParameterType = "String", Space & [Sub].ParameterList(i).DefaultValue & Space, [Sub].ParameterList(i).DefaultValue) & "] "
                                    Else
                                        .Parameters += [Sub].ParameterList(i).ParameterName & " As " & [Sub].ParameterList(i).ParameterType & " "

                                    End If
                                Else
                                    If [Sub].ParameterList(i).Optional = True Then
                                        .Parameters += "[" & [Sub].ParameterList(i).ParameterName & " As " & [Sub].ParameterList(i).ParameterType & " = " &
                                        IIf([Sub].ParameterList(i).ParameterType = "String", Space & [Sub].ParameterList(i).DefaultValue & Space, [Sub].ParameterList(i).DefaultValue) & "], "
                                    Else
                                        .Parameters += [Sub].ParameterList(i).ParameterName & " As " & [Sub].ParameterList(i).ParameterType & ", "

                                    End If
                                End If


                            Next
                        End If
                    End If
                    .Description = [Sub].SummaryStatement.Print_VB
                End With
                Me.Format = "Sub"
                Me.ImageIndex = 4
                Me.Code = [Sub].RegionCode
                Me.Item = New ListViewItem(Me.Code)
                Me.Item.SubItems.Add(Me.Namespace & "." & Me.Name)
                Me.Item.SubItems.Add(Me.Format)
                Me.Item.SubItems.Add(Me.Parameters)
                Me.Item.SubItems.Add(Me.Description)
                Me.Item.ImageIndex = Me.ImageIndex
                Me.Item.Tag = [Sub]
                Me.Item.ToolTipText = Me.Description
            End If
        End Sub
#End Region
#Region "|07.05| <Loader> [Property|VbNET.Function]"
        Public Sub New(ByRef [Function] As VbNET.Function)
            Clear()
            If Not IsNothing([Function]) Then
                With Me
                    .Name = [Function].Name
                    If Not IsNothing([Function].ParentClass) Then
                        .Namespace = [Function].ParentClass.Name
                    Else
                        If Not IsNothing([Function].ParentModule) Then
                            .Namespace = [Function].ParentModule.Name
                        Else
                            If Not IsNothing([Function].ParentStructure) Then
                                .Namespace = [Function].ParentStructure.Name
                            Else
                                If Not IsNothing(VirtualClass) Then
                                    [Function].ParentClass = VirtualClass
                                    .Namespace = VirtualClass.Name
                                Else
                                    VirtualClass = New [Class]("VirtualClass")
                                End If

                            End If
                        End If
                    End If
                    .ReturnType = [Function].ReturnType
                    .Optional = False 'IIf([Property].Required = False, True, False)
                    If Not IsNothing([Function].ParameterList) Then
                        If [Function].ParameterList.Count - 1 >= 0 Then
                            For i = 0 To [Function].ParameterList.Count - 1

                                If i = [Function].ParameterList.Count - 2 Then
                                    If [Function].ParameterList(i).Optional = True Then
                                        .Parameters += "[" & [Function].ParameterList(i).ParameterName & " As " & [Function].ParameterList(i).ParameterType & " = " &
                                        IIf([Function].ParameterList(i).ParameterType = "String", Space & [Function].ParameterList(i).DefaultValue & Space, [Function].ParameterList(i).DefaultValue) & "] "
                                    Else
                                        .Parameters += [Function].ParameterList(i).ParameterName & " As " & [Function].ParameterList(i).ParameterType & " "

                                    End If
                                Else
                                    If [Function].ParameterList(i).Optional = True Then
                                        .Parameters += "[" & [Function].ParameterList(i).ParameterName & " As " & [Function].ParameterList(i).ParameterType & " = " &
                                        IIf([Function].ParameterList(i).ParameterType = "String", Space & [Function].ParameterList(i).DefaultValue & Space, [Function].ParameterList(i).DefaultValue) & "], "
                                    Else
                                        .Parameters += [Function].ParameterList(i).ParameterName & " As " & [Function].ParameterList(i).ParameterType & ", "

                                    End If
                                End If


                            Next
                        End If
                    End If
                    .Description = [Function].SummaryStatement.Print_VB
                End With
                Me.Format = "Function"
                Me.ImageIndex = 5
                Me.Code = [Function].RegionCode
                Me.Item = New ListViewItem(Me.Code)
                Me.Item.SubItems.Add(Me.Namespace & "." & Me.Name)
                Me.Item.SubItems.Add(Me.Format)
                Me.Item.SubItems.Add(Me.Parameters)
                Me.Item.SubItems.Add(Me.Description)
                Me.Item.ImageIndex = Me.ImageIndex
                Me.Item.Tag = [Function]
                Me.Item.ToolTipText = Me.Description
            End If
        End Sub
#End Region
#Region "|07.06| <Loader> [Property|VbNET.Loader]"
        Public Sub New(ByRef [Loader] As VbNET.Loader)
            Clear()
            If Not IsNothing([Loader]) Then
                With Me
                    .Name = [Loader].Name
                    If Not IsNothing([Loader].ParentClass) Then
                        .Namespace = [Loader].ParentClass.Name
                    Else

                        If Not IsNothing(VirtualClass) Then
                            [Loader].ParentClass = VirtualClass
                            .Namespace = VirtualClass.Name
                        Else
                            VirtualClass = New [Class]("VirtualClass")
                        End If

                    End If
                    '   .ReturnType = [Loader].ReturnType
                    .Optional = False 'IIf([Property].Required = False, True, False)
                    If Not IsNothing([Loader].ParameterList) Then
                        If [Loader].ParameterList.Count - 1 >= 0 Then
                            For i = 0 To [Loader].ParameterList.Count - 1

                                If i = [Loader].ParameterList.Count - 2 Then
                                    If [Loader].ParameterList(i).Optional = True Then
                                        .Parameters += "[" & [Loader].ParameterList(i).ParameterName & " As " & [Loader].ParameterList(i).ParameterType & " = " &
                                        IIf([Loader].ParameterList(i).ParameterType = "String", Space & [Loader].ParameterList(i).DefaultValue & Space, [Loader].ParameterList(i).DefaultValue) & "] "
                                    Else
                                        .Parameters += [Loader].ParameterList(i).ParameterName & " As " & [Loader].ParameterList(i).ParameterType & " "

                                    End If
                                Else
                                    If [Loader].ParameterList(i).Optional = True Then
                                        .Parameters += "[" & [Loader].ParameterList(i).ParameterName & " As " & [Loader].ParameterList(i).ParameterType & " = " &
                                        IIf([Loader].ParameterList(i).ParameterType = "String", Space & [Loader].ParameterList(i).DefaultValue & Space, [Loader].ParameterList(i).DefaultValue) & "], "
                                    Else
                                        .Parameters += [Loader].ParameterList(i).ParameterName & " As " & [Loader].ParameterList(i).ParameterType & ", "

                                    End If
                                End If


                            Next
                        End If
                    End If
                    .Description = [Loader].SummaryStatement.Print_VB
                End With
                Me.Format = "Loader"
                Me.ImageIndex = 6
                Me.Code = [Loader].RegionCode
                Me.Item = New ListViewItem(Me.Code)
                Me.Item.SubItems.Add(Me.Namespace & "." & Me.Name)
                Me.Item.SubItems.Add(Me.Format)
                Me.Item.SubItems.Add(Me.Parameters)
                Me.Item.SubItems.Add(Me.Description)
                Me.Item.ImageIndex = Me.ImageIndex
                Me.Item.Tag = [Loader]
                Me.Item.ToolTipText = Me.Description
            End If
        End Sub
#End Region
#Region "|07.07| <Loader> [Property|VbNET.Runtime]"
        Public Sub New(ByRef [Runtime] As VbNET.Runtime)
            Clear()
            If Not IsNothing([Runtime]) Then
                With Me
                    .Name = [Runtime].Name
                    If Not IsNothing([Runtime].ParentClass) Then
                        .Namespace = [Runtime].ParentClass.Name
                    Else
                        If Not IsNothing([Runtime].ParentModule) Then
                            .Namespace = [Runtime].ParentModule.Name
                        Else
                            If Not IsNothing([Runtime].ParentStructure) Then
                                .Namespace = [Runtime].ParentStructure.Name
                            Else
                                If Not IsNothing(VirtualClass) Then
                                    [Runtime].ParentClass = VirtualClass
                                    .Namespace = VirtualClass.Name
                                Else
                                    VirtualClass = New [Class]("VirtualClass")
                                End If

                            End If
                        End If
                    End If
                    '   .ReturnType = [Runtime].ReturnType
                    .Optional = False 'IIf([Property].Required = False, True, False)

                    .Description = [Runtime].SummaryStatement.Print_VB
                End With
                Me.Format = "Runtime"
                Me.ImageIndex = 7
                Me.Code = [Runtime].RegionCode
                Me.Item = New ListViewItem(Me.Code)
                Me.Item.SubItems.Add(Me.Namespace & "." & Me.Name)
                Me.Item.SubItems.Add(Me.Format)
                Me.Item.SubItems.Add(Me.Parameters)
                Me.Item.SubItems.Add(Me.Description)
                Me.Item.ImageIndex = Me.ImageIndex
                Me.Item.Tag = [Runtime]
                Me.Item.ToolTipText = Me.Description
            End If
        End Sub
#End Region
#Region "|07.08| <Loader> [Class|VbNET.Class]"
        Public Sub New(ByRef [Class] As VbNET.Class)
            Clear()
            If Not IsNothing([Class]) Then
                With Me
                    .Name = [Class].Name
                    If Not IsNothing([Class].ParentClass) Then
                        .Namespace = [Class].ParentClass.Name
                    Else
                        If Not IsNothing([Class].ParentModule) Then
                            .Namespace = [Class].ParentModule.Name
                        Else

                            If Not IsNothing(VirtualClass) Then
                                [Class].ParentClass = VirtualClass
                                .Namespace = VirtualClass.Name
                            Else
                                VirtualClass = New [Class]("VirtualClass")
                            End If
                        End If
                    End If
                    .Optional = False ' IIf([Class].Required = False, True, False)

                    .Description = [Class].Summary
                End With
                Me.Format = "Class"
                Me.ImageIndex = 8
                Me.Code = [Class].RegionCode
                Me.Item = New ListViewItem(Me.Code)
                Me.Item.SubItems.Add(Me.Namespace & "." & Me.Name)
                Me.Item.SubItems.Add(Me.Format)
                Me.Item.SubItems.Add(Me.Parameters)
                Me.Item.SubItems.Add(Me.Description)
                Me.Item.ImageIndex = Me.ImageIndex
                Me.Item.Tag = [Class]
                Me.Item.ToolTipText = Me.Description
            End If
        End Sub
#End Region
#Region "|07.09| <Loader> [Constante|VbNET.Constante]"
        Public Sub New(ByRef [Constante] As VbNET.Constante)
            Clear()
            If Not IsNothing([Constante]) Then
                With Me
                    .Name = [Constante].Name
                    If Not IsNothing([Constante].ParentClass) Then
                        .Namespace = [Constante].ParentClass.Name
                    Else
                        If Not IsNothing([Constante].ParentModule) Then
                            .Namespace = [Constante].ParentModule.Name
                        Else

                            If Not IsNothing(VirtualClass) Then
                                [Constante].ParentClass = VirtualClass
                                .Namespace = VirtualClass.Name
                            Else
                                VirtualClass = New [Class]("VirtuaClass")
                            End If
                        End If
                    End If
                    .Optional = False ' IIf([Constante].Required = False, True, False)

                    .Description = [Constante].SummaryStatement.Print_VB
                End With
                Me.Format = "Constante"
                Me.ImageIndex = 9
                Me.Code = [Constante].RegionCode
                Me.Item = New ListViewItem(Me.Code)
                Me.Item.SubItems.Add(Me.Namespace & "." & Me.Name)
                Me.Item.SubItems.Add(Me.Format)
                Me.Item.SubItems.Add(Me.Parameters)
                Me.Item.SubItems.Add(Me.Description)
                Me.Item.ImageIndex = Me.ImageIndex
                Me.Item.Tag = [Constante]
                Me.Item.ToolTipText = Me.Description
            End If
        End Sub
#End Region
#Region "|07.10| <Loader> [Event|VbNET.Event]"
        Public Sub New(ByRef [Event] As VbNET.Event)
            Clear()
            If Not IsNothing([Event]) Then
                With Me
                    .Name = [Event].Name
                    If Not IsNothing([Event].ParentClass) Then
                        .Namespace = [Event].ParentClass.Name
                    Else
                        If Not IsNothing([Event].ParentModule) Then
                            .Namespace = [Event].ParentModule.Name
                        Else
                            If Not IsNothing([Event].ParentStructure) Then
                                .Namespace = [Event].ParentStructure.Name
                            Else
                                If Not IsNothing(VirtualClass) Then
                                    [Event].ParentClass = VirtualClass
                                    .Namespace = VirtualClass.Name
                                Else
                                    VirtualClass = New [Class]("VirtualClass")
                                End If

                            End If
                        End If
                    End If
                    '.ReturnType = [Event].ReturnType
                    .Optional = False
                    If Not IsNothing([Event].ParameterList) Then
                        If [Event].ParameterList.Count - 1 >= 0 Then
                            For i = 0 To [Event].ParameterList.Count - 1

                                If i = [Event].ParameterList.Count - 2 Then
                                    If [Event].ParameterList(i).Optional = True Then
                                        .Parameters += "[" & [Event].ParameterList(i).ParameterName & " As " & [Event].ParameterList(i).ParameterType & " = " &
                                        IIf([Event].ParameterList(i).ParameterType = "String", Space & [Event].ParameterList(i).DefaultValue & Space, [Event].ParameterList(i).DefaultValue) & "] "
                                    Else
                                        .Parameters += [Event].ParameterList(i).ParameterName & " As " & [Event].ParameterList(i).ParameterType & " "

                                    End If
                                Else
                                    If [Event].ParameterList(i).Optional = True Then
                                        .Parameters += "[" & [Event].ParameterList(i).ParameterName & " As " & [Event].ParameterList(i).ParameterType & " = " &
                                        IIf([Event].ParameterList(i).ParameterType = "String", Space & [Event].ParameterList(i).DefaultValue & Space, [Event].ParameterList(i).DefaultValue) & "], "
                                    Else
                                        .Parameters += [Event].ParameterList(i).ParameterName & " As " & [Event].ParameterList(i).ParameterType & ", "

                                    End If
                                End If


                            Next
                        End If
                    End If
                    .Description = [Event].SummaryStatement.Print_VB
                    .Format = "Event"
                    .ImageIndex = 1
                End With
                Me.Format = "Event"
                Me.ImageIndex = 10
                Me.Code = [Event].RegionCode
                Me.Item = New ListViewItem(Me.Code)
                Me.Item.SubItems.Add(Me.Namespace & "." & Me.Name)
                Me.Item.SubItems.Add(Me.Format)
                Me.Item.SubItems.Add(Me.Parameters)
                Me.Item.SubItems.Add(Me.Description)
                Me.Item.ImageIndex = Me.ImageIndex
                Me.Item.Tag = [Event]
                Me.Item.ToolTipText = Me.Description
            End If
        End Sub
#End Region
#End Region

    End Class
#End Region
#End Region
#Region "<08.01> <Class> [StatementItem]"
    Public Class StatementItem
#Region "[On] |2019/06/18 14h43:107| <01.00.00> <Property> <Info> |.N()|Integer|"' (Set|Get) The N as Integer.
        Private _N As Integer
        '''    <Summary>
        '''     (Set|Get) The N as Integer.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 14h43:112 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The N as Integer.")>
        Property N() As Integer
            Get
                Return _N
            End Get
            Set(ByVal Value As Integer)
                _N = Value
            End Set
        End Property
#End Region '(Set|Get) The N as Integer.
#Region "[On] |2019/06/18 14h43:650| <01.00.01> <Property> <Info> |.RegionCode()|String|"' (Set|Get) The RegionCode as String.
        Private _RegionCode As String
        '''    <Summary>
        '''     (Set|Get) The RegionCode as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 14h43:655 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The RegionCode as String.")>
        Public Property RegionCode() As String
            Get
                Return _RegionCode
            End Get
            Set(ByVal Value As String)
                _RegionCode = Value
            End Set
        End Property
#End Region '(Set|Get) The RegionCode as String.
#Region "[On] |2019/06/18 14h44:982| <01.00.02> <Property> <Info> |.Name()|String|"' (Set|Get) The Name as String.
        Private _Name As String
        '''    <Summary>
        '''     (Set|Get) The Name as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 14h44:987 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Name as String.")>
        Property Name() As String
            Get
                Return _Name
            End Get
            Set(ByVal Value As String)
                _Name = Value
            End Set
        End Property
#End Region '(Set|Get) The Name as String.
#Region "[On] |2019/06/18 14h44:281| <01.00.03> <Property> <Info> |.Format()|String|"' (Set|Get) The Format as String.
        Private _Format As String
        '''    <Summary>
        '''     (Set|Get) The Format as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 14h44:286 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Format as String.")>
        Property Format() As String
            Get
                Return _Format
            End Get
            Set(ByVal Value As String)
                _Format = Value
            End Set
        End Property
#End Region '(Set|Get) The Format as String.
#Region "[On] |2019/06/18 14h44:855| <01.00.04> <Property> <Info> |.Parameters()|String|"' (Set|Get) The Parameters as String.
        Private _Parameters As String
        '''    <Summary>
        '''     (Set|Get) The Parameters as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 14h44:860 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Parameters as String.")>
        Property Parameters() As String
            Get
                Return _Parameters
            End Get
            Set(ByVal Value As String)
                _Parameters = Value
            End Set
        End Property
#End Region '(Set|Get) The Parameters as String.
#Region "[On] |2019/06/18 14h45:102| <01.00.05> <Property> <Info> |.Summary()|String|"' (Set|Get) The Summary as String.
        Private _Summary As String
        '''    <Summary>
        '''     (Set|Get) The Summary as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 14h45:108 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Summary as String.")>
        Property Summary() As String
            Get
                Return _Summary
            End Get
            Set(ByVal Value As String)
                _Summary = Value
            End Set
        End Property
#End Region '(Set|Get) The Summary as String.
        Public ImageIndex As Integer
        Public Tag As Object
        Public Overrides Function ToString() As String
            Return Me.Name
        End Function
        Public Sub New()

        End Sub
        Public Sub New(ByVal Statement As Object)
            If Not IsNothing(Statement) Then
                If TypeOf Statement Is VbNET.Class Then
                    Dim CStatement As VbNET.Class
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        .Parameters = ""
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With
                ElseIf TypeOf Statement Is VbNET.Constante Then
                    Dim CStatement As VbNET.Constante
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        .Parameters = ""
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With
                ElseIf TypeOf Statement Is VbNET.Enumeration Then
                    Dim CStatement As VbNET.Enumeration
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        For i = 0 To CStatement.Members.Count - 1
                            .Parameters += CStatement.Members(i).ToString
                        Next
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With
                ElseIf TypeOf Statement Is VbNET.Structure Then
                    Dim CStatement As VbNET.Structure
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        .Parameters = ""
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With
                ElseIf TypeOf Statement Is VbNET.Sub Then
                    Dim CStatement As VbNET.Sub
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        If Not IsNothing(CStatement.ParameterList) Then

                            For i = 0 To CStatement.ParameterList.Count - 1
                                .Parameters += CStatement.ParameterList(i).ToString
                            Next
                        End If

                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With
                ElseIf TypeOf Statement Is VbNET.Function Then
                    Dim CStatement As VbNET.Function
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        If Not IsNothing(CStatement.ParameterList) Then

                            For i = 0 To CStatement.ParameterList.Count - 1
                                .Parameters += CStatement.ParameterList(i).ToString
                            Next
                        End If
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With
                ElseIf TypeOf Statement Is VbNET.Import Then
                    Dim CStatement As VbNET.Import
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        .Parameters = ""
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With

                ElseIf TypeOf Statement Is VbNET.Loader Then
                    Dim CStatement As VbNET.Loader
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        If Not IsNothing(CStatement.ParameterList) Then

                            For i = 0 To CStatement.ParameterList.Count - 1
                                .Parameters += CStatement.ParameterList(i).ToString
                            Next
                        End If
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With
                ElseIf TypeOf Statement Is VbNET.Module Then
                    Dim CStatement As VbNET.Module
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        .Parameters = ""
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With

                ElseIf TypeOf Statement Is VbNET.Runtime Then
                    Dim CStatement As VbNET.Runtime
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        .Parameters = ""
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With

                ElseIf TypeOf Statement Is VbNET.Event Then
                    Dim CStatement As VbNET.Event
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        .Parameters = ""
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With

                ElseIf TypeOf Statement Is VbNET.RaiseEvent Then
                    Dim CStatement As VbNET.RaiseEvent
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        .Parameters = ""
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With

                ElseIf TypeOf Statement Is VbNET.Property Then
                    Dim CStatement As VbNET.Property
                    CStatement = Statement
                    With Me
                        .N = CStatement.ID
                        .RegionCode = CStatement.RegionCode
                        .Name = CStatement.Name
                        .Parameters = ""
                        .Summary = CStatement.Summary
                        .ImageIndex = CStatement.ImageIndex
                        .Tag = CStatement
                    End With
                End If
            End If
        End Sub
    End Class
#End Region
#Region "<08.02> <Class> [Project]"
#Region "[On] |2019/06/18 17h41:805| <08.00.00> <Class> <> |.Project|Class|{7}"' 

    Public Class Project
#Region "<1> [Property]{9}"
#Region "[On] |2019/06/18 17h41:650| <01.00.00> <Property> <Info> |.Name()| String|"' (Set|Get) The Name as  String.
        Private _Name As String
        '''    <Summary>
        '''     (Set|Get) The Name as  String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:439 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The Name as  String.")>
        Property Name() As String
            Get
                Return _Name
            End Get
            Set(ByVal Value As String)
                _Name = Value
            End Set
        End Property
#End Region '(Set|Get) The Name as  String.
#Region "[On] |2019/06/18 17h42:318| <01.00.01> <Property> <Info> |.FilePath()|String|"' (Set|Get) The FilePath as String.
        Private _FilePath As String
        '''    <Summary>
        '''     (Set|Get) The FilePath as String.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:442 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The FilePath as String.")>
        Public Property FilePath() As String
            Get
                Return _FilePath
            End Get
            Set(ByVal Value As String)
                _FilePath = Value
            End Set
        End Property
#End Region '(Set|Get) The FilePath as String.
#Region "[On] |2019/06/18 17h43:175| <01.00.02> <Property> <Info> |.SolutionDirectory()|IO.DirectoryInfo|"' (Set|Get) The SolutionDirectory as IO.DirectoryInfo.
        Private _SolutionDirectory As IO.DirectoryInfo
        '''    <Summary>
        '''     (Set|Get) The SolutionDirectory as IO.DirectoryInfo.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:442 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Info"), Description("(Set|Get) The SolutionDirectory as IO.DirectoryInfo.")>
        Public Property SolutionDirectory() As IO.DirectoryInfo
            Get
                Return _SolutionDirectory
            End Get
            Set(ByVal Value As IO.DirectoryInfo)
                _SolutionDirectory = Value
            End Set
        End Property
#End Region '(Set|Get) The SolutionDirectory as IO.DirectoryInfo.
#Region "[On] |2019/06/18 17h44:982| <01.00.03> <Property> <List> |.VirtualClasses()|List(Of VbNET.Class)|"' (Set|Get) The VirtualClasses as List(Of VbNET.Class).
        Private _VirtualClasses As List(Of VbNET.Class)
        '''    <Summary>
        '''     (Set|Get) The VirtualClasses as List(Of VbNET.Class).
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:443 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) The VirtualClasses as List(Of VbNET.Class).")>
        Public Property VirtualClasses() As List(Of VbNET.Class)
            Get
                Return _VirtualClasses
            End Get
            Set(ByVal Value As List(Of VbNET.Class))
                _VirtualClasses = Value
            End Set
        End Property
#End Region '(Set|Get) The VirtualClasses as List(Of VbNET.Class).
#Region "[On] |2019/06/18 17h45:565| <01.00.04> <Property> <List> |.VirtualModules()|List(Of VbNET.Module)|"' (Set|Get) The VirtualModules as List(Of VbNET.Module).
        Private _VirtualModules As List(Of VbNET.Module)
        '''    <Summary>
        '''     (Set|Get) The VirtualModules as List(Of VbNET.Module).
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:443 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) The VirtualModules as List(Of VbNET.Module).")>
        Public Property VirtualModules() As List(Of VbNET.Module)
            Get
                Return _VirtualModules
            End Get
            Set(ByVal Value As List(Of VbNET.Module))
                _VirtualModules = Value
            End Set
        End Property
#End Region '(Set|Get) The VirtualModules as List(Of VbNET.Module).
#Region "[On] |2019/06/18 17h47:777| <01.00.06> <Property> <List> |.Directory()|Folder|"' (Set|Get) The Directory as Folder.
        Private _Directory As Folder
        '''    <Summary>
        '''     (Set|Get) The Directory as Folder.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:444 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) The Directory as Folder.")>
        Public Property Directory() As Folder
            Get
                Return _Directory
            End Get
            Set(ByVal Value As Folder)
                _Directory = Value
            End Set
        End Property
#End Region '(Set|Get) The Directory as Folder.
#Region "[On] |2019/06/18 18h01:018| <01.00.06> <Property> <List> |.Classes()|List(Of IO.FileInfo)|"' (Set|Get) The Classes as List(Of IO.FileInfo).
        Private _Classes As List(Of IO.FileInfo)
        '''    <Summary>
        '''     (Set|Get) The Classes as List(Of IO.FileInfo).
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:444 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) The Classes as List(Of IO.FileInfo).")>
        Property Classes() As List(Of IO.FileInfo)
            Get
                Return _Classes
            End Get
            Set(ByVal Value As List(Of IO.FileInfo))
                _Classes = Value
            End Set
        End Property
#End Region '(Set|Get) The Classes as List(Of IO.FileInfo).
#Region "[On] |2019/06/18 18h09:201| <01.00.07> <Property> <Nodes> |.MainNode()|DevComponents.AdvTree.Node|"' (Set|Get) The MainNode as DevComponents.AdvTree.Node.
        Private _MainNode As DevComponents.AdvTree.Node
        '''    <Summary>
        '''     (Set|Get) The MainNode as DevComponents.AdvTree.Node.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:445 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Nodes"), Description("(Set|Get) The MainNode as DevComponents.AdvTree.Node.")>
        Public Property MainNode() As DevComponents.AdvTree.Node
            Get
                Return _MainNode
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _MainNode = Value
            End Set
        End Property
#End Region '(Set|Get) The MainNode as DevComponents.AdvTree.Node.
#Region "[On] |2019/06/18 18h09:936| <01.00.08> <Property> <Nodes> |.NodeClass()|DevComponents.AdvTree.Node|"' (Set|Get) The NodeClass as DevComponents.AdvTree.Node.
        Private _NodeClass As DevComponents.AdvTree.Node
        '''    <Summary>
        '''     (Set|Get) The NodeClass as DevComponents.AdvTree.Node.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:446 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Nodes"), Description("(Set|Get) The NodeClass as DevComponents.AdvTree.Node.")>
        Public Property NodeClass() As DevComponents.AdvTree.Node
            Get
                Return _NodeClass
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _NodeClass = Value
            End Set
        End Property
#End Region '(Set|Get) The NodeClass as DevComponents.AdvTree.Node.
#Region "[On] |2019/06/18 18h09:936| <01.00.09> <Property> <Nodes> |.NodeModule()|DevComponents.AdvTree.Node|"' (Set|Get) The NodeModule as DevComponents.AdvTree.Node.
        Private _NodeModule As DevComponents.AdvTree.Node
        '''    <Summary>
        '''     (Set|Get) The NodeModule as DevComponents.AdvTree.Node.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:446 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the Moduleroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), CategoryAttribute("Nodes"), Description("(Set|Get) The NodeModule as DevComponents.AdvTree.Node.")>
        Public Property NodeModule() As DevComponents.AdvTree.Node
            Get
                Return _NodeModule
            End Get
            Set(ByVal Value As DevComponents.AdvTree.Node)
                _NodeModule = Value
            End Set
        End Property
#End Region '(Set|Get) The NodeModule as DevComponents.AdvTree.Node.

#End Region
#Region "<4> [Sub]{1}"
#Region "[On] |2019/06/18 17h40:755| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reset all properties to default settings. You can configure the Directory Output under My.Settings.DefaultOutput.
        '''    <Summary>
        '''     (Set|Get) This will reset all properties to default settings. You can configure the Directory Output under My.Settings.DefaultOutput.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:446 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), Description("(Set|Get) This will reset all properties to default settings. You can configure the Directory Output under My.Settings.DefaultOutput.")>
        Public Sub Clear()
            With Me
                .Name = "NewProject"
                If My.Settings.DefaultOuput = "" Then
                    My.Settings.DefaultOuput = "C:\Serialized"
                    My.Settings.Save()
                    If Not IO.Directory.Exists(My.Settings.DefaultOuput) Then
                        IO.Directory.CreateDirectory(My.Settings.DefaultOuput)
                    End If
                End If
                .SolutionDirectory = New IO.DirectoryInfo(My.Settings.DefaultOuput)
                .FilePath = ""
                .VirtualClasses = New List(Of VbNET.Class)
                .VirtualModules = New List(Of VbNET.Module)
                .Classes = New List(Of IO.FileInfo)
                .Directory = New Folder(My.Settings.DefaultOuput)
                .MainNode = New DevComponents.AdvTree.Node(.Name)
                .NodeClass = New DevComponents.AdvTree.Node("Classes")
                .NodeModule = New DevComponents.AdvTree.Node("Modules")
                .MainNode.Nodes.Add(.NodeClass)
                .MainNode.Nodes.Add(.NodeModule)
            End With
        End Sub
#End Region '(Set|Get) This will reset all properties to default settings. You can configure the Directory Output under My.Settings.DefaultOutput.
        Public Sub Index()
            Clear()
            If Not IsNothing(Me.File) Then
                Me.Folder = New Folder(Me.File.FilePath.Target)
                For Each Fi As Fichier In Me.Folder.EnumerateFichier("*.*", IO.SearchOption.AllDirectories)
                    If Fi.Extension.ToLower.Contains(".class") Then
                        Dim C As New VbNET.Class
                        C = VbNET.Class.Deserialize(Fi)
                        Me.VirtualClasses.Add(C)
                        Dim N As New DevComponents.AdvTree.Node
                        With N
                            .ImageIndex = 8
                            .Name = C.Name
                            .Text = C.Name
                        End With
                        Me.NodeClass.Nodes.Add(N)
                    ElseIf Fi.Extension.ToLower.Contains(".module") Then
                        Dim C As New VbNET.Module
                        C = VbNET.Module.Deserialize(Fi)
                        Me.VirtualModules.Add(C)
                        Dim N As New DevComponents.AdvTree.Node
                        With N
                            .ImageIndex = 8
                            .Name = C.Name
                            .Text = C.Name
                        End With
                        Me.NodeModule.Nodes.Add(N)
                    End If

                Next

            End If
        End Sub
#End Region
#Region "<6> [Runtime]{1}"
#Region "[On] |2019/06/18 17h58:359| <15.00.01> <Runtime> <> |.File()|Fichier"' (Set|Get) Variable File as Fichier.
        '''    <Summary>
        '''     (Set|Get) Variable File as Fichier.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:446 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), Description("(Set|Get) Variable File as Fichier.")>
        Public File As Fichier
#End Region '(Set|Get) Variable File as Fichier.
#Region "[On] |2019/06/18 17h58:359| <15.00.01> <Runtime> <> |.Folder()|Folder"' (Set|Get) Variable Folder as Folder.
        '''    <Summary>
        '''     (Set|Get) Variable Folder as Folder.
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/06/18 18h11:446 </Published>
        '''      <Rights>
        '''         Copyright on SmartOffice programming tools.
        '''    All rights, including those for reproduction, reprinting and translation of training materials are the property of David Shaw Informatique Sàrl or the specified supplier. The
        '''    training materials may not be reproduced in any form, used for academic purposes, or used for public
        '''    without the prior written permission of David Shaw Informatique Sàrl.
        '''    The software, components and data used in the course are protected by copyright and should not be copied on any media or
        '''    taken out of the classroom.
        '''       </Rights>
        ''' '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>

        <Browsable(True), Description("(Set|Get) Variable Folder as Folder.")>
        Public Folder As Folder
#End Region '(Set|Get) Variable Folder as Folder.

#End Region
        Public Sub New()
            Clear()
        End Sub
        Public Sub New(ByVal File As Fichier)
            Clear()
            If Not IsNothing(File) Then
                If File.Exists Then
                    Me.File = File
                    Index()
                End If
            End If

        End Sub
    End Class
#End Region

#End Region
#End Region
#Region "|9| [Constante]"

#End Region
#Region "|10| [Event]"

#End Region
#Region "|11| [Declare]"

#End Region
#Region "|12| [Delegate]"

#End Region
#End Region

End Class
