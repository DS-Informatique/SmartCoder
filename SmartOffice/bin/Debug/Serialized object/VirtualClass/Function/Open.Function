<?xml version="1.0" encoding="utf-8"?>
<Function xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ImageIndex>5</ImageIndex>
  <Name>Open</Name>
  <Text />
  <Tooltip />
  <Enable>true</Enable>
  <Status>IsNothing</Status>
  <Variables />
  <Statements />
  <Statement>    Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result
</Statement>
  <XmlFile />
  <VB_OpenStatement>Function </VB_OpenStatement>
  <VB_CloseStatement>End Function</VB_CloseStatement>
  <C_OpenStatement>{</C_OpenStatement>
  <C_CloseStatement>}</C_CloseStatement>
  <F_OpenStatement>def </F_OpenStatement>
  <F_CloseStatement>:</F_CloseStatement>
  <Python_OpenStatement>def </Python_OpenStatement>
  <Python_CloseStatement>:</Python_CloseStatement>
  <JS_OpenStatement />
  <JS_CloseStatement />
  <Browsable>true</Browsable>
  <Category />
  <Description>(Set|Get) This will initialise the connection And import the data.</Description>
  <DefaultValue />
  <Editor />
  <DllImport />
  <Custom>
    <AttributeName />
    <AttributeValue />
    <AttributeFormat>String</AttributeFormat>
  </Custom>
  <Deserializable>false</Deserializable>
  <NonSerialized>false</NonSerialized>
  <Serializable>false</Serializable>
  <XmlRoot />
  <XmlIgnore>false</XmlIgnore>
  <XmlInclude>false</XmlInclude>
  <RelatedImageList />
  <Print_VB>
    <string>#Region"[On] |2020/09/27 15h38:989| &lt;05.00.00&gt; &lt;Function&gt; &lt;&gt; |.Open()|ToolBoxDLL.TestBoolean}|"' (Set|Get) This will initialise the connection And import the data.</string>
    <string>    '''    &lt;Summary&gt;
'''     (Set|Get) This will initialise the connection And import the data.
'''    &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
'''    &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
'''    &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
'''    &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
'''    &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
'''    &lt;/Summary&gt;
</string>
    <string>    &lt;Browsable(True) , Description("(Set|Get) This will initialise the connection And import the data.") &gt;</string>
    <string>   Public Function Open(Optional ByVal [SqlCommand] As String = "") As ToolBoxDLL.TestBoolean</string>
    <string>    Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result
</string>
    <string>   End Function</string>
    <string>#End Region '(Set|Get) This will initialise the connection And import the data.</string>
  </Print_VB>
  <VB>#Region"[On] |2020/09/27 15h38:989| &lt;05.00.00&gt; &lt;Function&gt; &lt;&gt; |.Open()|ToolBoxDLL.TestBoolean}|"' (Set|Get) This will initialise the connection And import the data.
    '''    &lt;Summary&gt;
'''     (Set|Get) This will initialise the connection And import the data.
'''    &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
'''    &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
'''    &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
'''    &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
'''    &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
'''    &lt;/Summary&gt;

    &lt;Browsable(True) , Description("(Set|Get) This will initialise the connection And import the data.") &gt;
   Public Function Open(Optional ByVal [SqlCommand] As String = "") As ToolBoxDLL.TestBoolean
    Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result

   End Function
#End Region '(Set|Get) This will initialise the connection And import the data.
</VB>
  <Print_C>
    <string>#region |2020/09/27 15h38:989| &lt;05.00.00&gt; &lt;Function&gt; &lt;&gt; |.Open()|Function}|"' (Set|Get) This will initialise the connection And import the data.</string>
    <string>     ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;
</string>
    <string>    [Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</string>
    <string>   Public ToolBoxDLL.TestBoolean void Open(Optional ByVal [SqlCommand] As String = "")   {</string>
    <string>    Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result
</string>
    <string>   };</string>
    <string>#endregion (Set|Get) This will initialise the connection And import the data.</string>
  </Print_C>
  <C>#region |2020/09/27 15h38:989| &lt;05.00.00&gt; &lt;Function&gt; &lt;&gt; |.Open()|Function}|"' (Set|Get) This will initialise the connection And import the data.
     ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;

    [Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]
   Public ToolBoxDLL.TestBoolean void Open(Optional ByVal [SqlCommand] As String = "")   {
    Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result

   };
#endregion (Set|Get) This will initialise the connection And import the data.
</C>
  <Print_F>
    <string>#region |2020/09/27 15h38:989| &lt;05.00.00&gt; &lt;Sub&gt; &lt;&gt; |.Open()|Sub}|"' (Set|Get) This will initialise the connection And import the data.</string>
    <string>     ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;
</string>
    <string>    [Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</string>
    <string>    Let Open = </string>
    <string>        Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result
</string>
    <string>#endregion (Set|Get) This will initialise the connection And import the data.</string>
  </Print_F>
  <F>#region |2020/09/27 15h38:989| &lt;05.00.00&gt; &lt;Sub&gt; &lt;&gt; |.Open()|Sub}|"' (Set|Get) This will initialise the connection And import the data.
     ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;

    [Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]
    Let Open = 
        Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result

#endregion (Set|Get) This will initialise the connection And import the data.
</F>
  <Print_Python>
    <string>#region |2020/09/27 15h38:989| &lt;05.00.00&gt; &lt;Sub&gt; &lt;&gt; |.Open()|Sub}|"' (Set|Get) This will initialise the connection And import the data.</string>
    <string>     ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;
</string>
    <string>    [Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</string>
    <string>    Open ::= "Open"</string>
    <string>    Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result
</string>
    <string>#endregion /(Set|Get) This will initialise the connection And import the data.</string>
  </Print_Python>
  <Python>#region |2020/09/27 15h38:989| &lt;05.00.00&gt; &lt;Sub&gt; &lt;&gt; |.Open()|Sub}|"' (Set|Get) This will initialise the connection And import the data.
     ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;

    [Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]
    Open ::= "Open"
    Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result

#endregion /(Set|Get) This will initialise the connection And import the data.
</Python>
  <Print_JavaScript>
    <string>#region |2020/09/27 15h38:989| &lt;05.00.00&gt; &lt;Sub&gt; &lt;&gt; |.Open()|Sub}|"' (Set|Get) This will initialise the connection And import the data.</string>
    <string>     ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;
</string>
    <string>    [Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</string>
    <string>   Public ToolBoxDLL.TestBoolean void Open(Optional ByVal [SqlCommand] As String = "")   {</string>
    <string>    Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result
</string>
    <string>   };</string>
    <string>#endregion (Set|Get) This will initialise the connection And import the data.</string>
  </Print_JavaScript>
  <JavaScript>#region |2020/09/27 15h38:989| &lt;05.00.00&gt; &lt;Sub&gt; &lt;&gt; |.Open()|Sub}|"' (Set|Get) This will initialise the connection And import the data.
     ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;

    [Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]
   Public ToolBoxDLL.TestBoolean void Open(Optional ByVal [SqlCommand] As String = "")   {
    Dim Result As New ToolBoxDLL.TestBoolean
    If (Me.HasSettings = True) Then
          Close()
          If (Me.UseSql = True) Then
              With Me
                  .Sql_Con = New SqlClient.SqlConnection(Me.Line)
                  .Sql_Cmd = New SqlClient.SqlCommand()
                  .Sql_Cmd.CommandText = SqlCommand
                  .Sql_Cmd.Connection = .Sql_Con
              End With ' Me
              Try
                  Me.Sql_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          ElseIf (Me.UseSql = False) Then
              With Me
                  .OleDb_Con = New OleDb.OleDbConnection(Me.Line)
                  If (Me.Connector.Provider.Name = "Dbf") Then
                      Dim Fi As New IO.FileInfo(Me.DataBase)
                      Me.Data.TableName = Fi.Name.Substring(0, Fi.Name.Length - Fi.Extension.Length)
                      .OleDb_Cmd = New OleDb.OleDbCommand(Me.Data.TableName)
                  Else 'If (Me.Connector.Provider.Name = "Dbf")
                      .OleDb_Cmd = New OleDb.OleDbCommand()
                  End If '(Me.Connector.Provider.Name = "Dbf")
                  .OleDb_Cmd.CommandText = SqlCommand
                  .OleDb_Cmd.Connection = .OleDb_Con
              End With ' Me
              Try
                  Me.OleDb_Con.Open()
                  Result.Result = True
              Catch ex As Exception
                  ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
                  Result.Result = False
              End Try
          End If '(Me.UseSql)
    ElseIf (Me.HasSettings = False) Then
          Result.Result = False
          ToolBoxDLL.Write(Result.Console,Translate(Sentences.The_connection_line_configuration_is_not_properly_set, My.Settings.Environmental),, ReportType.Result)
    End If '(Me.HasSettings)
    Me.ConnectionEstablised = Result.Result
    Return Result

   };
#endregion (Set|Get) This will initialise the connection And import the data.
</JavaScript>
  <StatementFormat>Function</StatementFormat>
  <RegionCode>05.00.00</RegionCode>
  <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
  <AuthorName>Saadry Dunkel</AuthorName>
  <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
  <ContributorEmail />
  <ContributorName />
  <ContributorUri />
  <CustomProperty />
  <Published />
  <Rights />
  <Summary>'''    &lt;Summary&gt;
'''     This will initialise the connection And import the data.
'''    &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
'''    &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
'''    &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
'''    &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:989 &lt;/Published&gt;
'''    &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
'''    &lt;/Summary&gt;
</Summary>
  <Title />
  <Usage />
  <Remarks />
  <Example />
  <Note />
  <See />
  <SeeAlso />
  <Params>
    <Param>
      <Name>SqlCommand</Name>
      <Definition>An sql String query To be stored In either Cmd Or SqlCmd.</Definition>
    </Param>
  </Params>
  <Rules />
  <Syntax />
  <Attribute>
    <Browsable>true</Browsable>
    <Category />
    <Description>(Set|Get) This will initialise the connection And import the data.</Description>
    <DefaultValue />
    <Editor />
    <DllImport />
    <Custom>
      <AttributeName />
      <AttributeValue />
      <AttributeFormat>String</AttributeFormat>
    </Custom>
    <Deserializable>false</Deserializable>
    <NonSerialized>false</NonSerialized>
    <Serializable>false</Serializable>
    <XmlRoot />
    <XmlIgnore>false</XmlIgnore>
    <XmlInclude>false</XmlInclude>
    <RelatedImageList />
    <Attributes>
      <Attribute>
        <AttributeName>Browsable</AttributeName>
        <AttributeValue>True</AttributeValue>
        <AttributeInUse>true</AttributeInUse>
      </Attribute>
      <Attribute>
        <AttributeName>Description</AttributeName>
        <AttributeValue>(Set|Get) This will initialise the connection And import the data.</AttributeValue>
        <AttributeInUse>true</AttributeInUse>
        <AttributeFormat>String</AttributeFormat>
      </Attribute>
    </Attributes>
    <CodeLangue>Vb</CodeLangue>
    <Print_VB>
      <string>&lt;Browsable(True) , Description("(Set|Get) This will initialise the connection And import the data.") &gt;</string>
    </Print_VB>
    <Print_C>
      <string>[Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</string>
    </Print_C>
    <Print_F>
      <string>[Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</string>
    </Print_F>
    <Print_Python>
      <string>[Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</string>
    </Print_Python>
    <Print_JavaScript>
      <string>[Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</string>
    </Print_JavaScript>
    <VB>&lt;Browsable(True) , Description("(Set|Get) This will initialise the connection And import the data.") &gt;</VB>
    <C>[Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</C>
    <F>[Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</F>
    <Python>[Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</Python>
    <JavaScript>[Browsable(true) , Description("(Set|Get) This will initialise the connection And import the data.") ]</JavaScript>
  </Attribute>
  <AccessModifier>Public</AccessModifier>
  <ProcedureModifier>Nothing</ProcedureModifier>
  <Shared>false</Shared>
  <Shadows>false</Shadows>
  <Async>false</Async>
  <FunctionName>Open</FunctionName>
  <ParameterList>
    <ParameterList_Statement>
      <ImageIndex>2</ImageIndex>
      <Name>SqlCommand</Name>
      <Text>CodeBuilder.VB.InnerStatement.ParameterList_Statement</Text>
      <Tooltip>Optional ByVal [SqlCommand] As String = Nothing</Tooltip>
      <Enable>true</Enable>
      <Syntax>[ &lt;attributelist&gt; ] [ Optional ] [{ ByVal | ByRef }] [ ParamArray ]   parametername[( )] [ As parametertype ] [ = defaultvalue ]  </Syntax>
      <Example />
      <Remarks />
      <Rules />
      <Definition>An sql String query To be stored In either Cmd Or SqlCmd.</Definition>
      <AttributeList>
        <Browsable>true</Browsable>
        <Category />
        <Description />
        <DefaultValue />
        <Editor />
        <DllImport />
        <Custom>
          <AttributeName />
          <AttributeValue />
          <AttributeFormat>String</AttributeFormat>
        </Custom>
        <Deserializable>false</Deserializable>
        <NonSerialized>false</NonSerialized>
        <Serializable>false</Serializable>
        <XmlRoot />
        <XmlIgnore>false</XmlIgnore>
        <XmlInclude>false</XmlInclude>
        <RelatedImageList />
        <Attributes />
        <CodeLangue>Vb</CodeLangue>
        <Print_VB />
        <Print_C />
        <Print_F />
        <Print_Python />
        <Print_JavaScript />
        <VB />
        <C />
        <F />
        <Python />
        <JavaScript />
      </AttributeList>
      <Optional>true</Optional>
      <ByVal>true</ByVal>
      <ByRef>false</ByRef>
      <ParamArray>false</ParamArray>
      <ParameterName>SqlCommand</ParameterName>
      <ParameterType>String</ParameterType>
      <DefaultValue />
      <Modifier>Optional ByVal </Modifier>
    </ParameterList_Statement>
  </ParameterList>
  <SummaryStatement>
    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
    <AuthorName>Saadry Dunkel</AuthorName>
    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
    <ContributorEmail />
    <ContributorName />
    <ContributorUri />
    <Published />
    <Rights />
    <Summary>(Set|Get) This will initialise the connection And import the data.</Summary>
    <Title />
    <Status>NotTested</Status>
    <Usage />
    <Remarks />
    <Example />
    <Note />
    <Params />
    <See />
    <SeeAlso />
    <Print_VB>'''    &lt;Summary&gt;
'''     (Set|Get) This will initialise the connection And import the data.
'''    &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
'''    &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
'''    &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
'''    &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
'''    &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
'''    &lt;/Summary&gt;
</Print_VB>
    <Print_C> ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;
</Print_C>
    <Print_F> ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;
</Print_F>
    <Print_Python> ///     &lt;Summary&gt;
 ///    (Set|Get) This will initialise the connection And import the data.
 ///     &lt;AuthorEmail&gt;saadry.dunkel@outlook.com&lt;/AuthorEmail&gt;
 ///     &lt;AuthorName&gt;Saadry Dunkel&lt;/AuthorName&gt;
 ///     &lt;AuthorUri&gt;https://www.saadry-dunkel.com&lt;/AuthorUri&gt;
 ///     &lt;Published&gt;MASTER From MASTER\Saadry | Time : 2020/09/27 15h38:995 &lt;/Published&gt;
 ///     &lt;Updated&gt;[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]&lt;/Updated&gt;
 ///     &lt;/Summary&gt;
</Print_Python>
    <Rules />
    <Syntax />
  </SummaryStatement>
  <ReturnType>ToolBoxDLL.TestBoolean</ReturnType>
  <Partial>False</Partial>
  <Handle />
  <Implements />
  <Production_Cost>2.1</Production_Cost>
  <Quantity_Parameters>1</Quantity_Parameters>
  <Unit_Cost_Function>1.6</Unit_Cost_Function>
  <Unit_Cost_Parameters>0.5</Unit_Cost_Parameters>
</Function>