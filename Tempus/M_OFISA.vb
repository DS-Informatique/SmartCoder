Imports System.ComponentModel
Imports System.IO
Imports SmartCoder
Public Module M_OFISA


#Region "[On] |2019/07/16 22h58:749| <08.00.00> <Class> <> |.OFISA|Class|{48} |Production Cost : 2420.3|Selling Price : 6050.75|"' 
    '''    <Summary>
    '''     '''    Object Name :             Public  Class OFISA
    '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
    '''    Contributor Information : ||
    '''    Creation Date :           2019/07/16 22h58:749
    '''    |Schema|
    '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
    '''    |00| |Importation|{0}||1| |0
    '''    |01| |Properties |{636}||0.8| |508.8
    '''    |02| |Enumeration|{47}||0.4| |18.8
    '''    |03| |Structure  |{0}||0.4| |0
    '''    |04| |Sub        |{236}||1.2| |283.2
    '''    |05| |Function   |{350}||1.6| |560
    '''    |06| |Runtime    |{568}||0.4| |227.2
    '''    |07| |Loader     |{96}||0.8| |76.8
    '''    |08| |Class      |{48}||2| |96
    '''    |09| |Constante  |{0}||0.4| |0
    '''    |10| |Event      |{0}||1.2| |0
    '''    |11| |Members    |{516}||0.5| |258
    '''    |12| |Parameter  |{783}||0.5| |391.5
    '''    |Production Cost             |2420.3
    '''    |Selling Price without VAT   |6050.75
    '''    |Total TVA                   |465.91
    '''    |Grand Total                 |6516.66
    '''    |/Schema|
    '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
    '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
    '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
    '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:945 </Published>
    '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
    '''    </Summary>
    Public Class OFISA
#Region "[On] |2019/07/16 22h58:749| <08.00.00> <Class> <> |.OFISA|Class|"' 
#Region "[On] |2019/07/16 23h20:164| <08.00.00> <Class> <> |.MDT_ARTICLE|Class|{43} |Production Cost : 55.3|Selling Price : 138.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_ARTICLE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h20:164
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{16}||0.8| |12.8
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{16}||0.5| |8
        '''    |12| |Parameter  |{21}||0.5| |10.5
        '''    |Production Cost             |55.3
        '''    |Selling Price without VAT   |138.25
        '''    |Total TVA                   |10.65
        '''    |Grand Total                 |148.9
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_ARTICLE
#Region "<1> [Property]{16}"
#Region "[On] |2019/07/16 23h20:167| <01.00.00> <Property> <Columns> |.COD_ART()|String|"' (Set|Get) The COD_ART as String.
            Private _COD_ART As String
            '''    <Summary>
            '''     (Set|Get) The COD_ART as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_ART as String.")>
            Public Property COD_ART() As String
                Get
                    Return _COD_ART
                End Get
                Set(ByVal Value As String)
                    _COD_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_ART as String.

#Region "[On] |2019/07/16 23h20:307| <01.00.01> <Property> <Columns> |.TYP_ART()|String|"' (Set|Get) The TYP_ART as String.
            Private _TYP_ART As String
            '''    <Summary>
            '''     (Set|Get) The TYP_ART as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_ART as String.")>
            Public Property TYP_ART() As String
                Get
                    Return _TYP_ART
                End Get
                Set(ByVal Value As String)
                    _TYP_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_ART as String.

#Region "[On] |2019/07/16 23h20:313| <01.00.02> <Property> <Columns> |.NOM_ART()|String|"' (Set|Get) The NOM_ART as String.
            Private _NOM_ART As String
            '''    <Summary>
            '''     (Set|Get) The NOM_ART as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_ART as String.")>
            Public Property NOM_ART() As String
                Get
                    Return _NOM_ART
                End Get
                Set(ByVal Value As String)
                    _NOM_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_ART as String.

#Region "[On] |2019/07/16 23h20:318| <01.00.03> <Property> <Columns> |.TYP_CLB()|String|"' (Set|Get) The TYP_CLB as String.
            Private _TYP_CLB As String
            '''    <Summary>
            '''     (Set|Get) The TYP_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_CLB as String.")>
            Public Property TYP_CLB() As String
                Get
                    Return _TYP_CLB
                End Get
                Set(ByVal Value As String)
                    _TYP_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_CLB as String.

#Region "[On] |2019/07/16 23h20:323| <01.00.04> <Property> <Columns> |.RMB_YON()|Boolean|"' (Set|Get) The RMB_YON as Boolean.
            Private _RMB_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The RMB_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:947 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RMB_YON as Boolean.")>
            Public Property RMB_YON() As Boolean
                Get
                    Return _RMB_YON
                End Get
                Set(ByVal Value As Boolean)
                    _RMB_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The RMB_YON as Boolean.

#Region "[On] |2019/07/16 23h20:327| <01.00.05> <Property> <Columns> |.KLM_YON()|Boolean|"' (Set|Get) The KLM_YON as Boolean.
            Private _KLM_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The KLM_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:947 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The KLM_YON as Boolean.")>
            Public Property KLM_YON() As Boolean
                Get
                    Return _KLM_YON
                End Get
                Set(ByVal Value As Boolean)
                    _KLM_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The KLM_YON as Boolean.

#Region "[On] |2019/07/16 23h20:332| <01.00.06> <Property> <Columns> |.PRX_VTE()|Double|"' (Set|Get) The PRX_VTE as Double.
            Private _PRX_VTE As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_VTE as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:947 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_VTE as Double.")>
            Public Property PRX_VTE() As Double
                Get
                    Return _PRX_VTE
                End Get
                Set(ByVal Value As Double)
                    _PRX_VTE = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_VTE as Double.

#Region "[On] |2019/07/16 23h20:337| <01.00.07> <Property> <Columns> |.PRX_RMB()|Double|"' (Set|Get) The PRX_RMB as Double.
            Private _PRX_RMB As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_RMB as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:947 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_RMB as Double.")>
            Public Property PRX_RMB() As Double
                Get
                    Return _PRX_RMB
                End Get
                Set(ByVal Value As Double)
                    _PRX_RMB = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_RMB as Double.

#Region "[On] |2019/07/16 23h20:342| <01.00.08> <Property> <Columns> |.PRX_RVT()|Double|"' (Set|Get) The PRX_RVT as Double.
            Private _PRX_RVT As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_RVT as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:947 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_RVT as Double.")>
            Public Property PRX_RVT() As Double
                Get
                    Return _PRX_RVT
                End Get
                Set(ByVal Value As Double)
                    _PRX_RVT = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_RVT as Double.

#Region "[On] |2019/07/16 23h20:347| <01.00.09> <Property> <Columns> |.COD_GEN_PRS()|String|"' (Set|Get) The COD_GEN_PRS as String.
            Private _COD_GEN_PRS As String
            '''    <Summary>
            '''     (Set|Get) The COD_GEN_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:948 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_GEN_PRS as String.")>
            Public Property COD_GEN_PRS() As String
                Get
                    Return _COD_GEN_PRS
                End Get
                Set(ByVal Value As String)
                    _COD_GEN_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_GEN_PRS as String.

#Region "[On] |2019/07/16 23h20:352| <01.00.10> <Property> <Columns> |.MNT_VTE_MAX()|Double|"' (Set|Get) The MNT_VTE_MAX as Double.
            Private _MNT_VTE_MAX As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_VTE_MAX as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:948 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_VTE_MAX as Double.")>
            Public Property MNT_VTE_MAX() As Double
                Get
                    Return _MNT_VTE_MAX
                End Get
                Set(ByVal Value As Double)
                    _MNT_VTE_MAX = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_VTE_MAX as Double.

#Region "[On] |2019/07/16 23h20:357| <01.00.11> <Property> <Columns> |.MNT_RMB_MAX()|Double|"' (Set|Get) The MNT_RMB_MAX as Double.
            Private _MNT_RMB_MAX As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_RMB_MAX as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:952 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_RMB_MAX as Double.")>
            Public Property MNT_RMB_MAX() As Double
                Get
                    Return _MNT_RMB_MAX
                End Get
                Set(ByVal Value As Double)
                    _MNT_RMB_MAX = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_RMB_MAX as Double.

#Region "[On] |2019/07/16 23h20:378| <01.00.12> <Property> <Columns> |.QTE_NON_FAC()|Double|"' (Set|Get) The QTE_NON_FAC as Double.
            Private _QTE_NON_FAC As Double
            '''    <Summary>
            '''     (Set|Get) The QTE_NON_FAC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:952 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The QTE_NON_FAC as Double.")>
            Public Property QTE_NON_FAC() As Double
                Get
                    Return _QTE_NON_FAC
                End Get
                Set(ByVal Value As Double)
                    _QTE_NON_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The QTE_NON_FAC as Double.

#Region "[On] |2019/07/16 23h20:384| <01.00.13> <Property> <Columns> |.COD_TVA()|String|"' (Set|Get) The COD_TVA as String.
            Private _COD_TVA As String
            '''    <Summary>
            '''     (Set|Get) The COD_TVA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:952 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TVA as String.")>
            Public Property COD_TVA() As String
                Get
                    Return _COD_TVA
                End Get
                Set(ByVal Value As String)
                    _COD_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TVA as String.

#Region "[On] |2019/07/16 23h20:390| <01.00.14> <Property> <Columns> |.GRP_PRS()|String|"' (Set|Get) The GRP_PRS as String.
            Private _GRP_PRS As String
            '''    <Summary>
            '''     (Set|Get) The GRP_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:952 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GRP_PRS as String.")>
            Public Property GRP_PRS() As String
                Get
                    Return _GRP_PRS
                End Get
                Set(ByVal Value As String)
                    _GRP_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The GRP_PRS as String.

#Region "[On] |2019/07/16 23h20:395| <01.00.15> <Property> <Columns> |.STA_ART()|String|"' (Set|Get) The STA_ART as String.
            Private _STA_ART As String
            '''    <Summary>
            '''     (Set|Get) The STA_ART as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:953 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The STA_ART as String.")>
            Public Property STA_ART() As String
                Get
                    Return _STA_ART
                End Get
                Set(ByVal Value As String)
                    _STA_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The STA_ART as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h20:402| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{15}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:953 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_ART as String.</summary>
                [COD_ART] = 0
                ''' <summary>(Set|Get) The TYP_ART as String.</summary>
                [TYP_ART] = 1
                ''' <summary>(Set|Get) The NOM_ART as String.</summary>
                [NOM_ART] = 2
                ''' <summary>(Set|Get) The TYP_CLB as String.</summary>
                [TYP_CLB] = 3
                ''' <summary>(Set|Get) The RMB_YON as Boolean.</summary>
                [RMB_YON] = 4
                ''' <summary>(Set|Get) The KLM_YON as Boolean.</summary>
                [KLM_YON] = 5
                ''' <summary>(Set|Get) The PRX_VTE as Double.</summary>
                [PRX_VTE] = 6
                ''' <summary>(Set|Get) The PRX_RMB as Double.</summary>
                [PRX_RMB] = 7
                ''' <summary>(Set|Get) The PRX_RVT as Double.</summary>
                [PRX_RVT] = 8
                ''' <summary>(Set|Get) The COD_GEN_PRS as String.</summary>
                [COD_GEN_PRS] = 9
                ''' <summary>(Set|Get) The MNT_VTE_MAX as Double.</summary>
                [MNT_VTE_MAX] = 10
                ''' <summary>(Set|Get) The MNT_RMB_MAX as Double.</summary>
                [MNT_RMB_MAX] = 11
                ''' <summary>(Set|Get) The QTE_NON_FAC as Double.</summary>
                [QTE_NON_FAC] = 12
                ''' <summary>(Set|Get) The COD_TVA as String.</summary>
                [COD_TVA] = 13
                ''' <summary>(Set|Get) The GRP_PRS as String.</summary>
                [GRP_PRS] = 14
                ''' <summary>(Set|Get) The STA_ART as String.</summary>
                [STA_ART] = 15
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h20:505| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:953 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_ART = Nothing
                    .TYP_ART = Nothing
                    .NOM_ART = Nothing
                    .TYP_CLB = Nothing
                    .RMB_YON = False
                    .KLM_YON = False
                    .PRX_VTE = 0
                    .PRX_RMB = 0
                    .PRX_RVT = 0
                    .COD_GEN_PRS = Nothing
                    .MNT_VTE_MAX = 0
                    .MNT_RMB_MAX = 0
                    .QTE_NON_FAC = 0
                    .COD_TVA = Nothing
                    .GRP_PRS = Nothing
                    .STA_ART = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h20:601| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:953 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_ARTICLE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_ARTICLE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_ARTICLE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h20:628| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:953 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_ARTICLE] (
`COD_ART`, 
`TYP_ART`, 
`NOM_ART`, 
`TYP_CLB`, 
`RMB_YON`, 
`KLM_YON`, 
`PRX_VTE`, 
`PRX_RMB`, 
`PRX_RVT`, 
`COD_GEN_PRS`, 
`MNT_VTE_MAX`, 
`MNT_RMB_MAX`, 
`QTE_NON_FAC`, 
`COD_TVA`, 
`GRP_PRS`, 
`STA_ART`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_ART)
                    Cmd.Parameters.AddWithValue("@1", Me.TYP_ART)
                    Cmd.Parameters.AddWithValue("@2", Me.NOM_ART)
                    Cmd.Parameters.AddWithValue("@3", Me.TYP_CLB)
                    Cmd.Parameters.AddWithValue("@4", Me.RMB_YON)
                    Cmd.Parameters.AddWithValue("@5", Me.KLM_YON)
                    Cmd.Parameters.AddWithValue("@6", Me.PRX_VTE)
                    Cmd.Parameters.AddWithValue("@7", Me.PRX_RMB)
                    Cmd.Parameters.AddWithValue("@8", Me.PRX_RVT)
                    Cmd.Parameters.AddWithValue("@9", Me.COD_GEN_PRS)
                    Cmd.Parameters.AddWithValue("@10", Me.MNT_VTE_MAX)
                    Cmd.Parameters.AddWithValue("@11", Me.MNT_RMB_MAX)
                    Cmd.Parameters.AddWithValue("@12", Me.QTE_NON_FAC)
                    Cmd.Parameters.AddWithValue("@13", Me.COD_TVA)
                    Cmd.Parameters.AddWithValue("@14", Me.GRP_PRS)
                    Cmd.Parameters.AddWithValue("@15", Me.STA_ART)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h20:634| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:953 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_ARTICLE] SET TYP_ART = @TYP_ART, NOM_ART = @NOM_ART, TYP_CLB = @TYP_CLB, RMB_YON = @RMB_YON, KLM_YON = @KLM_YON, PRX_VTE = @PRX_VTE, PRX_RMB = @PRX_RMB, PRX_RVT = @PRX_RVT, COD_GEN_PRS = @COD_GEN_PRS, MNT_VTE_MAX = @MNT_VTE_MAX, MNT_RMB_MAX = @MNT_RMB_MAX, QTE_NON_FAC = @QTE_NON_FAC, COD_TVA = @COD_TVA, GRP_PRS = @GRP_PRS, STA_ART = @STA_ART WHERE COD_ART = @COD_ART"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@TYP_ART", TYP_ART)
                    Cmd.Parameters.AddWithValue("@NOM_ART", NOM_ART)
                    Cmd.Parameters.AddWithValue("@TYP_CLB", TYP_CLB)
                    Cmd.Parameters.AddWithValue("@RMB_YON", RMB_YON)
                    Cmd.Parameters.AddWithValue("@KLM_YON", KLM_YON)
                    Cmd.Parameters.AddWithValue("@PRX_VTE", PRX_VTE)
                    Cmd.Parameters.AddWithValue("@PRX_RMB", PRX_RMB)
                    Cmd.Parameters.AddWithValue("@PRX_RVT", PRX_RVT)
                    Cmd.Parameters.AddWithValue("@COD_GEN_PRS", COD_GEN_PRS)
                    Cmd.Parameters.AddWithValue("@MNT_VTE_MAX", MNT_VTE_MAX)
                    Cmd.Parameters.AddWithValue("@MNT_RMB_MAX", MNT_RMB_MAX)
                    Cmd.Parameters.AddWithValue("@QTE_NON_FAC", QTE_NON_FAC)
                    Cmd.Parameters.AddWithValue("@COD_TVA", COD_TVA)
                    Cmd.Parameters.AddWithValue("@GRP_PRS", GRP_PRS)
                    Cmd.Parameters.AddWithValue("@STA_ART", STA_ART)
                    Cmd.Parameters.AddWithValue("@COD_ART", COD_ART)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h20:638| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:953 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_ARTICLE] WHERE COD_ART =@COD_ART"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_ART", COD_ART)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h20:645| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:954 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h20:743| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:954 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h20:748| <05.00.02> <Function> <> |.List()|List(Of MDT_ARTICLE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:954 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_ARTICLE)
                Dim Result As New List(Of MDT_ARTICLE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_ARTICLE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), False, Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), False, Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), 0, Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), 0, Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), 0, Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), "", Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), 0, Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), 0, Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), 0, Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), "", Row.Item(13)),
IIf(IsDBNull(Row.Item(14)), "", Row.Item(14)),
      IIf(IsDBNull(Row.Item(15)), "", Row.Item(15)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h20:754| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_ARTICLE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:954 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_ARTICLE)
                Dim Result As New List(Of MDT_ARTICLE)
                Dim C As New MDT_ARTICLE
                For Each Element As MDT_ARTICLE In C.List
                    If Element.COD_ART.ToLower() = Search.ToLower() Or Element.TYP_ART.ToLower() = Search.ToLower() Or Element.NOM_ART.ToLower() = Search.ToLower() Or Element.TYP_CLB.ToLower() = Search.ToLower() Or Element.COD_GEN_PRS.ToLower() = Search.ToLower() Or Element.COD_TVA.ToLower() = Search.ToLower() Or Element.GRP_PRS.ToLower() = Search.ToLower() Or Element.STA_ART.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h20:769| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_ARTICLE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:954 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_ARTICLE)
                Dim Result As New List(Of MDT_ARTICLE)
                Dim C As New MDT_ARTICLE
                For Each Element As MDT_ARTICLE In C.List
                    If Val(Element.PRX_VTE) = Search Or Val(Element.PRX_RMB) = Search Or Val(Element.PRX_RVT) = Search Or Val(Element.MNT_VTE_MAX) = Search Or Val(Element.MNT_RMB_MAX) = Search Or Val(Element.QTE_NON_FAC) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h20:775| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:954 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_ART
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h20:782| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:954 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h20:789| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:955 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h20:900| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:955 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h20:911| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:955 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h20:921| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:955 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h20:931| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:955 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h20:937| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:955 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h20:944| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:956 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h20:958| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:956 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h20:968| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:956 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h20:988| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:956 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h20:995| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:956 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h20:001| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:956 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h20:008| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:957 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h20:017| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:957 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_ART">(Set|Get) The COD_ART as String.</param>
            ''' <param name="TYP_ART">(Set|Get) The TYP_ART as String.</param>
            ''' <param name="NOM_ART">(Set|Get) The NOM_ART as String.</param>
            ''' <param name="TYP_CLB">(Set|Get) The TYP_CLB as String.</param>
            ''' <param name="RMB_YON">(Set|Get) The RMB_YON as Boolean.</param>
            ''' <param name="KLM_YON">(Set|Get) The KLM_YON as Boolean.</param>
            ''' <param name="PRX_VTE">(Set|Get) The PRX_VTE as Double.</param>
            ''' <param name="PRX_RMB">(Set|Get) The PRX_RMB as Double.</param>
            ''' <param name="PRX_RVT">(Set|Get) The PRX_RVT as Double.</param>
            ''' <param name="COD_GEN_PRS">(Set|Get) The COD_GEN_PRS as String.</param>
            ''' <param name="MNT_VTE_MAX">(Set|Get) The MNT_VTE_MAX as Double.</param>
            ''' <param name="MNT_RMB_MAX">(Set|Get) The MNT_RMB_MAX as Double.</param>
            ''' <param name="QTE_NON_FAC">(Set|Get) The QTE_NON_FAC as Double.</param>
            ''' <param name="COD_TVA">(Set|Get) The COD_TVA as String.</param>
            ''' <param name="GRP_PRS">(Set|Get) The GRP_PRS as String.</param>
            ''' <param name="STA_ART">(Set|Get) The STA_ART as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_ART As String,
ByVal TYP_ART As String,
ByVal NOM_ART As String,
ByVal TYP_CLB As String,
ByVal RMB_YON As Boolean,
ByVal KLM_YON As Boolean,
ByVal PRX_VTE As Double,
ByVal PRX_RMB As Double,
ByVal PRX_RVT As Double,
ByVal COD_GEN_PRS As String,
ByVal MNT_VTE_MAX As Double,
ByVal MNT_RMB_MAX As Double,
ByVal QTE_NON_FAC As Double,
ByVal COD_TVA As String,
ByVal GRP_PRS As String,
ByVal STA_ART As String)
                With Me
                    Clear()
                    Reset()
                    .COD_ART = COD_ART
                    .TYP_ART = TYP_ART
                    .NOM_ART = NOM_ART
                    .TYP_CLB = TYP_CLB
                    .RMB_YON = RMB_YON
                    .KLM_YON = KLM_YON
                    .PRX_VTE = PRX_VTE
                    .PRX_RMB = PRX_RMB
                    .PRX_RVT = PRX_RVT
                    .COD_GEN_PRS = COD_GEN_PRS
                    .MNT_VTE_MAX = MNT_VTE_MAX
                    .MNT_RMB_MAX = MNT_RMB_MAX
                    .QTE_NON_FAC = QTE_NON_FAC
                    .COD_TVA = COD_TVA
                    .GRP_PRS = GRP_PRS
                    .STA_ART = STA_ART
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h20:157| <08.00.00> <Class> <> |.MDT_BUDGET|Class|{39} |Production Cost : 49.2|Selling Price : 123|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_BUDGET
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h20:157
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{10}||0.8| |8
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{9}||1.6| |14.4
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{10}||0.5| |5
        '''    |12| |Parameter  |{18}||0.5| |9
        '''    |Production Cost             |49.2
        '''    |Selling Price without VAT   |123
        '''    |Total TVA                   |9.47
        '''    |Grand Total                 |132.47
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:968 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_BUDGET
#Region "<1> [Property]{10}"
#Region "[On] |2019/07/16 23h20:158| <01.00.00> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:968 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h20:165| <01.00.01> <Property> <Columns> |.DAT_COM()|DateTime|"' (Set|Get) The DAT_COM as DateTime.
            Private _DAT_COM As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_COM as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:968 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_COM as DateTime.")>
            Public Property DAT_COM() As DateTime
                Get
                    Return _DAT_COM
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_COM = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_COM as DateTime.

#Region "[On] |2019/07/16 23h20:174| <01.00.02> <Property> <Columns> |.DAT_FIN()|DateTime|"' (Set|Get) The DAT_FIN as DateTime.
            Private _DAT_FIN As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_FIN as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:968 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_FIN as DateTime.")>
            Public Property DAT_FIN() As DateTime
                Get
                    Return _DAT_FIN
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_FIN = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_FIN as DateTime.

#Region "[On] |2019/07/16 23h20:180| <01.00.03> <Property> <Columns> |.HRS_CTR()|Double|"' (Set|Get) The HRS_CTR as Double.
            Private _HRS_CTR As Double
            '''    <Summary>
            '''     (Set|Get) The HRS_CTR as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:969 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HRS_CTR as Double.")>
            Public Property HRS_CTR() As Double
                Get
                    Return _HRS_CTR
                End Get
                Set(ByVal Value As Double)
                    _HRS_CTR = Value
                End Set
            End Property
#End Region '(Set|Get) The HRS_CTR as Double.

#Region "[On] |2019/07/16 23h20:184| <01.00.04> <Property> <Columns> |.HON_SOC()|Double|"' (Set|Get) The HON_SOC as Double.
            Private _HON_SOC As Double
            '''    <Summary>
            '''     (Set|Get) The HON_SOC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:969 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HON_SOC as Double.")>
            Public Property HON_SOC() As Double
                Get
                    Return _HON_SOC
                End Get
                Set(ByVal Value As Double)
                    _HON_SOC = Value
                End Set
            End Property
#End Region '(Set|Get) The HON_SOC as Double.

#Region "[On] |2019/07/16 23h20:188| <01.00.05> <Property> <Columns> |.FRA_SOC()|Double|"' (Set|Get) The FRA_SOC as Double.
            Private _FRA_SOC As Double
            '''    <Summary>
            '''     (Set|Get) The FRA_SOC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:969 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FRA_SOC as Double.")>
            Public Property FRA_SOC() As Double
                Get
                    Return _FRA_SOC
                End Get
                Set(ByVal Value As Double)
                    _FRA_SOC = Value
                End Set
            End Property
#End Region '(Set|Get) The FRA_SOC as Double.

#Region "[On] |2019/07/16 23h20:193| <01.00.06> <Property> <Columns> |.HON_SST()|Double|"' (Set|Get) The HON_SST as Double.
            Private _HON_SST As Double
            '''    <Summary>
            '''     (Set|Get) The HON_SST as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:969 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HON_SST as Double.")>
            Public Property HON_SST() As Double
                Get
                    Return _HON_SST
                End Get
                Set(ByVal Value As Double)
                    _HON_SST = Value
                End Set
            End Property
#End Region '(Set|Get) The HON_SST as Double.

#Region "[On] |2019/07/16 23h20:198| <01.00.07> <Property> <Columns> |.FRA_SST()|Double|"' (Set|Get) The FRA_SST as Double.
            Private _FRA_SST As Double
            '''    <Summary>
            '''     (Set|Get) The FRA_SST as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:970 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FRA_SST as Double.")>
            Public Property FRA_SST() As Double
                Get
                    Return _FRA_SST
                End Get
                Set(ByVal Value As Double)
                    _FRA_SST = Value
                End Set
            End Property
#End Region '(Set|Get) The FRA_SST as Double.

#Region "[On] |2019/07/16 23h20:202| <01.00.08> <Property> <Columns> |.CAL_AUTO()|Boolean|"' (Set|Get) The CAL_AUTO as Boolean.
            Private _CAL_AUTO As Boolean
            '''    <Summary>
            '''     (Set|Get) The CAL_AUTO as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:970 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The CAL_AUTO as Boolean.")>
            Public Property CAL_AUTO() As Boolean
                Get
                    Return _CAL_AUTO
                End Get
                Set(ByVal Value As Boolean)
                    _CAL_AUTO = Value
                End Set
            End Property
#End Region '(Set|Get) The CAL_AUTO as Boolean.

#Region "[On] |2019/07/16 23h20:208| <01.00.09> <Property> <Columns> |.RMQ_BUD()|String|"' (Set|Get) The RMQ_BUD as String.
            Private _RMQ_BUD As String
            '''    <Summary>
            '''     (Set|Get) The RMQ_BUD as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:971 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RMQ_BUD as String.")>
            Public Property RMQ_BUD() As String
                Get
                    Return _RMQ_BUD
                End Get
                Set(ByVal Value As String)
                    _RMQ_BUD = Value
                End Set
            End Property
#End Region '(Set|Get) The RMQ_BUD as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h20:213| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{9}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:972 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 0
                ''' <summary>(Set|Get) The DAT_COM as DateTime.</summary>
                [DAT_COM] = 1
                ''' <summary>(Set|Get) The DAT_FIN as DateTime.</summary>
                [DAT_FIN] = 2
                ''' <summary>(Set|Get) The HRS_CTR as Double.</summary>
                [HRS_CTR] = 3
                ''' <summary>(Set|Get) The HON_SOC as Double.</summary>
                [HON_SOC] = 4
                ''' <summary>(Set|Get) The FRA_SOC as Double.</summary>
                [FRA_SOC] = 5
                ''' <summary>(Set|Get) The HON_SST as Double.</summary>
                [HON_SST] = 6
                ''' <summary>(Set|Get) The FRA_SST as Double.</summary>
                [FRA_SST] = 7
                ''' <summary>(Set|Get) The CAL_AUTO as Boolean.</summary>
                [CAL_AUTO] = 8
                ''' <summary>(Set|Get) The RMQ_BUD as String.</summary>
                [RMQ_BUD] = 9
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h20:218| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:972 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_MDT = Nothing
                    .DAT_COM = New DateTime
                    .DAT_FIN = New DateTime
                    .HRS_CTR = 0
                    .HON_SOC = 0
                    .FRA_SOC = 0
                    .HON_SST = 0
                    .FRA_SST = 0
                    .CAL_AUTO = False
                    .RMQ_BUD = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h20:223| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:972 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_BUDGET"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_BUDGET"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_BUDGET"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h20:228| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:972 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_BUDGET] (
`NUM_MDT`, 
`DAT_COM`, 
`DAT_FIN`, 
`HRS_CTR`, 
`HON_SOC`, 
`FRA_SOC`, 
`HON_SST`, 
`FRA_SST`, 
`CAL_AUTO`, 
`RMQ_BUD`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@1", Me.DAT_COM)
                    Cmd.Parameters.AddWithValue("@2", Me.DAT_FIN)
                    Cmd.Parameters.AddWithValue("@3", Me.HRS_CTR)
                    Cmd.Parameters.AddWithValue("@4", Me.HON_SOC)
                    Cmd.Parameters.AddWithValue("@5", Me.FRA_SOC)
                    Cmd.Parameters.AddWithValue("@6", Me.HON_SST)
                    Cmd.Parameters.AddWithValue("@7", Me.FRA_SST)
                    Cmd.Parameters.AddWithValue("@8", Me.CAL_AUTO)
                    Cmd.Parameters.AddWithValue("@9", Me.RMQ_BUD)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h20:232| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:972 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_BUDGET] SET DAT_COM = @DAT_COM, DAT_FIN = @DAT_FIN, HRS_CTR = @HRS_CTR, HON_SOC = @HON_SOC, FRA_SOC = @FRA_SOC, HON_SST = @HON_SST, FRA_SST = @FRA_SST, CAL_AUTO = @CAL_AUTO, RMQ_BUD = @RMQ_BUD WHERE NUM_MDT = @NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@DAT_COM", DAT_COM)
                    Cmd.Parameters.AddWithValue("@DAT_FIN", DAT_FIN)
                    Cmd.Parameters.AddWithValue("@HRS_CTR", HRS_CTR)
                    Cmd.Parameters.AddWithValue("@HON_SOC", HON_SOC)
                    Cmd.Parameters.AddWithValue("@FRA_SOC", FRA_SOC)
                    Cmd.Parameters.AddWithValue("@HON_SST", HON_SST)
                    Cmd.Parameters.AddWithValue("@FRA_SST", FRA_SST)
                    Cmd.Parameters.AddWithValue("@CAL_AUTO", CAL_AUTO)
                    Cmd.Parameters.AddWithValue("@RMQ_BUD", RMQ_BUD)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h20:237| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:972 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_BUDGET] WHERE NUM_MDT =@NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{9}"
#Region "[On] |2019/07/16 23h20:242| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:972 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h20:247| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:973 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h20:268| <05.00.02> <Function> <> |.List()|List(Of MDT_BUDGET)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:973 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_BUDGET)
                Dim Result As New List(Of MDT_BUDGET)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_BUDGET(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), New DateTime(1970, 1, 1), Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), New DateTime(1970, 1, 1), Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), 0, Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), 0, Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), 0, Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), 0, Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), 0, Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), False, Row.Item(8)),
      IIf(IsDBNull(Row.Item(9)), "", Row.Item(9)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h20:274| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_BUDGET)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:973 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_BUDGET)
                Dim Result As New List(Of MDT_BUDGET)
                Dim C As New MDT_BUDGET
                For Each Element As MDT_BUDGET In C.List
                    If Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.RMQ_BUD.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h20:280| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_BUDGET)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:973 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_BUDGET)
                Dim Result As New List(Of MDT_BUDGET)
                Dim C As New MDT_BUDGET
                For Each Element As MDT_BUDGET In C.List
                    If Val(Element.HRS_CTR) = Search Or Val(Element.HON_SOC) = Search Or Val(Element.FRA_SOC) = Search Or Val(Element.HON_SST) = Search Or Val(Element.FRA_SST) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h20:286| <05.00.05> <Function> <> |.SearchByDate()|List(Of MDT_BUDGET)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:973 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDate(ByVal Search As DateTime) As List(Of MDT_BUDGET)
                Dim Result As New List(Of MDT_BUDGET)
                Dim C As New MDT_BUDGET
                For Each Element As MDT_BUDGET In C.List
                    If Element.DAT_COM = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h20:291| <05.00.06> <Function> <> |.SearchByDateRange()|List(Of MDT_BUDGET)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:973 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="From_Date">All element from this date and this date included.</param>
            ''' <param name="Until_Date">All element before and including this date.</param>

            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDateRange(ByVal From_Date As DateTime,
ByVal Until_Date As DateTime) As List(Of MDT_BUDGET)
                Dim Result As New List(Of MDT_BUDGET)
                Dim C As New MDT_BUDGET
                For Each Element As MDT_BUDGET In C.List
                    If (Element.DAT_COM) >= From_Date And (Element.DAT_COM) <= Until_Date Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h20:298| <05.00.07> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:973 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_MDT
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h20:304| <05.00.08> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:973 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h20:309| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:974 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h20:315| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:974 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h20:321| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:974 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h20:326| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:974 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h20:332| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:974 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h20:337| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:974 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h20:362| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:974 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h20:366| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:975 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h20:372| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:975 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h20:378| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:975 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h20:384| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:975 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h20:390| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:975 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h20:395| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:976 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h20:398| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:977 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="DAT_COM">(Set|Get) The DAT_COM as DateTime.</param>
            ''' <param name="DAT_FIN">(Set|Get) The DAT_FIN as DateTime.</param>
            ''' <param name="HRS_CTR">(Set|Get) The HRS_CTR as Double.</param>
            ''' <param name="HON_SOC">(Set|Get) The HON_SOC as Double.</param>
            ''' <param name="FRA_SOC">(Set|Get) The FRA_SOC as Double.</param>
            ''' <param name="HON_SST">(Set|Get) The HON_SST as Double.</param>
            ''' <param name="FRA_SST">(Set|Get) The FRA_SST as Double.</param>
            ''' <param name="CAL_AUTO">(Set|Get) The CAL_AUTO as Boolean.</param>
            ''' <param name="RMQ_BUD">(Set|Get) The RMQ_BUD as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_MDT As String,
ByVal DAT_COM As DateTime,
ByVal DAT_FIN As DateTime,
ByVal HRS_CTR As Double,
ByVal HON_SOC As Double,
ByVal FRA_SOC As Double,
ByVal HON_SST As Double,
ByVal FRA_SST As Double,
ByVal CAL_AUTO As Boolean,
ByVal RMQ_BUD As String)
                With Me
                    Clear()
                    Reset()
                    .NUM_MDT = NUM_MDT
                    .DAT_COM = DAT_COM
                    .DAT_FIN = DAT_FIN
                    .HRS_CTR = HRS_CTR
                    .HON_SOC = HON_SOC
                    .FRA_SOC = FRA_SOC
                    .HON_SST = HON_SST
                    .FRA_SST = FRA_SST
                    .CAL_AUTO = CAL_AUTO
                    .RMQ_BUD = RMQ_BUD
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h20:492| <08.00.00> <Class> <> |.MDT_BUDGET_ETAPE|Class|{34} |Production Cost : 39.1|Selling Price : 97.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_BUDGET_ETAPE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h20:492
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{7}||0.8| |5.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{7}||0.5| |3.5
        '''    |12| |Parameter  |{12}||0.5| |6
        '''    |Production Cost             |39.1
        '''    |Selling Price without VAT   |97.75
        '''    |Total TVA                   |7.53
        '''    |Grand Total                 |105.28
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:984 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_BUDGET_ETAPE
#Region "<1> [Property]{7}"
#Region "[On] |2019/07/16 23h20:493| <01.00.00> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:984 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h20:499| <01.00.01> <Property> <Columns> |.DAT_COM()|DateTime|"' (Set|Get) The DAT_COM as DateTime.
            Private _DAT_COM As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_COM as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:984 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_COM as DateTime.")>
            Public Property DAT_COM() As DateTime
                Get
                    Return _DAT_COM
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_COM = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_COM as DateTime.

#Region "[On] |2019/07/16 23h20:503| <01.00.02> <Property> <Columns> |.NUM_ETA()|String|"' (Set|Get) The NUM_ETA as String.
            Private _NUM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NUM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:985 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_ETA as String.")>
            Public Property NUM_ETA() As String
                Get
                    Return _NUM_ETA
                End Get
                Set(ByVal Value As String)
                    _NUM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_ETA as String.

#Region "[On] |2019/07/16 23h20:508| <01.00.03> <Property> <Columns> |.HON_SOC()|Double|"' (Set|Get) The HON_SOC as Double.
            Private _HON_SOC As Double
            '''    <Summary>
            '''     (Set|Get) The HON_SOC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:985 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HON_SOC as Double.")>
            Public Property HON_SOC() As Double
                Get
                    Return _HON_SOC
                End Get
                Set(ByVal Value As Double)
                    _HON_SOC = Value
                End Set
            End Property
#End Region '(Set|Get) The HON_SOC as Double.

#Region "[On] |2019/07/16 23h20:512| <01.00.04> <Property> <Columns> |.FRA_SOC()|Double|"' (Set|Get) The FRA_SOC as Double.
            Private _FRA_SOC As Double
            '''    <Summary>
            '''     (Set|Get) The FRA_SOC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:986 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FRA_SOC as Double.")>
            Public Property FRA_SOC() As Double
                Get
                    Return _FRA_SOC
                End Get
                Set(ByVal Value As Double)
                    _FRA_SOC = Value
                End Set
            End Property
#End Region '(Set|Get) The FRA_SOC as Double.

#Region "[On] |2019/07/16 23h20:517| <01.00.05> <Property> <Columns> |.HON_SST()|Double|"' (Set|Get) The HON_SST as Double.
            Private _HON_SST As Double
            '''    <Summary>
            '''     (Set|Get) The HON_SST as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:986 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HON_SST as Double.")>
            Public Property HON_SST() As Double
                Get
                    Return _HON_SST
                End Get
                Set(ByVal Value As Double)
                    _HON_SST = Value
                End Set
            End Property
#End Region '(Set|Get) The HON_SST as Double.

#Region "[On] |2019/07/16 23h20:522| <01.00.06> <Property> <Columns> |.FRA_SST()|Double|"' (Set|Get) The FRA_SST as Double.
            Private _FRA_SST As Double
            '''    <Summary>
            '''     (Set|Get) The FRA_SST as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:987 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FRA_SST as Double.")>
            Public Property FRA_SST() As Double
                Get
                    Return _FRA_SST
                End Get
                Set(ByVal Value As Double)
                    _FRA_SST = Value
                End Set
            End Property
#End Region '(Set|Get) The FRA_SST as Double.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h20:527| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{6}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:988 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 0
                ''' <summary>(Set|Get) The DAT_COM as DateTime.</summary>
                [DAT_COM] = 1
                ''' <summary>(Set|Get) The NUM_ETA as String.</summary>
                [NUM_ETA] = 2
                ''' <summary>(Set|Get) The HON_SOC as Double.</summary>
                [HON_SOC] = 3
                ''' <summary>(Set|Get) The FRA_SOC as Double.</summary>
                [FRA_SOC] = 4
                ''' <summary>(Set|Get) The HON_SST as Double.</summary>
                [HON_SST] = 5
                ''' <summary>(Set|Get) The FRA_SST as Double.</summary>
                [FRA_SST] = 6
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h20:532| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:988 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_MDT = Nothing
                    .DAT_COM = New DateTime
                    .NUM_ETA = Nothing
                    .HON_SOC = 0
                    .FRA_SOC = 0
                    .HON_SST = 0
                    .FRA_SST = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h20:536| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:988 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_BUDGET_ETAPE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_BUDGET_ETAPE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_BUDGET_ETAPE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h20:541| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:988 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_BUDGET_ETAPE] (
`NUM_MDT`, 
`DAT_COM`, 
`NUM_ETA`, 
`HON_SOC`, 
`FRA_SOC`, 
`HON_SST`, 
`FRA_SST`) Values (@0, @1, @2, @3, @4, @5, @6)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@1", Me.DAT_COM)
                    Cmd.Parameters.AddWithValue("@2", Me.NUM_ETA)
                    Cmd.Parameters.AddWithValue("@3", Me.HON_SOC)
                    Cmd.Parameters.AddWithValue("@4", Me.FRA_SOC)
                    Cmd.Parameters.AddWithValue("@5", Me.HON_SST)
                    Cmd.Parameters.AddWithValue("@6", Me.FRA_SST)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h20:546| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:988 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_BUDGET_ETAPE] SET DAT_COM = @DAT_COM, NUM_ETA = @NUM_ETA, HON_SOC = @HON_SOC, FRA_SOC = @FRA_SOC, HON_SST = @HON_SST, FRA_SST = @FRA_SST WHERE NUM_MDT = @NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@DAT_COM", DAT_COM)
                    Cmd.Parameters.AddWithValue("@NUM_ETA", NUM_ETA)
                    Cmd.Parameters.AddWithValue("@HON_SOC", HON_SOC)
                    Cmd.Parameters.AddWithValue("@FRA_SOC", FRA_SOC)
                    Cmd.Parameters.AddWithValue("@HON_SST", HON_SST)
                    Cmd.Parameters.AddWithValue("@FRA_SST", FRA_SST)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h20:551| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:989 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_BUDGET_ETAPE] WHERE NUM_MDT =@NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h20:557| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:989 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h20:583| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:989 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h20:589| <05.00.02> <Function> <> |.List()|List(Of MDT_BUDGET_ETAPE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:989 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_BUDGET_ETAPE)
                Dim Result As New List(Of MDT_BUDGET_ETAPE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_BUDGET_ETAPE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), New DateTime(1970, 1, 1), Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), 0, Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), 0, Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), 0, Row.Item(5)),
      IIf(IsDBNull(Row.Item(6)), 0, Row.Item(6)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h20:595| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_BUDGET_ETAPE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:989 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_BUDGET_ETAPE)
                Dim Result As New List(Of MDT_BUDGET_ETAPE)
                Dim C As New MDT_BUDGET_ETAPE
                For Each Element As MDT_BUDGET_ETAPE In C.List
                    If Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NUM_ETA.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h20:600| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_BUDGET_ETAPE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:989 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_BUDGET_ETAPE)
                Dim Result As New List(Of MDT_BUDGET_ETAPE)
                Dim C As New MDT_BUDGET_ETAPE
                For Each Element As MDT_BUDGET_ETAPE In C.List
                    If Val(Element.HON_SOC) = Search Or Val(Element.FRA_SOC) = Search Or Val(Element.HON_SST) = Search Or Val(Element.FRA_SST) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h20:605| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:990 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_MDT
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h20:611| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:991 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h20:617| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:991 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h20:623| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:991 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h20:628| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:991 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h20:634| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:991 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h20:639| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:991 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h20:644| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:991 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h20:654| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:991 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h20:659| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:992 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h20:674| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:992 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h20:680| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:992 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h20:686| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:992 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h20:694| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:992 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h20:700| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:992 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h20:701| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:992 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="DAT_COM">(Set|Get) The DAT_COM as DateTime.</param>
            ''' <param name="NUM_ETA">(Set|Get) The NUM_ETA as String.</param>
            ''' <param name="HON_SOC">(Set|Get) The HON_SOC as Double.</param>
            ''' <param name="FRA_SOC">(Set|Get) The FRA_SOC as Double.</param>
            ''' <param name="HON_SST">(Set|Get) The HON_SST as Double.</param>
            ''' <param name="FRA_SST">(Set|Get) The FRA_SST as Double.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_MDT As String,
ByVal DAT_COM As DateTime,
ByVal NUM_ETA As String,
ByVal HON_SOC As Double,
ByVal FRA_SOC As Double,
ByVal HON_SST As Double,
ByVal FRA_SST As Double)
                With Me
                    Clear()
                    Reset()
                    .NUM_MDT = NUM_MDT
                    .DAT_COM = DAT_COM
                    .NUM_ETA = NUM_ETA
                    .HON_SOC = HON_SOC
                    .FRA_SOC = FRA_SOC
                    .HON_SST = HON_SST
                    .FRA_SST = FRA_SST
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h20:790| <08.00.00> <Class> <> |.MDT_BUREAU|Class|{31} |Production Cost : 33.7|Selling Price : 84.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_BUREAU
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h20:790
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{4}||0.8| |3.2
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{4}||0.5| |2
        '''    |12| |Parameter  |{9}||0.5| |4.5
        '''    |Production Cost             |33.7
        '''    |Selling Price without VAT   |84.25
        '''    |Total TVA                   |6.49
        '''    |Grand Total                 |90.74
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:997 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_BUREAU
#Region "<1> [Property]{4}"
#Region "[On] |2019/07/16 23h20:790| <01.00.00> <Property> <Columns> |.COD_BUR()|String|"' (Set|Get) The COD_BUR as String.
            Private _COD_BUR As String
            '''    <Summary>
            '''     (Set|Get) The COD_BUR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:998 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_BUR as String.")>
            Public Property COD_BUR() As String
                Get
                    Return _COD_BUR
                End Get
                Set(ByVal Value As String)
                    _COD_BUR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_BUR as String.

#Region "[On] |2019/07/16 23h20:796| <01.00.01> <Property> <Columns> |.TRI_NUM()|Integer|"' (Set|Get) The TRI_NUM as Integer.
            Private _TRI_NUM As Integer
            '''    <Summary>
            '''     (Set|Get) The TRI_NUM as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:998 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TRI_NUM as Integer.")>
            Public Property TRI_NUM() As Integer
                Get
                    Return _TRI_NUM
                End Get
                Set(ByVal Value As Integer)
                    _TRI_NUM = Value
                End Set
            End Property
#End Region '(Set|Get) The TRI_NUM as Integer.

#Region "[On] |2019/07/16 23h20:802| <01.00.02> <Property> <Columns> |.NOM_BUR()|String|"' (Set|Get) The NOM_BUR as String.
            Private _NOM_BUR As String
            '''    <Summary>
            '''     (Set|Get) The NOM_BUR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:998 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_BUR as String.")>
            Public Property NOM_BUR() As String
                Get
                    Return _NOM_BUR
                End Get
                Set(ByVal Value As String)
                    _NOM_BUR = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_BUR as String.

#Region "[On] |2019/07/16 23h20:807| <01.00.03> <Property> <Columns> |.NUM_SOC_GEFI()|Integer|"' (Set|Get) The NUM_SOC_GEFI as Integer.
            Private _NUM_SOC_GEFI As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SOC_GEFI as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:998 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SOC_GEFI as Integer.")>
            Public Property NUM_SOC_GEFI() As Integer
                Get
                    Return _NUM_SOC_GEFI
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SOC_GEFI = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SOC_GEFI as Integer.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h20:812| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{3}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:998 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_BUR as String.</summary>
                [COD_BUR] = 0
                ''' <summary>(Set|Get) The TRI_NUM as Integer.</summary>
                [TRI_NUM] = 1
                ''' <summary>(Set|Get) The NOM_BUR as String.</summary>
                [NOM_BUR] = 2
                ''' <summary>(Set|Get) The NUM_SOC_GEFI as Integer.</summary>
                [NUM_SOC_GEFI] = 3
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h20:818| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:998 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_BUR = Nothing
                    .TRI_NUM = 0
                    .NOM_BUR = Nothing
                    .NUM_SOC_GEFI = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h20:822| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:999 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_BUREAU"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_BUREAU"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_BUREAU"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h20:827| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:999 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_BUREAU] (
`COD_BUR`, 
`TRI_NUM`, 
`NOM_BUR`, 
`NUM_SOC_GEFI`) Values (@0, @1, @2, @3)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_BUR)
                    Cmd.Parameters.AddWithValue("@1", Me.TRI_NUM)
                    Cmd.Parameters.AddWithValue("@2", Me.NOM_BUR)
                    Cmd.Parameters.AddWithValue("@3", Me.NUM_SOC_GEFI)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h20:834| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:999 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_BUREAU] SET TRI_NUM = @TRI_NUM, NOM_BUR = @NOM_BUR, NUM_SOC_GEFI = @NUM_SOC_GEFI WHERE COD_BUR = @COD_BUR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@TRI_NUM", TRI_NUM)
                    Cmd.Parameters.AddWithValue("@NOM_BUR", NOM_BUR)
                    Cmd.Parameters.AddWithValue("@NUM_SOC_GEFI", NUM_SOC_GEFI)
                    Cmd.Parameters.AddWithValue("@COD_BUR", COD_BUR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h20:838| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:000 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_BUREAU] WHERE COD_BUR =@COD_BUR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_BUR", COD_BUR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h20:843| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:000 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h20:862| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:000 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h20:868| <05.00.02> <Function> <> |.List()|List(Of MDT_BUREAU)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:000 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_BUREAU)
                Dim Result As New List(Of MDT_BUREAU)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_BUREAU(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
      IIf(IsDBNull(Row.Item(3)), 0, Row.Item(3)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h20:874| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_BUREAU)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:001 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_BUREAU)
                Dim Result As New List(Of MDT_BUREAU)
                Dim C As New MDT_BUREAU
                For Each Element As MDT_BUREAU In C.List
                    If Element.COD_BUR.ToLower() = Search.ToLower() Or Element.NOM_BUR.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h20:879| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_BUREAU)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:001 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_BUREAU)
                Dim Result As New List(Of MDT_BUREAU)
                Dim C As New MDT_BUREAU
                For Each Element As MDT_BUREAU In C.List
                    If Val(Element.TRI_NUM) = Search Or Val(Element.NUM_SOC_GEFI) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h20:885| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:001 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_BUR
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h20:891| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:001 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h20:896| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:001 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h20:902| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:001 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h20:907| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:001 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h20:912| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:001 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h20:917| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:002 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h20:922| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:002 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h20:927| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:002 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h20:935| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:002 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h20:955| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:002 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h20:961| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:002 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h20:966| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:002 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h20:973| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:002 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h20:978| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:002 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h20:979| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:003 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_BUR">(Set|Get) The COD_BUR as String.</param>
            ''' <param name="TRI_NUM">(Set|Get) The TRI_NUM as Integer.</param>
            ''' <param name="NOM_BUR">(Set|Get) The NOM_BUR as String.</param>
            ''' <param name="NUM_SOC_GEFI">(Set|Get) The NUM_SOC_GEFI as Integer.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_BUR As String,
ByVal TRI_NUM As Integer,
ByVal NOM_BUR As String,
ByVal NUM_SOC_GEFI As Integer)
                With Me
                    Clear()
                    Reset()
                    .COD_BUR = COD_BUR
                    .TRI_NUM = TRI_NUM
                    .NOM_BUR = NOM_BUR
                    .NUM_SOC_GEFI = NUM_SOC_GEFI
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h20:075| <08.00.00> <Class> <> |.MDT_CATEGORIE|Class|{30} |Production Cost : 31.9|Selling Price : 79.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_CATEGORIE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h20:075
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{3}||0.8| |2.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{3}||0.5| |1.5
        '''    |12| |Parameter  |{8}||0.5| |4
        '''    |Production Cost             |31.9
        '''    |Selling Price without VAT   |79.75
        '''    |Total TVA                   |6.14
        '''    |Grand Total                 |85.89
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:007 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_CATEGORIE
#Region "<1> [Property]{3}"
#Region "[On] |2019/07/16 23h20:075| <01.00.00> <Property> <Columns> |.COD_CAT()|String|"' (Set|Get) The COD_CAT as String.
            Private _COD_CAT As String
            '''    <Summary>
            '''     (Set|Get) The COD_CAT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:008 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_CAT as String.")>
            Public Property COD_CAT() As String
                Get
                    Return _COD_CAT
                End Get
                Set(ByVal Value As String)
                    _COD_CAT = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_CAT as String.

#Region "[On] |2019/07/16 23h20:081| <01.00.01> <Property> <Columns> |.TRI_NUM()|Integer|"' (Set|Get) The TRI_NUM as Integer.
            Private _TRI_NUM As Integer
            '''    <Summary>
            '''     (Set|Get) The TRI_NUM as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:008 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TRI_NUM as Integer.")>
            Public Property TRI_NUM() As Integer
                Get
                    Return _TRI_NUM
                End Get
                Set(ByVal Value As Integer)
                    _TRI_NUM = Value
                End Set
            End Property
#End Region '(Set|Get) The TRI_NUM as Integer.

#Region "[On] |2019/07/16 23h20:086| <01.00.02> <Property> <Columns> |.NOM_CAT()|String|"' (Set|Get) The NOM_CAT as String.
            Private _NOM_CAT As String
            '''    <Summary>
            '''     (Set|Get) The NOM_CAT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:008 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_CAT as String.")>
            Public Property NOM_CAT() As String
                Get
                    Return _NOM_CAT
                End Get
                Set(ByVal Value As String)
                    _NOM_CAT = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_CAT as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h20:090| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{2}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:008 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_CAT as String.</summary>
                [COD_CAT] = 0
                ''' <summary>(Set|Get) The TRI_NUM as Integer.</summary>
                [TRI_NUM] = 1
                ''' <summary>(Set|Get) The NOM_CAT as String.</summary>
                [NOM_CAT] = 2
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h20:096| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:008 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_CAT = Nothing
                    .TRI_NUM = 0
                    .NOM_CAT = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h20:101| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:008 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_CATEGORIE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_CATEGORIE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_CATEGORIE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h20:105| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:009 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_CATEGORIE] (
`COD_CAT`, 
`TRI_NUM`, 
`NOM_CAT`) Values (@0, @1, @2)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_CAT)
                    Cmd.Parameters.AddWithValue("@1", Me.TRI_NUM)
                    Cmd.Parameters.AddWithValue("@2", Me.NOM_CAT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h20:109| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:009 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_CATEGORIE] SET TRI_NUM = @TRI_NUM, NOM_CAT = @NOM_CAT WHERE COD_CAT = @COD_CAT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@TRI_NUM", TRI_NUM)
                    Cmd.Parameters.AddWithValue("@NOM_CAT", NOM_CAT)
                    Cmd.Parameters.AddWithValue("@COD_CAT", COD_CAT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h20:128| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:009 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_CATEGORIE] WHERE COD_CAT =@COD_CAT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_CAT", COD_CAT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h20:132| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:009 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h20:137| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:009 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h20:143| <05.00.02> <Function> <> |.List()|List(Of MDT_CATEGORIE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:009 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_CATEGORIE)
                Dim Result As New List(Of MDT_CATEGORIE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_CATEGORIE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
      IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h20:148| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_CATEGORIE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:009 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_CATEGORIE)
                Dim Result As New List(Of MDT_CATEGORIE)
                Dim C As New MDT_CATEGORIE
                For Each Element As MDT_CATEGORIE In C.List
                    If Element.COD_CAT.ToLower() = Search.ToLower() Or Element.NOM_CAT.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h20:153| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_CATEGORIE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:009 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_CATEGORIE)
                Dim Result As New List(Of MDT_CATEGORIE)
                Dim C As New MDT_CATEGORIE
                For Each Element As MDT_CATEGORIE In C.List
                    If Val(Element.COD_CAT) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h20:158| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:010 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_CAT
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h20:163| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:010 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h20:168| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:010 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h20:173| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:010 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h20:178| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:010 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h20:183| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:010 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h20:189| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:012 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h20:202| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:012 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h20:223| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:012 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h20:227| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:012 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h20:232| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:012 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h20:237| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:012 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h20:243| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:013 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h20:248| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:013 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h20:254| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:013 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h20:255| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:013 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_CAT">(Set|Get) The COD_CAT as String.</param>
            ''' <param name="TRI_NUM">(Set|Get) The TRI_NUM as Integer.</param>
            ''' <param name="NOM_CAT">(Set|Get) The NOM_CAT as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_CAT As String,
ByVal TRI_NUM As Integer,
ByVal NOM_CAT As String)
                With Me
                    Clear()
                    Reset()
                    .COD_CAT = COD_CAT
                    .TRI_NUM = TRI_NUM
                    .NOM_CAT = NOM_CAT
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h20:359| <08.00.00> <Class> <> |.MDT_CLIENT|Class|{41} |Production Cost : 51.7|Selling Price : 129.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_CLIENT
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h20:359
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{14}||0.8| |11.2
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{14}||0.5| |7
        '''    |12| |Parameter  |{19}||0.5| |9.5
        '''    |Production Cost             |51.7
        '''    |Selling Price without VAT   |129.25
        '''    |Total TVA                   |9.95
        '''    |Grand Total                 |139.2
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:016 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_CLIENT
#Region "<1> [Property]{14}"
#Region "[On] |2019/07/16 23h20:360| <01.00.00> <Property> <Columns> |.NUM_CLI()|String|"' (Set|Get) The NUM_CLI as String.
            Private _NUM_CLI As String
            '''    <Summary>
            '''     (Set|Get) The NUM_CLI as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:017 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_CLI as String.")>
            Public Property NUM_CLI() As String
                Get
                    Return _NUM_CLI
                End Get
                Set(ByVal Value As String)
                    _NUM_CLI = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_CLI as String.

#Region "[On] |2019/07/16 23h20:365| <01.00.01> <Property> <Columns> |.TRI_NUM()|Integer|"' (Set|Get) The TRI_NUM as Integer.
            Private _TRI_NUM As Integer
            '''    <Summary>
            '''     (Set|Get) The TRI_NUM as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:017 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TRI_NUM as Integer.")>
            Public Property TRI_NUM() As Integer
                Get
                    Return _TRI_NUM
                End Get
                Set(ByVal Value As Integer)
                    _TRI_NUM = Value
                End Set
            End Property
#End Region '(Set|Get) The TRI_NUM as Integer.

#Region "[On] |2019/07/16 23h20:369| <01.00.02> <Property> <Columns> |.NOM_1ER()|String|"' (Set|Get) The NOM_1ER as String.
            Private _NOM_1ER As String
            '''    <Summary>
            '''     (Set|Get) The NOM_1ER as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:018 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_1ER as String.")>
            Public Property NOM_1ER() As String
                Get
                    Return _NOM_1ER
                End Get
                Set(ByVal Value As String)
                    _NOM_1ER = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_1ER as String.

#Region "[On] |2019/07/16 23h20:374| <01.00.03> <Property> <Columns> |.NOM_2EM()|String|"' (Set|Get) The NOM_2EM as String.
            Private _NOM_2EM As String
            '''    <Summary>
            '''     (Set|Get) The NOM_2EM as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:018 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_2EM as String.")>
            Public Property NOM_2EM() As String
                Get
                    Return _NOM_2EM
                End Get
                Set(ByVal Value As String)
                    _NOM_2EM = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_2EM as String.

#Region "[On] |2019/07/16 23h20:379| <01.00.04> <Property> <Columns> |.RUE_1ER()|String|"' (Set|Get) The RUE_1ER as String.
            Private _RUE_1ER As String
            '''    <Summary>
            '''     (Set|Get) The RUE_1ER as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:018 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RUE_1ER as String.")>
            Public Property RUE_1ER() As String
                Get
                    Return _RUE_1ER
                End Get
                Set(ByVal Value As String)
                    _RUE_1ER = Value
                End Set
            End Property
#End Region '(Set|Get) The RUE_1ER as String.

#Region "[On] |2019/07/16 23h20:383| <01.00.05> <Property> <Columns> |.RUE_2EM()|String|"' (Set|Get) The RUE_2EM as String.
            Private _RUE_2EM As String
            '''    <Summary>
            '''     (Set|Get) The RUE_2EM as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:019 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RUE_2EM as String.")>
            Public Property RUE_2EM() As String
                Get
                    Return _RUE_2EM
                End Get
                Set(ByVal Value As String)
                    _RUE_2EM = Value
                End Set
            End Property
#End Region '(Set|Get) The RUE_2EM as String.

#Region "[On] |2019/07/16 23h20:388| <01.00.06> <Property> <Columns> |.NPA_LOC()|String|"' (Set|Get) The NPA_LOC as String.
            Private _NPA_LOC As String
            '''    <Summary>
            '''     (Set|Get) The NPA_LOC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:019 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NPA_LOC as String.")>
            Public Property NPA_LOC() As String
                Get
                    Return _NPA_LOC
                End Get
                Set(ByVal Value As String)
                    _NPA_LOC = Value
                End Set
            End Property
#End Region '(Set|Get) The NPA_LOC as String.

#Region "[On] |2019/07/16 23h20:393| <01.00.07> <Property> <Columns> |.LOC_GEO()|String|"' (Set|Get) The LOC_GEO as String.
            Private _LOC_GEO As String
            '''    <Summary>
            '''     (Set|Get) The LOC_GEO as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:019 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LOC_GEO as String.")>
            Public Property LOC_GEO() As String
                Get
                    Return _LOC_GEO
                End Get
                Set(ByVal Value As String)
                    _LOC_GEO = Value
                End Set
            End Property
#End Region '(Set|Get) The LOC_GEO as String.

#Region "[On] |2019/07/16 23h20:399| <01.00.08> <Property> <Columns> |.NUM_TEL()|String|"' (Set|Get) The NUM_TEL as String.
            Private _NUM_TEL As String
            '''    <Summary>
            '''     (Set|Get) The NUM_TEL as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:019 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_TEL as String.")>
            Public Property NUM_TEL() As String
                Get
                    Return _NUM_TEL
                End Get
                Set(ByVal Value As String)
                    _NUM_TEL = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_TEL as String.

#Region "[On] |2019/07/16 23h20:423| <01.00.09> <Property> <Columns> |.NUM_FAX()|String|"' (Set|Get) The NUM_FAX as String.
            Private _NUM_FAX As String
            '''    <Summary>
            '''     (Set|Get) The NUM_FAX as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:022 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FAX as String.")>
            Public Property NUM_FAX() As String
                Get
                    Return _NUM_FAX
                End Get
                Set(ByVal Value As String)
                    _NUM_FAX = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FAX as String.

#Region "[On] |2019/07/16 23h20:428| <01.00.10> <Property> <Columns> |.RMQ()|String|"' (Set|Get) The RMQ as String.
            Private _RMQ As String
            '''    <Summary>
            '''     (Set|Get) The RMQ as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:022 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RMQ as String.")>
            Public Property RMQ() As String
                Get
                    Return _RMQ
                End Get
                Set(ByVal Value As String)
                    _RMQ = Value
                End Set
            End Property
#End Region '(Set|Get) The RMQ as String.

#Region "[On] |2019/07/16 23h20:435| <01.00.11> <Property> <Columns> |.ADR_EML()|String|"' (Set|Get) The ADR_EML as String.
            Private _ADR_EML As String
            '''    <Summary>
            '''     (Set|Get) The ADR_EML as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:023 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ADR_EML as String.")>
            Public Property ADR_EML() As String
                Get
                    Return _ADR_EML
                End Get
                Set(ByVal Value As String)
                    _ADR_EML = Value
                End Set
            End Property
#End Region '(Set|Get) The ADR_EML as String.

#Region "[On] |2019/07/16 23h20:440| <01.00.12> <Property> <Columns> |.ADR_URL()|String|"' (Set|Get) The ADR_URL as String.
            Private _ADR_URL As String
            '''    <Summary>
            '''     (Set|Get) The ADR_URL as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:023 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ADR_URL as String.")>
            Public Property ADR_URL() As String
                Get
                    Return _ADR_URL
                End Get
                Set(ByVal Value As String)
                    _ADR_URL = Value
                End Set
            End Property
#End Region '(Set|Get) The ADR_URL as String.

#Region "[On] |2019/07/16 23h20:447| <01.00.13> <Property> <Columns> |.PCOMPTA()|Integer|"' (Set|Get) The PCOMPTA as Integer.
            Private _PCOMPTA As Integer
            '''    <Summary>
            '''     (Set|Get) The PCOMPTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:023 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PCOMPTA as Integer.")>
            Public Property PCOMPTA() As Integer
                Get
                    Return _PCOMPTA
                End Get
                Set(ByVal Value As Integer)
                    _PCOMPTA = Value
                End Set
            End Property
#End Region '(Set|Get) The PCOMPTA as Integer.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h20:453| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{13}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:023 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_CLI as String.</summary>
                [NUM_CLI] = 0
                ''' <summary>(Set|Get) The TRI_NUM as Integer.</summary>
                [TRI_NUM] = 1
                ''' <summary>(Set|Get) The NOM_1ER as String.</summary>
                [NOM_1ER] = 2
                ''' <summary>(Set|Get) The NOM_2EM as String.</summary>
                [NOM_2EM] = 3
                ''' <summary>(Set|Get) The RUE_1ER as String.</summary>
                [RUE_1ER] = 4
                ''' <summary>(Set|Get) The RUE_2EM as String.</summary>
                [RUE_2EM] = 5
                ''' <summary>(Set|Get) The NPA_LOC as String.</summary>
                [NPA_LOC] = 6
                ''' <summary>(Set|Get) The LOC_GEO as String.</summary>
                [LOC_GEO] = 7
                ''' <summary>(Set|Get) The NUM_TEL as String.</summary>
                [NUM_TEL] = 8
                ''' <summary>(Set|Get) The NUM_FAX as String.</summary>
                [NUM_FAX] = 9
                ''' <summary>(Set|Get) The RMQ as String.</summary>
                [RMQ] = 10
                ''' <summary>(Set|Get) The ADR_EML as String.</summary>
                [ADR_EML] = 11
                ''' <summary>(Set|Get) The ADR_URL as String.</summary>
                [ADR_URL] = 12
                ''' <summary>(Set|Get) The PCOMPTA as Integer.</summary>
                [PCOMPTA] = 13
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h20:459| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:024 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_CLI = Nothing
                    .TRI_NUM = 0
                    .NOM_1ER = Nothing
                    .NOM_2EM = Nothing
                    .RUE_1ER = Nothing
                    .RUE_2EM = Nothing
                    .NPA_LOC = Nothing
                    .LOC_GEO = Nothing
                    .NUM_TEL = Nothing
                    .NUM_FAX = Nothing
                    .RMQ = Nothing
                    .ADR_EML = Nothing
                    .ADR_URL = Nothing
                    .PCOMPTA = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h20:464| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:024 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_CLIENT"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_CLIENT"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_CLIENT"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h20:469| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:024 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_CLIENT] (
`NUM_CLI`, 
`TRI_NUM`, 
`NOM_1ER`, 
`NOM_2EM`, 
`RUE_1ER`, 
`RUE_2EM`, 
`NPA_LOC`, 
`LOC_GEO`, 
`NUM_TEL`, 
`NUM_FAX`, 
`RMQ`, 
`ADR_EML`, 
`ADR_URL`, 
`PCOMPTA`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_CLI)
                    Cmd.Parameters.AddWithValue("@1", Me.TRI_NUM)
                    Cmd.Parameters.AddWithValue("@2", Me.NOM_1ER)
                    Cmd.Parameters.AddWithValue("@3", Me.NOM_2EM)
                    Cmd.Parameters.AddWithValue("@4", Me.RUE_1ER)
                    Cmd.Parameters.AddWithValue("@5", Me.RUE_2EM)
                    Cmd.Parameters.AddWithValue("@6", Me.NPA_LOC)
                    Cmd.Parameters.AddWithValue("@7", Me.LOC_GEO)
                    Cmd.Parameters.AddWithValue("@8", Me.NUM_TEL)
                    Cmd.Parameters.AddWithValue("@9", Me.NUM_FAX)
                    Cmd.Parameters.AddWithValue("@10", Me.RMQ)
                    Cmd.Parameters.AddWithValue("@11", Me.ADR_EML)
                    Cmd.Parameters.AddWithValue("@12", Me.ADR_URL)
                    Cmd.Parameters.AddWithValue("@13", Me.PCOMPTA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h20:474| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:024 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_CLIENT] SET TRI_NUM = @TRI_NUM, NOM_1ER = @NOM_1ER, NOM_2EM = @NOM_2EM, RUE_1ER = @RUE_1ER, RUE_2EM = @RUE_2EM, NPA_LOC = @NPA_LOC, LOC_GEO = @LOC_GEO, NUM_TEL = @NUM_TEL, NUM_FAX = @NUM_FAX, RMQ = @RMQ, ADR_EML = @ADR_EML, ADR_URL = @ADR_URL, PCOMPTA = @PCOMPTA WHERE NUM_CLI = @NUM_CLI"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@TRI_NUM", TRI_NUM)
                    Cmd.Parameters.AddWithValue("@NOM_1ER", NOM_1ER)
                    Cmd.Parameters.AddWithValue("@NOM_2EM", NOM_2EM)
                    Cmd.Parameters.AddWithValue("@RUE_1ER", RUE_1ER)
                    Cmd.Parameters.AddWithValue("@RUE_2EM", RUE_2EM)
                    Cmd.Parameters.AddWithValue("@NPA_LOC", NPA_LOC)
                    Cmd.Parameters.AddWithValue("@LOC_GEO", LOC_GEO)
                    Cmd.Parameters.AddWithValue("@NUM_TEL", NUM_TEL)
                    Cmd.Parameters.AddWithValue("@NUM_FAX", NUM_FAX)
                    Cmd.Parameters.AddWithValue("@RMQ", RMQ)
                    Cmd.Parameters.AddWithValue("@ADR_EML", ADR_EML)
                    Cmd.Parameters.AddWithValue("@ADR_URL", ADR_URL)
                    Cmd.Parameters.AddWithValue("@PCOMPTA", PCOMPTA)
                    Cmd.Parameters.AddWithValue("@NUM_CLI", NUM_CLI)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h20:480| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:025 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_CLIENT] WHERE NUM_CLI =@NUM_CLI"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_CLI", NUM_CLI)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h20:484| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:025 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h20:491| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:025 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h20:497| <05.00.02> <Function> <> |.List()|List(Of MDT_CLIENT)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:025 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_CLIENT)
                Dim Result As New List(Of MDT_CLIENT)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_CLIENT(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), "", Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), "", Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), "", Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), "", Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), "", Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), "", Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), "", Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), "", Row.Item(12)),
      IIf(IsDBNull(Row.Item(13)), 0, Row.Item(13)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h20:519| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_CLIENT)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:025 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_CLIENT)
                Dim Result As New List(Of MDT_CLIENT)
                Dim C As New MDT_CLIENT
                For Each Element As MDT_CLIENT In C.List
                    If Element.NUM_CLI.ToLower() = Search.ToLower() Or Element.NOM_1ER.ToLower() = Search.ToLower() Or Element.NOM_2EM.ToLower() = Search.ToLower() Or Element.RUE_1ER.ToLower() = Search.ToLower() Or Element.RUE_2EM.ToLower() = Search.ToLower() Or Element.NPA_LOC.ToLower() = Search.ToLower() Or Element.LOC_GEO.ToLower() = Search.ToLower() Or Element.NUM_TEL.ToLower() = Search.ToLower() Or Element.NUM_FAX.ToLower() = Search.ToLower() Or Element.RMQ.ToLower() = Search.ToLower() Or Element.ADR_EML.ToLower() = Search.ToLower() Or Element.ADR_URL.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h20:527| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_CLIENT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:026 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_CLIENT)
                Dim Result As New List(Of MDT_CLIENT)
                Dim C As New MDT_CLIENT
                For Each Element As MDT_CLIENT In C.List
                    If Val(Element.TRI_NUM) = Search Or Val(Element.PCOMPTA) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h20:533| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:026 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_CLI
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h20:539| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:026 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h20:544| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:026 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h20:550| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:027 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h20:556| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:027 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h20:561| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:027 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h20:567| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:027 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h20:572| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:027 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h20:577| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:028 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h20:580| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:028 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h20:586| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:028 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h20:612| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:028 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h20:619| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:028 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h20:624| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:028 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h20:629| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:029 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h20:633| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:029 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_CLI">(Set|Get) The NUM_CLI as String.</param>
            ''' <param name="TRI_NUM">(Set|Get) The TRI_NUM as Integer.</param>
            ''' <param name="NOM_1ER">(Set|Get) The NOM_1ER as String.</param>
            ''' <param name="NOM_2EM">(Set|Get) The NOM_2EM as String.</param>
            ''' <param name="RUE_1ER">(Set|Get) The RUE_1ER as String.</param>
            ''' <param name="RUE_2EM">(Set|Get) The RUE_2EM as String.</param>
            ''' <param name="NPA_LOC">(Set|Get) The NPA_LOC as String.</param>
            ''' <param name="LOC_GEO">(Set|Get) The LOC_GEO as String.</param>
            ''' <param name="NUM_TEL">(Set|Get) The NUM_TEL as String.</param>
            ''' <param name="NUM_FAX">(Set|Get) The NUM_FAX as String.</param>
            ''' <param name="RMQ">(Set|Get) The RMQ as String.</param>
            ''' <param name="ADR_EML">(Set|Get) The ADR_EML as String.</param>
            ''' <param name="ADR_URL">(Set|Get) The ADR_URL as String.</param>
            ''' <param name="PCOMPTA">(Set|Get) The PCOMPTA as Integer.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_CLI As String,
ByVal TRI_NUM As Integer,
ByVal NOM_1ER As String,
ByVal NOM_2EM As String,
ByVal RUE_1ER As String,
ByVal RUE_2EM As String,
ByVal NPA_LOC As String,
ByVal LOC_GEO As String,
ByVal NUM_TEL As String,
ByVal NUM_FAX As String,
ByVal RMQ As String,
ByVal ADR_EML As String,
ByVal ADR_URL As String,
ByVal PCOMPTA As Integer)
                With Me
                    Clear()
                    Reset()
                    .NUM_CLI = NUM_CLI
                    .TRI_NUM = TRI_NUM
                    .NOM_1ER = NOM_1ER
                    .NOM_2EM = NOM_2EM
                    .RUE_1ER = RUE_1ER
                    .RUE_2EM = RUE_2EM
                    .NPA_LOC = NPA_LOC
                    .LOC_GEO = LOC_GEO
                    .NUM_TEL = NUM_TEL
                    .NUM_FAX = NUM_FAX
                    .RMQ = RMQ
                    .ADR_EML = ADR_EML
                    .ADR_URL = ADR_URL
                    .PCOMPTA = PCOMPTA
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h20:746| <08.00.00> <Class> <> |.MDT_CODE|Class|{32} |Production Cost : 35.5|Selling Price : 88.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_CODE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h20:746
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{5}||0.8| |4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{5}||0.5| |2.5
        '''    |12| |Parameter  |{10}||0.5| |5
        '''    |Production Cost             |35.5
        '''    |Selling Price without VAT   |88.75
        '''    |Total TVA                   |6.83
        '''    |Grand Total                 |95.58
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:038 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_CODE
#Region "<1> [Property]{5}"
#Region "[On] |2019/07/16 23h20:746| <01.00.00> <Property> <Columns> |.REF_USR()|String|"' (Set|Get) The REF_USR as String.
            Private _REF_USR As String
            '''    <Summary>
            '''     (Set|Get) The REF_USR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:038 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_USR as String.")>
            Public Property REF_USR() As String
                Get
                    Return _REF_USR
                End Get
                Set(ByVal Value As String)
                    _REF_USR = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_USR as String.

#Region "[On] |2019/07/16 23h20:768| <01.00.01> <Property> <Columns> |.COD_1ER()|String|"' (Set|Get) The COD_1ER as String.
            Private _COD_1ER As String
            '''    <Summary>
            '''     (Set|Get) The COD_1ER as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:038 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_1ER as String.")>
            Public Property COD_1ER() As String
                Get
                    Return _COD_1ER
                End Get
                Set(ByVal Value As String)
                    _COD_1ER = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_1ER as String.

#Region "[On] |2019/07/16 23h20:773| <01.00.02> <Property> <Columns> |.COD_2EM()|String|"' (Set|Get) The COD_2EM as String.
            Private _COD_2EM As String
            '''    <Summary>
            '''     (Set|Get) The COD_2EM as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:039 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_2EM as String.")>
            Public Property COD_2EM() As String
                Get
                    Return _COD_2EM
                End Get
                Set(ByVal Value As String)
                    _COD_2EM = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_2EM as String.

#Region "[On] |2019/07/16 23h20:778| <01.00.03> <Property> <Columns> |.COD_VAL()|String|"' (Set|Get) The COD_VAL as String.
            Private _COD_VAL As String
            '''    <Summary>
            '''     (Set|Get) The COD_VAL as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:039 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_VAL as String.")>
            Public Property COD_VAL() As String
                Get
                    Return _COD_VAL
                End Get
                Set(ByVal Value As String)
                    _COD_VAL = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_VAL as String.

#Region "[On] |2019/07/16 23h20:784| <01.00.04> <Property> <Columns> |.RMQ()|String|"' (Set|Get) The RMQ as String.
            Private _RMQ As String
            '''    <Summary>
            '''     (Set|Get) The RMQ as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:039 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RMQ as String.")>
            Public Property RMQ() As String
                Get
                    Return _RMQ
                End Get
                Set(ByVal Value As String)
                    _RMQ = Value
                End Set
            End Property
#End Region '(Set|Get) The RMQ as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h20:789| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{4}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:039 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The REF_USR as String.</summary>
                [REF_USR] = 0
                ''' <summary>(Set|Get) The COD_1ER as String.</summary>
                [COD_1ER] = 1
                ''' <summary>(Set|Get) The COD_2EM as String.</summary>
                [COD_2EM] = 2
                ''' <summary>(Set|Get) The COD_VAL as String.</summary>
                [COD_VAL] = 3
                ''' <summary>(Set|Get) The RMQ as String.</summary>
                [RMQ] = 4
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h20:794| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:039 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .REF_USR = Nothing
                    .COD_1ER = Nothing
                    .COD_2EM = Nothing
                    .COD_VAL = Nothing
                    .RMQ = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h20:798| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:040 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_CODE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_CODE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_CODE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h20:803| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:040 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_CODE] (
`REF_USR`, 
`COD_1ER`, 
`COD_2EM`, 
`COD_VAL`, 
`RMQ`) Values (@0, @1, @2, @3, @4)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.REF_USR)
                    Cmd.Parameters.AddWithValue("@1", Me.COD_1ER)
                    Cmd.Parameters.AddWithValue("@2", Me.COD_2EM)
                    Cmd.Parameters.AddWithValue("@3", Me.COD_VAL)
                    Cmd.Parameters.AddWithValue("@4", Me.RMQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h20:807| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:040 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_CODE] SET COD_1ER = @COD_1ER, COD_2EM = @COD_2EM, COD_VAL = @COD_VAL, RMQ = @RMQ WHERE REF_USR = @REF_USR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_1ER", COD_1ER)
                    Cmd.Parameters.AddWithValue("@COD_2EM", COD_2EM)
                    Cmd.Parameters.AddWithValue("@COD_VAL", COD_VAL)
                    Cmd.Parameters.AddWithValue("@RMQ", RMQ)
                    Cmd.Parameters.AddWithValue("@REF_USR", REF_USR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h20:830| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:040 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_CODE] WHERE REF_USR =@REF_USR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@REF_USR", REF_USR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h20:835| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:040 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h20:841| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:040 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h20:848| <05.00.02> <Function> <> |.List()|List(Of MDT_CODE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:042 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_CODE)
                Dim Result As New List(Of MDT_CODE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_CODE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
      IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h20:852| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_CODE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:042 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_CODE)
                Dim Result As New List(Of MDT_CODE)
                Dim C As New MDT_CODE
                For Each Element As MDT_CODE In C.List
                    If Element.REF_USR.ToLower() = Search.ToLower() Or Element.COD_1ER.ToLower() = Search.ToLower() Or Element.COD_2EM.ToLower() = Search.ToLower() Or Element.COD_VAL.ToLower() = Search.ToLower() Or Element.RMQ.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h20:857| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_CODE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:042 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_CODE)
                Dim Result As New List(Of MDT_CODE)
                Dim C As New MDT_CODE
                For Each Element As MDT_CODE In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h20:862| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:042 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.REF_USR
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h20:867| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:042 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h20:872| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:042 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h20:876| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:043 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h20:883| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:043 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h20:888| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:043 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h20:893| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:043 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h20:898| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:043 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h20:923| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:043 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h20:926| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:043 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h20:932| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:044 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h20:940| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:044 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h20:945| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:044 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h20:950| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:044 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h20:955| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:044 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h20:957| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:044 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="REF_USR">(Set|Get) The REF_USR as String.</param>
            ''' <param name="COD_1ER">(Set|Get) The COD_1ER as String.</param>
            ''' <param name="COD_2EM">(Set|Get) The COD_2EM as String.</param>
            ''' <param name="COD_VAL">(Set|Get) The COD_VAL as String.</param>
            ''' <param name="RMQ">(Set|Get) The RMQ as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal REF_USR As String,
ByVal COD_1ER As String,
ByVal COD_2EM As String,
ByVal COD_VAL As String,
ByVal RMQ As String)
                With Me
                    Clear()
                    Reset()
                    .REF_USR = REF_USR
                    .COD_1ER = COD_1ER
                    .COD_2EM = COD_2EM
                    .COD_VAL = COD_VAL
                    .RMQ = RMQ
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h20:051| <08.00.00> <Class> <> |.MDT_COLLABO_ANNEE|Class|{35} |Production Cost : 40.9|Selling Price : 102.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_COLLABO_ANNEE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h20:051
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{8}||0.8| |6.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{8}||0.5| |4
        '''    |12| |Parameter  |{13}||0.5| |6.5
        '''    |Production Cost             |40.9
        '''    |Selling Price without VAT   |102.25
        '''    |Total TVA                   |7.87
        '''    |Grand Total                 |110.12
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:051 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_COLLABO_ANNEE
#Region "<1> [Property]{8}"
#Region "[On] |2019/07/16 23h20:052| <01.00.00> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:052 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#Region "[On] |2019/07/16 23h20:064| <01.00.01> <Property> <Columns> |.YER()|Double|"' (Set|Get) The YER as Double.
            Private _YER As Double
            '''    <Summary>
            '''     (Set|Get) The YER as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:052 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The YER as Double.")>
            Public Property YER() As Double
                Get
                    Return _YER
                End Get
                Set(ByVal Value As Double)
                    _YER = Value
                End Set
            End Property
#End Region '(Set|Get) The YER as Double.

#Region "[On] |2019/07/16 23h20:069| <01.00.02> <Property> <Columns> |.HEU_VAC()|Double|"' (Set|Get) The HEU_VAC as Double.
            Private _HEU_VAC As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_VAC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:053 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_VAC as Double.")>
            Public Property HEU_VAC() As Double
                Get
                    Return _HEU_VAC
                End Get
                Set(ByVal Value As Double)
                    _HEU_VAC = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_VAC as Double.

#Region "[On] |2019/07/16 23h20:073| <01.00.03> <Property> <Columns> |.RPT_VAC()|Double|"' (Set|Get) The RPT_VAC as Double.
            Private _RPT_VAC As Double
            '''    <Summary>
            '''     (Set|Get) The RPT_VAC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:053 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RPT_VAC as Double.")>
            Public Property RPT_VAC() As Double
                Get
                    Return _RPT_VAC
                End Get
                Set(ByVal Value As Double)
                    _RPT_VAC = Value
                End Set
            End Property
#End Region '(Set|Get) The RPT_VAC as Double.

#Region "[On] |2019/07/16 23h20:077| <01.00.04> <Property> <Columns> |.RPT_SPL()|Double|"' (Set|Get) The RPT_SPL as Double.
            Private _RPT_SPL As Double
            '''    <Summary>
            '''     (Set|Get) The RPT_SPL as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:053 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RPT_SPL as Double.")>
            Public Property RPT_SPL() As Double
                Get
                    Return _RPT_SPL
                End Get
                Set(ByVal Value As Double)
                    _RPT_SPL = Value
                End Set
            End Property
#End Region '(Set|Get) The RPT_SPL as Double.

#Region "[On] |2019/07/16 23h20:083| <01.00.05> <Property> <Columns> |.HEU_CPN()|Double|"' (Set|Get) The HEU_CPN as Double.
            Private _HEU_CPN As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_CPN as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:053 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_CPN as Double.")>
            Public Property HEU_CPN() As Double
                Get
                    Return _HEU_CPN
                End Get
                Set(ByVal Value As Double)
                    _HEU_CPN = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_CPN as Double.

#Region "[On] |2019/07/16 23h20:088| <01.00.06> <Property> <Columns> |.RPT_CPN()|Double|"' (Set|Get) The RPT_CPN as Double.
            Private _RPT_CPN As Double
            '''    <Summary>
            '''     (Set|Get) The RPT_CPN as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RPT_CPN as Double.")>
            Public Property RPT_CPN() As Double
                Get
                    Return _RPT_CPN
                End Get
                Set(ByVal Value As Double)
                    _RPT_CPN = Value
                End Set
            End Property
#End Region '(Set|Get) The RPT_CPN as Double.

#Region "[On] |2019/07/16 23h20:092| <01.00.07> <Property> <Columns> |.OBJ_FAC()|Double|"' (Set|Get) The OBJ_FAC as Double.
            Private _OBJ_FAC As Double
            '''    <Summary>
            '''     (Set|Get) The OBJ_FAC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The OBJ_FAC as Double.")>
            Public Property OBJ_FAC() As Double
                Get
                    Return _OBJ_FAC
                End Get
                Set(ByVal Value As Double)
                    _OBJ_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The OBJ_FAC as Double.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h20:098| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{7}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 0
                ''' <summary>(Set|Get) The YER as Double.</summary>
                [YER] = 1
                ''' <summary>(Set|Get) The HEU_VAC as Double.</summary>
                [HEU_VAC] = 2
                ''' <summary>(Set|Get) The RPT_VAC as Double.</summary>
                [RPT_VAC] = 3
                ''' <summary>(Set|Get) The RPT_SPL as Double.</summary>
                [RPT_SPL] = 4
                ''' <summary>(Set|Get) The HEU_CPN as Double.</summary>
                [HEU_CPN] = 5
                ''' <summary>(Set|Get) The RPT_CPN as Double.</summary>
                [RPT_CPN] = 6
                ''' <summary>(Set|Get) The OBJ_FAC as Double.</summary>
                [OBJ_FAC] = 7
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h20:103| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .REF_CLB = Nothing
                    .YER = 0
                    .HEU_VAC = 0
                    .RPT_VAC = 0
                    .RPT_SPL = 0
                    .HEU_CPN = 0
                    .RPT_CPN = 0
                    .OBJ_FAC = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h20:107| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_COLLABO_ANNEE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_COLLABO_ANNEE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_COLLABO_ANNEE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h20:112| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:055 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_COLLABO_ANNEE] (
`REF_CLB`, 
`YER`, 
`HEU_VAC`, 
`RPT_VAC`, 
`RPT_SPL`, 
`HEU_CPN`, 
`RPT_CPN`, 
`OBJ_FAC`) Values (@0, @1, @2, @3, @4, @5, @6, @7)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.REF_CLB)
                    Cmd.Parameters.AddWithValue("@1", Me.YER)
                    Cmd.Parameters.AddWithValue("@2", Me.HEU_VAC)
                    Cmd.Parameters.AddWithValue("@3", Me.RPT_VAC)
                    Cmd.Parameters.AddWithValue("@4", Me.RPT_SPL)
                    Cmd.Parameters.AddWithValue("@5", Me.HEU_CPN)
                    Cmd.Parameters.AddWithValue("@6", Me.RPT_CPN)
                    Cmd.Parameters.AddWithValue("@7", Me.OBJ_FAC)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h20:116| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:055 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_COLLABO_ANNEE] SET YER = @YER, HEU_VAC = @HEU_VAC, RPT_VAC = @RPT_VAC, RPT_SPL = @RPT_SPL, HEU_CPN = @HEU_CPN, RPT_CPN = @RPT_CPN, OBJ_FAC = @OBJ_FAC WHERE REF_CLB = @REF_CLB"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@YER", YER)
                    Cmd.Parameters.AddWithValue("@HEU_VAC", HEU_VAC)
                    Cmd.Parameters.AddWithValue("@RPT_VAC", RPT_VAC)
                    Cmd.Parameters.AddWithValue("@RPT_SPL", RPT_SPL)
                    Cmd.Parameters.AddWithValue("@HEU_CPN", HEU_CPN)
                    Cmd.Parameters.AddWithValue("@RPT_CPN", RPT_CPN)
                    Cmd.Parameters.AddWithValue("@OBJ_FAC", OBJ_FAC)
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h20:121| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:055 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_COLLABO_ANNEE] WHERE REF_CLB =@REF_CLB"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h20:126| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:055 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h20:132| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:055 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h20:144| <05.00.02> <Function> <> |.List()|List(Of MDT_COLLABO_ANNEE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:055 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_COLLABO_ANNEE)
                Dim Result As New List(Of MDT_COLLABO_ANNEE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_COLLABO_ANNEE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), 0, Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), 0, Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), 0, Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), 0, Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), 0, Row.Item(6)),
      IIf(IsDBNull(Row.Item(7)), 0, Row.Item(7)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h20:151| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_COLLABO_ANNEE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:055 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_COLLABO_ANNEE)
                Dim Result As New List(Of MDT_COLLABO_ANNEE)
                Dim C As New MDT_COLLABO_ANNEE
                For Each Element As MDT_COLLABO_ANNEE In C.List
                    If Element.REF_CLB.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h20:156| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_COLLABO_ANNEE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:055 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_COLLABO_ANNEE)
                Dim Result As New List(Of MDT_COLLABO_ANNEE)
                Dim C As New MDT_COLLABO_ANNEE
                For Each Element As MDT_COLLABO_ANNEE In C.List
                    If Val(Element.YER) = Search Or Val(Element.HEU_VAC) = Search Or Val(Element.RPT_VAC) = Search Or Val(Element.RPT_SPL) = Search Or Val(Element.HEU_CPN) = Search Or Val(Element.RPT_CPN) = Search Or Val(Element.OBJ_FAC) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h20:163| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:056 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.REF_CLB
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h20:169| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:056 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h20:174| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:056 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h20:179| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:056 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h20:184| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:056 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h20:189| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:056 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h20:194| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:056 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h20:199| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:056 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h20:204| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:056 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h20:207| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:057 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h20:225| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:057 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h20:231| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:057 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h20:238| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:057 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h20:243| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:057 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h20:248| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:057 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h20:249| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:058 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>
            ''' <param name="YER">(Set|Get) The YER as Double.</param>
            ''' <param name="HEU_VAC">(Set|Get) The HEU_VAC as Double.</param>
            ''' <param name="RPT_VAC">(Set|Get) The RPT_VAC as Double.</param>
            ''' <param name="RPT_SPL">(Set|Get) The RPT_SPL as Double.</param>
            ''' <param name="HEU_CPN">(Set|Get) The HEU_CPN as Double.</param>
            ''' <param name="RPT_CPN">(Set|Get) The RPT_CPN as Double.</param>
            ''' <param name="OBJ_FAC">(Set|Get) The OBJ_FAC as Double.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal REF_CLB As String,
ByVal YER As Double,
ByVal HEU_VAC As Double,
ByVal RPT_VAC As Double,
ByVal RPT_SPL As Double,
ByVal HEU_CPN As Double,
ByVal RPT_CPN As Double,
ByVal OBJ_FAC As Double)
                With Me
                    Clear()
                    Reset()
                    .REF_CLB = REF_CLB
                    .YER = YER
                    .HEU_VAC = HEU_VAC
                    .RPT_VAC = RPT_VAC
                    .RPT_SPL = RPT_SPL
                    .HEU_CPN = HEU_CPN
                    .RPT_CPN = RPT_CPN
                    .OBJ_FAC = OBJ_FAC
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:664| <08.00.00> <Class> <> |.MDT_COLLABO_SALAIRE|Class|{29} |Production Cost : 30.1|Selling Price : 75.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_COLLABO_SALAIRE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:664
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{2}||0.8| |1.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{2}||0.5| |1
        '''    |12| |Parameter  |{7}||0.5| |3.5
        '''    |Production Cost             |30.1
        '''    |Selling Price without VAT   |75.25
        '''    |Total TVA                   |5.79
        '''    |Grand Total                 |81.04
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:064 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_COLLABO_SALAIRE
#Region "<1> [Property]{2}"
#Region "[On] |2019/07/16 23h21:665| <01.00.00> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:065 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#Region "[On] |2019/07/16 23h21:671| <01.00.01> <Property> <Columns> |.NUM_SAL()|String|"' (Set|Get) The NUM_SAL as String.
            Private _NUM_SAL As String
            '''    <Summary>
            '''     (Set|Get) The NUM_SAL as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:065 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SAL as String.")>
            Public Property NUM_SAL() As String
                Get
                    Return _NUM_SAL
                End Get
                Set(ByVal Value As String)
                    _NUM_SAL = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SAL as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:676| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{1}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:065 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 0
                ''' <summary>(Set|Get) The NUM_SAL as String.</summary>
                [NUM_SAL] = 1
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:681| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:065 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .REF_CLB = Nothing
                    .NUM_SAL = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:685| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:065 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_COLLABO_SALAIRE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_COLLABO_SALAIRE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_COLLABO_SALAIRE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:690| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:065 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_COLLABO_SALAIRE] (
`REF_CLB`, 
`NUM_SAL`) Values (@0, @1)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.REF_CLB)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_SAL)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:694| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:065 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_COLLABO_SALAIRE] SET NUM_SAL = @NUM_SAL WHERE REF_CLB = @REF_CLB"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SAL", NUM_SAL)
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:700| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:066 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_COLLABO_SALAIRE] WHERE REF_CLB =@REF_CLB"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:704| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:066 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:721| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:066 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:728| <05.00.02> <Function> <> |.List()|List(Of MDT_COLLABO_SALAIRE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:066 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_COLLABO_SALAIRE)
                Dim Result As New List(Of MDT_COLLABO_SALAIRE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_COLLABO_SALAIRE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
      IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:735| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_COLLABO_SALAIRE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:066 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_COLLABO_SALAIRE)
                Dim Result As New List(Of MDT_COLLABO_SALAIRE)
                Dim C As New MDT_COLLABO_SALAIRE
                For Each Element As MDT_COLLABO_SALAIRE In C.List
                    If Element.REF_CLB.ToLower() = Search.ToLower() Or Element.NUM_SAL.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:743| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_COLLABO_SALAIRE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:066 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_COLLABO_SALAIRE)
                Dim Result As New List(Of MDT_COLLABO_SALAIRE)
                Dim C As New MDT_COLLABO_SALAIRE
                For Each Element As MDT_COLLABO_SALAIRE In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:751| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:067 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.REF_CLB
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:756| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:067 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:761| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:067 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:767| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:067 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:773| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:070 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:778| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:070 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:784| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:070 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:789| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:070 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:794| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:071 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:804| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:071 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:815| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:071 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:822| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:071 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:827| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:071 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:833| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:071 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:839| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:071 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:840| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:071 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>
            ''' <param name="NUM_SAL">(Set|Get) The NUM_SAL as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal REF_CLB As String,
ByVal NUM_SAL As String)
                With Me
                    Clear()
                    Reset()
                    .REF_CLB = REF_CLB
                    .NUM_SAL = NUM_SAL
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:940| <08.00.00> <Class> <> |.MDT_COLLABORATEUR|Class|{49} |Production Cost : 67.2|Selling Price : 168|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_COLLABORATEUR
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:940
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{20}||0.8| |16
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{9}||1.6| |14.4
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{20}||0.5| |10
        '''    |12| |Parameter  |{28}||0.5| |14
        '''    |Production Cost             |67.2
        '''    |Selling Price without VAT   |168
        '''    |Total TVA                   |12.94
        '''    |Grand Total                 |180.94
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:075 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_COLLABORATEUR
#Region "<1> [Property]{20}"
#Region "[On] |2019/07/16 23h21:941| <01.00.00> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:075 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#Region "[On] |2019/07/16 23h21:946| <01.00.01> <Property> <Columns> |.TRI_NUM()|Integer|"' (Set|Get) The TRI_NUM as Integer.
            Private _TRI_NUM As Integer
            '''    <Summary>
            '''     (Set|Get) The TRI_NUM as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:075 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TRI_NUM as Integer.")>
            Public Property TRI_NUM() As Integer
                Get
                    Return _TRI_NUM
                End Get
                Set(ByVal Value As Integer)
                    _TRI_NUM = Value
                End Set
            End Property
#End Region '(Set|Get) The TRI_NUM as Integer.

#Region "[On] |2019/07/16 23h21:951| <01.00.02> <Property> <Columns> |.NOM_PNM()|String|"' (Set|Get) The NOM_PNM as String.
            Private _NOM_PNM As String
            '''    <Summary>
            '''     (Set|Get) The NOM_PNM as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:075 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_PNM as String.")>
            Public Property NOM_PNM() As String
                Get
                    Return _NOM_PNM
                End Get
                Set(ByVal Value As String)
                    _NOM_PNM = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_PNM as String.

#Region "[On] |2019/07/16 23h21:957| <01.00.03> <Property> <Columns> |.NOM_EDT()|String|"' (Set|Get) The NOM_EDT as String.
            Private _NOM_EDT As String
            '''    <Summary>
            '''     (Set|Get) The NOM_EDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:075 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_EDT as String.")>
            Public Property NOM_EDT() As String
                Get
                    Return _NOM_EDT
                End Get
                Set(ByVal Value As String)
                    _NOM_EDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_EDT as String.

#Region "[On] |2019/07/16 23h21:961| <01.00.04> <Property> <Columns> |.TYP_CLB()|String|"' (Set|Get) The TYP_CLB as String.
            Private _TYP_CLB As String
            '''    <Summary>
            '''     (Set|Get) The TYP_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:076 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_CLB as String.")>
            Public Property TYP_CLB() As String
                Get
                    Return _TYP_CLB
                End Get
                Set(ByVal Value As String)
                    _TYP_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_CLB as String.

#Region "[On] |2019/07/16 23h21:966| <01.00.05> <Property> <Columns> |.COD_BUR()|String|"' (Set|Get) The COD_BUR as String.
            Private _COD_BUR As String
            '''    <Summary>
            '''     (Set|Get) The COD_BUR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:076 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_BUR as String.")>
            Public Property COD_BUR() As String
                Get
                    Return _COD_BUR
                End Get
                Set(ByVal Value As String)
                    _COD_BUR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_BUR as String.

#Region "[On] |2019/07/16 23h21:970| <01.00.06> <Property> <Columns> |.DAT_COM()|DateTime|"' (Set|Get) The DAT_COM as DateTime.
            Private _DAT_COM As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_COM as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:076 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_COM as DateTime.")>
            Public Property DAT_COM() As DateTime
                Get
                    Return _DAT_COM
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_COM = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_COM as DateTime.

#Region "[On] |2019/07/16 23h21:975| <01.00.07> <Property> <Columns> |.DAT_FIN()|DateTime|"' (Set|Get) The DAT_FIN as DateTime.
            Private _DAT_FIN As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_FIN as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:076 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_FIN as DateTime.")>
            Public Property DAT_FIN() As DateTime
                Get
                    Return _DAT_FIN
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_FIN = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_FIN as DateTime.

#Region "[On] |2019/07/16 23h21:985| <01.00.08> <Property> <Columns> |.STA_CLB()|String|"' (Set|Get) The STA_CLB as String.
            Private _STA_CLB As String
            '''    <Summary>
            '''     (Set|Get) The STA_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:077 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The STA_CLB as String.")>
            Public Property STA_CLB() As String
                Get
                    Return _STA_CLB
                End Get
                Set(ByVal Value As String)
                    _STA_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The STA_CLB as String.

#Region "[On] |2019/07/16 23h21:002| <01.00.09> <Property> <Columns> |.COD_HOR()|String|"' (Set|Get) The COD_HOR as String.
            Private _COD_HOR As String
            '''    <Summary>
            '''     (Set|Get) The COD_HOR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:077 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_HOR as String.")>
            Public Property COD_HOR() As String
                Get
                    Return _COD_HOR
                End Get
                Set(ByVal Value As String)
                    _COD_HOR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_HOR as String.

#Region "[On] |2019/07/16 23h21:007| <01.00.10> <Property> <Columns> |.RMB_FRI_YON()|Boolean|"' (Set|Get) The RMB_FRI_YON as Boolean.
            Private _RMB_FRI_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The RMB_FRI_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:078 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RMB_FRI_YON as Boolean.")>
            Public Property RMB_FRI_YON() As Boolean
                Get
                    Return _RMB_FRI_YON
                End Get
                Set(ByVal Value As Boolean)
                    _RMB_FRI_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The RMB_FRI_YON as Boolean.

#Region "[On] |2019/07/16 23h21:012| <01.00.11> <Property> <Columns> |.SAL_HEU_YON()|Boolean|"' (Set|Get) The SAL_HEU_YON as Boolean.
            Private _SAL_HEU_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The SAL_HEU_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:078 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The SAL_HEU_YON as Boolean.")>
            Public Property SAL_HEU_YON() As Boolean
                Get
                    Return _SAL_HEU_YON
                End Get
                Set(ByVal Value As Boolean)
                    _SAL_HEU_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The SAL_HEU_YON as Boolean.

#Region "[On] |2019/07/16 23h21:018| <01.00.12> <Property> <Columns> |.RMQ()|String|"' (Set|Get) The RMQ as String.
            Private _RMQ As String
            '''    <Summary>
            '''     (Set|Get) The RMQ as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:078 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RMQ as String.")>
            Public Property RMQ() As String
                Get
                    Return _RMQ
                End Get
                Set(ByVal Value As String)
                    _RMQ = Value
                End Set
            End Property
#End Region '(Set|Get) The RMQ as String.

#Region "[On] |2019/07/16 23h21:023| <01.00.13> <Property> <Columns> |.DAT_TER()|DateTime|"' (Set|Get) The DAT_TER as DateTime.
            Private _DAT_TER As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_TER as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:079 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_TER as DateTime.")>
            Public Property DAT_TER() As DateTime
                Get
                    Return _DAT_TER
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_TER = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_TER as DateTime.

#Region "[On] |2019/07/16 23h21:029| <01.00.14> <Property> <Columns> |.DAT_MIN()|DateTime|"' (Set|Get) The DAT_MIN as DateTime.
            Private _DAT_MIN As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_MIN as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:079 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_MIN as DateTime.")>
            Public Property DAT_MIN() As DateTime
                Get
                    Return _DAT_MIN
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_MIN = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_MIN as DateTime.

#Region "[On] |2019/07/16 23h21:034| <01.00.15> <Property> <Columns> |.TEL_INT()|String|"' (Set|Get) The TEL_INT as String.
            Private _TEL_INT As String
            '''    <Summary>
            '''     (Set|Get) The TEL_INT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:079 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TEL_INT as String.")>
            Public Property TEL_INT() As String
                Get
                    Return _TEL_INT
                End Get
                Set(ByVal Value As String)
                    _TEL_INT = Value
                End Set
            End Property
#End Region '(Set|Get) The TEL_INT as String.

#Region "[On] |2019/07/16 23h21:039| <01.00.16> <Property> <Columns> |.TEL_FAC_YON()|Boolean|"' (Set|Get) The TEL_FAC_YON as Boolean.
            Private _TEL_FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The TEL_FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:079 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TEL_FAC_YON as Boolean.")>
            Public Property TEL_FAC_YON() As Boolean
                Get
                    Return _TEL_FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _TEL_FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The TEL_FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h21:044| <01.00.17> <Property> <Columns> |.NUM_GSM()|String|"' (Set|Get) The NUM_GSM as String.
            Private _NUM_GSM As String
            '''    <Summary>
            '''     (Set|Get) The NUM_GSM as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:079 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_GSM as String.")>
            Public Property NUM_GSM() As String
                Get
                    Return _NUM_GSM
                End Get
                Set(ByVal Value As String)
                    _NUM_GSM = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_GSM as String.

#Region "[On] |2019/07/16 23h21:049| <01.00.18> <Property> <Columns> |.TEL_PRV()|String|"' (Set|Get) The TEL_PRV as String.
            Private _TEL_PRV As String
            '''    <Summary>
            '''     (Set|Get) The TEL_PRV as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:080 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TEL_PRV as String.")>
            Public Property TEL_PRV() As String
                Get
                    Return _TEL_PRV
                End Get
                Set(ByVal Value As String)
                    _TEL_PRV = Value
                End Set
            End Property
#End Region '(Set|Get) The TEL_PRV as String.

#Region "[On] |2019/07/16 23h21:055| <01.00.19> <Property> <Columns> |.GRP_CLB()|String|"' (Set|Get) The GRP_CLB as String.
            Private _GRP_CLB As String
            '''    <Summary>
            '''     (Set|Get) The GRP_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:080 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GRP_CLB as String.")>
            Public Property GRP_CLB() As String
                Get
                    Return _GRP_CLB
                End Get
                Set(ByVal Value As String)
                    _GRP_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The GRP_CLB as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:060| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{19}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:080 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 0
                ''' <summary>(Set|Get) The TRI_NUM as Integer.</summary>
                [TRI_NUM] = 1
                ''' <summary>(Set|Get) The NOM_PNM as String.</summary>
                [NOM_PNM] = 2
                ''' <summary>(Set|Get) The NOM_EDT as String.</summary>
                [NOM_EDT] = 3
                ''' <summary>(Set|Get) The TYP_CLB as String.</summary>
                [TYP_CLB] = 4
                ''' <summary>(Set|Get) The COD_BUR as String.</summary>
                [COD_BUR] = 5
                ''' <summary>(Set|Get) The DAT_COM as DateTime.</summary>
                [DAT_COM] = 6
                ''' <summary>(Set|Get) The DAT_FIN as DateTime.</summary>
                [DAT_FIN] = 7
                ''' <summary>(Set|Get) The STA_CLB as String.</summary>
                [STA_CLB] = 8
                ''' <summary>(Set|Get) The COD_HOR as String.</summary>
                [COD_HOR] = 9
                ''' <summary>(Set|Get) The RMB_FRI_YON as Boolean.</summary>
                [RMB_FRI_YON] = 10
                ''' <summary>(Set|Get) The SAL_HEU_YON as Boolean.</summary>
                [SAL_HEU_YON] = 11
                ''' <summary>(Set|Get) The RMQ as String.</summary>
                [RMQ] = 12
                ''' <summary>(Set|Get) The DAT_TER as DateTime.</summary>
                [DAT_TER] = 13
                ''' <summary>(Set|Get) The DAT_MIN as DateTime.</summary>
                [DAT_MIN] = 14
                ''' <summary>(Set|Get) The TEL_INT as String.</summary>
                [TEL_INT] = 15
                ''' <summary>(Set|Get) The TEL_FAC_YON as Boolean.</summary>
                [TEL_FAC_YON] = 16
                ''' <summary>(Set|Get) The NUM_GSM as String.</summary>
                [NUM_GSM] = 17
                ''' <summary>(Set|Get) The TEL_PRV as String.</summary>
                [TEL_PRV] = 18
                ''' <summary>(Set|Get) The GRP_CLB as String.</summary>
                [GRP_CLB] = 19
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:067| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:080 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .REF_CLB = Nothing
                    .TRI_NUM = 0
                    .NOM_PNM = Nothing
                    .NOM_EDT = Nothing
                    .TYP_CLB = Nothing
                    .COD_BUR = Nothing
                    .DAT_COM = New DateTime
                    .DAT_FIN = New DateTime
                    .STA_CLB = Nothing
                    .COD_HOR = Nothing
                    .RMB_FRI_YON = False
                    .SAL_HEU_YON = False
                    .RMQ = Nothing
                    .DAT_TER = New DateTime
                    .DAT_MIN = New DateTime
                    .TEL_INT = Nothing
                    .TEL_FAC_YON = False
                    .NUM_GSM = Nothing
                    .TEL_PRV = Nothing
                    .GRP_CLB = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:072| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:080 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_COLLABORATEUR"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_COLLABORATEUR"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_COLLABORATEUR"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:078| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:081 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_COLLABORATEUR] (
`REF_CLB`, 
`TRI_NUM`, 
`NOM_PNM`, 
`NOM_EDT`, 
`TYP_CLB`, 
`COD_BUR`, 
`DAT_COM`, 
`DAT_FIN`, 
`STA_CLB`, 
`COD_HOR`, 
`RMB_FRI_YON`, 
`SAL_HEU_YON`, 
`RMQ`, 
`DAT_TER`, 
`DAT_MIN`, 
`TEL_INT`, 
`TEL_FAC_YON`, 
`NUM_GSM`, 
`TEL_PRV`, 
`GRP_CLB`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @16, @17, @18, @19)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.REF_CLB)
                    Cmd.Parameters.AddWithValue("@1", Me.TRI_NUM)
                    Cmd.Parameters.AddWithValue("@2", Me.NOM_PNM)
                    Cmd.Parameters.AddWithValue("@3", Me.NOM_EDT)
                    Cmd.Parameters.AddWithValue("@4", Me.TYP_CLB)
                    Cmd.Parameters.AddWithValue("@5", Me.COD_BUR)
                    Cmd.Parameters.AddWithValue("@6", Me.DAT_COM)
                    Cmd.Parameters.AddWithValue("@7", Me.DAT_FIN)
                    Cmd.Parameters.AddWithValue("@8", Me.STA_CLB)
                    Cmd.Parameters.AddWithValue("@9", Me.COD_HOR)
                    Cmd.Parameters.AddWithValue("@10", Me.RMB_FRI_YON)
                    Cmd.Parameters.AddWithValue("@11", Me.SAL_HEU_YON)
                    Cmd.Parameters.AddWithValue("@12", Me.RMQ)
                    Cmd.Parameters.AddWithValue("@13", Me.DAT_TER)
                    Cmd.Parameters.AddWithValue("@14", Me.DAT_MIN)
                    Cmd.Parameters.AddWithValue("@15", Me.TEL_INT)
                    Cmd.Parameters.AddWithValue("@16", Me.TEL_FAC_YON)
                    Cmd.Parameters.AddWithValue("@17", Me.NUM_GSM)
                    Cmd.Parameters.AddWithValue("@18", Me.TEL_PRV)
                    Cmd.Parameters.AddWithValue("@19", Me.GRP_CLB)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:096| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:081 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_COLLABORATEUR] SET TRI_NUM = @TRI_NUM, NOM_PNM = @NOM_PNM, NOM_EDT = @NOM_EDT, TYP_CLB = @TYP_CLB, COD_BUR = @COD_BUR, DAT_COM = @DAT_COM, DAT_FIN = @DAT_FIN, STA_CLB = @STA_CLB, COD_HOR = @COD_HOR, RMB_FRI_YON = @RMB_FRI_YON, SAL_HEU_YON = @SAL_HEU_YON, RMQ = @RMQ, DAT_TER = @DAT_TER, DAT_MIN = @DAT_MIN, TEL_INT = @TEL_INT, TEL_FAC_YON = @TEL_FAC_YON, NUM_GSM = @NUM_GSM, TEL_PRV = @TEL_PRV, GRP_CLB = @GRP_CLB WHERE REF_CLB = @REF_CLB"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@TRI_NUM", TRI_NUM)
                    Cmd.Parameters.AddWithValue("@NOM_PNM", NOM_PNM)
                    Cmd.Parameters.AddWithValue("@NOM_EDT", NOM_EDT)
                    Cmd.Parameters.AddWithValue("@TYP_CLB", TYP_CLB)
                    Cmd.Parameters.AddWithValue("@COD_BUR", COD_BUR)
                    Cmd.Parameters.AddWithValue("@DAT_COM", DAT_COM)
                    Cmd.Parameters.AddWithValue("@DAT_FIN", DAT_FIN)
                    Cmd.Parameters.AddWithValue("@STA_CLB", STA_CLB)
                    Cmd.Parameters.AddWithValue("@COD_HOR", COD_HOR)
                    Cmd.Parameters.AddWithValue("@RMB_FRI_YON", RMB_FRI_YON)
                    Cmd.Parameters.AddWithValue("@SAL_HEU_YON", SAL_HEU_YON)
                    Cmd.Parameters.AddWithValue("@RMQ", RMQ)
                    Cmd.Parameters.AddWithValue("@DAT_TER", DAT_TER)
                    Cmd.Parameters.AddWithValue("@DAT_MIN", DAT_MIN)
                    Cmd.Parameters.AddWithValue("@TEL_INT", TEL_INT)
                    Cmd.Parameters.AddWithValue("@TEL_FAC_YON", TEL_FAC_YON)
                    Cmd.Parameters.AddWithValue("@NUM_GSM", NUM_GSM)
                    Cmd.Parameters.AddWithValue("@TEL_PRV", TEL_PRV)
                    Cmd.Parameters.AddWithValue("@GRP_CLB", GRP_CLB)
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:102| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:081 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_COLLABORATEUR] WHERE REF_CLB =@REF_CLB"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{9}"
#Region "[On] |2019/07/16 23h21:107| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:081 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:113| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:081 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:119| <05.00.02> <Function> <> |.List()|List(Of MDT_COLLABORATEUR)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:081 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_COLLABORATEUR)
                Dim Result As New List(Of MDT_COLLABORATEUR)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_COLLABORATEUR(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), "", Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), New DateTime(1970, 1, 1), Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), New DateTime(1970, 1, 1), Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), "", Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), "", Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), False, Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), False, Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), "", Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), New DateTime(1970, 1, 1), Row.Item(13)),
IIf(IsDBNull(Row.Item(14)), New DateTime(1970, 1, 1), Row.Item(14)),
IIf(IsDBNull(Row.Item(15)), "", Row.Item(15)),
IIf(IsDBNull(Row.Item(16)), False, Row.Item(16)),
IIf(IsDBNull(Row.Item(17)), "", Row.Item(17)),
IIf(IsDBNull(Row.Item(18)), "", Row.Item(18)),
      IIf(IsDBNull(Row.Item(19)), "", Row.Item(19)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:124| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_COLLABORATEUR)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:081 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_COLLABORATEUR)
                Dim Result As New List(Of MDT_COLLABORATEUR)
                Dim C As New MDT_COLLABORATEUR
                For Each Element As MDT_COLLABORATEUR In C.List
                    If Element.REF_CLB.ToLower() = Search.ToLower() Or Element.NOM_PNM.ToLower() = Search.ToLower() Or Element.NOM_EDT.ToLower() = Search.ToLower() Or Element.TYP_CLB.ToLower() = Search.ToLower() Or Element.COD_BUR.ToLower() = Search.ToLower() Or Element.STA_CLB.ToLower() = Search.ToLower() Or Element.COD_HOR.ToLower() = Search.ToLower() Or Element.RMQ.ToLower() = Search.ToLower() Or Element.TEL_INT.ToLower() = Search.ToLower() Or Element.NUM_GSM.ToLower() = Search.ToLower() Or Element.TEL_PRV.ToLower() = Search.ToLower() Or Element.GRP_CLB.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:130| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_COLLABORATEUR)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:082 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_COLLABORATEUR)
                Dim Result As New List(Of MDT_COLLABORATEUR)
                Dim C As New MDT_COLLABORATEUR
                For Each Element As MDT_COLLABORATEUR In C.List
                    If Val(Element.REF_CLB) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:135| <05.00.05> <Function> <> |.SearchByDate()|List(Of MDT_COLLABORATEUR)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:082 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDate(ByVal Search As DateTime) As List(Of MDT_COLLABORATEUR)
                Dim Result As New List(Of MDT_COLLABORATEUR)
                Dim C As New MDT_COLLABORATEUR
                For Each Element As MDT_COLLABORATEUR In C.List
                    If Element.DAT_COM = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:140| <05.00.06> <Function> <> |.SearchByDateRange()|List(Of MDT_COLLABORATEUR)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:082 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="From_Date">All element from this date and this date included.</param>
            ''' <param name="Until_Date">All element before and including this date.</param>

            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDateRange(ByVal From_Date As DateTime,
ByVal Until_Date As DateTime) As List(Of MDT_COLLABORATEUR)
                Dim Result As New List(Of MDT_COLLABORATEUR)
                Dim C As New MDT_COLLABORATEUR
                For Each Element As MDT_COLLABORATEUR In C.List
                    If (Element.DAT_COM) >= From_Date And (Element.DAT_COM) <= Until_Date Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:146| <05.00.07> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:082 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.REF_CLB
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:151| <05.00.08> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:082 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:157| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:082 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:167| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:083 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:176| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:083 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:183| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:083 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:188| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:083 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:195| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:083 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:201| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:084 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:204| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:084 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:210| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:084 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:216| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:084 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:224| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:084 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:230| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:084 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:237| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:085 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:239| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:085 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>
            ''' <param name="TRI_NUM">(Set|Get) The TRI_NUM as Integer.</param>
            ''' <param name="NOM_PNM">(Set|Get) The NOM_PNM as String.</param>
            ''' <param name="NOM_EDT">(Set|Get) The NOM_EDT as String.</param>
            ''' <param name="TYP_CLB">(Set|Get) The TYP_CLB as String.</param>
            ''' <param name="COD_BUR">(Set|Get) The COD_BUR as String.</param>
            ''' <param name="DAT_COM">(Set|Get) The DAT_COM as DateTime.</param>
            ''' <param name="DAT_FIN">(Set|Get) The DAT_FIN as DateTime.</param>
            ''' <param name="STA_CLB">(Set|Get) The STA_CLB as String.</param>
            ''' <param name="COD_HOR">(Set|Get) The COD_HOR as String.</param>
            ''' <param name="RMB_FRI_YON">(Set|Get) The RMB_FRI_YON as Boolean.</param>
            ''' <param name="SAL_HEU_YON">(Set|Get) The SAL_HEU_YON as Boolean.</param>
            ''' <param name="RMQ">(Set|Get) The RMQ as String.</param>
            ''' <param name="DAT_TER">(Set|Get) The DAT_TER as DateTime.</param>
            ''' <param name="DAT_MIN">(Set|Get) The DAT_MIN as DateTime.</param>
            ''' <param name="TEL_INT">(Set|Get) The TEL_INT as String.</param>
            ''' <param name="TEL_FAC_YON">(Set|Get) The TEL_FAC_YON as Boolean.</param>
            ''' <param name="NUM_GSM">(Set|Get) The NUM_GSM as String.</param>
            ''' <param name="TEL_PRV">(Set|Get) The TEL_PRV as String.</param>
            ''' <param name="GRP_CLB">(Set|Get) The GRP_CLB as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal REF_CLB As String,
ByVal TRI_NUM As Integer,
ByVal NOM_PNM As String,
ByVal NOM_EDT As String,
ByVal TYP_CLB As String,
ByVal COD_BUR As String,
ByVal DAT_COM As DateTime,
ByVal DAT_FIN As DateTime,
ByVal STA_CLB As String,
ByVal COD_HOR As String,
ByVal RMB_FRI_YON As Boolean,
ByVal SAL_HEU_YON As Boolean,
ByVal RMQ As String,
ByVal DAT_TER As DateTime,
ByVal DAT_MIN As DateTime,
ByVal TEL_INT As String,
ByVal TEL_FAC_YON As Boolean,
ByVal NUM_GSM As String,
ByVal TEL_PRV As String,
ByVal GRP_CLB As String)
                With Me
                    Clear()
                    Reset()
                    .REF_CLB = REF_CLB
                    .TRI_NUM = TRI_NUM
                    .NOM_PNM = NOM_PNM
                    .NOM_EDT = NOM_EDT
                    .TYP_CLB = TYP_CLB
                    .COD_BUR = COD_BUR
                    .DAT_COM = DAT_COM
                    .DAT_FIN = DAT_FIN
                    .STA_CLB = STA_CLB
                    .COD_HOR = COD_HOR
                    .RMB_FRI_YON = RMB_FRI_YON
                    .SAL_HEU_YON = SAL_HEU_YON
                    .RMQ = RMQ
                    .DAT_TER = DAT_TER
                    .DAT_MIN = DAT_MIN
                    .TEL_INT = TEL_INT
                    .TEL_FAC_YON = TEL_FAC_YON
                    .NUM_GSM = NUM_GSM
                    .TEL_PRV = TEL_PRV
                    .GRP_CLB = GRP_CLB
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:353| <08.00.00> <Class> <> |.MDT_COMPTE_CG|Class|{29} |Production Cost : 30.1|Selling Price : 75.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_COMPTE_CG
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:353
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{2}||0.8| |1.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{2}||0.5| |1
        '''    |12| |Parameter  |{7}||0.5| |3.5
        '''    |Production Cost             |30.1
        '''    |Selling Price without VAT   |75.25
        '''    |Total TVA                   |5.79
        '''    |Grand Total                 |81.04
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:099 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_COMPTE_CG
#Region "<1> [Property]{2}"
#Region "[On] |2019/07/16 23h21:354| <01.00.00> <Property> <Columns> |.NUM_CPT()|String|"' (Set|Get) The NUM_CPT as String.
            Private _NUM_CPT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_CPT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:100 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_CPT as String.")>
            Public Property NUM_CPT() As String
                Get
                    Return _NUM_CPT
                End Get
                Set(ByVal Value As String)
                    _NUM_CPT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_CPT as String.

#Region "[On] |2019/07/16 23h21:362| <01.00.01> <Property> <Columns> |.NOM_CPT()|String|"' (Set|Get) The NOM_CPT as String.
            Private _NOM_CPT As String
            '''    <Summary>
            '''     (Set|Get) The NOM_CPT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:101 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_CPT as String.")>
            Public Property NOM_CPT() As String
                Get
                    Return _NOM_CPT
                End Get
                Set(ByVal Value As String)
                    _NOM_CPT = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_CPT as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:367| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{1}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:101 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_CPT as String.</summary>
                [NUM_CPT] = 0
                ''' <summary>(Set|Get) The NOM_CPT as String.</summary>
                [NOM_CPT] = 1
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:371| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:101 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_CPT = Nothing
                    .NOM_CPT = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:375| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:101 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_COMPTE_CG"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_COMPTE_CG"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_COMPTE_CG"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:381| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:101 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_COMPTE_CG] (
`NUM_CPT`, 
`NOM_CPT`) Values (@0, @1)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_CPT)
                    Cmd.Parameters.AddWithValue("@1", Me.NOM_CPT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:386| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_COMPTE_CG] SET NOM_CPT = @NOM_CPT WHERE NUM_CPT = @NUM_CPT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NOM_CPT", NOM_CPT)
                    Cmd.Parameters.AddWithValue("@NUM_CPT", NUM_CPT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:390| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_COMPTE_CG] WHERE NUM_CPT =@NUM_CPT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_CPT", NUM_CPT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:399| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:412| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:417| <05.00.02> <Function> <> |.List()|List(Of MDT_COMPTE_CG)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_COMPTE_CG)
                Dim Result As New List(Of MDT_COMPTE_CG)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_COMPTE_CG(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
      IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:422| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_COMPTE_CG)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_COMPTE_CG)
                Dim Result As New List(Of MDT_COMPTE_CG)
                Dim C As New MDT_COMPTE_CG
                For Each Element As MDT_COMPTE_CG In C.List
                    If Element.NUM_CPT.ToLower() = Search.ToLower() Or Element.NOM_CPT.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:426| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_COMPTE_CG)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_COMPTE_CG)
                Dim Result As New List(Of MDT_COMPTE_CG)
                Dim C As New MDT_COMPTE_CG
                For Each Element As MDT_COMPTE_CG In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:432| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_CPT
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:436| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:442| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:446| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:451| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:456| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:462| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:468| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:473| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:483| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:505| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:104 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:512| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:104 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:520| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:104 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:525| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:104 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:530| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:104 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:532| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:104 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_CPT">(Set|Get) The NUM_CPT as String.</param>
            ''' <param name="NOM_CPT">(Set|Get) The NOM_CPT as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_CPT As String,
ByVal NOM_CPT As String)
                With Me
                    Clear()
                    Reset()
                    .NUM_CPT = NUM_CPT
                    .NOM_CPT = NOM_CPT
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:648| <08.00.00> <Class> <> |.MDT_CONGE|Class|{32} |Production Cost : 35.5|Selling Price : 88.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_CONGE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:648
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{5}||0.8| |4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{5}||0.5| |2.5
        '''    |12| |Parameter  |{10}||0.5| |5
        '''    |Production Cost             |35.5
        '''    |Selling Price without VAT   |88.75
        '''    |Total TVA                   |6.83
        '''    |Grand Total                 |95.58
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:110 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_CONGE
#Region "<1> [Property]{5}"
#Region "[On] |2019/07/16 23h21:649| <01.00.00> <Property> <Columns> |.DAT()|DateTime|"' (Set|Get) The DAT as DateTime.
            Private _DAT As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:110 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT as DateTime.")>
            Public Property DAT() As DateTime
                Get
                    Return _DAT
                End Get
                Set(ByVal Value As DateTime)
                    _DAT = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT as DateTime.

#Region "[On] |2019/07/16 23h21:662| <01.00.01> <Property> <Columns> |.YER()|Double|"' (Set|Get) The YER as Double.
            Private _YER As Double
            '''    <Summary>
            '''     (Set|Get) The YER as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:110 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The YER as Double.")>
            Public Property YER() As Double
                Get
                    Return _YER
                End Get
                Set(ByVal Value As Double)
                    _YER = Value
                End Set
            End Property
#End Region '(Set|Get) The YER as Double.

#Region "[On] |2019/07/16 23h21:666| <01.00.02> <Property> <Columns> |.LIB()|String|"' (Set|Get) The LIB as String.
            Private _LIB As String
            '''    <Summary>
            '''     (Set|Get) The LIB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:110 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB as String.")>
            Public Property [LIB]() As String
                Get
                    Return _LIB
                End Get
                Set(ByVal Value As String)
                    _LIB = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB as String.

#Region "[On] |2019/07/16 23h21:671| <01.00.03> <Property> <Columns> |.TYP()|Double|"' (Set|Get) The TYP as Double.
            Private _TYP As Double
            '''    <Summary>
            '''     (Set|Get) The TYP as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:110 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP as Double.")>
            Public Property TYP() As Double
                Get
                    Return _TYP
                End Get
                Set(ByVal Value As Double)
                    _TYP = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP as Double.

#Region "[On] |2019/07/16 23h21:676| <01.00.04> <Property> <Columns> |.DUR()|Double|"' (Set|Get) The DUR as Double.
            Private _DUR As Double
            '''    <Summary>
            '''     (Set|Get) The DUR as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:110 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DUR as Double.")>
            Public Property DUR() As Double
                Get
                    Return _DUR
                End Get
                Set(ByVal Value As Double)
                    _DUR = Value
                End Set
            End Property
#End Region '(Set|Get) The DUR as Double.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:681| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{4}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:111 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The DAT as DateTime.</summary>
                [DAT] = 0
                ''' <summary>(Set|Get) The YER as Double.</summary>
                [YER] = 1
                ''' <summary>(Set|Get) The LIB as String.</summary>
                [LIB] = 2
                ''' <summary>(Set|Get) The TYP as Double.</summary>
                [TYP] = 3
                ''' <summary>(Set|Get) The DUR as Double.</summary>
                [DUR] = 4
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:686| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:111 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .DAT = New DateTime
                    .YER = 0
                    .LIB = Nothing
                    .TYP = 0
                    .DUR = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:690| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:111 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_CONGE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_CONGE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_CONGE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:696| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:111 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_CONGE] (
`DAT`, 
`YER`, 
`LIB`, 
`TYP`, 
`DUR`) Values (@0, @1, @2, @3, @4)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.DAT)
                    Cmd.Parameters.AddWithValue("@1", Me.YER)
                    Cmd.Parameters.AddWithValue("@2", Me.LIB)
                    Cmd.Parameters.AddWithValue("@3", Me.TYP)
                    Cmd.Parameters.AddWithValue("@4", Me.DUR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:701| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:112 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_CONGE] SET YER = @YER, LIB = @LIB, TYP = @TYP, DUR = @DUR WHERE DAT = @DAT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@YER", YER)
                    Cmd.Parameters.AddWithValue("@LIB", [LIB])
                    Cmd.Parameters.AddWithValue("@TYP", TYP)
                    Cmd.Parameters.AddWithValue("@DUR", DUR)
                    Cmd.Parameters.AddWithValue("@DAT", DAT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:705| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:112 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_CONGE] WHERE DAT =@DAT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@DAT", DAT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:710| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:112 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:715| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:112 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:722| <05.00.02> <Function> <> |.List()|List(Of MDT_CONGE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:112 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_CONGE)
                Dim Result As New List(Of MDT_CONGE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_CONGE(IIf(IsDBNull(Row.Item(0)), New DateTime(1970, 1, 1), Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), 0, Row.Item(3)),
      IIf(IsDBNull(Row.Item(4)), 0, Row.Item(4)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:727| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_CONGE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:112 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_CONGE)
                Dim Result As New List(Of MDT_CONGE)
                Dim C As New MDT_CONGE
                For Each Element As MDT_CONGE In C.List
                    If Element.LIB.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:752| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_CONGE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:112 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_CONGE)
                Dim Result As New List(Of MDT_CONGE)
                Dim C As New MDT_CONGE
                For Each Element As MDT_CONGE In C.List
                    If Val(Element.YER) = Search Or Val(Element.TYP) = Search Or Val(Element.DUR) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:757| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:112 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.DAT
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:763| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:112 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:768| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:113 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:774| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:113 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:780| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:113 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:785| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:113 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:791| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:116 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:796| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:116 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:802| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:116 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:805| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:116 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:811| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:116 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:816| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:117 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:831| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:117 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:838| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:117 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:843| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:117 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:844| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:117 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="DAT">(Set|Get) The DAT as DateTime.</param>
            ''' <param name="YER">(Set|Get) The YER as Double.</param>
            ''' <param name="LIB">(Set|Get) The LIB as String.</param>
            ''' <param name="TYP">(Set|Get) The TYP as Double.</param>
            ''' <param name="DUR">(Set|Get) The DUR as Double.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal DAT As DateTime,
ByVal YER As Double,
ByVal [LIB] As String,
ByVal TYP As Double,
ByVal DUR As Double)
                With Me
                    Clear()
                    Reset()
                    .DAT = DAT
                    .YER = YER
                    .[LIB] = [LIB]
                    .TYP = TYP
                    .DUR = DUR
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:961| <08.00.00> <Class> <> |.MDT_DOCUMENT|Class|{32} |Production Cost : 35.5|Selling Price : 88.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_DOCUMENT
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:961
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{5}||0.8| |4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{5}||0.5| |2.5
        '''    |12| |Parameter  |{10}||0.5| |5
        '''    |Production Cost             |35.5
        '''    |Selling Price without VAT   |88.75
        '''    |Total TVA                   |6.83
        '''    |Grand Total                 |95.58
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:121 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_DOCUMENT
#Region "<1> [Property]{5}"
#Region "[On] |2019/07/16 23h21:961| <01.00.00> <Property> <Columns> |.NUM_SEQ()|Integer|"' (Set|Get) The NUM_SEQ as Integer.
            Private _NUM_SEQ As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:121 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ as Integer.")>
            Public Property NUM_SEQ() As Integer
                Get
                    Return _NUM_SEQ
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ as Integer.

#Region "[On] |2019/07/16 23h21:967| <01.00.01> <Property> <Columns> |.TYP_DOC()|String|"' (Set|Get) The TYP_DOC as String.
            Private _TYP_DOC As String
            '''    <Summary>
            '''     (Set|Get) The TYP_DOC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:121 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_DOC as String.")>
            Public Property TYP_DOC() As String
                Get
                    Return _TYP_DOC
                End Get
                Set(ByVal Value As String)
                    _TYP_DOC = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_DOC as String.

#Region "[On] |2019/07/16 23h21:973| <01.00.02> <Property> <Columns> |.LIB_DOC()|String|"' (Set|Get) The LIB_DOC as String.
            Private _LIB_DOC As String
            '''    <Summary>
            '''     (Set|Get) The LIB_DOC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:122 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_DOC as String.")>
            Public Property LIB_DOC() As String
                Get
                    Return _LIB_DOC
                End Get
                Set(ByVal Value As String)
                    _LIB_DOC = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_DOC as String.

#Region "[On] |2019/07/16 23h21:978| <01.00.03> <Property> <Columns> |.FIC_DOC()|String|"' (Set|Get) The FIC_DOC as String.
            Private _FIC_DOC As String
            '''    <Summary>
            '''     (Set|Get) The FIC_DOC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:122 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FIC_DOC as String.")>
            Public Property FIC_DOC() As String
                Get
                    Return _FIC_DOC
                End Get
                Set(ByVal Value As String)
                    _FIC_DOC = Value
                End Set
            End Property
#End Region '(Set|Get) The FIC_DOC as String.

#Region "[On] |2019/07/16 23h21:043| <01.00.04> <Property> <Columns> |.FIC_DOC_LIG()|String|"' (Set|Get) The FIC_DOC_LIG as String.
            Private _FIC_DOC_LIG As String
            '''    <Summary>
            '''     (Set|Get) The FIC_DOC_LIG as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:122 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FIC_DOC_LIG as String.")>
            Public Property FIC_DOC_LIG() As String
                Get
                    Return _FIC_DOC_LIG
                End Get
                Set(ByVal Value As String)
                    _FIC_DOC_LIG = Value
                End Set
            End Property
#End Region '(Set|Get) The FIC_DOC_LIG as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:053| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{4}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:123 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_SEQ as Integer.</summary>
                [NUM_SEQ] = 0
                ''' <summary>(Set|Get) The TYP_DOC as String.</summary>
                [TYP_DOC] = 1
                ''' <summary>(Set|Get) The LIB_DOC as String.</summary>
                [LIB_DOC] = 2
                ''' <summary>(Set|Get) The FIC_DOC as String.</summary>
                [FIC_DOC] = 3
                ''' <summary>(Set|Get) The FIC_DOC_LIG as String.</summary>
                [FIC_DOC_LIG] = 4
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:063| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:123 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_SEQ = 0
                    .TYP_DOC = Nothing
                    .LIB_DOC = Nothing
                    .FIC_DOC = Nothing
                    .FIC_DOC_LIG = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:068| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:123 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_DOCUMENT"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_DOCUMENT"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_DOCUMENT"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:073| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:124 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_DOCUMENT] (
`NUM_SEQ`, 
`TYP_DOC`, 
`LIB_DOC`, 
`FIC_DOC`, 
`FIC_DOC_LIG`) Values (@0, @1, @2, @3, @4)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@1", Me.TYP_DOC)
                    Cmd.Parameters.AddWithValue("@2", Me.LIB_DOC)
                    Cmd.Parameters.AddWithValue("@3", Me.FIC_DOC)
                    Cmd.Parameters.AddWithValue("@4", Me.FIC_DOC_LIG)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:077| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:124 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_DOCUMENT] SET TYP_DOC = @TYP_DOC, LIB_DOC = @LIB_DOC, FIC_DOC = @FIC_DOC, FIC_DOC_LIG = @FIC_DOC_LIG WHERE NUM_SEQ = @NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@TYP_DOC", TYP_DOC)
                    Cmd.Parameters.AddWithValue("@LIB_DOC", LIB_DOC)
                    Cmd.Parameters.AddWithValue("@FIC_DOC", FIC_DOC)
                    Cmd.Parameters.AddWithValue("@FIC_DOC_LIG", FIC_DOC_LIG)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:083| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:124 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_DOCUMENT] WHERE NUM_SEQ =@NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:088| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:124 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:092| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:124 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:099| <05.00.02> <Function> <> |.List()|List(Of MDT_DOCUMENT)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:124 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_DOCUMENT)
                Dim Result As New List(Of MDT_DOCUMENT)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_DOCUMENT(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
      IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:104| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_DOCUMENT)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:124 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_DOCUMENT)
                Dim Result As New List(Of MDT_DOCUMENT)
                Dim C As New MDT_DOCUMENT
                For Each Element As MDT_DOCUMENT In C.List
                    If Element.TYP_DOC.ToLower() = Search.ToLower() Or Element.LIB_DOC.ToLower() = Search.ToLower() Or Element.FIC_DOC.ToLower() = Search.ToLower() Or Element.FIC_DOC_LIG.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:109| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_DOCUMENT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:124 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_DOCUMENT)
                Dim Result As New List(Of MDT_DOCUMENT)
                Dim C As New MDT_DOCUMENT
                For Each Element As MDT_DOCUMENT In C.List
                    If Val(Element.TYP_DOC) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:114| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:124 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_SEQ
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:119| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:125 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:144| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:125 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:149| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:125 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:154| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:125 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:160| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:125 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:165| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:125 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:170| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:125 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:175| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:125 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:177| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:126 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:184| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:126 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:190| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:126 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:195| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:126 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:199| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:126 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:206| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:126 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:208| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:126 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_SEQ">(Set|Get) The NUM_SEQ as Integer.</param>
            ''' <param name="TYP_DOC">(Set|Get) The TYP_DOC as String.</param>
            ''' <param name="LIB_DOC">(Set|Get) The LIB_DOC as String.</param>
            ''' <param name="FIC_DOC">(Set|Get) The FIC_DOC as String.</param>
            ''' <param name="FIC_DOC_LIG">(Set|Get) The FIC_DOC_LIG as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_SEQ As Integer,
ByVal TYP_DOC As String,
ByVal LIB_DOC As String,
ByVal FIC_DOC As String,
ByVal FIC_DOC_LIG As String)
                With Me
                    Clear()
                    Reset()
                    .NUM_SEQ = NUM_SEQ
                    .TYP_DOC = TYP_DOC
                    .LIB_DOC = LIB_DOC
                    .FIC_DOC = FIC_DOC
                    .FIC_DOC_LIG = FIC_DOC_LIG
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:339| <08.00.00> <Class> <> |.MDT_DOCUMENT_FACTURE|Class|{77} |Production Cost : 117.6|Selling Price : 294|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_DOCUMENT_FACTURE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:339
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{48}||0.8| |38.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{9}||1.6| |14.4
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{48}||0.5| |24
        '''    |12| |Parameter  |{56}||0.5| |28
        '''    |Production Cost             |117.6
        '''    |Selling Price without VAT   |294
        '''    |Total TVA                   |22.64
        '''    |Grand Total                 |316.64
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:135 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_DOCUMENT_FACTURE
#Region "<1> [Property]{48}"
#Region "[On] |2019/07/16 23h21:340| <01.00.00> <Property> <Columns> |.NUM_SEQ()|Integer|"' (Set|Get) The NUM_SEQ as Integer.
            Private _NUM_SEQ As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:135 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ as Integer.")>
            Public Property NUM_SEQ() As Integer
                Get
                    Return _NUM_SEQ
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ as Integer.

#Region "[On] |2019/07/16 23h21:355| <01.00.01> <Property> <Columns> |.NUM_SEQ_SAV()|Integer|"' (Set|Get) The NUM_SEQ_SAV as Integer.
            Private _NUM_SEQ_SAV As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_SAV as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:136 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_SAV as Integer.")>
            Public Property NUM_SEQ_SAV() As Integer
                Get
                    Return _NUM_SEQ_SAV
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_SAV = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_SAV as Integer.

#Region "[On] |2019/07/16 23h21:366| <01.00.02> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:136 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#Region "[On] |2019/07/16 23h21:375| <01.00.03> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:136 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h21:385| <01.00.04> <Property> <Columns> |.DAT_COM()|DateTime|"' (Set|Get) The DAT_COM as DateTime.
            Private _DAT_COM As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_COM as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:136 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_COM as DateTime.")>
            Public Property DAT_COM() As DateTime
                Get
                    Return _DAT_COM
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_COM = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_COM as DateTime.

#Region "[On] |2019/07/16 23h21:392| <01.00.05> <Property> <Columns> |.DAT_FIN()|DateTime|"' (Set|Get) The DAT_FIN as DateTime.
            Private _DAT_FIN As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_FIN as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:136 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_FIN as DateTime.")>
            Public Property DAT_FIN() As DateTime
                Get
                    Return _DAT_FIN
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_FIN = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_FIN as DateTime.

#Region "[On] |2019/07/16 23h21:398| <01.00.06> <Property> <Columns> |.NUM_FAC()|String|"' (Set|Get) The NUM_FAC as String.
            Private _NUM_FAC As String
            '''    <Summary>
            '''     (Set|Get) The NUM_FAC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:137 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FAC as String.")>
            Public Property NUM_FAC() As String
                Get
                    Return _NUM_FAC
                End Get
                Set(ByVal Value As String)
                    _NUM_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FAC as String.

#Region "[On] |2019/07/16 23h21:404| <01.00.07> <Property> <Columns> |.DAT_FAC()|DateTime|"' (Set|Get) The DAT_FAC as DateTime.
            Private _DAT_FAC As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_FAC as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:137 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_FAC as DateTime.")>
            Public Property DAT_FAC() As DateTime
                Get
                    Return _DAT_FAC
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_FAC as DateTime.

#Region "[On] |2019/07/16 23h21:409| <01.00.08> <Property> <Columns> |.DAT_CPT()|DateTime|"' (Set|Get) The DAT_CPT as DateTime.
            Private _DAT_CPT As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_CPT as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:137 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_CPT as DateTime.")>
            Public Property DAT_CPT() As DateTime
                Get
                    Return _DAT_CPT
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_CPT = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_CPT as DateTime.

#Region "[On] |2019/07/16 23h21:418| <01.00.09> <Property> <Columns> |.TOT_HEU()|Double|"' (Set|Get) The TOT_HEU as Double.
            Private _TOT_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:137 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_HEU as Double.")>
            Public Property TOT_HEU() As Double
                Get
                    Return _TOT_HEU
                End Get
                Set(ByVal Value As Double)
                    _TOT_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_HEU as Double.

#Region "[On] |2019/07/16 23h21:424| <01.00.10> <Property> <Columns> |.TOT_FRI()|Double|"' (Set|Get) The TOT_FRI as Double.
            Private _TOT_FRI As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_FRI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:137 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_FRI as Double.")>
            Public Property TOT_FRI() As Double
                Get
                    Return _TOT_FRI
                End Get
                Set(ByVal Value As Double)
                    _TOT_FRI = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_FRI as Double.

#Region "[On] |2019/07/16 23h21:429| <01.00.11> <Property> <Columns> |.TUX_TVA()|Double|"' (Set|Get) The TUX_TVA as Double.
            Private _TUX_TVA As Double
            '''    <Summary>
            '''     (Set|Get) The TUX_TVA as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:137 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TUX_TVA as Double.")>
            Public Property TUX_TVA() As Double
                Get
                    Return _TUX_TVA
                End Get
                Set(ByVal Value As Double)
                    _TUX_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) The TUX_TVA as Double.

#Region "[On] |2019/07/16 23h21:434| <01.00.12> <Property> <Columns> |.TOT_HT()|Double|"' (Set|Get) The TOT_HT as Double.
            Private _TOT_HT As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_HT as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:138 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_HT as Double.")>
            Public Property TOT_HT() As Double
                Get
                    Return _TOT_HT
                End Get
                Set(ByVal Value As Double)
                    _TOT_HT = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_HT as Double.

#Region "[On] |2019/07/16 23h21:444| <01.00.13> <Property> <Columns> |.TOT_TVA()|Double|"' (Set|Get) The TOT_TVA as Double.
            Private _TOT_TVA As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_TVA as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:138 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_TVA as Double.")>
            Public Property TOT_TVA() As Double
                Get
                    Return _TOT_TVA
                End Get
                Set(ByVal Value As Double)
                    _TOT_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_TVA as Double.

#Region "[On] |2019/07/16 23h21:452| <01.00.14> <Property> <Columns> |.TOT_NON_SOU()|Double|"' (Set|Get) The TOT_NON_SOU as Double.
            Private _TOT_NON_SOU As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_NON_SOU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:138 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_NON_SOU as Double.")>
            Public Property TOT_NON_SOU() As Double
                Get
                    Return _TOT_NON_SOU
                End Get
                Set(ByVal Value As Double)
                    _TOT_NON_SOU = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_NON_SOU as Double.

#Region "[On] |2019/07/16 23h21:458| <01.00.15> <Property> <Columns> |.TOT_TTC()|Double|"' (Set|Get) The TOT_TTC as Double.
            Private _TOT_TTC As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_TTC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:138 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_TTC as Double.")>
            Public Property TOT_TTC() As Double
                Get
                    Return _TOT_TTC
                End Get
                Set(ByVal Value As Double)
                    _TOT_TTC = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_TTC as Double.

#Region "[On] |2019/07/16 23h21:467| <01.00.16> <Property> <Columns> |.CPT_DEB()|String|"' (Set|Get) The CPT_DEB as String.
            Private _CPT_DEB As String
            '''    <Summary>
            '''     (Set|Get) The CPT_DEB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:138 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The CPT_DEB as String.")>
            Public Property CPT_DEB() As String
                Get
                    Return _CPT_DEB
                End Get
                Set(ByVal Value As String)
                    _CPT_DEB = Value
                End Set
            End Property
#End Region '(Set|Get) The CPT_DEB as String.

#Region "[On] |2019/07/16 23h21:473| <01.00.17> <Property> <Columns> |.CPT_CRE()|String|"' (Set|Get) The CPT_CRE as String.
            Private _CPT_CRE As String
            '''    <Summary>
            '''     (Set|Get) The CPT_CRE as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:139 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The CPT_CRE as String.")>
            Public Property CPT_CRE() As String
                Get
                    Return _CPT_CRE
                End Get
                Set(ByVal Value As String)
                    _CPT_CRE = Value
                End Set
            End Property
#End Region '(Set|Get) The CPT_CRE as String.

#Region "[On] |2019/07/16 23h21:479| <01.00.18> <Property> <Columns> |.NUM_FTA()|Integer|"' (Set|Get) The NUM_FTA as Integer.
            Private _NUM_FTA As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_FTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:139 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FTA as Integer.")>
            Public Property NUM_FTA() As Integer
                Get
                    Return _NUM_FTA
                End Get
                Set(ByVal Value As Integer)
                    _NUM_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FTA as Integer.

#Region "[On] |2019/07/16 23h21:486| <01.00.19> <Property> <Columns> |.MNT_FTA()|Double|"' (Set|Get) The MNT_FTA as Double.
            Private _MNT_FTA As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_FTA as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:139 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_FTA as Double.")>
            Public Property MNT_FTA() As Double
                Get
                    Return _MNT_FTA
                End Get
                Set(ByVal Value As Double)
                    _MNT_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_FTA as Double.

#Region "[On] |2019/07/16 23h21:495| <01.00.20> <Property> <Columns> |.DAT_TFT()|DateTime|"' (Set|Get) The DAT_TFT as DateTime.
            Private _DAT_TFT As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_TFT as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:139 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_TFT as DateTime.")>
            Public Property DAT_TFT() As DateTime
                Get
                    Return _DAT_TFT
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_TFT = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_TFT as DateTime.

#Region "[On] |2019/07/16 23h21:501| <01.00.21> <Property> <Columns> |.TIT_CLI()|String|"' (Set|Get) The TIT_CLI as String.
            Private _TIT_CLI As String
            '''    <Summary>
            '''     (Set|Get) The TIT_CLI as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:139 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TIT_CLI as String.")>
            Public Property TIT_CLI() As String
                Get
                    Return _TIT_CLI
                End Get
                Set(ByVal Value As String)
                    _TIT_CLI = Value
                End Set
            End Property
#End Region '(Set|Get) The TIT_CLI as String.

#Region "[On] |2019/07/16 23h21:535| <01.00.22> <Property> <Columns> |.TRI_LIG()|Double|"' (Set|Get) The TRI_LIG as Double.
            Private _TRI_LIG As Double
            '''    <Summary>
            '''     (Set|Get) The TRI_LIG as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:140 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TRI_LIG as Double.")>
            Public Property TRI_LIG() As Double
                Get
                    Return _TRI_LIG
                End Get
                Set(ByVal Value As Double)
                    _TRI_LIG = Value
                End Set
            End Property
#End Region '(Set|Get) The TRI_LIG as Double.

#Region "[On] |2019/07/16 23h21:545| <01.00.23> <Property> <Columns> |.TYP_DOC()|Double|"' (Set|Get) The TYP_DOC as Double.
            Private _TYP_DOC As Double
            '''    <Summary>
            '''     (Set|Get) The TYP_DOC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:140 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_DOC as Double.")>
            Public Property TYP_DOC() As Double
                Get
                    Return _TYP_DOC
                End Get
                Set(ByVal Value As Double)
                    _TYP_DOC = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_DOC as Double.

#Region "[On] |2019/07/16 23h21:552| <01.00.24> <Property> <Columns> |.NON_FAC_YON()|Boolean|"' (Set|Get) The NON_FAC_YON as Boolean.
            Private _NON_FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The NON_FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:140 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NON_FAC_YON as Boolean.")>
            Public Property NON_FAC_YON() As Boolean
                Get
                    Return _NON_FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _NON_FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The NON_FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h21:559| <01.00.25> <Property> <Columns> |.FTA_YON()|Boolean|"' (Set|Get) The FTA_YON as Boolean.
            Private _FTA_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FTA_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:140 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FTA_YON as Boolean.")>
            Public Property FTA_YON() As Boolean
                Get
                    Return _FTA_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FTA_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FTA_YON as Boolean.

#Region "[On] |2019/07/16 23h21:565| <01.00.26> <Property> <Columns> |.NOM_COL()|String|"' (Set|Get) The NOM_COL as String.
            Private _NOM_COL As String
            '''    <Summary>
            '''     (Set|Get) The NOM_COL as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:140 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_COL as String.")>
            Public Property NOM_COL() As String
                Get
                    Return _NOM_COL
                End Get
                Set(ByVal Value As String)
                    _NOM_COL = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_COL as String.

#Region "[On] |2019/07/16 23h21:575| <01.00.27> <Property> <Columns> |.TOT_HEU_RVT()|Double|"' (Set|Get) The TOT_HEU_RVT as Double.
            Private _TOT_HEU_RVT As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_HEU_RVT as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:141 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_HEU_RVT as Double.")>
            Public Property TOT_HEU_RVT() As Double
                Get
                    Return _TOT_HEU_RVT
                End Get
                Set(ByVal Value As Double)
                    _TOT_HEU_RVT = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_HEU_RVT as Double.

#Region "[On] |2019/07/16 23h21:584| <01.00.28> <Property> <Columns> |.TOT_FRI_RVT()|Double|"' (Set|Get) The TOT_FRI_RVT as Double.
            Private _TOT_FRI_RVT As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_FRI_RVT as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:142 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_FRI_RVT as Double.")>
            Public Property TOT_FRI_RVT() As Double
                Get
                    Return _TOT_FRI_RVT
                End Get
                Set(ByVal Value As Double)
                    _TOT_FRI_RVT = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_FRI_RVT as Double.

#Region "[On] |2019/07/16 23h21:589| <01.00.29> <Property> <Columns> |.SEL_TFT_YON()|Boolean|"' (Set|Get) The SEL_TFT_YON as Boolean.
            Private _SEL_TFT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The SEL_TFT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:142 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The SEL_TFT_YON as Boolean.")>
            Public Property SEL_TFT_YON() As Boolean
                Get
                    Return _SEL_TFT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _SEL_TFT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The SEL_TFT_YON as Boolean.

#Region "[On] |2019/07/16 23h21:600| <01.00.30> <Property> <Columns> |.NUM_LOT()|Integer|"' (Set|Get) The NUM_LOT as Integer.
            Private _NUM_LOT As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_LOT as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:143 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_LOT as Integer.")>
            Public Property NUM_LOT() As Integer
                Get
                    Return _NUM_LOT
                End Get
                Set(ByVal Value As Integer)
                    _NUM_LOT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_LOT as Integer.

#Region "[On] |2019/07/16 23h21:607| <01.00.31> <Property> <Columns> |.NPT_FAC_YON()|Boolean|"' (Set|Get) The NPT_FAC_YON as Boolean.
            Private _NPT_FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The NPT_FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:143 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NPT_FAC_YON as Boolean.")>
            Public Property NPT_FAC_YON() As Boolean
                Get
                    Return _NPT_FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _NPT_FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The NPT_FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h21:613| <01.00.32> <Property> <Columns> |.TFT_YON()|Boolean|"' (Set|Get) The TFT_YON as Boolean.
            Private _TFT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The TFT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:143 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TFT_YON as Boolean.")>
            Public Property TFT_YON() As Boolean
                Get
                    Return _TFT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _TFT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The TFT_YON as Boolean.

#Region "[On] |2019/07/16 23h21:622| <01.00.33> <Property> <Columns> |.TOT_HEU_ORI()|Double|"' (Set|Get) The TOT_HEU_ORI as Double.
            Private _TOT_HEU_ORI As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_HEU_ORI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:143 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_HEU_ORI as Double.")>
            Public Property TOT_HEU_ORI() As Double
                Get
                    Return _TOT_HEU_ORI
                End Get
                Set(ByVal Value As Double)
                    _TOT_HEU_ORI = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_HEU_ORI as Double.

#Region "[On] |2019/07/16 23h21:631| <01.00.34> <Property> <Columns> |.TOT_FRA_ORI()|Double|"' (Set|Get) The TOT_FRA_ORI as Double.
            Private _TOT_FRA_ORI As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_FRA_ORI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:143 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_FRA_ORI as Double.")>
            Public Property TOT_FRA_ORI() As Double
                Get
                    Return _TOT_FRA_ORI
                End Get
                Set(ByVal Value As Double)
                    _TOT_FRA_ORI = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_FRA_ORI as Double.

#Region "[On] |2019/07/16 23h21:637| <01.00.35> <Property> <Columns> |.DAT_ACQ()|DateTime|"' (Set|Get) The DAT_ACQ as DateTime.
            Private _DAT_ACQ As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_ACQ as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:144 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_ACQ as DateTime.")>
            Public Property DAT_ACQ() As DateTime
                Get
                    Return _DAT_ACQ
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_ACQ = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_ACQ as DateTime.

#Region "[On] |2019/07/16 23h21:644| <01.00.36> <Property> <Columns> |.TOT_ACO_HEU()|Double|"' (Set|Get) The TOT_ACO_HEU as Double.
            Private _TOT_ACO_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_ACO_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:144 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_ACO_HEU as Double.")>
            Public Property TOT_ACO_HEU() As Double
                Get
                    Return _TOT_ACO_HEU
                End Get
                Set(ByVal Value As Double)
                    _TOT_ACO_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_ACO_HEU as Double.

#Region "[On] |2019/07/16 23h21:653| <01.00.37> <Property> <Columns> |.TOT_ACO_FRI()|Double|"' (Set|Get) The TOT_ACO_FRI as Double.
            Private _TOT_ACO_FRI As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_ACO_FRI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:144 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_ACO_FRI as Double.")>
            Public Property TOT_ACO_FRI() As Double
                Get
                    Return _TOT_ACO_FRI
                End Get
                Set(ByVal Value As Double)
                    _TOT_ACO_FRI = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_ACO_FRI as Double.

#Region "[On] |2019/07/16 23h21:659| <01.00.38> <Property> <Columns> |.TOT_ACO()|Double|"' (Set|Get) The TOT_ACO as Double.
            Private _TOT_ACO As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_ACO as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:144 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_ACO as Double.")>
            Public Property TOT_ACO() As Double
                Get
                    Return _TOT_ACO
                End Get
                Set(ByVal Value As Double)
                    _TOT_ACO = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_ACO as Double.

#Region "[On] |2019/07/16 23h21:666| <01.00.39> <Property> <Columns> |.TOT_ACO_TVA()|Double|"' (Set|Get) The TOT_ACO_TVA as Double.
            Private _TOT_ACO_TVA As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_ACO_TVA as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:144 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_ACO_TVA as Double.")>
            Public Property TOT_ACO_TVA() As Double
                Get
                    Return _TOT_ACO_TVA
                End Get
                Set(ByVal Value As Double)
                    _TOT_ACO_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_ACO_TVA as Double.

#Region "[On] |2019/07/16 23h21:692| <01.00.40> <Property> <Columns> |.NUM_ETA_FAC()|String|"' (Set|Get) The NUM_ETA_FAC as String.
            Private _NUM_ETA_FAC As String
            '''    <Summary>
            '''     (Set|Get) The NUM_ETA_FAC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:145 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_ETA_FAC as String.")>
            Public Property NUM_ETA_FAC() As String
                Get
                    Return _NUM_ETA_FAC
                End Get
                Set(ByVal Value As String)
                    _NUM_ETA_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_ETA_FAC as String.

#Region "[On] |2019/07/16 23h21:700| <01.00.41> <Property> <Columns> |.TOT_HT_FAC()|Double|"' (Set|Get) The TOT_HT_FAC as Double.
            Private _TOT_HT_FAC As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_HT_FAC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:145 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_HT_FAC as Double.")>
            Public Property TOT_HT_FAC() As Double
                Get
                    Return _TOT_HT_FAC
                End Get
                Set(ByVal Value As Double)
                    _TOT_HT_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_HT_FAC as Double.

#Region "[On] |2019/07/16 23h21:709| <01.00.42> <Property> <Columns> |.TOT_AJU()|Double|"' (Set|Get) The TOT_AJU as Double.
            Private _TOT_AJU As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_AJU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:145 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_AJU as Double.")>
            Public Property TOT_AJU() As Double
                Get
                    Return _TOT_AJU
                End Get
                Set(ByVal Value As Double)
                    _TOT_AJU = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_AJU as Double.

#Region "[On] |2019/07/16 23h21:718| <01.00.43> <Property> <Columns> |.TOT_AJU_ORI()|Double|"' (Set|Get) The TOT_AJU_ORI as Double.
            Private _TOT_AJU_ORI As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_AJU_ORI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:145 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_AJU_ORI as Double.")>
            Public Property TOT_AJU_ORI() As Double
                Get
                    Return _TOT_AJU_ORI
                End Get
                Set(ByVal Value As Double)
                    _TOT_AJU_ORI = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_AJU_ORI as Double.

#Region "[On] |2019/07/16 23h21:726| <01.00.44> <Property> <Columns> |.HIS_YON()|Boolean|"' (Set|Get) The HIS_YON as Boolean.
            Private _HIS_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The HIS_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:146 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HIS_YON as Boolean.")>
            Public Property HIS_YON() As Boolean
                Get
                    Return _HIS_YON
                End Get
                Set(ByVal Value As Boolean)
                    _HIS_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The HIS_YON as Boolean.

#Region "[On] |2019/07/16 23h21:733| <01.00.45> <Property> <Columns> |.FAC_DIR_YON()|Boolean|"' (Set|Get) The FAC_DIR_YON as Boolean.
            Private _FAC_DIR_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_DIR_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:146 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_DIR_YON as Boolean.")>
            Public Property FAC_DIR_YON() As Boolean
                Get
                    Return _FAC_DIR_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_DIR_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_DIR_YON as Boolean.

#Region "[On] |2019/07/16 23h21:744| <01.00.46> <Property> <Columns> |.FAC_CPT_YON()|Boolean|"' (Set|Get) The FAC_CPT_YON as Boolean.
            Private _FAC_CPT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_CPT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:146 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_CPT_YON as Boolean.")>
            Public Property FAC_CPT_YON() As Boolean
                Get
                    Return _FAC_CPT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_CPT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_CPT_YON as Boolean.

#Region "[On] |2019/07/16 23h21:752| <01.00.47> <Property> <Columns> |.NON_FAC_FRI_YON()|Boolean|"' (Set|Get) The NON_FAC_FRI_YON as Boolean.
            Private _NON_FAC_FRI_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The NON_FAC_FRI_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:146 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NON_FAC_FRI_YON as Boolean.")>
            Public Property NON_FAC_FRI_YON() As Boolean
                Get
                    Return _NON_FAC_FRI_YON
                End Get
                Set(ByVal Value As Boolean)
                    _NON_FAC_FRI_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The NON_FAC_FRI_YON as Boolean.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:760| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{47}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:147 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_SEQ as Integer.</summary>
                [NUM_SEQ] = 0
                ''' <summary>(Set|Get) The NUM_SEQ_SAV as Integer.</summary>
                [NUM_SEQ_SAV] = 1
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 2
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 3
                ''' <summary>(Set|Get) The DAT_COM as DateTime.</summary>
                [DAT_COM] = 4
                ''' <summary>(Set|Get) The DAT_FIN as DateTime.</summary>
                [DAT_FIN] = 5
                ''' <summary>(Set|Get) The NUM_FAC as String.</summary>
                [NUM_FAC] = 6
                ''' <summary>(Set|Get) The DAT_FAC as DateTime.</summary>
                [DAT_FAC] = 7
                ''' <summary>(Set|Get) The DAT_CPT as DateTime.</summary>
                [DAT_CPT] = 8
                ''' <summary>(Set|Get) The TOT_HEU as Double.</summary>
                [TOT_HEU] = 9
                ''' <summary>(Set|Get) The TOT_FRI as Double.</summary>
                [TOT_FRI] = 10
                ''' <summary>(Set|Get) The TUX_TVA as Double.</summary>
                [TUX_TVA] = 11
                ''' <summary>(Set|Get) The TOT_HT as Double.</summary>
                [TOT_HT] = 12
                ''' <summary>(Set|Get) The TOT_TVA as Double.</summary>
                [TOT_TVA] = 13
                ''' <summary>(Set|Get) The TOT_NON_SOU as Double.</summary>
                [TOT_NON_SOU] = 14
                ''' <summary>(Set|Get) The TOT_TTC as Double.</summary>
                [TOT_TTC] = 15
                ''' <summary>(Set|Get) The CPT_DEB as String.</summary>
                [CPT_DEB] = 16
                ''' <summary>(Set|Get) The CPT_CRE as String.</summary>
                [CPT_CRE] = 17
                ''' <summary>(Set|Get) The NUM_FTA as Integer.</summary>
                [NUM_FTA] = 18
                ''' <summary>(Set|Get) The MNT_FTA as Double.</summary>
                [MNT_FTA] = 19
                ''' <summary>(Set|Get) The DAT_TFT as DateTime.</summary>
                [DAT_TFT] = 20
                ''' <summary>(Set|Get) The TIT_CLI as String.</summary>
                [TIT_CLI] = 21
                ''' <summary>(Set|Get) The TRI_LIG as Double.</summary>
                [TRI_LIG] = 22
                ''' <summary>(Set|Get) The TYP_DOC as Double.</summary>
                [TYP_DOC] = 23
                ''' <summary>(Set|Get) The NON_FAC_YON as Boolean.</summary>
                [NON_FAC_YON] = 24
                ''' <summary>(Set|Get) The FTA_YON as Boolean.</summary>
                [FTA_YON] = 25
                ''' <summary>(Set|Get) The NOM_COL as String.</summary>
                [NOM_COL] = 26
                ''' <summary>(Set|Get) The TOT_HEU_RVT as Double.</summary>
                [TOT_HEU_RVT] = 27
                ''' <summary>(Set|Get) The TOT_FRI_RVT as Double.</summary>
                [TOT_FRI_RVT] = 28
                ''' <summary>(Set|Get) The SEL_TFT_YON as Boolean.</summary>
                [SEL_TFT_YON] = 29
                ''' <summary>(Set|Get) The NUM_LOT as Integer.</summary>
                [NUM_LOT] = 30
                ''' <summary>(Set|Get) The NPT_FAC_YON as Boolean.</summary>
                [NPT_FAC_YON] = 31
                ''' <summary>(Set|Get) The TFT_YON as Boolean.</summary>
                [TFT_YON] = 32
                ''' <summary>(Set|Get) The TOT_HEU_ORI as Double.</summary>
                [TOT_HEU_ORI] = 33
                ''' <summary>(Set|Get) The TOT_FRA_ORI as Double.</summary>
                [TOT_FRA_ORI] = 34
                ''' <summary>(Set|Get) The DAT_ACQ as DateTime.</summary>
                [DAT_ACQ] = 35
                ''' <summary>(Set|Get) The TOT_ACO_HEU as Double.</summary>
                [TOT_ACO_HEU] = 36
                ''' <summary>(Set|Get) The TOT_ACO_FRI as Double.</summary>
                [TOT_ACO_FRI] = 37
                ''' <summary>(Set|Get) The TOT_ACO as Double.</summary>
                [TOT_ACO] = 38
                ''' <summary>(Set|Get) The TOT_ACO_TVA as Double.</summary>
                [TOT_ACO_TVA] = 39
                ''' <summary>(Set|Get) The NUM_ETA_FAC as String.</summary>
                [NUM_ETA_FAC] = 40
                ''' <summary>(Set|Get) The TOT_HT_FAC as Double.</summary>
                [TOT_HT_FAC] = 41
                ''' <summary>(Set|Get) The TOT_AJU as Double.</summary>
                [TOT_AJU] = 42
                ''' <summary>(Set|Get) The TOT_AJU_ORI as Double.</summary>
                [TOT_AJU_ORI] = 43
                ''' <summary>(Set|Get) The HIS_YON as Boolean.</summary>
                [HIS_YON] = 44
                ''' <summary>(Set|Get) The FAC_DIR_YON as Boolean.</summary>
                [FAC_DIR_YON] = 45
                ''' <summary>(Set|Get) The FAC_CPT_YON as Boolean.</summary>
                [FAC_CPT_YON] = 46
                ''' <summary>(Set|Get) The NON_FAC_FRI_YON as Boolean.</summary>
                [NON_FAC_FRI_YON] = 47
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:790| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:148 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_SEQ = 0
                    .NUM_SEQ_SAV = 0
                    .REF_CLB = Nothing
                    .NUM_MDT = Nothing
                    .DAT_COM = New DateTime
                    .DAT_FIN = New DateTime
                    .NUM_FAC = Nothing
                    .DAT_FAC = New DateTime
                    .DAT_CPT = New DateTime
                    .TOT_HEU = 0
                    .TOT_FRI = 0
                    .TUX_TVA = 0
                    .TOT_HT = 0
                    .TOT_TVA = 0
                    .TOT_NON_SOU = 0
                    .TOT_TTC = 0
                    .CPT_DEB = Nothing
                    .CPT_CRE = Nothing
                    .NUM_FTA = 0
                    .MNT_FTA = 0
                    .DAT_TFT = New DateTime
                    .TIT_CLI = Nothing
                    .TRI_LIG = 0
                    .TYP_DOC = 0
                    .NON_FAC_YON = False
                    .FTA_YON = False
                    .NOM_COL = Nothing
                    .TOT_HEU_RVT = 0
                    .TOT_FRI_RVT = 0
                    .SEL_TFT_YON = False
                    .NUM_LOT = 0
                    .NPT_FAC_YON = False
                    .TFT_YON = False
                    .TOT_HEU_ORI = 0
                    .TOT_FRA_ORI = 0
                    .DAT_ACQ = New DateTime
                    .TOT_ACO_HEU = 0
                    .TOT_ACO_FRI = 0
                    .TOT_ACO = 0
                    .TOT_ACO_TVA = 0
                    .NUM_ETA_FAC = Nothing
                    .TOT_HT_FAC = 0
                    .TOT_AJU = 0
                    .TOT_AJU_ORI = 0
                    .HIS_YON = False
                    .FAC_DIR_YON = False
                    .FAC_CPT_YON = False
                    .NON_FAC_FRI_YON = False
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:798| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:148 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_DOCUMENT_FACTURE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_DOCUMENT_FACTURE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_DOCUMENT_FACTURE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:809| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:148 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_DOCUMENT_FACTURE] (
`NUM_SEQ`, 
`NUM_SEQ_SAV`, 
`REF_CLB`, 
`NUM_MDT`, 
`DAT_COM`, 
`DAT_FIN`, 
`NUM_FAC`, 
`DAT_FAC`, 
`DAT_CPT`, 
`TOT_HEU`, 
`TOT_FRI`, 
`TUX_TVA`, 
`TOT_HT`, 
`TOT_TVA`, 
`TOT_NON_SOU`, 
`TOT_TTC`, 
`CPT_DEB`, 
`CPT_CRE`, 
`NUM_FTA`, 
`MNT_FTA`, 
`DAT_TFT`, 
`TIT_CLI`, 
`TRI_LIG`, 
`TYP_DOC`, 
`NON_FAC_YON`, 
`FTA_YON`, 
`NOM_COL`, 
`TOT_HEU_RVT`, 
`TOT_FRI_RVT`, 
`SEL_TFT_YON`, 
`NUM_LOT`, 
`NPT_FAC_YON`, 
`TFT_YON`, 
`TOT_HEU_ORI`, 
`TOT_FRA_ORI`, 
`DAT_ACQ`, 
`TOT_ACO_HEU`, 
`TOT_ACO_FRI`, 
`TOT_ACO`, 
`TOT_ACO_TVA`, 
`NUM_ETA_FAC`, 
`TOT_HT_FAC`, 
`TOT_AJU`, 
`TOT_AJU_ORI`, 
`HIS_YON`, 
`FAC_DIR_YON`, 
`FAC_CPT_YON`, 
`NON_FAC_FRI_YON`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @16, @17, @18, @19, @20, @21, @22, @23, @24, @25, @26, @27, @28, @29, @30, @31, @32, @33, @34, @35, @36, @37, @38, @39, @40, @41, @42, @43, @44, @45, @46, @47)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_SEQ_SAV)
                    Cmd.Parameters.AddWithValue("@2", Me.REF_CLB)
                    Cmd.Parameters.AddWithValue("@3", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@4", Me.DAT_COM)
                    Cmd.Parameters.AddWithValue("@5", Me.DAT_FIN)
                    Cmd.Parameters.AddWithValue("@6", Me.NUM_FAC)
                    Cmd.Parameters.AddWithValue("@7", Me.DAT_FAC)
                    Cmd.Parameters.AddWithValue("@8", Me.DAT_CPT)
                    Cmd.Parameters.AddWithValue("@9", Me.TOT_HEU)
                    Cmd.Parameters.AddWithValue("@10", Me.TOT_FRI)
                    Cmd.Parameters.AddWithValue("@11", Me.TUX_TVA)
                    Cmd.Parameters.AddWithValue("@12", Me.TOT_HT)
                    Cmd.Parameters.AddWithValue("@13", Me.TOT_TVA)
                    Cmd.Parameters.AddWithValue("@14", Me.TOT_NON_SOU)
                    Cmd.Parameters.AddWithValue("@15", Me.TOT_TTC)
                    Cmd.Parameters.AddWithValue("@16", Me.CPT_DEB)
                    Cmd.Parameters.AddWithValue("@17", Me.CPT_CRE)
                    Cmd.Parameters.AddWithValue("@18", Me.NUM_FTA)
                    Cmd.Parameters.AddWithValue("@19", Me.MNT_FTA)
                    Cmd.Parameters.AddWithValue("@20", Me.DAT_TFT)
                    Cmd.Parameters.AddWithValue("@21", Me.TIT_CLI)
                    Cmd.Parameters.AddWithValue("@22", Me.TRI_LIG)
                    Cmd.Parameters.AddWithValue("@23", Me.TYP_DOC)
                    Cmd.Parameters.AddWithValue("@24", Me.NON_FAC_YON)
                    Cmd.Parameters.AddWithValue("@25", Me.FTA_YON)
                    Cmd.Parameters.AddWithValue("@26", Me.NOM_COL)
                    Cmd.Parameters.AddWithValue("@27", Me.TOT_HEU_RVT)
                    Cmd.Parameters.AddWithValue("@28", Me.TOT_FRI_RVT)
                    Cmd.Parameters.AddWithValue("@29", Me.SEL_TFT_YON)
                    Cmd.Parameters.AddWithValue("@30", Me.NUM_LOT)
                    Cmd.Parameters.AddWithValue("@31", Me.NPT_FAC_YON)
                    Cmd.Parameters.AddWithValue("@32", Me.TFT_YON)
                    Cmd.Parameters.AddWithValue("@33", Me.TOT_HEU_ORI)
                    Cmd.Parameters.AddWithValue("@34", Me.TOT_FRA_ORI)
                    Cmd.Parameters.AddWithValue("@35", Me.DAT_ACQ)
                    Cmd.Parameters.AddWithValue("@36", Me.TOT_ACO_HEU)
                    Cmd.Parameters.AddWithValue("@37", Me.TOT_ACO_FRI)
                    Cmd.Parameters.AddWithValue("@38", Me.TOT_ACO)
                    Cmd.Parameters.AddWithValue("@39", Me.TOT_ACO_TVA)
                    Cmd.Parameters.AddWithValue("@40", Me.NUM_ETA_FAC)
                    Cmd.Parameters.AddWithValue("@41", Me.TOT_HT_FAC)
                    Cmd.Parameters.AddWithValue("@42", Me.TOT_AJU)
                    Cmd.Parameters.AddWithValue("@43", Me.TOT_AJU_ORI)
                    Cmd.Parameters.AddWithValue("@44", Me.HIS_YON)
                    Cmd.Parameters.AddWithValue("@45", Me.FAC_DIR_YON)
                    Cmd.Parameters.AddWithValue("@46", Me.FAC_CPT_YON)
                    Cmd.Parameters.AddWithValue("@47", Me.NON_FAC_FRI_YON)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:834| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:150 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_DOCUMENT_FACTURE] SET NUM_SEQ_SAV = @NUM_SEQ_SAV, REF_CLB = @REF_CLB, NUM_MDT = @NUM_MDT, DAT_COM = @DAT_COM, DAT_FIN = @DAT_FIN, NUM_FAC = @NUM_FAC, DAT_FAC = @DAT_FAC, DAT_CPT = @DAT_CPT, TOT_HEU = @TOT_HEU, TOT_FRI = @TOT_FRI, TUX_TVA = @TUX_TVA, TOT_HT = @TOT_HT, TOT_TVA = @TOT_TVA, TOT_NON_SOU = @TOT_NON_SOU, TOT_TTC = @TOT_TTC, CPT_DEB = @CPT_DEB, CPT_CRE = @CPT_CRE, NUM_FTA = @NUM_FTA, MNT_FTA = @MNT_FTA, DAT_TFT = @DAT_TFT, TIT_CLI = @TIT_CLI, TRI_LIG = @TRI_LIG, TYP_DOC = @TYP_DOC, NON_FAC_YON = @NON_FAC_YON, FTA_YON = @FTA_YON, NOM_COL = @NOM_COL, TOT_HEU_RVT = @TOT_HEU_RVT, TOT_FRI_RVT = @TOT_FRI_RVT, SEL_TFT_YON = @SEL_TFT_YON, NUM_LOT = @NUM_LOT, NPT_FAC_YON = @NPT_FAC_YON, TFT_YON = @TFT_YON, TOT_HEU_ORI = @TOT_HEU_ORI, TOT_FRA_ORI = @TOT_FRA_ORI, DAT_ACQ = @DAT_ACQ, TOT_ACO_HEU = @TOT_ACO_HEU, TOT_ACO_FRI = @TOT_ACO_FRI, TOT_ACO = @TOT_ACO, TOT_ACO_TVA = @TOT_ACO_TVA, NUM_ETA_FAC = @NUM_ETA_FAC, TOT_HT_FAC = @TOT_HT_FAC, TOT_AJU = @TOT_AJU, TOT_AJU_ORI = @TOT_AJU_ORI, HIS_YON = @HIS_YON, FAC_DIR_YON = @FAC_DIR_YON, FAC_CPT_YON = @FAC_CPT_YON, NON_FAC_FRI_YON = @NON_FAC_FRI_YON WHERE NUM_SEQ = @NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_SAV", NUM_SEQ_SAV)
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    Cmd.Parameters.AddWithValue("@DAT_COM", DAT_COM)
                    Cmd.Parameters.AddWithValue("@DAT_FIN", DAT_FIN)
                    Cmd.Parameters.AddWithValue("@NUM_FAC", NUM_FAC)
                    Cmd.Parameters.AddWithValue("@DAT_FAC", DAT_FAC)
                    Cmd.Parameters.AddWithValue("@DAT_CPT", DAT_CPT)
                    Cmd.Parameters.AddWithValue("@TOT_HEU", TOT_HEU)
                    Cmd.Parameters.AddWithValue("@TOT_FRI", TOT_FRI)
                    Cmd.Parameters.AddWithValue("@TUX_TVA", TUX_TVA)
                    Cmd.Parameters.AddWithValue("@TOT_HT", TOT_HT)
                    Cmd.Parameters.AddWithValue("@TOT_TVA", TOT_TVA)
                    Cmd.Parameters.AddWithValue("@TOT_NON_SOU", TOT_NON_SOU)
                    Cmd.Parameters.AddWithValue("@TOT_TTC", TOT_TTC)
                    Cmd.Parameters.AddWithValue("@CPT_DEB", CPT_DEB)
                    Cmd.Parameters.AddWithValue("@CPT_CRE", CPT_CRE)
                    Cmd.Parameters.AddWithValue("@NUM_FTA", NUM_FTA)
                    Cmd.Parameters.AddWithValue("@MNT_FTA", MNT_FTA)
                    Cmd.Parameters.AddWithValue("@DAT_TFT", DAT_TFT)
                    Cmd.Parameters.AddWithValue("@TIT_CLI", TIT_CLI)
                    Cmd.Parameters.AddWithValue("@TRI_LIG", TRI_LIG)
                    Cmd.Parameters.AddWithValue("@TYP_DOC", TYP_DOC)
                    Cmd.Parameters.AddWithValue("@NON_FAC_YON", NON_FAC_YON)
                    Cmd.Parameters.AddWithValue("@FTA_YON", FTA_YON)
                    Cmd.Parameters.AddWithValue("@NOM_COL", NOM_COL)
                    Cmd.Parameters.AddWithValue("@TOT_HEU_RVT", TOT_HEU_RVT)
                    Cmd.Parameters.AddWithValue("@TOT_FRI_RVT", TOT_FRI_RVT)
                    Cmd.Parameters.AddWithValue("@SEL_TFT_YON", SEL_TFT_YON)
                    Cmd.Parameters.AddWithValue("@NUM_LOT", NUM_LOT)
                    Cmd.Parameters.AddWithValue("@NPT_FAC_YON", NPT_FAC_YON)
                    Cmd.Parameters.AddWithValue("@TFT_YON", TFT_YON)
                    Cmd.Parameters.AddWithValue("@TOT_HEU_ORI", TOT_HEU_ORI)
                    Cmd.Parameters.AddWithValue("@TOT_FRA_ORI", TOT_FRA_ORI)
                    Cmd.Parameters.AddWithValue("@DAT_ACQ", DAT_ACQ)
                    Cmd.Parameters.AddWithValue("@TOT_ACO_HEU", TOT_ACO_HEU)
                    Cmd.Parameters.AddWithValue("@TOT_ACO_FRI", TOT_ACO_FRI)
                    Cmd.Parameters.AddWithValue("@TOT_ACO", TOT_ACO)
                    Cmd.Parameters.AddWithValue("@TOT_ACO_TVA", TOT_ACO_TVA)
                    Cmd.Parameters.AddWithValue("@NUM_ETA_FAC", NUM_ETA_FAC)
                    Cmd.Parameters.AddWithValue("@TOT_HT_FAC", TOT_HT_FAC)
                    Cmd.Parameters.AddWithValue("@TOT_AJU", TOT_AJU)
                    Cmd.Parameters.AddWithValue("@TOT_AJU_ORI", TOT_AJU_ORI)
                    Cmd.Parameters.AddWithValue("@HIS_YON", HIS_YON)
                    Cmd.Parameters.AddWithValue("@FAC_DIR_YON", FAC_DIR_YON)
                    Cmd.Parameters.AddWithValue("@FAC_CPT_YON", FAC_CPT_YON)
                    Cmd.Parameters.AddWithValue("@NON_FAC_FRI_YON", NON_FAC_FRI_YON)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:848| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:150 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_DOCUMENT_FACTURE] WHERE NUM_SEQ =@NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{9}"
#Region "[On] |2019/07/16 23h21:862| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:150 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:869| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:150 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:879| <05.00.02> <Function> <> |.List()|List(Of MDT_DOCUMENT_FACTURE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:151 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_DOCUMENT_FACTURE)
                Dim Result As New List(Of MDT_DOCUMENT_FACTURE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_DOCUMENT_FACTURE(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), New DateTime(1970, 1, 1), Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), New DateTime(1970, 1, 1), Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), "", Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), New DateTime(1970, 1, 1), Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), New DateTime(1970, 1, 1), Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), 0, Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), 0, Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), 0, Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), 0, Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), 0, Row.Item(13)),
IIf(IsDBNull(Row.Item(14)), 0, Row.Item(14)),
IIf(IsDBNull(Row.Item(15)), 0, Row.Item(15)),
IIf(IsDBNull(Row.Item(16)), "", Row.Item(16)),
IIf(IsDBNull(Row.Item(17)), "", Row.Item(17)),
IIf(IsDBNull(Row.Item(18)), 0, Row.Item(18)),
IIf(IsDBNull(Row.Item(19)), 0, Row.Item(19)),
IIf(IsDBNull(Row.Item(20)), New DateTime(1970, 1, 1), Row.Item(20)),
IIf(IsDBNull(Row.Item(21)), "", Row.Item(21)),
IIf(IsDBNull(Row.Item(22)), 0, Row.Item(22)),
IIf(IsDBNull(Row.Item(23)), 0, Row.Item(23)),
IIf(IsDBNull(Row.Item(24)), False, Row.Item(24)),
IIf(IsDBNull(Row.Item(25)), False, Row.Item(25)),
IIf(IsDBNull(Row.Item(26)), "", Row.Item(26)),
IIf(IsDBNull(Row.Item(27)), 0, Row.Item(27)),
IIf(IsDBNull(Row.Item(28)), 0, Row.Item(28)),
IIf(IsDBNull(Row.Item(29)), False, Row.Item(29)),
IIf(IsDBNull(Row.Item(30)), 0, Row.Item(30)),
IIf(IsDBNull(Row.Item(31)), False, Row.Item(31)),
IIf(IsDBNull(Row.Item(32)), False, Row.Item(32)),
IIf(IsDBNull(Row.Item(33)), 0, Row.Item(33)),
IIf(IsDBNull(Row.Item(34)), 0, Row.Item(34)),
IIf(IsDBNull(Row.Item(35)), New DateTime(1970, 1, 1), Row.Item(35)),
IIf(IsDBNull(Row.Item(36)), 0, Row.Item(36)),
IIf(IsDBNull(Row.Item(37)), 0, Row.Item(37)),
IIf(IsDBNull(Row.Item(38)), 0, Row.Item(38)),
IIf(IsDBNull(Row.Item(39)), 0, Row.Item(39)),
IIf(IsDBNull(Row.Item(40)), "", Row.Item(40)),
IIf(IsDBNull(Row.Item(41)), 0, Row.Item(41)),
IIf(IsDBNull(Row.Item(42)), 0, Row.Item(42)),
IIf(IsDBNull(Row.Item(43)), 0, Row.Item(43)),
IIf(IsDBNull(Row.Item(44)), False, Row.Item(44)),
IIf(IsDBNull(Row.Item(45)), False, Row.Item(45)),
IIf(IsDBNull(Row.Item(46)), False, Row.Item(46)),
      IIf(IsDBNull(Row.Item(47)), False, Row.Item(47)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:886| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_DOCUMENT_FACTURE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:151 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_DOCUMENT_FACTURE)
                Dim Result As New List(Of MDT_DOCUMENT_FACTURE)
                Dim C As New MDT_DOCUMENT_FACTURE
                For Each Element As MDT_DOCUMENT_FACTURE In C.List
                    If Element.REF_CLB.ToLower() = Search.ToLower() Or Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NUM_FAC.ToLower() = Search.ToLower() Or Element.CPT_DEB.ToLower() = Search.ToLower() Or Element.CPT_CRE.ToLower() = Search.ToLower() Or Element.TIT_CLI.ToLower() = Search.ToLower() Or Element.NOM_COL.ToLower() = Search.ToLower() Or Element.NUM_ETA_FAC.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:896| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_DOCUMENT_FACTURE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:151 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_DOCUMENT_FACTURE)
                Dim Result As New List(Of MDT_DOCUMENT_FACTURE)
                Dim C As New MDT_DOCUMENT_FACTURE
                For Each Element As MDT_DOCUMENT_FACTURE In C.List
                    If Val(Element.NUM_SEQ) = Search Or Val(Element.NUM_SEQ_SAV) = Search Or Val(Element.TOT_HEU) = Search Or Val(Element.TOT_FRI) = Search Or Val(Element.TUX_TVA) = Search Or Val(Element.TOT_HT) = Search Or Val(Element.TOT_TVA) = Search Or Val(Element.TOT_NON_SOU) = Search Or Val(Element.TOT_TTC) = Search Or Val(Element.NUM_FTA) = Search Or Val(Element.MNT_FTA) = Search Or Val(Element.TRI_LIG) = Search Or Val(Element.TYP_DOC) = Search Or Val(Element.TOT_HEU_RVT) = Search Or Val(Element.TOT_FRI_RVT) = Search Or Val(Element.NUM_LOT) = Search Or Val(Element.TOT_HEU_ORI) = Search Or Val(Element.TOT_FRA_ORI) = Search Or Val(Element.TOT_ACO_HEU) = Search Or Val(Element.TOT_ACO_FRI) = Search Or Val(Element.TOT_ACO) = Search Or Val(Element.TOT_ACO_TVA) = Search Or Val(Element.TOT_HT_FAC) = Search Or Val(Element.TOT_AJU) = Search Or Val(Element.TOT_AJU_ORI) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:905| <05.00.05> <Function> <> |.SearchByDate()|List(Of MDT_DOCUMENT_FACTURE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:151 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDate(ByVal Search As DateTime) As List(Of MDT_DOCUMENT_FACTURE)
                Dim Result As New List(Of MDT_DOCUMENT_FACTURE)
                Dim C As New MDT_DOCUMENT_FACTURE
                For Each Element As MDT_DOCUMENT_FACTURE In C.List
                    If Element.DAT_COM = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:913| <05.00.06> <Function> <> |.SearchByDateRange()|List(Of MDT_DOCUMENT_FACTURE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:151 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="From_Date">All element from this date and this date included.</param>
            ''' <param name="Until_Date">All element before and including this date.</param>

            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDateRange(ByVal From_Date As DateTime,
ByVal Until_Date As DateTime) As List(Of MDT_DOCUMENT_FACTURE)
                Dim Result As New List(Of MDT_DOCUMENT_FACTURE)
                Dim C As New MDT_DOCUMENT_FACTURE
                For Each Element As MDT_DOCUMENT_FACTURE In C.List
                    If (Element.DAT_COM) >= From_Date And (Element.DAT_COM) <= Until_Date Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:923| <05.00.07> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:151 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_SEQ
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:929| <05.00.08> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:152 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:959| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:152 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:967| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:152 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:976| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:152 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:983| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:153 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:992| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:153 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:999| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:153 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:009| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:153 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:016| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:154 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:026| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:154 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:035| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:154 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:050| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:154 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:068| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:154 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:079| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:155 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:083| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:155 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_SEQ">(Set|Get) The NUM_SEQ as Integer.</param>
            ''' <param name="NUM_SEQ_SAV">(Set|Get) The NUM_SEQ_SAV as Integer.</param>
            ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>
            ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="DAT_COM">(Set|Get) The DAT_COM as DateTime.</param>
            ''' <param name="DAT_FIN">(Set|Get) The DAT_FIN as DateTime.</param>
            ''' <param name="NUM_FAC">(Set|Get) The NUM_FAC as String.</param>
            ''' <param name="DAT_FAC">(Set|Get) The DAT_FAC as DateTime.</param>
            ''' <param name="DAT_CPT">(Set|Get) The DAT_CPT as DateTime.</param>
            ''' <param name="TOT_HEU">(Set|Get) The TOT_HEU as Double.</param>
            ''' <param name="TOT_FRI">(Set|Get) The TOT_FRI as Double.</param>
            ''' <param name="TUX_TVA">(Set|Get) The TUX_TVA as Double.</param>
            ''' <param name="TOT_HT">(Set|Get) The TOT_HT as Double.</param>
            ''' <param name="TOT_TVA">(Set|Get) The TOT_TVA as Double.</param>
            ''' <param name="TOT_NON_SOU">(Set|Get) The TOT_NON_SOU as Double.</param>
            ''' <param name="TOT_TTC">(Set|Get) The TOT_TTC as Double.</param>
            ''' <param name="CPT_DEB">(Set|Get) The CPT_DEB as String.</param>
            ''' <param name="CPT_CRE">(Set|Get) The CPT_CRE as String.</param>
            ''' <param name="NUM_FTA">(Set|Get) The NUM_FTA as Integer.</param>
            ''' <param name="MNT_FTA">(Set|Get) The MNT_FTA as Double.</param>
            ''' <param name="DAT_TFT">(Set|Get) The DAT_TFT as DateTime.</param>
            ''' <param name="TIT_CLI">(Set|Get) The TIT_CLI as String.</param>
            ''' <param name="TRI_LIG">(Set|Get) The TRI_LIG as Double.</param>
            ''' <param name="TYP_DOC">(Set|Get) The TYP_DOC as Double.</param>
            ''' <param name="NON_FAC_YON">(Set|Get) The NON_FAC_YON as Boolean.</param>
            ''' <param name="FTA_YON">(Set|Get) The FTA_YON as Boolean.</param>
            ''' <param name="NOM_COL">(Set|Get) The NOM_COL as String.</param>
            ''' <param name="TOT_HEU_RVT">(Set|Get) The TOT_HEU_RVT as Double.</param>
            ''' <param name="TOT_FRI_RVT">(Set|Get) The TOT_FRI_RVT as Double.</param>
            ''' <param name="SEL_TFT_YON">(Set|Get) The SEL_TFT_YON as Boolean.</param>
            ''' <param name="NUM_LOT">(Set|Get) The NUM_LOT as Integer.</param>
            ''' <param name="NPT_FAC_YON">(Set|Get) The NPT_FAC_YON as Boolean.</param>
            ''' <param name="TFT_YON">(Set|Get) The TFT_YON as Boolean.</param>
            ''' <param name="TOT_HEU_ORI">(Set|Get) The TOT_HEU_ORI as Double.</param>
            ''' <param name="TOT_FRA_ORI">(Set|Get) The TOT_FRA_ORI as Double.</param>
            ''' <param name="DAT_ACQ">(Set|Get) The DAT_ACQ as DateTime.</param>
            ''' <param name="TOT_ACO_HEU">(Set|Get) The TOT_ACO_HEU as Double.</param>
            ''' <param name="TOT_ACO_FRI">(Set|Get) The TOT_ACO_FRI as Double.</param>
            ''' <param name="TOT_ACO">(Set|Get) The TOT_ACO as Double.</param>
            ''' <param name="TOT_ACO_TVA">(Set|Get) The TOT_ACO_TVA as Double.</param>
            ''' <param name="NUM_ETA_FAC">(Set|Get) The NUM_ETA_FAC as String.</param>
            ''' <param name="TOT_HT_FAC">(Set|Get) The TOT_HT_FAC as Double.</param>
            ''' <param name="TOT_AJU">(Set|Get) The TOT_AJU as Double.</param>
            ''' <param name="TOT_AJU_ORI">(Set|Get) The TOT_AJU_ORI as Double.</param>
            ''' <param name="HIS_YON">(Set|Get) The HIS_YON as Boolean.</param>
            ''' <param name="FAC_DIR_YON">(Set|Get) The FAC_DIR_YON as Boolean.</param>
            ''' <param name="FAC_CPT_YON">(Set|Get) The FAC_CPT_YON as Boolean.</param>
            ''' <param name="NON_FAC_FRI_YON">(Set|Get) The NON_FAC_FRI_YON as Boolean.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_SEQ As Integer,
ByVal NUM_SEQ_SAV As Integer,
ByVal REF_CLB As String,
ByVal NUM_MDT As String,
ByVal DAT_COM As DateTime,
ByVal DAT_FIN As DateTime,
ByVal NUM_FAC As String,
ByVal DAT_FAC As DateTime,
ByVal DAT_CPT As DateTime,
ByVal TOT_HEU As Double,
ByVal TOT_FRI As Double,
ByVal TUX_TVA As Double,
ByVal TOT_HT As Double,
ByVal TOT_TVA As Double,
ByVal TOT_NON_SOU As Double,
ByVal TOT_TTC As Double,
ByVal CPT_DEB As String,
ByVal CPT_CRE As String,
ByVal NUM_FTA As Integer,
ByVal MNT_FTA As Double,
ByVal DAT_TFT As DateTime,
ByVal TIT_CLI As String,
ByVal TRI_LIG As Double,
ByVal TYP_DOC As Double,
ByVal NON_FAC_YON As Boolean,
ByVal FTA_YON As Boolean,
ByVal NOM_COL As String,
ByVal TOT_HEU_RVT As Double,
ByVal TOT_FRI_RVT As Double,
ByVal SEL_TFT_YON As Boolean,
ByVal NUM_LOT As Integer,
ByVal NPT_FAC_YON As Boolean,
ByVal TFT_YON As Boolean,
ByVal TOT_HEU_ORI As Double,
ByVal TOT_FRA_ORI As Double,
ByVal DAT_ACQ As DateTime,
ByVal TOT_ACO_HEU As Double,
ByVal TOT_ACO_FRI As Double,
ByVal TOT_ACO As Double,
ByVal TOT_ACO_TVA As Double,
ByVal NUM_ETA_FAC As String,
ByVal TOT_HT_FAC As Double,
ByVal TOT_AJU As Double,
ByVal TOT_AJU_ORI As Double,
ByVal HIS_YON As Boolean,
ByVal FAC_DIR_YON As Boolean,
ByVal FAC_CPT_YON As Boolean,
ByVal NON_FAC_FRI_YON As Boolean)
                With Me
                    Clear()
                    Reset()
                    .NUM_SEQ = NUM_SEQ
                    .NUM_SEQ_SAV = NUM_SEQ_SAV
                    .REF_CLB = REF_CLB
                    .NUM_MDT = NUM_MDT
                    .DAT_COM = DAT_COM
                    .DAT_FIN = DAT_FIN
                    .NUM_FAC = NUM_FAC
                    .DAT_FAC = DAT_FAC
                    .DAT_CPT = DAT_CPT
                    .TOT_HEU = TOT_HEU
                    .TOT_FRI = TOT_FRI
                    .TUX_TVA = TUX_TVA
                    .TOT_HT = TOT_HT
                    .TOT_TVA = TOT_TVA
                    .TOT_NON_SOU = TOT_NON_SOU
                    .TOT_TTC = TOT_TTC
                    .CPT_DEB = CPT_DEB
                    .CPT_CRE = CPT_CRE
                    .NUM_FTA = NUM_FTA
                    .MNT_FTA = MNT_FTA
                    .DAT_TFT = DAT_TFT
                    .TIT_CLI = TIT_CLI
                    .TRI_LIG = TRI_LIG
                    .TYP_DOC = TYP_DOC
                    .NON_FAC_YON = NON_FAC_YON
                    .FTA_YON = FTA_YON
                    .NOM_COL = NOM_COL
                    .TOT_HEU_RVT = TOT_HEU_RVT
                    .TOT_FRI_RVT = TOT_FRI_RVT
                    .SEL_TFT_YON = SEL_TFT_YON
                    .NUM_LOT = NUM_LOT
                    .NPT_FAC_YON = NPT_FAC_YON
                    .TFT_YON = TFT_YON
                    .TOT_HEU_ORI = TOT_HEU_ORI
                    .TOT_FRA_ORI = TOT_FRA_ORI
                    .DAT_ACQ = DAT_ACQ
                    .TOT_ACO_HEU = TOT_ACO_HEU
                    .TOT_ACO_FRI = TOT_ACO_FRI
                    .TOT_ACO = TOT_ACO
                    .TOT_ACO_TVA = TOT_ACO_TVA
                    .NUM_ETA_FAC = NUM_ETA_FAC
                    .TOT_HT_FAC = TOT_HT_FAC
                    .TOT_AJU = TOT_AJU
                    .TOT_AJU_ORI = TOT_AJU_ORI
                    .HIS_YON = HIS_YON
                    .FAC_DIR_YON = FAC_DIR_YON
                    .FAC_CPT_YON = FAC_CPT_YON
                    .NON_FAC_FRI_YON = NON_FAC_FRI_YON
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:286| <08.00.00> <Class> <> |.MDT_DOCUMENT_FACTURE_LIGNE|Class|{51} |Production Cost : 69.7|Selling Price : 174.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_DOCUMENT_FACTURE_LIGNE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:286
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{24}||0.8| |19.2
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{24}||0.5| |12
        '''    |12| |Parameter  |{29}||0.5| |14.5
        '''    |Production Cost             |69.7
        '''    |Selling Price without VAT   |174.25
        '''    |Total TVA                   |13.42
        '''    |Grand Total                 |187.67
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:184 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_DOCUMENT_FACTURE_LIGNE
#Region "<1> [Property]{24}"
#Region "[On] |2019/07/16 23h21:286| <01.00.00> <Property> <Columns> |.NUM_SEQ()|Integer|"' (Set|Get) The NUM_SEQ as Integer.
            Private _NUM_SEQ As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:184 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ as Integer.")>
            Public Property NUM_SEQ() As Integer
                Get
                    Return _NUM_SEQ
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ as Integer.

#Region "[On] |2019/07/16 23h21:300| <01.00.01> <Property> <Columns> |.NUM_SEQ_FAC()|Integer|"' (Set|Get) The NUM_SEQ_FAC as Integer.
            Private _NUM_SEQ_FAC As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_FAC as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:184 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_FAC as Integer.")>
            Public Property NUM_SEQ_FAC() As Integer
                Get
                    Return _NUM_SEQ_FAC
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_FAC as Integer.

#Region "[On] |2019/07/16 23h21:304| <01.00.02> <Property> <Columns> |.NUM_SEQ_FAC_SAV()|Integer|"' (Set|Get) The NUM_SEQ_FAC_SAV as Integer.
            Private _NUM_SEQ_FAC_SAV As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_FAC_SAV as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_FAC_SAV as Integer.")>
            Public Property NUM_SEQ_FAC_SAV() As Integer
                Get
                    Return _NUM_SEQ_FAC_SAV
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_FAC_SAV = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_FAC_SAV as Integer.

#Region "[On] |2019/07/16 23h21:309| <01.00.03> <Property> <Columns> |.TYP_OPE()|String|"' (Set|Get) The TYP_OPE as String.
            Private _TYP_OPE As String
            '''    <Summary>
            '''     (Set|Get) The TYP_OPE as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_OPE as String.")>
            Public Property TYP_OPE() As String
                Get
                    Return _TYP_OPE
                End Get
                Set(ByVal Value As String)
                    _TYP_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_OPE as String.

#Region "[On] |2019/07/16 23h21:313| <01.00.04> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h21:318| <01.00.05> <Property> <Columns> |.NUM_ETA()|String|"' (Set|Get) The NUM_ETA as String.
            Private _NUM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NUM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_ETA as String.")>
            Public Property NUM_ETA() As String
                Get
                    Return _NUM_ETA
                End Get
                Set(ByVal Value As String)
                    _NUM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_ETA as String.

#Region "[On] |2019/07/16 23h21:323| <01.00.06> <Property> <Columns> |.TRI_NUM_ETA()|Integer|"' (Set|Get) The TRI_NUM_ETA as Integer.
            Private _TRI_NUM_ETA As Integer
            '''    <Summary>
            '''     (Set|Get) The TRI_NUM_ETA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TRI_NUM_ETA as Integer.")>
            Public Property TRI_NUM_ETA() As Integer
                Get
                    Return _TRI_NUM_ETA
                End Get
                Set(ByVal Value As Integer)
                    _TRI_NUM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The TRI_NUM_ETA as Integer.

#Region "[On] |2019/07/16 23h21:328| <01.00.07> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:186 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#Region "[On] |2019/07/16 23h21:333| <01.00.08> <Property> <Columns> |.DAT_OPE()|DateTime|"' (Set|Get) The DAT_OPE as DateTime.
            Private _DAT_OPE As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_OPE as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:186 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_OPE as DateTime.")>
            Public Property DAT_OPE() As DateTime
                Get
                    Return _DAT_OPE
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_OPE as DateTime.

#Region "[On] |2019/07/16 23h21:338| <01.00.09> <Property> <Columns> |.NUM_FTA()|Integer|"' (Set|Get) The NUM_FTA as Integer.
            Private _NUM_FTA As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_FTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:186 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FTA as Integer.")>
            Public Property NUM_FTA() As Integer
                Get
                    Return _NUM_FTA
                End Get
                Set(ByVal Value As Integer)
                    _NUM_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FTA as Integer.

#Region "[On] |2019/07/16 23h21:343| <01.00.10> <Property> <Columns> |.COD_ART()|String|"' (Set|Get) The COD_ART as String.
            Private _COD_ART As String
            '''    <Summary>
            '''     (Set|Get) The COD_ART as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:186 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_ART as String.")>
            Public Property COD_ART() As String
                Get
                    Return _COD_ART
                End Get
                Set(ByVal Value As String)
                    _COD_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_ART as String.

#Region "[On] |2019/07/16 23h21:348| <01.00.11> <Property> <Columns> |.LIB_PRS()|String|"' (Set|Get) The LIB_PRS as String.
            Private _LIB_PRS As String
            '''    <Summary>
            '''     (Set|Get) The LIB_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:186 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_PRS as String.")>
            Public Property LIB_PRS() As String
                Get
                    Return _LIB_PRS
                End Get
                Set(ByVal Value As String)
                    _LIB_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_PRS as String.

#Region "[On] |2019/07/16 23h21:353| <01.00.12> <Property> <Columns> |.QTE_PRS()|Double|"' (Set|Get) The QTE_PRS as Double.
            Private _QTE_PRS As Double
            '''    <Summary>
            '''     (Set|Get) The QTE_PRS as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:187 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The QTE_PRS as Double.")>
            Public Property QTE_PRS() As Double
                Get
                    Return _QTE_PRS
                End Get
                Set(ByVal Value As Double)
                    _QTE_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The QTE_PRS as Double.

#Region "[On] |2019/07/16 23h21:358| <01.00.13> <Property> <Columns> |.COD_CAT()|String|"' (Set|Get) The COD_CAT as String.
            Private _COD_CAT As String
            '''    <Summary>
            '''     (Set|Get) The COD_CAT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:187 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_CAT as String.")>
            Public Property COD_CAT() As String
                Get
                    Return _COD_CAT
                End Get
                Set(ByVal Value As String)
                    _COD_CAT = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_CAT as String.

#Region "[On] |2019/07/16 23h21:363| <01.00.14> <Property> <Columns> |.PRX_VTE()|Double|"' (Set|Get) The PRX_VTE as Double.
            Private _PRX_VTE As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_VTE as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:187 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_VTE as Double.")>
            Public Property PRX_VTE() As Double
                Get
                    Return _PRX_VTE
                End Get
                Set(ByVal Value As Double)
                    _PRX_VTE = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_VTE as Double.

#Region "[On] |2019/07/16 23h21:369| <01.00.15> <Property> <Columns> |.MNT_VTE()|Double|"' (Set|Get) The MNT_VTE as Double.
            Private _MNT_VTE As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_VTE as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:187 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_VTE as Double.")>
            Public Property MNT_VTE() As Double
                Get
                    Return _MNT_VTE
                End Get
                Set(ByVal Value As Double)
                    _MNT_VTE = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_VTE as Double.

#Region "[On] |2019/07/16 23h21:393| <01.00.16> <Property> <Columns> |.COD_TVA()|String|"' (Set|Get) The COD_TVA as String.
            Private _COD_TVA As String
            '''    <Summary>
            '''     (Set|Get) The COD_TVA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:187 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TVA as String.")>
            Public Property COD_TVA() As String
                Get
                    Return _COD_TVA
                End Get
                Set(ByVal Value As String)
                    _COD_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TVA as String.

#Region "[On] |2019/07/16 23h21:398| <01.00.17> <Property> <Columns> |.POST_IT()|String|"' (Set|Get) The POST_IT as String.
            Private _POST_IT As String
            '''    <Summary>
            '''     (Set|Get) The POST_IT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:188 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The POST_IT as String.")>
            Public Property POST_IT() As String
                Get
                    Return _POST_IT
                End Get
                Set(ByVal Value As String)
                    _POST_IT = Value
                End Set
            End Property
#End Region '(Set|Get) The POST_IT as String.

#Region "[On] |2019/07/16 23h21:404| <01.00.18> <Property> <Columns> |.FAC_YON()|Boolean|"' (Set|Get) The FAC_YON as Boolean.
            Private _FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:188 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_YON as Boolean.")>
            Public Property FAC_YON() As Boolean
                Get
                    Return _FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h21:409| <01.00.19> <Property> <Columns> |.PRX_RVT()|Double|"' (Set|Get) The PRX_RVT as Double.
            Private _PRX_RVT As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_RVT as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:189 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_RVT as Double.")>
            Public Property PRX_RVT() As Double
                Get
                    Return _PRX_RVT
                End Get
                Set(ByVal Value As Double)
                    _PRX_RVT = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_RVT as Double.

#Region "[On] |2019/07/16 23h21:415| <01.00.20> <Property> <Columns> |.MNT_RVT()|Double|"' (Set|Get) The MNT_RVT as Double.
            Private _MNT_RVT As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_RVT as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:189 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_RVT as Double.")>
            Public Property MNT_RVT() As Double
                Get
                    Return _MNT_RVT
                End Get
                Set(ByVal Value As Double)
                    _MNT_RVT = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_RVT as Double.

#Region "[On] |2019/07/16 23h21:420| <01.00.21> <Property> <Columns> |.NUM_SEQ_OPE()|Integer|"' (Set|Get) The NUM_SEQ_OPE as Integer.
            Private _NUM_SEQ_OPE As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_OPE as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:189 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_OPE as Integer.")>
            Public Property NUM_SEQ_OPE() As Integer
                Get
                    Return _NUM_SEQ_OPE
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_OPE as Integer.

#Region "[On] |2019/07/16 23h21:425| <01.00.22> <Property> <Columns> |.EXC_YON()|Boolean|"' (Set|Get) The EXC_YON as Boolean.
            Private _EXC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The EXC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:190 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The EXC_YON as Boolean.")>
            Public Property EXC_YON() As Boolean
                Get
                    Return _EXC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _EXC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The EXC_YON as Boolean.

#Region "[On] |2019/07/16 23h21:432| <01.00.23> <Property> <Columns> |.NUM_SEQ_FTA()|Integer|"' (Set|Get) The NUM_SEQ_FTA as Integer.
            Private _NUM_SEQ_FTA As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_FTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:190 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_FTA as Integer.")>
            Public Property NUM_SEQ_FTA() As Integer
                Get
                    Return _NUM_SEQ_FTA
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_FTA as Integer.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:439| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{23}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:192 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_SEQ as Integer.</summary>
                [NUM_SEQ] = 0
                ''' <summary>(Set|Get) The NUM_SEQ_FAC as Integer.</summary>
                [NUM_SEQ_FAC] = 1
                ''' <summary>(Set|Get) The NUM_SEQ_FAC_SAV as Integer.</summary>
                [NUM_SEQ_FAC_SAV] = 2
                ''' <summary>(Set|Get) The TYP_OPE as String.</summary>
                [TYP_OPE] = 3
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 4
                ''' <summary>(Set|Get) The NUM_ETA as String.</summary>
                [NUM_ETA] = 5
                ''' <summary>(Set|Get) The TRI_NUM_ETA as Integer.</summary>
                [TRI_NUM_ETA] = 6
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 7
                ''' <summary>(Set|Get) The DAT_OPE as DateTime.</summary>
                [DAT_OPE] = 8
                ''' <summary>(Set|Get) The NUM_FTA as Integer.</summary>
                [NUM_FTA] = 9
                ''' <summary>(Set|Get) The COD_ART as String.</summary>
                [COD_ART] = 10
                ''' <summary>(Set|Get) The LIB_PRS as String.</summary>
                [LIB_PRS] = 11
                ''' <summary>(Set|Get) The QTE_PRS as Double.</summary>
                [QTE_PRS] = 12
                ''' <summary>(Set|Get) The COD_CAT as String.</summary>
                [COD_CAT] = 13
                ''' <summary>(Set|Get) The PRX_VTE as Double.</summary>
                [PRX_VTE] = 14
                ''' <summary>(Set|Get) The MNT_VTE as Double.</summary>
                [MNT_VTE] = 15
                ''' <summary>(Set|Get) The COD_TVA as String.</summary>
                [COD_TVA] = 16
                ''' <summary>(Set|Get) The POST_IT as String.</summary>
                [POST_IT] = 17
                ''' <summary>(Set|Get) The FAC_YON as Boolean.</summary>
                [FAC_YON] = 18
                ''' <summary>(Set|Get) The PRX_RVT as Double.</summary>
                [PRX_RVT] = 19
                ''' <summary>(Set|Get) The MNT_RVT as Double.</summary>
                [MNT_RVT] = 20
                ''' <summary>(Set|Get) The NUM_SEQ_OPE as Integer.</summary>
                [NUM_SEQ_OPE] = 21
                ''' <summary>(Set|Get) The EXC_YON as Boolean.</summary>
                [EXC_YON] = 22
                ''' <summary>(Set|Get) The NUM_SEQ_FTA as Integer.</summary>
                [NUM_SEQ_FTA] = 23
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:446| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:192 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_SEQ = 0
                    .NUM_SEQ_FAC = 0
                    .NUM_SEQ_FAC_SAV = 0
                    .TYP_OPE = Nothing
                    .NUM_MDT = Nothing
                    .NUM_ETA = Nothing
                    .TRI_NUM_ETA = 0
                    .REF_CLB = Nothing
                    .DAT_OPE = New DateTime
                    .NUM_FTA = 0
                    .COD_ART = Nothing
                    .LIB_PRS = Nothing
                    .QTE_PRS = 0
                    .COD_CAT = Nothing
                    .PRX_VTE = 0
                    .MNT_VTE = 0
                    .COD_TVA = Nothing
                    .POST_IT = Nothing
                    .FAC_YON = False
                    .PRX_RVT = 0
                    .MNT_RVT = 0
                    .NUM_SEQ_OPE = 0
                    .EXC_YON = False
                    .NUM_SEQ_FTA = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:451| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:192 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_DOCUMENT_FACTURE_LIGNE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_DOCUMENT_FACTURE_LIGNE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_DOCUMENT_FACTURE_LIGNE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:459| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:193 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_DOCUMENT_FACTURE_LIGNE] (
`NUM_SEQ`, 
`NUM_SEQ_FAC`, 
`NUM_SEQ_FAC_SAV`, 
`TYP_OPE`, 
`NUM_MDT`, 
`NUM_ETA`, 
`TRI_NUM_ETA`, 
`REF_CLB`, 
`DAT_OPE`, 
`NUM_FTA`, 
`COD_ART`, 
`LIB_PRS`, 
`QTE_PRS`, 
`COD_CAT`, 
`PRX_VTE`, 
`MNT_VTE`, 
`COD_TVA`, 
`POST_IT`, 
`FAC_YON`, 
`PRX_RVT`, 
`MNT_RVT`, 
`NUM_SEQ_OPE`, 
`EXC_YON`, 
`NUM_SEQ_FTA`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @16, @17, @18, @19, @20, @21, @22, @23)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_SEQ_FAC)
                    Cmd.Parameters.AddWithValue("@2", Me.NUM_SEQ_FAC_SAV)
                    Cmd.Parameters.AddWithValue("@3", Me.TYP_OPE)
                    Cmd.Parameters.AddWithValue("@4", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@5", Me.NUM_ETA)
                    Cmd.Parameters.AddWithValue("@6", Me.TRI_NUM_ETA)
                    Cmd.Parameters.AddWithValue("@7", Me.REF_CLB)
                    Cmd.Parameters.AddWithValue("@8", Me.DAT_OPE)
                    Cmd.Parameters.AddWithValue("@9", Me.NUM_FTA)
                    Cmd.Parameters.AddWithValue("@10", Me.COD_ART)
                    Cmd.Parameters.AddWithValue("@11", Me.LIB_PRS)
                    Cmd.Parameters.AddWithValue("@12", Me.QTE_PRS)
                    Cmd.Parameters.AddWithValue("@13", Me.COD_CAT)
                    Cmd.Parameters.AddWithValue("@14", Me.PRX_VTE)
                    Cmd.Parameters.AddWithValue("@15", Me.MNT_VTE)
                    Cmd.Parameters.AddWithValue("@16", Me.COD_TVA)
                    Cmd.Parameters.AddWithValue("@17", Me.POST_IT)
                    Cmd.Parameters.AddWithValue("@18", Me.FAC_YON)
                    Cmd.Parameters.AddWithValue("@19", Me.PRX_RVT)
                    Cmd.Parameters.AddWithValue("@20", Me.MNT_RVT)
                    Cmd.Parameters.AddWithValue("@21", Me.NUM_SEQ_OPE)
                    Cmd.Parameters.AddWithValue("@22", Me.EXC_YON)
                    Cmd.Parameters.AddWithValue("@23", Me.NUM_SEQ_FTA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:465| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:193 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_DOCUMENT_FACTURE_LIGNE] SET NUM_SEQ_FAC = @NUM_SEQ_FAC, NUM_SEQ_FAC_SAV = @NUM_SEQ_FAC_SAV, TYP_OPE = @TYP_OPE, NUM_MDT = @NUM_MDT, NUM_ETA = @NUM_ETA, TRI_NUM_ETA = @TRI_NUM_ETA, REF_CLB = @REF_CLB, DAT_OPE = @DAT_OPE, NUM_FTA = @NUM_FTA, COD_ART = @COD_ART, LIB_PRS = @LIB_PRS, QTE_PRS = @QTE_PRS, COD_CAT = @COD_CAT, PRX_VTE = @PRX_VTE, MNT_VTE = @MNT_VTE, COD_TVA = @COD_TVA, POST_IT = @POST_IT, FAC_YON = @FAC_YON, PRX_RVT = @PRX_RVT, MNT_RVT = @MNT_RVT, NUM_SEQ_OPE = @NUM_SEQ_OPE, EXC_YON = @EXC_YON, NUM_SEQ_FTA = @NUM_SEQ_FTA WHERE NUM_SEQ = @NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_FAC", NUM_SEQ_FAC)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_FAC_SAV", NUM_SEQ_FAC_SAV)
                    Cmd.Parameters.AddWithValue("@TYP_OPE", TYP_OPE)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    Cmd.Parameters.AddWithValue("@NUM_ETA", NUM_ETA)
                    Cmd.Parameters.AddWithValue("@TRI_NUM_ETA", TRI_NUM_ETA)
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    Cmd.Parameters.AddWithValue("@DAT_OPE", DAT_OPE)
                    Cmd.Parameters.AddWithValue("@NUM_FTA", NUM_FTA)
                    Cmd.Parameters.AddWithValue("@COD_ART", COD_ART)
                    Cmd.Parameters.AddWithValue("@LIB_PRS", LIB_PRS)
                    Cmd.Parameters.AddWithValue("@QTE_PRS", QTE_PRS)
                    Cmd.Parameters.AddWithValue("@COD_CAT", COD_CAT)
                    Cmd.Parameters.AddWithValue("@PRX_VTE", PRX_VTE)
                    Cmd.Parameters.AddWithValue("@MNT_VTE", MNT_VTE)
                    Cmd.Parameters.AddWithValue("@COD_TVA", COD_TVA)
                    Cmd.Parameters.AddWithValue("@POST_IT", POST_IT)
                    Cmd.Parameters.AddWithValue("@FAC_YON", FAC_YON)
                    Cmd.Parameters.AddWithValue("@PRX_RVT", PRX_RVT)
                    Cmd.Parameters.AddWithValue("@MNT_RVT", MNT_RVT)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_OPE", NUM_SEQ_OPE)
                    Cmd.Parameters.AddWithValue("@EXC_YON", EXC_YON)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_FTA", NUM_SEQ_FTA)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:480| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:193 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_DOCUMENT_FACTURE_LIGNE] WHERE NUM_SEQ =@NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:491| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:193 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:502| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:193 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:508| <05.00.02> <Function> <> |.List()|List(Of MDT_DOCUMENT_FACTURE_LIGNE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:193 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_DOCUMENT_FACTURE_LIGNE)
                Dim Result As New List(Of MDT_DOCUMENT_FACTURE_LIGNE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_DOCUMENT_FACTURE_LIGNE(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), 0, Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), "", Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), 0, Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), "", Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), New DateTime(1970, 1, 1), Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), 0, Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), "", Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), "", Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), 0, Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), "", Row.Item(13)),
IIf(IsDBNull(Row.Item(14)), 0, Row.Item(14)),
IIf(IsDBNull(Row.Item(15)), 0, Row.Item(15)),
IIf(IsDBNull(Row.Item(16)), "", Row.Item(16)),
IIf(IsDBNull(Row.Item(17)), "", Row.Item(17)),
IIf(IsDBNull(Row.Item(18)), False, Row.Item(18)),
IIf(IsDBNull(Row.Item(19)), 0, Row.Item(19)),
IIf(IsDBNull(Row.Item(20)), 0, Row.Item(20)),
IIf(IsDBNull(Row.Item(21)), 0, Row.Item(21)),
IIf(IsDBNull(Row.Item(22)), False, Row.Item(22)),
      IIf(IsDBNull(Row.Item(23)), 0, Row.Item(23)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:514| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_DOCUMENT_FACTURE_LIGNE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:193 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_DOCUMENT_FACTURE_LIGNE)
                Dim Result As New List(Of MDT_DOCUMENT_FACTURE_LIGNE)
                Dim C As New MDT_DOCUMENT_FACTURE_LIGNE
                For Each Element As MDT_DOCUMENT_FACTURE_LIGNE In C.List
                    If Element.TYP_OPE.ToLower() = Search.ToLower() Or Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NUM_ETA.ToLower() = Search.ToLower() Or Element.REF_CLB.ToLower() = Search.ToLower() Or Element.COD_ART.ToLower() = Search.ToLower() Or Element.LIB_PRS.ToLower() = Search.ToLower() Or Element.COD_CAT.ToLower() = Search.ToLower() Or Element.COD_TVA.ToLower() = Search.ToLower() Or Element.POST_IT.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:520| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_DOCUMENT_FACTURE_LIGNE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:193 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_DOCUMENT_FACTURE_LIGNE)
                Dim Result As New List(Of MDT_DOCUMENT_FACTURE_LIGNE)
                Dim C As New MDT_DOCUMENT_FACTURE_LIGNE
                For Each Element As MDT_DOCUMENT_FACTURE_LIGNE In C.List
                    If Val(Element.NUM_SEQ) = Search Or Val(Element.NUM_SEQ_FAC) = Search Or Val(Element.NUM_SEQ_FAC_SAV) = Search Or Val(Element.TRI_NUM_ETA) = Search Or Val(Element.NUM_FTA) = Search Or Val(Element.QTE_PRS) = Search Or Val(Element.PRX_VTE) = Search Or Val(Element.MNT_VTE) = Search Or Val(Element.PRX_RVT) = Search Or Val(Element.MNT_RVT) = Search Or Val(Element.NUM_SEQ_OPE) = Search Or Val(Element.NUM_SEQ_FTA) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:526| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:194 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_SEQ
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:534| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:194 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:540| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:195 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:547| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:195 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:554| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:195 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:560| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:195 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:573| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:195 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:583| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:195 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:591| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:196 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:596| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:196 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:607| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:196 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:614| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:196 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:620| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:196 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:626| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:197 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:633| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:197 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:635| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:197 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_SEQ">(Set|Get) The NUM_SEQ as Integer.</param>
            ''' <param name="NUM_SEQ_FAC">(Set|Get) The NUM_SEQ_FAC as Integer.</param>
            ''' <param name="NUM_SEQ_FAC_SAV">(Set|Get) The NUM_SEQ_FAC_SAV as Integer.</param>
            ''' <param name="TYP_OPE">(Set|Get) The TYP_OPE as String.</param>
            ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="NUM_ETA">(Set|Get) The NUM_ETA as String.</param>
            ''' <param name="TRI_NUM_ETA">(Set|Get) The TRI_NUM_ETA as Integer.</param>
            ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>
            ''' <param name="DAT_OPE">(Set|Get) The DAT_OPE as DateTime.</param>
            ''' <param name="NUM_FTA">(Set|Get) The NUM_FTA as Integer.</param>
            ''' <param name="COD_ART">(Set|Get) The COD_ART as String.</param>
            ''' <param name="LIB_PRS">(Set|Get) The LIB_PRS as String.</param>
            ''' <param name="QTE_PRS">(Set|Get) The QTE_PRS as Double.</param>
            ''' <param name="COD_CAT">(Set|Get) The COD_CAT as String.</param>
            ''' <param name="PRX_VTE">(Set|Get) The PRX_VTE as Double.</param>
            ''' <param name="MNT_VTE">(Set|Get) The MNT_VTE as Double.</param>
            ''' <param name="COD_TVA">(Set|Get) The COD_TVA as String.</param>
            ''' <param name="POST_IT">(Set|Get) The POST_IT as String.</param>
            ''' <param name="FAC_YON">(Set|Get) The FAC_YON as Boolean.</param>
            ''' <param name="PRX_RVT">(Set|Get) The PRX_RVT as Double.</param>
            ''' <param name="MNT_RVT">(Set|Get) The MNT_RVT as Double.</param>
            ''' <param name="NUM_SEQ_OPE">(Set|Get) The NUM_SEQ_OPE as Integer.</param>
            ''' <param name="EXC_YON">(Set|Get) The EXC_YON as Boolean.</param>
            ''' <param name="NUM_SEQ_FTA">(Set|Get) The NUM_SEQ_FTA as Integer.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_SEQ As Integer,
ByVal NUM_SEQ_FAC As Integer,
ByVal NUM_SEQ_FAC_SAV As Integer,
ByVal TYP_OPE As String,
ByVal NUM_MDT As String,
ByVal NUM_ETA As String,
ByVal TRI_NUM_ETA As Integer,
ByVal REF_CLB As String,
ByVal DAT_OPE As DateTime,
ByVal NUM_FTA As Integer,
ByVal COD_ART As String,
ByVal LIB_PRS As String,
ByVal QTE_PRS As Double,
ByVal COD_CAT As String,
ByVal PRX_VTE As Double,
ByVal MNT_VTE As Double,
ByVal COD_TVA As String,
ByVal POST_IT As String,
ByVal FAC_YON As Boolean,
ByVal PRX_RVT As Double,
ByVal MNT_RVT As Double,
ByVal NUM_SEQ_OPE As Integer,
ByVal EXC_YON As Boolean,
ByVal NUM_SEQ_FTA As Integer)
                With Me
                    Clear()
                    Reset()
                    .NUM_SEQ = NUM_SEQ
                    .NUM_SEQ_FAC = NUM_SEQ_FAC
                    .NUM_SEQ_FAC_SAV = NUM_SEQ_FAC_SAV
                    .TYP_OPE = TYP_OPE
                    .NUM_MDT = NUM_MDT
                    .NUM_ETA = NUM_ETA
                    .TRI_NUM_ETA = TRI_NUM_ETA
                    .REF_CLB = REF_CLB
                    .DAT_OPE = DAT_OPE
                    .NUM_FTA = NUM_FTA
                    .COD_ART = COD_ART
                    .LIB_PRS = LIB_PRS
                    .QTE_PRS = QTE_PRS
                    .COD_CAT = COD_CAT
                    .PRX_VTE = PRX_VTE
                    .MNT_VTE = MNT_VTE
                    .COD_TVA = COD_TVA
                    .POST_IT = POST_IT
                    .FAC_YON = FAC_YON
                    .PRX_RVT = PRX_RVT
                    .MNT_RVT = MNT_RVT
                    .NUM_SEQ_OPE = NUM_SEQ_OPE
                    .EXC_YON = EXC_YON
                    .NUM_SEQ_FTA = NUM_SEQ_FTA
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:790| <08.00.00> <Class> <> |.MDT_DOCUMENT_UTILISATEUR|Class|{33} |Production Cost : 37.3|Selling Price : 93.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_DOCUMENT_UTILISATEUR
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:790
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{6}||0.8| |4.8
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{6}||0.5| |3
        '''    |12| |Parameter  |{11}||0.5| |5.5
        '''    |Production Cost             |37.3
        '''    |Selling Price without VAT   |93.25
        '''    |Total TVA                   |7.18
        '''    |Grand Total                 |100.43
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:213 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_DOCUMENT_UTILISATEUR
#Region "<1> [Property]{6}"
#Region "[On] |2019/07/16 23h21:791| <01.00.00> <Property> <Columns> |.NUM_SEQ()|Integer|"' (Set|Get) The NUM_SEQ as Integer.
            Private _NUM_SEQ As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:213 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ as Integer.")>
            Public Property NUM_SEQ() As Integer
                Get
                    Return _NUM_SEQ
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ as Integer.

#Region "[On] |2019/07/16 23h21:801| <01.00.01> <Property> <Columns> |.TYP_DOC()|String|"' (Set|Get) The TYP_DOC as String.
            Private _TYP_DOC As String
            '''    <Summary>
            '''     (Set|Get) The TYP_DOC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:213 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_DOC as String.")>
            Public Property TYP_DOC() As String
                Get
                    Return _TYP_DOC
                End Get
                Set(ByVal Value As String)
                    _TYP_DOC = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_DOC as String.

#Region "[On] |2019/07/16 23h21:805| <01.00.02> <Property> <Columns> |.REF_USR()|String|"' (Set|Get) The REF_USR as String.
            Private _REF_USR As String
            '''    <Summary>
            '''     (Set|Get) The REF_USR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:213 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_USR as String.")>
            Public Property REF_USR() As String
                Get
                    Return _REF_USR
                End Get
                Set(ByVal Value As String)
                    _REF_USR = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_USR as String.

#Region "[On] |2019/07/16 23h21:810| <01.00.03> <Property> <Columns> |.LIB_DOC()|String|"' (Set|Get) The LIB_DOC as String.
            Private _LIB_DOC As String
            '''    <Summary>
            '''     (Set|Get) The LIB_DOC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:213 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_DOC as String.")>
            Public Property LIB_DOC() As String
                Get
                    Return _LIB_DOC
                End Get
                Set(ByVal Value As String)
                    _LIB_DOC = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_DOC as String.

#Region "[On] |2019/07/16 23h21:814| <01.00.04> <Property> <Columns> |.FIC_DOC()|String|"' (Set|Get) The FIC_DOC as String.
            Private _FIC_DOC As String
            '''    <Summary>
            '''     (Set|Get) The FIC_DOC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:213 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FIC_DOC as String.")>
            Public Property FIC_DOC() As String
                Get
                    Return _FIC_DOC
                End Get
                Set(ByVal Value As String)
                    _FIC_DOC = Value
                End Set
            End Property
#End Region '(Set|Get) The FIC_DOC as String.

#Region "[On] |2019/07/16 23h21:819| <01.00.05> <Property> <Columns> |.FIC_DOC_LIG()|String|"' (Set|Get) The FIC_DOC_LIG as String.
            Private _FIC_DOC_LIG As String
            '''    <Summary>
            '''     (Set|Get) The FIC_DOC_LIG as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:215 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FIC_DOC_LIG as String.")>
            Public Property FIC_DOC_LIG() As String
                Get
                    Return _FIC_DOC_LIG
                End Get
                Set(ByVal Value As String)
                    _FIC_DOC_LIG = Value
                End Set
            End Property
#End Region '(Set|Get) The FIC_DOC_LIG as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:824| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{5}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:215 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_SEQ as Integer.</summary>
                [NUM_SEQ] = 0
                ''' <summary>(Set|Get) The TYP_DOC as String.</summary>
                [TYP_DOC] = 1
                ''' <summary>(Set|Get) The REF_USR as String.</summary>
                [REF_USR] = 2
                ''' <summary>(Set|Get) The LIB_DOC as String.</summary>
                [LIB_DOC] = 3
                ''' <summary>(Set|Get) The FIC_DOC as String.</summary>
                [FIC_DOC] = 4
                ''' <summary>(Set|Get) The FIC_DOC_LIG as String.</summary>
                [FIC_DOC_LIG] = 5
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:828| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:216 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_SEQ = 0
                    .TYP_DOC = Nothing
                    .REF_USR = Nothing
                    .LIB_DOC = Nothing
                    .FIC_DOC = Nothing
                    .FIC_DOC_LIG = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:833| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:216 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_DOCUMENT_UTILISATEUR"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_DOCUMENT_UTILISATEUR"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_DOCUMENT_UTILISATEUR"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:838| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:217 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_DOCUMENT_UTILISATEUR] (
`NUM_SEQ`, 
`TYP_DOC`, 
`REF_USR`, 
`LIB_DOC`, 
`FIC_DOC`, 
`FIC_DOC_LIG`) Values (@0, @1, @2, @3, @4, @5)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@1", Me.TYP_DOC)
                    Cmd.Parameters.AddWithValue("@2", Me.REF_USR)
                    Cmd.Parameters.AddWithValue("@3", Me.LIB_DOC)
                    Cmd.Parameters.AddWithValue("@4", Me.FIC_DOC)
                    Cmd.Parameters.AddWithValue("@5", Me.FIC_DOC_LIG)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:843| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:217 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_DOCUMENT_UTILISATEUR] SET TYP_DOC = @TYP_DOC, REF_USR = @REF_USR, LIB_DOC = @LIB_DOC, FIC_DOC = @FIC_DOC, FIC_DOC_LIG = @FIC_DOC_LIG WHERE NUM_SEQ = @NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@TYP_DOC", TYP_DOC)
                    Cmd.Parameters.AddWithValue("@REF_USR", REF_USR)
                    Cmd.Parameters.AddWithValue("@LIB_DOC", LIB_DOC)
                    Cmd.Parameters.AddWithValue("@FIC_DOC", FIC_DOC)
                    Cmd.Parameters.AddWithValue("@FIC_DOC_LIG", FIC_DOC_LIG)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:848| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:217 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_DOCUMENT_UTILISATEUR] WHERE NUM_SEQ =@NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:864| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:217 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:870| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:217 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:875| <05.00.02> <Function> <> |.List()|List(Of MDT_DOCUMENT_UTILISATEUR)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:217 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_DOCUMENT_UTILISATEUR)
                Dim Result As New List(Of MDT_DOCUMENT_UTILISATEUR)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_DOCUMENT_UTILISATEUR(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)),
      IIf(IsDBNull(Row.Item(5)), "", Row.Item(5)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:879| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_DOCUMENT_UTILISATEUR)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:217 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_DOCUMENT_UTILISATEUR)
                Dim Result As New List(Of MDT_DOCUMENT_UTILISATEUR)
                Dim C As New MDT_DOCUMENT_UTILISATEUR
                For Each Element As MDT_DOCUMENT_UTILISATEUR In C.List
                    If Element.TYP_DOC.ToLower() = Search.ToLower() Or Element.REF_USR.ToLower() = Search.ToLower() Or Element.LIB_DOC.ToLower() = Search.ToLower() Or Element.FIC_DOC.ToLower() = Search.ToLower() Or Element.FIC_DOC_LIG.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:884| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_DOCUMENT_UTILISATEUR)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:218 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_DOCUMENT_UTILISATEUR)
                Dim Result As New List(Of MDT_DOCUMENT_UTILISATEUR)
                Dim C As New MDT_DOCUMENT_UTILISATEUR
                For Each Element As MDT_DOCUMENT_UTILISATEUR In C.List
                    If Val(Element.TYP_DOC) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:889| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:218 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_SEQ
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:894| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:218 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:899| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:218 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:905| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:218 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:911| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:218 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:917| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:218 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:923| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:218 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:931| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:218 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:955| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:219 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:958| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:219 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:965| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:219 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:971| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:219 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:976| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:219 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:981| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:219 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:988| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:219 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:990| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:220 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_SEQ">(Set|Get) The NUM_SEQ as Integer.</param>
            ''' <param name="TYP_DOC">(Set|Get) The TYP_DOC as String.</param>
            ''' <param name="REF_USR">(Set|Get) The REF_USR as String.</param>
            ''' <param name="LIB_DOC">(Set|Get) The LIB_DOC as String.</param>
            ''' <param name="FIC_DOC">(Set|Get) The FIC_DOC as String.</param>
            ''' <param name="FIC_DOC_LIG">(Set|Get) The FIC_DOC_LIG as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_SEQ As Integer,
ByVal TYP_DOC As String,
ByVal REF_USR As String,
ByVal LIB_DOC As String,
ByVal FIC_DOC As String,
ByVal FIC_DOC_LIG As String)
                With Me
                    Clear()
                    Reset()
                    .NUM_SEQ = NUM_SEQ
                    .TYP_DOC = TYP_DOC
                    .REF_USR = REF_USR
                    .LIB_DOC = LIB_DOC
                    .FIC_DOC = FIC_DOC
                    .FIC_DOC_LIG = FIC_DOC_LIG
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:131| <08.00.00> <Class> <> |.MDT_ENREGISTREMENT_FACTURES|Class|{45} |Production Cost : 60|Selling Price : 150|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_ENREGISTREMENT_FACTURES
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:131
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{16}||0.8| |12.8
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{9}||1.6| |14.4
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{16}||0.5| |8
        '''    |12| |Parameter  |{24}||0.5| |12
        '''    |Production Cost             |60
        '''    |Selling Price without VAT   |150
        '''    |Total TVA                   |11.55
        '''    |Grand Total                 |161.55
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:227 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_ENREGISTREMENT_FACTURES
#Region "<1> [Property]{16}"
#Region "[On] |2019/07/16 23h21:132| <01.00.00> <Property> <Columns> |.NUM_RLV()|Integer|"' (Set|Get) The NUM_RLV as Integer.
            Private _NUM_RLV As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_RLV as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:227 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_RLV as Integer.")>
            Public Property NUM_RLV() As Integer
                Get
                    Return _NUM_RLV
                End Get
                Set(ByVal Value As Integer)
                    _NUM_RLV = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_RLV as Integer.

#Region "[On] |2019/07/16 23h21:138| <01.00.01> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:227 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h21:142| <01.00.02> <Property> <Columns> |.NUM_FAC_GEFI()|String|"' (Set|Get) The NUM_FAC_GEFI as String.
            Private _NUM_FAC_GEFI As String
            '''    <Summary>
            '''     (Set|Get) The NUM_FAC_GEFI as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:227 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FAC_GEFI as String.")>
            Public Property NUM_FAC_GEFI() As String
                Get
                    Return _NUM_FAC_GEFI
                End Get
                Set(ByVal Value As String)
                    _NUM_FAC_GEFI = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FAC_GEFI as String.

#Region "[On] |2019/07/16 23h21:148| <01.00.03> <Property> <Columns> |.DAT_FAC()|DateTime|"' (Set|Get) The DAT_FAC as DateTime.
            Private _DAT_FAC As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_FAC as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:227 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_FAC as DateTime.")>
            Public Property DAT_FAC() As DateTime
                Get
                    Return _DAT_FAC
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_FAC as DateTime.

#Region "[On] |2019/07/16 23h21:152| <01.00.04> <Property> <Columns> |.DAT_CPT()|DateTime|"' (Set|Get) The DAT_CPT as DateTime.
            Private _DAT_CPT As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_CPT as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:228 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_CPT as DateTime.")>
            Public Property DAT_CPT() As DateTime
                Get
                    Return _DAT_CPT
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_CPT = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_CPT as DateTime.

#Region "[On] |2019/07/16 23h21:159| <01.00.05> <Property> <Columns> |.MNT_HEU_HT_GEFI()|Double|"' (Set|Get) The MNT_HEU_HT_GEFI as Double.
            Private _MNT_HEU_HT_GEFI As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_HEU_HT_GEFI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:228 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_HEU_HT_GEFI as Double.")>
            Public Property MNT_HEU_HT_GEFI() As Double
                Get
                    Return _MNT_HEU_HT_GEFI
                End Get
                Set(ByVal Value As Double)
                    _MNT_HEU_HT_GEFI = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_HEU_HT_GEFI as Double.

#Region "[On] |2019/07/16 23h21:178| <01.00.06> <Property> <Columns> |.MNT_FRA_HT_GEFI()|Double|"' (Set|Get) The MNT_FRA_HT_GEFI as Double.
            Private _MNT_FRA_HT_GEFI As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_FRA_HT_GEFI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:228 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_FRA_HT_GEFI as Double.")>
            Public Property MNT_FRA_HT_GEFI() As Double
                Get
                    Return _MNT_FRA_HT_GEFI
                End Get
                Set(ByVal Value As Double)
                    _MNT_FRA_HT_GEFI = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_FRA_HT_GEFI as Double.

#Region "[On] |2019/07/16 23h21:183| <01.00.07> <Property> <Columns> |.MNT_TTC_GEFI()|Double|"' (Set|Get) The MNT_TTC_GEFI as Double.
            Private _MNT_TTC_GEFI As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_TTC_GEFI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:228 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_TTC_GEFI as Double.")>
            Public Property MNT_TTC_GEFI() As Double
                Get
                    Return _MNT_TTC_GEFI
                End Get
                Set(ByVal Value As Double)
                    _MNT_TTC_GEFI = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_TTC_GEFI as Double.

#Region "[On] |2019/07/16 23h21:187| <01.00.08> <Property> <Columns> |.LIB_FAC()|String|"' (Set|Get) The LIB_FAC as String.
            Private _LIB_FAC As String
            '''    <Summary>
            '''     (Set|Get) The LIB_FAC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:228 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_FAC as String.")>
            Public Property LIB_FAC() As String
                Get
                    Return _LIB_FAC
                End Get
                Set(ByVal Value As String)
                    _LIB_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_FAC as String.

#Region "[On] |2019/07/16 23h21:192| <01.00.09> <Property> <Columns> |.TOT_HEU_ORI()|Double|"' (Set|Get) The TOT_HEU_ORI as Double.
            Private _TOT_HEU_ORI As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_HEU_ORI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:229 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_HEU_ORI as Double.")>
            Public Property TOT_HEU_ORI() As Double
                Get
                    Return _TOT_HEU_ORI
                End Get
                Set(ByVal Value As Double)
                    _TOT_HEU_ORI = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_HEU_ORI as Double.

#Region "[On] |2019/07/16 23h21:197| <01.00.10> <Property> <Columns> |.TOT_FRA_ORI()|Double|"' (Set|Get) The TOT_FRA_ORI as Double.
            Private _TOT_FRA_ORI As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_FRA_ORI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:230 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_FRA_ORI as Double.")>
            Public Property TOT_FRA_ORI() As Double
                Get
                    Return _TOT_FRA_ORI
                End Get
                Set(ByVal Value As Double)
                    _TOT_FRA_ORI = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_FRA_ORI as Double.

#Region "[On] |2019/07/16 23h21:202| <01.00.11> <Property> <Columns> |.w_diff_ht()|Double|"' (Set|Get) The w_diff_ht as Double.
            Private _w_diff_ht As Double
            '''    <Summary>
            '''     (Set|Get) The w_diff_ht as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:230 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The w_diff_ht as Double.")>
            Public Property w_diff_ht() As Double
                Get
                    Return _w_diff_ht
                End Get
                Set(ByVal Value As Double)
                    _w_diff_ht = Value
                End Set
            End Property
#End Region '(Set|Get) The w_diff_ht as Double.

#Region "[On] |2019/07/16 23h21:207| <01.00.12> <Property> <Columns> |.NUM_FTA()|Integer|"' (Set|Get) The NUM_FTA as Integer.
            Private _NUM_FTA As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_FTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:230 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FTA as Integer.")>
            Public Property NUM_FTA() As Integer
                Get
                    Return _NUM_FTA
                End Get
                Set(ByVal Value As Integer)
                    _NUM_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FTA as Integer.

#Region "[On] |2019/07/16 23h21:212| <01.00.13> <Property> <Columns> |.SEQ_SAISIE()|Integer|"' (Set|Get) The SEQ_SAISIE as Integer.
            Private _SEQ_SAISIE As Integer
            '''    <Summary>
            '''     (Set|Get) The SEQ_SAISIE as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:230 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The SEQ_SAISIE as Integer.")>
            Public Property SEQ_SAISIE() As Integer
                Get
                    Return _SEQ_SAISIE
                End Get
                Set(ByVal Value As Integer)
                    _SEQ_SAISIE = Value
                End Set
            End Property
#End Region '(Set|Get) The SEQ_SAISIE as Integer.

#Region "[On] |2019/07/16 23h21:218| <01.00.14> <Property> <Columns> |.TOT_HEU_ORI_RP()|Double|"' (Set|Get) The TOT_HEU_ORI_RP as Double.
            Private _TOT_HEU_ORI_RP As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_HEU_ORI_RP as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:230 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_HEU_ORI_RP as Double.")>
            Public Property TOT_HEU_ORI_RP() As Double
                Get
                    Return _TOT_HEU_ORI_RP
                End Get
                Set(ByVal Value As Double)
                    _TOT_HEU_ORI_RP = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_HEU_ORI_RP as Double.

#Region "[On] |2019/07/16 23h21:223| <01.00.15> <Property> <Columns> |.TOT_FRA_ORI_RP()|Double|"' (Set|Get) The TOT_FRA_ORI_RP as Double.
            Private _TOT_FRA_ORI_RP As Double
            '''    <Summary>
            '''     (Set|Get) The TOT_FRA_ORI_RP as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:231 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_FRA_ORI_RP as Double.")>
            Public Property TOT_FRA_ORI_RP() As Double
                Get
                    Return _TOT_FRA_ORI_RP
                End Get
                Set(ByVal Value As Double)
                    _TOT_FRA_ORI_RP = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_FRA_ORI_RP as Double.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:228| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{15}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:231 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_RLV as Integer.</summary>
                [NUM_RLV] = 0
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 1
                ''' <summary>(Set|Get) The NUM_FAC_GEFI as String.</summary>
                [NUM_FAC_GEFI] = 2
                ''' <summary>(Set|Get) The DAT_FAC as DateTime.</summary>
                [DAT_FAC] = 3
                ''' <summary>(Set|Get) The DAT_CPT as DateTime.</summary>
                [DAT_CPT] = 4
                ''' <summary>(Set|Get) The MNT_HEU_HT_GEFI as Double.</summary>
                [MNT_HEU_HT_GEFI] = 5
                ''' <summary>(Set|Get) The MNT_FRA_HT_GEFI as Double.</summary>
                [MNT_FRA_HT_GEFI] = 6
                ''' <summary>(Set|Get) The MNT_TTC_GEFI as Double.</summary>
                [MNT_TTC_GEFI] = 7
                ''' <summary>(Set|Get) The LIB_FAC as String.</summary>
                [LIB_FAC] = 8
                ''' <summary>(Set|Get) The TOT_HEU_ORI as Double.</summary>
                [TOT_HEU_ORI] = 9
                ''' <summary>(Set|Get) The TOT_FRA_ORI as Double.</summary>
                [TOT_FRA_ORI] = 10
                ''' <summary>(Set|Get) The w_diff_ht as Double.</summary>
                [w_diff_ht] = 11
                ''' <summary>(Set|Get) The NUM_FTA as Integer.</summary>
                [NUM_FTA] = 12
                ''' <summary>(Set|Get) The SEQ_SAISIE as Integer.</summary>
                [SEQ_SAISIE] = 13
                ''' <summary>(Set|Get) The TOT_HEU_ORI_RP as Double.</summary>
                [TOT_HEU_ORI_RP] = 14
                ''' <summary>(Set|Get) The TOT_FRA_ORI_RP as Double.</summary>
                [TOT_FRA_ORI_RP] = 15
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:234| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:231 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_RLV = 0
                    .NUM_MDT = Nothing
                    .NUM_FAC_GEFI = Nothing
                    .DAT_FAC = New DateTime
                    .DAT_CPT = New DateTime
                    .MNT_HEU_HT_GEFI = 0
                    .MNT_FRA_HT_GEFI = 0
                    .MNT_TTC_GEFI = 0
                    .LIB_FAC = Nothing
                    .TOT_HEU_ORI = 0
                    .TOT_FRA_ORI = 0
                    .w_diff_ht = 0
                    .NUM_FTA = 0
                    .SEQ_SAISIE = 0
                    .TOT_HEU_ORI_RP = 0
                    .TOT_FRA_ORI_RP = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:240| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:231 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_ENREGISTREMENT_FACTURES"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_ENREGISTREMENT_FACTURES"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_ENREGISTREMENT_FACTURES"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:247| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:231 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_ENREGISTREMENT_FACTURES] (
`NUM_RLV`, 
`NUM_MDT`, 
`NUM_FAC_GEFI`, 
`DAT_FAC`, 
`DAT_CPT`, 
`MNT_HEU_HT_GEFI`, 
`MNT_FRA_HT_GEFI`, 
`MNT_TTC_GEFI`, 
`LIB_FAC`, 
`TOT_HEU_ORI`, 
`TOT_FRA_ORI`, 
`w_diff_ht`, 
`NUM_FTA`, 
`SEQ_SAISIE`, 
`TOT_HEU_ORI_RP`, 
`TOT_FRA_ORI_RP`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_RLV)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@2", Me.NUM_FAC_GEFI)
                    Cmd.Parameters.AddWithValue("@3", Me.DAT_FAC)
                    Cmd.Parameters.AddWithValue("@4", Me.DAT_CPT)
                    Cmd.Parameters.AddWithValue("@5", Me.MNT_HEU_HT_GEFI)
                    Cmd.Parameters.AddWithValue("@6", Me.MNT_FRA_HT_GEFI)
                    Cmd.Parameters.AddWithValue("@7", Me.MNT_TTC_GEFI)
                    Cmd.Parameters.AddWithValue("@8", Me.LIB_FAC)
                    Cmd.Parameters.AddWithValue("@9", Me.TOT_HEU_ORI)
                    Cmd.Parameters.AddWithValue("@10", Me.TOT_FRA_ORI)
                    Cmd.Parameters.AddWithValue("@11", Me.w_diff_ht)
                    Cmd.Parameters.AddWithValue("@12", Me.NUM_FTA)
                    Cmd.Parameters.AddWithValue("@13", Me.SEQ_SAISIE)
                    Cmd.Parameters.AddWithValue("@14", Me.TOT_HEU_ORI_RP)
                    Cmd.Parameters.AddWithValue("@15", Me.TOT_FRA_ORI_RP)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:252| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:231 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_ENREGISTREMENT_FACTURES] SET NUM_MDT = @NUM_MDT, NUM_FAC_GEFI = @NUM_FAC_GEFI, DAT_FAC = @DAT_FAC, DAT_CPT = @DAT_CPT, MNT_HEU_HT_GEFI = @MNT_HEU_HT_GEFI, MNT_FRA_HT_GEFI = @MNT_FRA_HT_GEFI, MNT_TTC_GEFI = @MNT_TTC_GEFI, LIB_FAC = @LIB_FAC, TOT_HEU_ORI = @TOT_HEU_ORI, TOT_FRA_ORI = @TOT_FRA_ORI, w_diff_ht = @w_diff_ht, NUM_FTA = @NUM_FTA, SEQ_SAISIE = @SEQ_SAISIE, TOT_HEU_ORI_RP = @TOT_HEU_ORI_RP, TOT_FRA_ORI_RP = @TOT_FRA_ORI_RP WHERE NUM_RLV = @NUM_RLV"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    Cmd.Parameters.AddWithValue("@NUM_FAC_GEFI", NUM_FAC_GEFI)
                    Cmd.Parameters.AddWithValue("@DAT_FAC", DAT_FAC)
                    Cmd.Parameters.AddWithValue("@DAT_CPT", DAT_CPT)
                    Cmd.Parameters.AddWithValue("@MNT_HEU_HT_GEFI", MNT_HEU_HT_GEFI)
                    Cmd.Parameters.AddWithValue("@MNT_FRA_HT_GEFI", MNT_FRA_HT_GEFI)
                    Cmd.Parameters.AddWithValue("@MNT_TTC_GEFI", MNT_TTC_GEFI)
                    Cmd.Parameters.AddWithValue("@LIB_FAC", LIB_FAC)
                    Cmd.Parameters.AddWithValue("@TOT_HEU_ORI", TOT_HEU_ORI)
                    Cmd.Parameters.AddWithValue("@TOT_FRA_ORI", TOT_FRA_ORI)
                    Cmd.Parameters.AddWithValue("@w_diff_ht", w_diff_ht)
                    Cmd.Parameters.AddWithValue("@NUM_FTA", NUM_FTA)
                    Cmd.Parameters.AddWithValue("@SEQ_SAISIE", SEQ_SAISIE)
                    Cmd.Parameters.AddWithValue("@TOT_HEU_ORI_RP", TOT_HEU_ORI_RP)
                    Cmd.Parameters.AddWithValue("@TOT_FRA_ORI_RP", TOT_FRA_ORI_RP)
                    Cmd.Parameters.AddWithValue("@NUM_RLV", NUM_RLV)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:257| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:232 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_ENREGISTREMENT_FACTURES] WHERE NUM_RLV =@NUM_RLV"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_RLV", NUM_RLV)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{9}"
#Region "[On] |2019/07/16 23h21:285| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:232 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:291| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:232 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:297| <05.00.02> <Function> <> |.List()|List(Of MDT_ENREGISTREMENT_FACTURES)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:232 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_ENREGISTREMENT_FACTURES)
                Dim Result As New List(Of MDT_ENREGISTREMENT_FACTURES)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_ENREGISTREMENT_FACTURES(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), New DateTime(1970, 1, 1), Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), New DateTime(1970, 1, 1), Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), 0, Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), 0, Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), 0, Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), "", Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), 0, Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), 0, Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), 0, Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), 0, Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), 0, Row.Item(13)),
IIf(IsDBNull(Row.Item(14)), 0, Row.Item(14)),
      IIf(IsDBNull(Row.Item(15)), 0, Row.Item(15)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:302| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_ENREGISTREMENT_FACTURES)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:232 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_ENREGISTREMENT_FACTURES)
                Dim Result As New List(Of MDT_ENREGISTREMENT_FACTURES)
                Dim C As New MDT_ENREGISTREMENT_FACTURES
                For Each Element As MDT_ENREGISTREMENT_FACTURES In C.List
                    If Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NUM_FAC_GEFI.ToLower() = Search.ToLower() Or Element.LIB_FAC.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:307| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_ENREGISTREMENT_FACTURES)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:232 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_ENREGISTREMENT_FACTURES)
                Dim Result As New List(Of MDT_ENREGISTREMENT_FACTURES)
                Dim C As New MDT_ENREGISTREMENT_FACTURES
                For Each Element As MDT_ENREGISTREMENT_FACTURES In C.List
                    If Val(Element.NUM_RLV) = Search Or Val(Element.MNT_HEU_HT_GEFI) = Search Or Val(Element.MNT_FRA_HT_GEFI) = Search Or Val(Element.MNT_TTC_GEFI) = Search Or Val(Element.TOT_HEU_ORI) = Search Or Val(Element.TOT_FRA_ORI) = Search Or Val(Element.w_diff_ht) = Search Or Val(Element.NUM_FTA) = Search Or Val(Element.SEQ_SAISIE) = Search Or Val(Element.TOT_HEU_ORI_RP) = Search Or Val(Element.TOT_FRA_ORI_RP) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:312| <05.00.05> <Function> <> |.SearchByDate()|List(Of MDT_ENREGISTREMENT_FACTURES)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:232 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDate(ByVal Search As DateTime) As List(Of MDT_ENREGISTREMENT_FACTURES)
                Dim Result As New List(Of MDT_ENREGISTREMENT_FACTURES)
                Dim C As New MDT_ENREGISTREMENT_FACTURES
                For Each Element As MDT_ENREGISTREMENT_FACTURES In C.List
                    If Element.DAT_FAC = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:318| <05.00.06> <Function> <> |.SearchByDateRange()|List(Of MDT_ENREGISTREMENT_FACTURES)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:232 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="From_Date">All element from this date and this date included.</param>
            ''' <param name="Until_Date">All element before and including this date.</param>

            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDateRange(ByVal From_Date As DateTime,
ByVal Until_Date As DateTime) As List(Of MDT_ENREGISTREMENT_FACTURES)
                Dim Result As New List(Of MDT_ENREGISTREMENT_FACTURES)
                Dim C As New MDT_ENREGISTREMENT_FACTURES
                For Each Element As MDT_ENREGISTREMENT_FACTURES In C.List
                    If (Element.DAT_FAC) >= From_Date And (Element.DAT_FAC) <= Until_Date Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:323| <05.00.07> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:233 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_RLV
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:330| <05.00.08> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:233 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:336| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:233 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:341| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:233 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:348| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:234 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:363| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:234 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:370| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:234 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:376| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:234 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:381| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:234 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:386| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:234 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:391| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:236 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:399| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:237 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:406| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:237 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:412| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:237 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:418| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:238 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:420| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:238 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_RLV">(Set|Get) The NUM_RLV as Integer.</param>
            ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="NUM_FAC_GEFI">(Set|Get) The NUM_FAC_GEFI as String.</param>
            ''' <param name="DAT_FAC">(Set|Get) The DAT_FAC as DateTime.</param>
            ''' <param name="DAT_CPT">(Set|Get) The DAT_CPT as DateTime.</param>
            ''' <param name="MNT_HEU_HT_GEFI">(Set|Get) The MNT_HEU_HT_GEFI as Double.</param>
            ''' <param name="MNT_FRA_HT_GEFI">(Set|Get) The MNT_FRA_HT_GEFI as Double.</param>
            ''' <param name="MNT_TTC_GEFI">(Set|Get) The MNT_TTC_GEFI as Double.</param>
            ''' <param name="LIB_FAC">(Set|Get) The LIB_FAC as String.</param>
            ''' <param name="TOT_HEU_ORI">(Set|Get) The TOT_HEU_ORI as Double.</param>
            ''' <param name="TOT_FRA_ORI">(Set|Get) The TOT_FRA_ORI as Double.</param>
            ''' <param name="w_diff_ht">(Set|Get) The w_diff_ht as Double.</param>
            ''' <param name="NUM_FTA">(Set|Get) The NUM_FTA as Integer.</param>
            ''' <param name="SEQ_SAISIE">(Set|Get) The SEQ_SAISIE as Integer.</param>
            ''' <param name="TOT_HEU_ORI_RP">(Set|Get) The TOT_HEU_ORI_RP as Double.</param>
            ''' <param name="TOT_FRA_ORI_RP">(Set|Get) The TOT_FRA_ORI_RP as Double.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_RLV As Integer,
ByVal NUM_MDT As String,
ByVal NUM_FAC_GEFI As String,
ByVal DAT_FAC As DateTime,
ByVal DAT_CPT As DateTime,
ByVal MNT_HEU_HT_GEFI As Double,
ByVal MNT_FRA_HT_GEFI As Double,
ByVal MNT_TTC_GEFI As Double,
ByVal LIB_FAC As String,
ByVal TOT_HEU_ORI As Double,
ByVal TOT_FRA_ORI As Double,
ByVal w_diff_ht As Double,
ByVal NUM_FTA As Integer,
ByVal SEQ_SAISIE As Integer,
ByVal TOT_HEU_ORI_RP As Double,
ByVal TOT_FRA_ORI_RP As Double)
                With Me
                    Clear()
                    Reset()
                    .NUM_RLV = NUM_RLV
                    .NUM_MDT = NUM_MDT
                    .NUM_FAC_GEFI = NUM_FAC_GEFI
                    .DAT_FAC = DAT_FAC
                    .DAT_CPT = DAT_CPT
                    .MNT_HEU_HT_GEFI = MNT_HEU_HT_GEFI
                    .MNT_FRA_HT_GEFI = MNT_FRA_HT_GEFI
                    .MNT_TTC_GEFI = MNT_TTC_GEFI
                    .LIB_FAC = LIB_FAC
                    .TOT_HEU_ORI = TOT_HEU_ORI
                    .TOT_FRA_ORI = TOT_FRA_ORI
                    .w_diff_ht = w_diff_ht
                    .NUM_FTA = NUM_FTA
                    .SEQ_SAISIE = SEQ_SAISIE
                    .TOT_HEU_ORI_RP = TOT_HEU_ORI_RP
                    .TOT_FRA_ORI_RP = TOT_FRA_ORI_RP
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:594| <08.00.00> <Class> <> |.MDT_ETAPE|Class|{46} |Production Cost : 60.7|Selling Price : 151.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_ETAPE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:594
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{19}||0.8| |15.2
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{19}||0.5| |9.5
        '''    |12| |Parameter  |{24}||0.5| |12
        '''    |Production Cost             |60.7
        '''    |Selling Price without VAT   |151.75
        '''    |Total TVA                   |11.68
        '''    |Grand Total                 |163.43
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:251 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_ETAPE
#Region "<1> [Property]{19}"
#Region "[On] |2019/07/16 23h21:595| <01.00.00> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:251 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h21:601| <01.00.01> <Property> <Columns> |.NUM_ETA()|String|"' (Set|Get) The NUM_ETA as String.
            Private _NUM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NUM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:251 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_ETA as String.")>
            Public Property NUM_ETA() As String
                Get
                    Return _NUM_ETA
                End Get
                Set(ByVal Value As String)
                    _NUM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_ETA as String.

#Region "[On] |2019/07/16 23h21:627| <01.00.02> <Property> <Columns> |.TRI_NUM()|Integer|"' (Set|Get) The TRI_NUM as Integer.
            Private _TRI_NUM As Integer
            '''    <Summary>
            '''     (Set|Get) The TRI_NUM as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:251 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TRI_NUM as Integer.")>
            Public Property TRI_NUM() As Integer
                Get
                    Return _TRI_NUM
                End Get
                Set(ByVal Value As Integer)
                    _TRI_NUM = Value
                End Set
            End Property
#End Region '(Set|Get) The TRI_NUM as Integer.

#Region "[On] |2019/07/16 23h21:633| <01.00.03> <Property> <Columns> |.NOM_ETA()|String|"' (Set|Get) The NOM_ETA as String.
            Private _NOM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NOM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:252 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_ETA as String.")>
            Public Property NOM_ETA() As String
                Get
                    Return _NOM_ETA
                End Get
                Set(ByVal Value As String)
                    _NOM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_ETA as String.

#Region "[On] |2019/07/16 23h21:638| <01.00.04> <Property> <Columns> |.COD_TAR()|String|"' (Set|Get) The COD_TAR as String.
            Private _COD_TAR As String
            '''    <Summary>
            '''     (Set|Get) The COD_TAR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:252 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TAR as String.")>
            Public Property COD_TAR() As String
                Get
                    Return _COD_TAR
                End Get
                Set(ByVal Value As String)
                    _COD_TAR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TAR as String.

#Region "[On] |2019/07/16 23h21:643| <01.00.05> <Property> <Columns> |.COD_CAT()|String|"' (Set|Get) The COD_CAT as String.
            Private _COD_CAT As String
            '''    <Summary>
            '''     (Set|Get) The COD_CAT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:252 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_CAT as String.")>
            Public Property COD_CAT() As String
                Get
                    Return _COD_CAT
                End Get
                Set(ByVal Value As String)
                    _COD_CAT = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_CAT as String.

#Region "[On] |2019/07/16 23h21:649| <01.00.06> <Property> <Columns> |.STA_ETA()|String|"' (Set|Get) The STA_ETA as String.
            Private _STA_ETA As String
            '''    <Summary>
            '''     (Set|Get) The STA_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:252 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The STA_ETA as String.")>
            Public Property STA_ETA() As String
                Get
                    Return _STA_ETA
                End Get
                Set(ByVal Value As String)
                    _STA_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The STA_ETA as String.

#Region "[On] |2019/07/16 23h21:654| <01.00.07> <Property> <Columns> |.COD_RCP()|String|"' (Set|Get) The COD_RCP as String.
            Private _COD_RCP As String
            '''    <Summary>
            '''     (Set|Get) The COD_RCP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:253 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_RCP as String.")>
            Public Property COD_RCP() As String
                Get
                    Return _COD_RCP
                End Get
                Set(ByVal Value As String)
                    _COD_RCP = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_RCP as String.

#Region "[On] |2019/07/16 23h21:659| <01.00.08> <Property> <Columns> |.HRS_TOT_YON()|Boolean|"' (Set|Get) The HRS_TOT_YON as Boolean.
            Private _HRS_TOT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The HRS_TOT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:253 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HRS_TOT_YON as Boolean.")>
            Public Property HRS_TOT_YON() As Boolean
                Get
                    Return _HRS_TOT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _HRS_TOT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The HRS_TOT_YON as Boolean.

#Region "[On] |2019/07/16 23h21:664| <01.00.09> <Property> <Columns> |.FAC_YON()|Boolean|"' (Set|Get) The FAC_YON as Boolean.
            Private _FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:253 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_YON as Boolean.")>
            Public Property FAC_YON() As Boolean
                Get
                    Return _FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h21:670| <01.00.10> <Property> <Columns> |.TYP_ETA()|String|"' (Set|Get) The TYP_ETA as String.
            Private _TYP_ETA As String
            '''    <Summary>
            '''     (Set|Get) The TYP_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:253 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_ETA as String.")>
            Public Property TYP_ETA() As String
                Get
                    Return _TYP_ETA
                End Get
                Set(ByVal Value As String)
                    _TYP_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_ETA as String.

#Region "[On] |2019/07/16 23h21:676| <01.00.11> <Property> <Columns> |.GRP_PRS()|String|"' (Set|Get) The GRP_PRS as String.
            Private _GRP_PRS As String
            '''    <Summary>
            '''     (Set|Get) The GRP_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:253 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GRP_PRS as String.")>
            Public Property GRP_PRS() As String
                Get
                    Return _GRP_PRS
                End Get
                Set(ByVal Value As String)
                    _GRP_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The GRP_PRS as String.

#Region "[On] |2019/07/16 23h21:682| <01.00.12> <Property> <Columns> |.GRP_UNQ_YON()|Boolean|"' (Set|Get) The GRP_UNQ_YON as Boolean.
            Private _GRP_UNQ_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The GRP_UNQ_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:254 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GRP_UNQ_YON as Boolean.")>
            Public Property GRP_UNQ_YON() As Boolean
                Get
                    Return _GRP_UNQ_YON
                End Get
                Set(ByVal Value As Boolean)
                    _GRP_UNQ_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The GRP_UNQ_YON as Boolean.

#Region "[On] |2019/07/16 23h21:687| <01.00.13> <Property> <Columns> |.GEFI_ART()|Integer|"' (Set|Get) The GEFI_ART as Integer.
            Private _GEFI_ART As Integer
            '''    <Summary>
            '''     (Set|Get) The GEFI_ART as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:254 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GEFI_ART as Integer.")>
            Public Property GEFI_ART() As Integer
                Get
                    Return _GEFI_ART
                End Get
                Set(ByVal Value As Integer)
                    _GEFI_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The GEFI_ART as Integer.

#Region "[On] |2019/07/16 23h21:692| <01.00.14> <Property> <Columns> |.BUD_HON_SOC()|Double|"' (Set|Get) The BUD_HON_SOC as Double.
            Private _BUD_HON_SOC As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_HON_SOC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:254 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_HON_SOC as Double.")>
            Public Property BUD_HON_SOC() As Double
                Get
                    Return _BUD_HON_SOC
                End Get
                Set(ByVal Value As Double)
                    _BUD_HON_SOC = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_HON_SOC as Double.

#Region "[On] |2019/07/16 23h21:700| <01.00.15> <Property> <Columns> |.BUD_FRA_SOC()|Double|"' (Set|Get) The BUD_FRA_SOC as Double.
            Private _BUD_FRA_SOC As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_FRA_SOC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:254 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_FRA_SOC as Double.")>
            Public Property BUD_FRA_SOC() As Double
                Get
                    Return _BUD_FRA_SOC
                End Get
                Set(ByVal Value As Double)
                    _BUD_FRA_SOC = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_FRA_SOC as Double.

#Region "[On] |2019/07/16 23h21:707| <01.00.16> <Property> <Columns> |.BUD_HON_SST()|Double|"' (Set|Get) The BUD_HON_SST as Double.
            Private _BUD_HON_SST As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_HON_SST as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:254 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_HON_SST as Double.")>
            Public Property BUD_HON_SST() As Double
                Get
                    Return _BUD_HON_SST
                End Get
                Set(ByVal Value As Double)
                    _BUD_HON_SST = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_HON_SST as Double.

#Region "[On] |2019/07/16 23h21:714| <01.00.17> <Property> <Columns> |.BUD_FRA_SST()|Double|"' (Set|Get) The BUD_FRA_SST as Double.
            Private _BUD_FRA_SST As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_FRA_SST as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:255 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_FRA_SST as Double.")>
            Public Property BUD_FRA_SST() As Double
                Get
                    Return _BUD_FRA_SST
                End Get
                Set(ByVal Value As Double)
                    _BUD_FRA_SST = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_FRA_SST as Double.

#Region "[On] |2019/07/16 23h21:722| <01.00.18> <Property> <Columns> |.BUD_HEU()|Double|"' (Set|Get) The BUD_HEU as Double.
            Private _BUD_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:255 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_HEU as Double.")>
            Public Property BUD_HEU() As Double
                Get
                    Return _BUD_HEU
                End Get
                Set(ByVal Value As Double)
                    _BUD_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_HEU as Double.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:729| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{18}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:255 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 0
                ''' <summary>(Set|Get) The NUM_ETA as String.</summary>
                [NUM_ETA] = 1
                ''' <summary>(Set|Get) The TRI_NUM as Integer.</summary>
                [TRI_NUM] = 2
                ''' <summary>(Set|Get) The NOM_ETA as String.</summary>
                [NOM_ETA] = 3
                ''' <summary>(Set|Get) The COD_TAR as String.</summary>
                [COD_TAR] = 4
                ''' <summary>(Set|Get) The COD_CAT as String.</summary>
                [COD_CAT] = 5
                ''' <summary>(Set|Get) The STA_ETA as String.</summary>
                [STA_ETA] = 6
                ''' <summary>(Set|Get) The COD_RCP as String.</summary>
                [COD_RCP] = 7
                ''' <summary>(Set|Get) The HRS_TOT_YON as Boolean.</summary>
                [HRS_TOT_YON] = 8
                ''' <summary>(Set|Get) The FAC_YON as Boolean.</summary>
                [FAC_YON] = 9
                ''' <summary>(Set|Get) The TYP_ETA as String.</summary>
                [TYP_ETA] = 10
                ''' <summary>(Set|Get) The GRP_PRS as String.</summary>
                [GRP_PRS] = 11
                ''' <summary>(Set|Get) The GRP_UNQ_YON as Boolean.</summary>
                [GRP_UNQ_YON] = 12
                ''' <summary>(Set|Get) The GEFI_ART as Integer.</summary>
                [GEFI_ART] = 13
                ''' <summary>(Set|Get) The BUD_HON_SOC as Double.</summary>
                [BUD_HON_SOC] = 14
                ''' <summary>(Set|Get) The BUD_FRA_SOC as Double.</summary>
                [BUD_FRA_SOC] = 15
                ''' <summary>(Set|Get) The BUD_HON_SST as Double.</summary>
                [BUD_HON_SST] = 16
                ''' <summary>(Set|Get) The BUD_FRA_SST as Double.</summary>
                [BUD_FRA_SST] = 17
                ''' <summary>(Set|Get) The BUD_HEU as Double.</summary>
                [BUD_HEU] = 18
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:748| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:256 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_MDT = Nothing
                    .NUM_ETA = Nothing
                    .TRI_NUM = 0
                    .NOM_ETA = Nothing
                    .COD_TAR = Nothing
                    .COD_CAT = Nothing
                    .STA_ETA = Nothing
                    .COD_RCP = Nothing
                    .HRS_TOT_YON = False
                    .FAC_YON = False
                    .TYP_ETA = Nothing
                    .GRP_PRS = Nothing
                    .GRP_UNQ_YON = False
                    .GEFI_ART = 0
                    .BUD_HON_SOC = 0
                    .BUD_FRA_SOC = 0
                    .BUD_HON_SST = 0
                    .BUD_FRA_SST = 0
                    .BUD_HEU = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:769| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:257 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_ETAPE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_ETAPE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_ETAPE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:776| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:257 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_ETAPE] (
`NUM_MDT`, 
`NUM_ETA`, 
`TRI_NUM`, 
`NOM_ETA`, 
`COD_TAR`, 
`COD_CAT`, 
`STA_ETA`, 
`COD_RCP`, 
`HRS_TOT_YON`, 
`FAC_YON`, 
`TYP_ETA`, 
`GRP_PRS`, 
`GRP_UNQ_YON`, 
`GEFI_ART`, 
`BUD_HON_SOC`, 
`BUD_FRA_SOC`, 
`BUD_HON_SST`, 
`BUD_FRA_SST`, 
`BUD_HEU`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @16, @17, @18)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_ETA)
                    Cmd.Parameters.AddWithValue("@2", Me.TRI_NUM)
                    Cmd.Parameters.AddWithValue("@3", Me.NOM_ETA)
                    Cmd.Parameters.AddWithValue("@4", Me.COD_TAR)
                    Cmd.Parameters.AddWithValue("@5", Me.COD_CAT)
                    Cmd.Parameters.AddWithValue("@6", Me.STA_ETA)
                    Cmd.Parameters.AddWithValue("@7", Me.COD_RCP)
                    Cmd.Parameters.AddWithValue("@8", Me.HRS_TOT_YON)
                    Cmd.Parameters.AddWithValue("@9", Me.FAC_YON)
                    Cmd.Parameters.AddWithValue("@10", Me.TYP_ETA)
                    Cmd.Parameters.AddWithValue("@11", Me.GRP_PRS)
                    Cmd.Parameters.AddWithValue("@12", Me.GRP_UNQ_YON)
                    Cmd.Parameters.AddWithValue("@13", Me.GEFI_ART)
                    Cmd.Parameters.AddWithValue("@14", Me.BUD_HON_SOC)
                    Cmd.Parameters.AddWithValue("@15", Me.BUD_FRA_SOC)
                    Cmd.Parameters.AddWithValue("@16", Me.BUD_HON_SST)
                    Cmd.Parameters.AddWithValue("@17", Me.BUD_FRA_SST)
                    Cmd.Parameters.AddWithValue("@18", Me.BUD_HEU)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:785| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:257 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_ETAPE] SET NUM_ETA = @NUM_ETA, TRI_NUM = @TRI_NUM, NOM_ETA = @NOM_ETA, COD_TAR = @COD_TAR, COD_CAT = @COD_CAT, STA_ETA = @STA_ETA, COD_RCP = @COD_RCP, HRS_TOT_YON = @HRS_TOT_YON, FAC_YON = @FAC_YON, TYP_ETA = @TYP_ETA, GRP_PRS = @GRP_PRS, GRP_UNQ_YON = @GRP_UNQ_YON, GEFI_ART = @GEFI_ART, BUD_HON_SOC = @BUD_HON_SOC, BUD_FRA_SOC = @BUD_FRA_SOC, BUD_HON_SST = @BUD_HON_SST, BUD_FRA_SST = @BUD_FRA_SST, BUD_HEU = @BUD_HEU WHERE NUM_MDT = @NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_ETA", NUM_ETA)
                    Cmd.Parameters.AddWithValue("@TRI_NUM", TRI_NUM)
                    Cmd.Parameters.AddWithValue("@NOM_ETA", NOM_ETA)
                    Cmd.Parameters.AddWithValue("@COD_TAR", COD_TAR)
                    Cmd.Parameters.AddWithValue("@COD_CAT", COD_CAT)
                    Cmd.Parameters.AddWithValue("@STA_ETA", STA_ETA)
                    Cmd.Parameters.AddWithValue("@COD_RCP", COD_RCP)
                    Cmd.Parameters.AddWithValue("@HRS_TOT_YON", HRS_TOT_YON)
                    Cmd.Parameters.AddWithValue("@FAC_YON", FAC_YON)
                    Cmd.Parameters.AddWithValue("@TYP_ETA", TYP_ETA)
                    Cmd.Parameters.AddWithValue("@GRP_PRS", GRP_PRS)
                    Cmd.Parameters.AddWithValue("@GRP_UNQ_YON", GRP_UNQ_YON)
                    Cmd.Parameters.AddWithValue("@GEFI_ART", GEFI_ART)
                    Cmd.Parameters.AddWithValue("@BUD_HON_SOC", BUD_HON_SOC)
                    Cmd.Parameters.AddWithValue("@BUD_FRA_SOC", BUD_FRA_SOC)
                    Cmd.Parameters.AddWithValue("@BUD_HON_SST", BUD_HON_SST)
                    Cmd.Parameters.AddWithValue("@BUD_FRA_SST", BUD_FRA_SST)
                    Cmd.Parameters.AddWithValue("@BUD_HEU", BUD_HEU)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:791| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:257 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_ETAPE] WHERE NUM_MDT =@NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:796| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:257 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:803| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:257 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:809| <05.00.02> <Function> <> |.List()|List(Of MDT_ETAPE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:257 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_ETAPE)
                Dim Result As New List(Of MDT_ETAPE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_ETAPE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), 0, Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), "", Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), "", Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), "", Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), False, Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), False, Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), "", Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), "", Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), False, Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), 0, Row.Item(13)),
IIf(IsDBNull(Row.Item(14)), 0, Row.Item(14)),
IIf(IsDBNull(Row.Item(15)), 0, Row.Item(15)),
IIf(IsDBNull(Row.Item(16)), 0, Row.Item(16)),
IIf(IsDBNull(Row.Item(17)), 0, Row.Item(17)),
      IIf(IsDBNull(Row.Item(18)), 0, Row.Item(18)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:816| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_ETAPE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:258 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_ETAPE)
                Dim Result As New List(Of MDT_ETAPE)
                Dim C As New MDT_ETAPE
                For Each Element As MDT_ETAPE In C.List
                    If Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NUM_ETA.ToLower() = Search.ToLower() Or Element.NOM_ETA.ToLower() = Search.ToLower() Or Element.COD_TAR.ToLower() = Search.ToLower() Or Element.COD_CAT.ToLower() = Search.ToLower() Or Element.STA_ETA.ToLower() = Search.ToLower() Or Element.COD_RCP.ToLower() = Search.ToLower() Or Element.TYP_ETA.ToLower() = Search.ToLower() Or Element.GRP_PRS.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:821| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_ETAPE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:258 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_ETAPE)
                Dim Result As New List(Of MDT_ETAPE)
                Dim C As New MDT_ETAPE
                For Each Element As MDT_ETAPE In C.List
                    If Val(Element.TRI_NUM) = Search Or Val(Element.GEFI_ART) = Search Or Val(Element.BUD_HON_SOC) = Search Or Val(Element.BUD_FRA_SOC) = Search Or Val(Element.BUD_HON_SST) = Search Or Val(Element.BUD_FRA_SST) = Search Or Val(Element.BUD_HEU) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:828| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:258 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_MDT
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:835| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:258 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:848| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:258 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:862| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:259 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:868| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:259 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:873| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:259 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:880| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:259 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:887| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:259 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:892| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:259 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:896| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:260 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:901| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:260 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:907| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:260 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:913| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:260 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:919| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:260 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:925| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:261 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:935| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:261 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="NUM_ETA">(Set|Get) The NUM_ETA as String.</param>
            ''' <param name="TRI_NUM">(Set|Get) The TRI_NUM as Integer.</param>
            ''' <param name="NOM_ETA">(Set|Get) The NOM_ETA as String.</param>
            ''' <param name="COD_TAR">(Set|Get) The COD_TAR as String.</param>
            ''' <param name="COD_CAT">(Set|Get) The COD_CAT as String.</param>
            ''' <param name="STA_ETA">(Set|Get) The STA_ETA as String.</param>
            ''' <param name="COD_RCP">(Set|Get) The COD_RCP as String.</param>
            ''' <param name="HRS_TOT_YON">(Set|Get) The HRS_TOT_YON as Boolean.</param>
            ''' <param name="FAC_YON">(Set|Get) The FAC_YON as Boolean.</param>
            ''' <param name="TYP_ETA">(Set|Get) The TYP_ETA as String.</param>
            ''' <param name="GRP_PRS">(Set|Get) The GRP_PRS as String.</param>
            ''' <param name="GRP_UNQ_YON">(Set|Get) The GRP_UNQ_YON as Boolean.</param>
            ''' <param name="GEFI_ART">(Set|Get) The GEFI_ART as Integer.</param>
            ''' <param name="BUD_HON_SOC">(Set|Get) The BUD_HON_SOC as Double.</param>
            ''' <param name="BUD_FRA_SOC">(Set|Get) The BUD_FRA_SOC as Double.</param>
            ''' <param name="BUD_HON_SST">(Set|Get) The BUD_HON_SST as Double.</param>
            ''' <param name="BUD_FRA_SST">(Set|Get) The BUD_FRA_SST as Double.</param>
            ''' <param name="BUD_HEU">(Set|Get) The BUD_HEU as Double.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_MDT As String,
ByVal NUM_ETA As String,
ByVal TRI_NUM As Integer,
ByVal NOM_ETA As String,
ByVal COD_TAR As String,
ByVal COD_CAT As String,
ByVal STA_ETA As String,
ByVal COD_RCP As String,
ByVal HRS_TOT_YON As Boolean,
ByVal FAC_YON As Boolean,
ByVal TYP_ETA As String,
ByVal GRP_PRS As String,
ByVal GRP_UNQ_YON As Boolean,
ByVal GEFI_ART As Integer,
ByVal BUD_HON_SOC As Double,
ByVal BUD_FRA_SOC As Double,
ByVal BUD_HON_SST As Double,
ByVal BUD_FRA_SST As Double,
ByVal BUD_HEU As Double)
                With Me
                    Clear()
                    Reset()
                    .NUM_MDT = NUM_MDT
                    .NUM_ETA = NUM_ETA
                    .TRI_NUM = TRI_NUM
                    .NOM_ETA = NOM_ETA
                    .COD_TAR = COD_TAR
                    .COD_CAT = COD_CAT
                    .STA_ETA = STA_ETA
                    .COD_RCP = COD_RCP
                    .HRS_TOT_YON = HRS_TOT_YON
                    .FAC_YON = FAC_YON
                    .TYP_ETA = TYP_ETA
                    .GRP_PRS = GRP_PRS
                    .GRP_UNQ_YON = GRP_UNQ_YON
                    .GEFI_ART = GEFI_ART
                    .BUD_HON_SOC = BUD_HON_SOC
                    .BUD_FRA_SOC = BUD_FRA_SOC
                    .BUD_HON_SST = BUD_HON_SST
                    .BUD_FRA_SST = BUD_FRA_SST
                    .BUD_HEU = BUD_HEU
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:095| <08.00.00> <Class> <> |.MDT_ETAT|Class|{30} |Production Cost : 31.9|Selling Price : 79.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_ETAT
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:095
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{3}||0.8| |2.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{3}||0.5| |1.5
        '''    |12| |Parameter  |{8}||0.5| |4
        '''    |Production Cost             |31.9
        '''    |Selling Price without VAT   |79.75
        '''    |Total TVA                   |6.14
        '''    |Grand Total                 |85.89
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:274 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_ETAT
#Region "<1> [Property]{3}"
#Region "[On] |2019/07/16 23h21:096| <01.00.00> <Property> <Columns> |.NOM_ETA()|String|"' (Set|Get) The NOM_ETA as String.
            Private _NOM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NOM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:275 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_ETA as String.")>
            Public Property NOM_ETA() As String
                Get
                    Return _NOM_ETA
                End Get
                Set(ByVal Value As String)
                    _NOM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_ETA as String.

#Region "[On] |2019/07/16 23h21:113| <01.00.01> <Property> <Columns> |.ETA_YON()|Boolean|"' (Set|Get) The ETA_YON as Boolean.
            Private _ETA_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The ETA_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:275 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ETA_YON as Boolean.")>
            Public Property ETA_YON() As Boolean
                Get
                    Return _ETA_YON
                End Get
                Set(ByVal Value As Boolean)
                    _ETA_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The ETA_YON as Boolean.

#Region "[On] |2019/07/16 23h21:119| <01.00.02> <Property> <Columns> |.DEF_YON()|Boolean|"' (Set|Get) The DEF_YON as Boolean.
            Private _DEF_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The DEF_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:275 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DEF_YON as Boolean.")>
            Public Property DEF_YON() As Boolean
                Get
                    Return _DEF_YON
                End Get
                Set(ByVal Value As Boolean)
                    _DEF_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The DEF_YON as Boolean.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:124| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{2}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:275 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NOM_ETA as String.</summary>
                [NOM_ETA] = 0
                ''' <summary>(Set|Get) The ETA_YON as Boolean.</summary>
                [ETA_YON] = 1
                ''' <summary>(Set|Get) The DEF_YON as Boolean.</summary>
                [DEF_YON] = 2
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:130| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:275 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NOM_ETA = Nothing
                    .ETA_YON = False
                    .DEF_YON = False
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:136| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:276 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_ETAT"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_ETAT"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_ETAT"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:140| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:276 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_ETAT] (
`NOM_ETA`, 
`ETA_YON`, 
`DEF_YON`) Values (@0, @1, @2)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NOM_ETA)
                    Cmd.Parameters.AddWithValue("@1", Me.ETA_YON)
                    Cmd.Parameters.AddWithValue("@2", Me.DEF_YON)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:146| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:276 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_ETAT] SET ETA_YON = @ETA_YON, DEF_YON = @DEF_YON WHERE NOM_ETA = @NOM_ETA"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@ETA_YON", ETA_YON)
                    Cmd.Parameters.AddWithValue("@DEF_YON", DEF_YON)
                    Cmd.Parameters.AddWithValue("@NOM_ETA", NOM_ETA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:174| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:276 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_ETAT] WHERE NOM_ETA =@NOM_ETA"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NOM_ETA", NOM_ETA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:179| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:276 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:184| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:276 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:189| <05.00.02> <Function> <> |.List()|List(Of MDT_ETAT)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:276 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_ETAT)
                Dim Result As New List(Of MDT_ETAT)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_ETAT(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), False, Row.Item(1)),
      IIf(IsDBNull(Row.Item(2)), False, Row.Item(2)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:195| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_ETAT)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:276 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_ETAT)
                Dim Result As New List(Of MDT_ETAT)
                Dim C As New MDT_ETAT
                For Each Element As MDT_ETAT In C.List
                    If Element.NOM_ETA.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:199| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_ETAT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:277 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_ETAT)
                Dim Result As New List(Of MDT_ETAT)
                Dim C As New MDT_ETAT
                For Each Element As MDT_ETAT In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:204| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:277 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NOM_ETA
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:208| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:277 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:213| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:279 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:219| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:279 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:226| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:279 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:232| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:279 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:238| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:279 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:253| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:280 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:259| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:280 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:262| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:280 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:268| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:280 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:273| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:280 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:278| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:280 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:284| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:280 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:289| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:280 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:290| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:280 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NOM_ETA">(Set|Get) The NOM_ETA as String.</param>
            ''' <param name="ETA_YON">(Set|Get) The ETA_YON as Boolean.</param>
            ''' <param name="DEF_YON">(Set|Get) The DEF_YON as Boolean.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NOM_ETA As String,
ByVal ETA_YON As Boolean,
ByVal DEF_YON As Boolean)
                With Me
                    Clear()
                    Reset()
                    .NOM_ETA = NOM_ETA
                    .ETA_YON = ETA_YON
                    .DEF_YON = DEF_YON
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:443| <08.00.00> <Class> <> |.MDT_GEFI_TRANSFERT_ETA|Class|{38} |Production Cost : 46.3|Selling Price : 115.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_GEFI_TRANSFERT_ETA
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:443
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{11}||0.8| |8.8
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{11}||0.5| |5.5
        '''    |12| |Parameter  |{16}||0.5| |8
        '''    |Production Cost             |46.3
        '''    |Selling Price without VAT   |115.75
        '''    |Total TVA                   |8.91
        '''    |Grand Total                 |124.66
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:286 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_GEFI_TRANSFERT_ETA
#Region "<1> [Property]{11}"
#Region "[On] |2019/07/16 23h21:444| <01.00.00> <Property> <Columns> |.NUM_SEQ()|Integer|"' (Set|Get) The NUM_SEQ as Integer.
            Private _NUM_SEQ As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:286 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ as Integer.")>
            Public Property NUM_SEQ() As Integer
                Get
                    Return _NUM_SEQ
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ as Integer.

#Region "[On] |2019/07/16 23h21:455| <01.00.01> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:287 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h21:460| <01.00.02> <Property> <Columns> |.NUM_SEQ_FAC()|Integer|"' (Set|Get) The NUM_SEQ_FAC as Integer.
            Private _NUM_SEQ_FAC As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_FAC as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:287 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_FAC as Integer.")>
            Public Property NUM_SEQ_FAC() As Integer
                Get
                    Return _NUM_SEQ_FAC
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_FAC as Integer.

#Region "[On] |2019/07/16 23h21:467| <01.00.03> <Property> <Columns> |.NUM_ETA()|String|"' (Set|Get) The NUM_ETA as String.
            Private _NUM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NUM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:287 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_ETA as String.")>
            Public Property NUM_ETA() As String
                Get
                    Return _NUM_ETA
                End Get
                Set(ByVal Value As String)
                    _NUM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_ETA as String.

#Region "[On] |2019/07/16 23h21:472| <01.00.04> <Property> <Columns> |.MNT_ETA()|Double|"' (Set|Get) The MNT_ETA as Double.
            Private _MNT_ETA As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_ETA as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:288 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_ETA as Double.")>
            Public Property MNT_ETA() As Double
                Get
                    Return _MNT_ETA
                End Get
                Set(ByVal Value As Double)
                    _MNT_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_ETA as Double.

#Region "[On] |2019/07/16 23h21:477| <01.00.05> <Property> <Columns> |.NUM_CLI()|String|"' (Set|Get) The NUM_CLI as String.
            Private _NUM_CLI As String
            '''    <Summary>
            '''     (Set|Get) The NUM_CLI as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:288 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_CLI as String.")>
            Public Property NUM_CLI() As String
                Get
                    Return _NUM_CLI
                End Get
                Set(ByVal Value As String)
                    _NUM_CLI = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_CLI as String.

#Region "[On] |2019/07/16 23h21:482| <01.00.06> <Property> <Columns> |.GEFI_GEN()|Integer|"' (Set|Get) The GEFI_GEN as Integer.
            Private _GEFI_GEN As Integer
            '''    <Summary>
            '''     (Set|Get) The GEFI_GEN as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:297 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GEFI_GEN as Integer.")>
            Public Property GEFI_GEN() As Integer
                Get
                    Return _GEFI_GEN
                End Get
                Set(ByVal Value As Integer)
                    _GEFI_GEN = Value
                End Set
            End Property
#End Region '(Set|Get) The GEFI_GEN as Integer.

#Region "[On] |2019/07/16 23h21:496| <01.00.07> <Property> <Columns> |.GEFI_ART()|Integer|"' (Set|Get) The GEFI_ART as Integer.
            Private _GEFI_ART As Integer
            '''    <Summary>
            '''     (Set|Get) The GEFI_ART as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:298 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GEFI_ART as Integer.")>
            Public Property GEFI_ART() As Integer
                Get
                    Return _GEFI_ART
                End Get
                Set(ByVal Value As Integer)
                    _GEFI_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The GEFI_ART as Integer.

#Region "[On] |2019/07/16 23h21:507| <01.00.08> <Property> <Columns> |.NOM_ETA()|String|"' (Set|Get) The NOM_ETA as String.
            Private _NOM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NOM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:298 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_ETA as String.")>
            Public Property NOM_ETA() As String
                Get
                    Return _NOM_ETA
                End Get
                Set(ByVal Value As String)
                    _NOM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_ETA as String.

#Region "[On] |2019/07/16 23h21:513| <01.00.09> <Property> <Columns> |.MNT_FAC()|Double|"' (Set|Get) The MNT_FAC as Double.
            Private _MNT_FAC As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_FAC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:298 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_FAC as Double.")>
            Public Property MNT_FAC() As Double
                Get
                    Return _MNT_FAC
                End Get
                Set(ByVal Value As Double)
                    _MNT_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_FAC as Double.

#Region "[On] |2019/07/16 23h21:521| <01.00.10> <Property> <Columns> |.NUM_SOC_GEFI()|Integer|"' (Set|Get) The NUM_SOC_GEFI as Integer.
            Private _NUM_SOC_GEFI As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SOC_GEFI as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SOC_GEFI as Integer.")>
            Public Property NUM_SOC_GEFI() As Integer
                Get
                    Return _NUM_SOC_GEFI
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SOC_GEFI = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SOC_GEFI as Integer.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:527| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{10}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_SEQ as Integer.</summary>
                [NUM_SEQ] = 0
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 1
                ''' <summary>(Set|Get) The NUM_SEQ_FAC as Integer.</summary>
                [NUM_SEQ_FAC] = 2
                ''' <summary>(Set|Get) The NUM_ETA as String.</summary>
                [NUM_ETA] = 3
                ''' <summary>(Set|Get) The MNT_ETA as Double.</summary>
                [MNT_ETA] = 4
                ''' <summary>(Set|Get) The NUM_CLI as String.</summary>
                [NUM_CLI] = 5
                ''' <summary>(Set|Get) The GEFI_GEN as Integer.</summary>
                [GEFI_GEN] = 6
                ''' <summary>(Set|Get) The GEFI_ART as Integer.</summary>
                [GEFI_ART] = 7
                ''' <summary>(Set|Get) The NOM_ETA as String.</summary>
                [NOM_ETA] = 8
                ''' <summary>(Set|Get) The MNT_FAC as Double.</summary>
                [MNT_FAC] = 9
                ''' <summary>(Set|Get) The NUM_SOC_GEFI as Integer.</summary>
                [NUM_SOC_GEFI] = 10
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:533| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_SEQ = 0
                    .NUM_MDT = Nothing
                    .NUM_SEQ_FAC = 0
                    .NUM_ETA = Nothing
                    .MNT_ETA = 0
                    .NUM_CLI = Nothing
                    .GEFI_GEN = 0
                    .GEFI_ART = 0
                    .NOM_ETA = Nothing
                    .MNT_FAC = 0
                    .NUM_SOC_GEFI = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:538| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_GEFI_TRANSFERT_ETA"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_GEFI_TRANSFERT_ETA"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_GEFI_TRANSFERT_ETA"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:544| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:300 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_GEFI_TRANSFERT_ETA] (
`NUM_SEQ`, 
`NUM_MDT`, 
`NUM_SEQ_FAC`, 
`NUM_ETA`, 
`MNT_ETA`, 
`NUM_CLI`, 
`GEFI_GEN`, 
`GEFI_ART`, 
`NOM_ETA`, 
`MNT_FAC`, 
`NUM_SOC_GEFI`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@2", Me.NUM_SEQ_FAC)
                    Cmd.Parameters.AddWithValue("@3", Me.NUM_ETA)
                    Cmd.Parameters.AddWithValue("@4", Me.MNT_ETA)
                    Cmd.Parameters.AddWithValue("@5", Me.NUM_CLI)
                    Cmd.Parameters.AddWithValue("@6", Me.GEFI_GEN)
                    Cmd.Parameters.AddWithValue("@7", Me.GEFI_ART)
                    Cmd.Parameters.AddWithValue("@8", Me.NOM_ETA)
                    Cmd.Parameters.AddWithValue("@9", Me.MNT_FAC)
                    Cmd.Parameters.AddWithValue("@10", Me.NUM_SOC_GEFI)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:550| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:300 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_GEFI_TRANSFERT_ETA] SET NUM_MDT = @NUM_MDT, NUM_SEQ_FAC = @NUM_SEQ_FAC, NUM_ETA = @NUM_ETA, MNT_ETA = @MNT_ETA, NUM_CLI = @NUM_CLI, GEFI_GEN = @GEFI_GEN, GEFI_ART = @GEFI_ART, NOM_ETA = @NOM_ETA, MNT_FAC = @MNT_FAC, NUM_SOC_GEFI = @NUM_SOC_GEFI WHERE NUM_SEQ = @NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_FAC", NUM_SEQ_FAC)
                    Cmd.Parameters.AddWithValue("@NUM_ETA", NUM_ETA)
                    Cmd.Parameters.AddWithValue("@MNT_ETA", MNT_ETA)
                    Cmd.Parameters.AddWithValue("@NUM_CLI", NUM_CLI)
                    Cmd.Parameters.AddWithValue("@GEFI_GEN", GEFI_GEN)
                    Cmd.Parameters.AddWithValue("@GEFI_ART", GEFI_ART)
                    Cmd.Parameters.AddWithValue("@NOM_ETA", NOM_ETA)
                    Cmd.Parameters.AddWithValue("@MNT_FAC", MNT_FAC)
                    Cmd.Parameters.AddWithValue("@NUM_SOC_GEFI", NUM_SOC_GEFI)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:555| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:300 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_GEFI_TRANSFERT_ETA] WHERE NUM_SEQ =@NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:560| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:300 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:566| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:301 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:572| <05.00.02> <Function> <> |.List()|List(Of MDT_GEFI_TRANSFERT_ETA)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:301 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_GEFI_TRANSFERT_ETA)
                Dim Result As New List(Of MDT_GEFI_TRANSFERT_ETA)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_GEFI_TRANSFERT_ETA(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), 0, Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), 0, Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), "", Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), 0, Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), 0, Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), "", Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), 0, Row.Item(9)),
      IIf(IsDBNull(Row.Item(10)), 0, Row.Item(10)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:578| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_GEFI_TRANSFERT_ETA)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:301 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_GEFI_TRANSFERT_ETA)
                Dim Result As New List(Of MDT_GEFI_TRANSFERT_ETA)
                Dim C As New MDT_GEFI_TRANSFERT_ETA
                For Each Element As MDT_GEFI_TRANSFERT_ETA In C.List
                    If Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NUM_ETA.ToLower() = Search.ToLower() Or Element.NUM_CLI.ToLower() = Search.ToLower() Or Element.NOM_ETA.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:583| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_GEFI_TRANSFERT_ETA)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:301 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_GEFI_TRANSFERT_ETA)
                Dim Result As New List(Of MDT_GEFI_TRANSFERT_ETA)
                Dim C As New MDT_GEFI_TRANSFERT_ETA
                For Each Element As MDT_GEFI_TRANSFERT_ETA In C.List
                    If Val(Element.NUM_SEQ) = Search Or Val(Element.NUM_SEQ_FAC) = Search Or Val(Element.MNT_ETA) = Search Or Val(Element.GEFI_GEN) = Search Or Val(Element.GEFI_ART) = Search Or Val(Element.MNT_FAC) = Search Or Val(Element.NUM_SOC_GEFI) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:612| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:301 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_SEQ
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:618| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:302 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:624| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:302 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:631| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:302 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:637| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:302 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:643| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:303 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:648| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:303 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:654| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:303 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:660| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:303 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:664| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:303 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:670| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:304 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:675| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:304 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:681| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:304 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:706| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:304 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:713| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:305 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:715| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:305 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_SEQ">(Set|Get) The NUM_SEQ as Integer.</param>
            ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="NUM_SEQ_FAC">(Set|Get) The NUM_SEQ_FAC as Integer.</param>
            ''' <param name="NUM_ETA">(Set|Get) The NUM_ETA as String.</param>
            ''' <param name="MNT_ETA">(Set|Get) The MNT_ETA as Double.</param>
            ''' <param name="NUM_CLI">(Set|Get) The NUM_CLI as String.</param>
            ''' <param name="GEFI_GEN">(Set|Get) The GEFI_GEN as Integer.</param>
            ''' <param name="GEFI_ART">(Set|Get) The GEFI_ART as Integer.</param>
            ''' <param name="NOM_ETA">(Set|Get) The NOM_ETA as String.</param>
            ''' <param name="MNT_FAC">(Set|Get) The MNT_FAC as Double.</param>
            ''' <param name="NUM_SOC_GEFI">(Set|Get) The NUM_SOC_GEFI as Integer.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_SEQ As Integer,
ByVal NUM_MDT As String,
ByVal NUM_SEQ_FAC As Integer,
ByVal NUM_ETA As String,
ByVal MNT_ETA As Double,
ByVal NUM_CLI As String,
ByVal GEFI_GEN As Integer,
ByVal GEFI_ART As Integer,
ByVal NOM_ETA As String,
ByVal MNT_FAC As Double,
ByVal NUM_SOC_GEFI As Integer)
                With Me
                    Clear()
                    Reset()
                    .NUM_SEQ = NUM_SEQ
                    .NUM_MDT = NUM_MDT
                    .NUM_SEQ_FAC = NUM_SEQ_FAC
                    .NUM_ETA = NUM_ETA
                    .MNT_ETA = MNT_ETA
                    .NUM_CLI = NUM_CLI
                    .GEFI_GEN = GEFI_GEN
                    .GEFI_ART = GEFI_ART
                    .NOM_ETA = NOM_ETA
                    .MNT_FAC = MNT_FAC
                    .NUM_SOC_GEFI = NUM_SOC_GEFI
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:876| <08.00.00> <Class> <> |.MDT_GENRE_PRESTATION|Class|{30} |Production Cost : 31.9|Selling Price : 79.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_GENRE_PRESTATION
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:876
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{3}||0.8| |2.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{3}||0.5| |1.5
        '''    |12| |Parameter  |{8}||0.5| |4
        '''    |Production Cost             |31.9
        '''    |Selling Price without VAT   |79.75
        '''    |Total TVA                   |6.14
        '''    |Grand Total                 |85.89
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:314 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_GENRE_PRESTATION
#Region "<1> [Property]{3}"
#Region "[On] |2019/07/16 23h21:876| <01.00.00> <Property> <Columns> |.COD_GEN_PRS()|String|"' (Set|Get) The COD_GEN_PRS as String.
            Private _COD_GEN_PRS As String
            '''    <Summary>
            '''     (Set|Get) The COD_GEN_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:315 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_GEN_PRS as String.")>
            Public Property COD_GEN_PRS() As String
                Get
                    Return _COD_GEN_PRS
                End Get
                Set(ByVal Value As String)
                    _COD_GEN_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_GEN_PRS as String.

#Region "[On] |2019/07/16 23h21:892| <01.00.01> <Property> <Columns> |.TRI_NUM()|Integer|"' (Set|Get) The TRI_NUM as Integer.
            Private _TRI_NUM As Integer
            '''    <Summary>
            '''     (Set|Get) The TRI_NUM as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:315 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TRI_NUM as Integer.")>
            Public Property TRI_NUM() As Integer
                Get
                    Return _TRI_NUM
                End Get
                Set(ByVal Value As Integer)
                    _TRI_NUM = Value
                End Set
            End Property
#End Region '(Set|Get) The TRI_NUM as Integer.

#Region "[On] |2019/07/16 23h21:897| <01.00.02> <Property> <Columns> |.LIB_GEN_PRS()|String|"' (Set|Get) The LIB_GEN_PRS as String.
            Private _LIB_GEN_PRS As String
            '''    <Summary>
            '''     (Set|Get) The LIB_GEN_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:316 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_GEN_PRS as String.")>
            Public Property LIB_GEN_PRS() As String
                Get
                    Return _LIB_GEN_PRS
                End Get
                Set(ByVal Value As String)
                    _LIB_GEN_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_GEN_PRS as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:903| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{2}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:316 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_GEN_PRS as String.</summary>
                [COD_GEN_PRS] = 0
                ''' <summary>(Set|Get) The TRI_NUM as Integer.</summary>
                [TRI_NUM] = 1
                ''' <summary>(Set|Get) The LIB_GEN_PRS as String.</summary>
                [LIB_GEN_PRS] = 2
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:923| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:316 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_GEN_PRS = Nothing
                    .TRI_NUM = 0
                    .LIB_GEN_PRS = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:929| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:317 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_GENRE_PRESTATION"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_GENRE_PRESTATION"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_GENRE_PRESTATION"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:934| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:317 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_GENRE_PRESTATION] (
`COD_GEN_PRS`, 
`TRI_NUM`, 
`LIB_GEN_PRS`) Values (@0, @1, @2)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_GEN_PRS)
                    Cmd.Parameters.AddWithValue("@1", Me.TRI_NUM)
                    Cmd.Parameters.AddWithValue("@2", Me.LIB_GEN_PRS)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:938| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:317 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_GENRE_PRESTATION] SET TRI_NUM = @TRI_NUM, LIB_GEN_PRS = @LIB_GEN_PRS WHERE COD_GEN_PRS = @COD_GEN_PRS"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@TRI_NUM", TRI_NUM)
                    Cmd.Parameters.AddWithValue("@LIB_GEN_PRS", LIB_GEN_PRS)
                    Cmd.Parameters.AddWithValue("@COD_GEN_PRS", COD_GEN_PRS)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:943| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:317 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_GENRE_PRESTATION] WHERE COD_GEN_PRS =@COD_GEN_PRS"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_GEN_PRS", COD_GEN_PRS)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:948| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:317 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:952| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:317 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:957| <05.00.02> <Function> <> |.List()|List(Of MDT_GENRE_PRESTATION)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:317 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_GENRE_PRESTATION)
                Dim Result As New List(Of MDT_GENRE_PRESTATION)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_GENRE_PRESTATION(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
      IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:962| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_GENRE_PRESTATION)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:317 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_GENRE_PRESTATION)
                Dim Result As New List(Of MDT_GENRE_PRESTATION)
                Dim C As New MDT_GENRE_PRESTATION
                For Each Element As MDT_GENRE_PRESTATION In C.List
                    If Element.COD_GEN_PRS.ToLower() = Search.ToLower() Or Element.LIB_GEN_PRS.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:967| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_GENRE_PRESTATION)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:318 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_GENRE_PRESTATION)
                Dim Result As New List(Of MDT_GENRE_PRESTATION)
                Dim C As New MDT_GENRE_PRESTATION
                For Each Element As MDT_GENRE_PRESTATION In C.List
                    If Val(Element.COD_GEN_PRS) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:972| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:318 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_GEN_PRS
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:977| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:318 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:982| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:318 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:987| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:318 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:018| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:318 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:023| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:318 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:028| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:318 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:034| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:319 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:038| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:319 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:041| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:319 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:046| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:319 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:051| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:319 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:056| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:319 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:061| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:319 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:066| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:319 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:067| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:319 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_GEN_PRS">(Set|Get) The COD_GEN_PRS as String.</param>
            ''' <param name="TRI_NUM">(Set|Get) The TRI_NUM as Integer.</param>
            ''' <param name="LIB_GEN_PRS">(Set|Get) The LIB_GEN_PRS as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_GEN_PRS As String,
ByVal TRI_NUM As Integer,
ByVal LIB_GEN_PRS As String)
                With Me
                    Clear()
                    Reset()
                    .COD_GEN_PRS = COD_GEN_PRS
                    .TRI_NUM = TRI_NUM
                    .LIB_GEN_PRS = LIB_GEN_PRS
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:228| <08.00.00> <Class> <> |.MDT_GROUPE|Class|{29} |Production Cost : 30.1|Selling Price : 75.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_GROUPE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:228
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{2}||0.8| |1.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{2}||0.5| |1
        '''    |12| |Parameter  |{7}||0.5| |3.5
        '''    |Production Cost             |30.1
        '''    |Selling Price without VAT   |75.25
        '''    |Total TVA                   |5.79
        '''    |Grand Total                 |81.04
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:326 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_GROUPE
#Region "<1> [Property]{2}"
#Region "[On] |2019/07/16 23h21:228| <01.00.00> <Property> <Columns> |.COD_GRP()|String|"' (Set|Get) The COD_GRP as String.
            Private _COD_GRP As String
            '''    <Summary>
            '''     (Set|Get) The COD_GRP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:327 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_GRP as String.")>
            Public Property COD_GRP() As String
                Get
                    Return _COD_GRP
                End Get
                Set(ByVal Value As String)
                    _COD_GRP = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_GRP as String.

#Region "[On] |2019/07/16 23h21:239| <01.00.01> <Property> <Columns> |.NOM_GRP()|String|"' (Set|Get) The NOM_GRP as String.
            Private _NOM_GRP As String
            '''    <Summary>
            '''     (Set|Get) The NOM_GRP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:327 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_GRP as String.")>
            Public Property NOM_GRP() As String
                Get
                    Return _NOM_GRP
                End Get
                Set(ByVal Value As String)
                    _NOM_GRP = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_GRP as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:245| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{1}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:327 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_GRP as String.</summary>
                [COD_GRP] = 0
                ''' <summary>(Set|Get) The NOM_GRP as String.</summary>
                [NOM_GRP] = 1
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:249| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:327 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_GRP = Nothing
                    .NOM_GRP = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:254| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:327 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_GROUPE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_GROUPE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_GROUPE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:258| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:327 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_GROUPE] (
`COD_GRP`, 
`NOM_GRP`) Values (@0, @1)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_GRP)
                    Cmd.Parameters.AddWithValue("@1", Me.NOM_GRP)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:262| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:328 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_GROUPE] SET NOM_GRP = @NOM_GRP WHERE COD_GRP = @COD_GRP"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NOM_GRP", NOM_GRP)
                    Cmd.Parameters.AddWithValue("@COD_GRP", COD_GRP)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:269| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:328 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_GROUPE] WHERE COD_GRP =@COD_GRP"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_GRP", COD_GRP)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:273| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:328 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:278| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:328 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:282| <05.00.02> <Function> <> |.List()|List(Of MDT_GROUPE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:328 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_GROUPE)
                Dim Result As New List(Of MDT_GROUPE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_GROUPE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
      IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:288| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_GROUPE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:328 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_GROUPE)
                Dim Result As New List(Of MDT_GROUPE)
                Dim C As New MDT_GROUPE
                For Each Element As MDT_GROUPE In C.List
                    If Element.COD_GRP.ToLower() = Search.ToLower() Or Element.NOM_GRP.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:292| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_GROUPE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:328 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_GROUPE)
                Dim Result As New List(Of MDT_GROUPE)
                Dim C As New MDT_GROUPE
                For Each Element As MDT_GROUPE In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:296| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:328 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_GRP
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:308| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:329 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:315| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:329 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:322| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:329 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:327| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:329 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:332| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:332 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:337| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:332 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:341| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:332 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:346| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:332 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:349| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:332 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:354| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:332 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:358| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:333 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:364| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:333 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:369| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:333 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:373| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:333 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:380| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:333 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_GRP">(Set|Get) The COD_GRP as String.</param>
            ''' <param name="NOM_GRP">(Set|Get) The NOM_GRP as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_GRP As String,
ByVal NOM_GRP As String)
                With Me
                    Clear()
                    Reset()
                    .COD_GRP = COD_GRP
                    .NOM_GRP = NOM_GRP
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:540| <08.00.00> <Class> <> |.MDT_GROUPE_ACCES|Class|{29} |Production Cost : 30.1|Selling Price : 75.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_GROUPE_ACCES
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:540
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{2}||0.8| |1.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{2}||0.5| |1
        '''    |12| |Parameter  |{7}||0.5| |3.5
        '''    |Production Cost             |30.1
        '''    |Selling Price without VAT   |75.25
        '''    |Total TVA                   |5.79
        '''    |Grand Total                 |81.04
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:338 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_GROUPE_ACCES
#Region "<1> [Property]{2}"
#Region "[On] |2019/07/16 23h21:540| <01.00.00> <Property> <Columns> |.COD_GRP()|String|"' (Set|Get) The COD_GRP as String.
            Private _COD_GRP As String
            '''    <Summary>
            '''     (Set|Get) The COD_GRP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:338 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_GRP as String.")>
            Public Property COD_GRP() As String
                Get
                    Return _COD_GRP
                End Get
                Set(ByVal Value As String)
                    _COD_GRP = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_GRP as String.

#Region "[On] |2019/07/16 23h21:551| <01.00.01> <Property> <Columns> |.COD_ACS()|String|"' (Set|Get) The COD_ACS as String.
            Private _COD_ACS As String
            '''    <Summary>
            '''     (Set|Get) The COD_ACS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:338 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_ACS as String.")>
            Public Property COD_ACS() As String
                Get
                    Return _COD_ACS
                End Get
                Set(ByVal Value As String)
                    _COD_ACS = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_ACS as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:556| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{1}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:338 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_GRP as String.</summary>
                [COD_GRP] = 0
                ''' <summary>(Set|Get) The COD_ACS as String.</summary>
                [COD_ACS] = 1
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:560| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:338 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_GRP = Nothing
                    .COD_ACS = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:565| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_GROUPE_ACCES"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_GROUPE_ACCES"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_GROUPE_ACCES"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:571| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_GROUPE_ACCES] (
`COD_GRP`, 
`COD_ACS`) Values (@0, @1)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_GRP)
                    Cmd.Parameters.AddWithValue("@1", Me.COD_ACS)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:575| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_GROUPE_ACCES] SET COD_ACS = @COD_ACS WHERE COD_GRP = @COD_GRP"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_ACS", COD_ACS)
                    Cmd.Parameters.AddWithValue("@COD_GRP", COD_GRP)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:580| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_GROUPE_ACCES] WHERE COD_GRP =@COD_GRP"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_GRP", COD_GRP)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:584| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:588| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:593| <05.00.02> <Function> <> |.List()|List(Of MDT_GROUPE_ACCES)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:340 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_GROUPE_ACCES)
                Dim Result As New List(Of MDT_GROUPE_ACCES)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_GROUPE_ACCES(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
      IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:598| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_GROUPE_ACCES)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:340 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_GROUPE_ACCES)
                Dim Result As New List(Of MDT_GROUPE_ACCES)
                Dim C As New MDT_GROUPE_ACCES
                For Each Element As MDT_GROUPE_ACCES In C.List
                    If Element.COD_GRP.ToLower() = Search.ToLower() Or Element.COD_ACS.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:603| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_GROUPE_ACCES)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:341 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_GROUPE_ACCES)
                Dim Result As New List(Of MDT_GROUPE_ACCES)
                Dim C As New MDT_GROUPE_ACCES
                For Each Element As MDT_GROUPE_ACCES In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:627| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:341 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_GRP
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:634| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:341 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:641| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:341 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:648| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:342 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:653| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:342 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:660| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:342 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:666| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:342 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:671| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:342 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:678| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:342 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:682| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:342 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:687| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:342 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:693| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:343 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:698| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:343 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:704| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:343 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:721| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:343 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:722| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:343 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_GRP">(Set|Get) The COD_GRP as String.</param>
            ''' <param name="COD_ACS">(Set|Get) The COD_ACS as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_GRP As String,
ByVal COD_ACS As String)
                With Me
                    Clear()
                    Reset()
                    .COD_GRP = COD_GRP
                    .COD_ACS = COD_ACS
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:882| <08.00.00> <Class> <> |.MDT_GROUPE_ETAT|Class|{29} |Production Cost : 30.1|Selling Price : 75.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_GROUPE_ETAT
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:882
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{2}||0.8| |1.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{2}||0.5| |1
        '''    |12| |Parameter  |{7}||0.5| |3.5
        '''    |Production Cost             |30.1
        '''    |Selling Price without VAT   |75.25
        '''    |Total TVA                   |5.79
        '''    |Grand Total                 |81.04
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:351 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_GROUPE_ETAT
#Region "<1> [Property]{2}"
#Region "[On] |2019/07/16 23h21:882| <01.00.00> <Property> <Columns> |.COD_GRP()|String|"' (Set|Get) The COD_GRP as String.
            Private _COD_GRP As String
            '''    <Summary>
            '''     (Set|Get) The COD_GRP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:351 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_GRP as String.")>
            Public Property COD_GRP() As String
                Get
                    Return _COD_GRP
                End Get
                Set(ByVal Value As String)
                    _COD_GRP = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_GRP as String.

#Region "[On] |2019/07/16 23h21:894| <01.00.01> <Property> <Columns> |.NOM_ETA()|String|"' (Set|Get) The NOM_ETA as String.
            Private _NOM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NOM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:351 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_ETA as String.")>
            Public Property NOM_ETA() As String
                Get
                    Return _NOM_ETA
                End Get
                Set(ByVal Value As String)
                    _NOM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_ETA as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:899| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{1}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:352 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_GRP as String.</summary>
                [COD_GRP] = 0
                ''' <summary>(Set|Get) The NOM_ETA as String.</summary>
                [NOM_ETA] = 1
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:903| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:352 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_GRP = Nothing
                    .NOM_ETA = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:909| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:352 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_GROUPE_ETAT"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_GROUPE_ETAT"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_GROUPE_ETAT"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:913| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:353 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_GROUPE_ETAT] (
`COD_GRP`, 
`NOM_ETA`) Values (@0, @1)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_GRP)
                    Cmd.Parameters.AddWithValue("@1", Me.NOM_ETA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:917| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:353 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_GROUPE_ETAT] SET NOM_ETA = @NOM_ETA WHERE COD_GRP = @COD_GRP"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NOM_ETA", NOM_ETA)
                    Cmd.Parameters.AddWithValue("@COD_GRP", COD_GRP)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:921| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:353 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_GROUPE_ETAT] WHERE COD_GRP =@COD_GRP"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_GRP", COD_GRP)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:926| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:353 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:931| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:353 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:937| <05.00.02> <Function> <> |.List()|List(Of MDT_GROUPE_ETAT)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:354 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_GROUPE_ETAT)
                Dim Result As New List(Of MDT_GROUPE_ETAT)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_GROUPE_ETAT(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
      IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:956| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_GROUPE_ETAT)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:354 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_GROUPE_ETAT)
                Dim Result As New List(Of MDT_GROUPE_ETAT)
                Dim C As New MDT_GROUPE_ETAT
                For Each Element As MDT_GROUPE_ETAT In C.List
                    If Element.COD_GRP.ToLower() = Search.ToLower() Or Element.NOM_ETA.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:962| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_GROUPE_ETAT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:354 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_GROUPE_ETAT)
                Dim Result As New List(Of MDT_GROUPE_ETAT)
                Dim C As New MDT_GROUPE_ETAT
                For Each Element As MDT_GROUPE_ETAT In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:969| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:354 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_GRP
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:974| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:354 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:979| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:354 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:984| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:354 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:989| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:355 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:994| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:355 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:999| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:355 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:004| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:355 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:008| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:355 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:011| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:355 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:019| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:355 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:023| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:355 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:048| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:355 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:053| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:356 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:058| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:356 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:059| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:356 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_GRP">(Set|Get) The COD_GRP as String.</param>
            ''' <param name="NOM_ETA">(Set|Get) The NOM_ETA as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_GRP As String,
ByVal NOM_ETA As String)
                With Me
                    Clear()
                    Reset()
                    .COD_GRP = COD_GRP
                    .NOM_ETA = NOM_ETA
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h21:213| <08.00.00> <Class> <> |.MDT_HISTORIQUE_OPERATION|Class|{79} |Production Cost : 120.1|Selling Price : 300.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_HISTORIQUE_OPERATION
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h21:213
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{52}||0.8| |41.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{52}||0.5| |26
        '''    |12| |Parameter  |{57}||0.5| |28.5
        '''    |Production Cost             |120.1
        '''    |Selling Price without VAT   |300.25
        '''    |Total TVA                   |23.12
        '''    |Grand Total                 |323.37
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_HISTORIQUE_OPERATION
#Region "<1> [Property]{52}"
#Region "[On] |2019/07/16 23h21:213| <01.00.00> <Property> <Columns> |.NUM_SEQ()|Integer|"' (Set|Get) The NUM_SEQ as Integer.
            Private _NUM_SEQ As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ as Integer.")>
            Public Property NUM_SEQ() As Integer
                Get
                    Return _NUM_SEQ
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ as Integer.

#Region "[On] |2019/07/16 23h21:224| <01.00.01> <Property> <Columns> |.NUM_SEQ_SAV()|Integer|"' (Set|Get) The NUM_SEQ_SAV as Integer.
            Private _NUM_SEQ_SAV As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_SAV as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_SAV as Integer.")>
            Public Property NUM_SEQ_SAV() As Integer
                Get
                    Return _NUM_SEQ_SAV
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_SAV = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_SAV as Integer.

#Region "[On] |2019/07/16 23h21:229| <01.00.02> <Property> <Columns> |.NUM_SEQ_PAP()|Integer|"' (Set|Get) The NUM_SEQ_PAP as Integer.
            Private _NUM_SEQ_PAP As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_PAP as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_PAP as Integer.")>
            Public Property NUM_SEQ_PAP() As Integer
                Get
                    Return _NUM_SEQ_PAP
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_PAP = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_PAP as Integer.

#Region "[On] |2019/07/16 23h21:234| <01.00.03> <Property> <Columns> |.TYP_OPE()|String|"' (Set|Get) The TYP_OPE as String.
            Private _TYP_OPE As String
            '''    <Summary>
            '''     (Set|Get) The TYP_OPE as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_OPE as String.")>
            Public Property TYP_OPE() As String
                Get
                    Return _TYP_OPE
                End Get
                Set(ByVal Value As String)
                    _TYP_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_OPE as String.

#Region "[On] |2019/07/16 23h21:239| <01.00.04> <Property> <Columns> |.COR_YON()|Boolean|"' (Set|Get) The COR_YON as Boolean.
            Private _COR_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The COR_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COR_YON as Boolean.")>
            Public Property COR_YON() As Boolean
                Get
                    Return _COR_YON
                End Get
                Set(ByVal Value As Boolean)
                    _COR_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The COR_YON as Boolean.

#Region "[On] |2019/07/16 23h21:244| <01.00.05> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h21:249| <01.00.06> <Property> <Columns> |.NUM_ETA()|String|"' (Set|Get) The NUM_ETA as String.
            Private _NUM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NUM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_ETA as String.")>
            Public Property NUM_ETA() As String
                Get
                    Return _NUM_ETA
                End Get
                Set(ByVal Value As String)
                    _NUM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_ETA as String.

#Region "[On] |2019/07/16 23h21:253| <01.00.07> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#Region "[On] |2019/07/16 23h21:258| <01.00.08> <Property> <Columns> |.DAT_OPE()|DateTime|"' (Set|Get) The DAT_OPE as DateTime.
            Private _DAT_OPE As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_OPE as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_OPE as DateTime.")>
            Public Property DAT_OPE() As DateTime
                Get
                    Return _DAT_OPE
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_OPE as DateTime.

#Region "[On] |2019/07/16 23h21:263| <01.00.09> <Property> <Columns> |.NUM_FTA()|Integer|"' (Set|Get) The NUM_FTA as Integer.
            Private _NUM_FTA As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_FTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FTA as Integer.")>
            Public Property NUM_FTA() As Integer
                Get
                    Return _NUM_FTA
                End Get
                Set(ByVal Value As Integer)
                    _NUM_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FTA as Integer.

#Region "[On] |2019/07/16 23h21:269| <01.00.10> <Property> <Columns> |.LIB_PRS()|String|"' (Set|Get) The LIB_PRS as String.
            Private _LIB_PRS As String
            '''    <Summary>
            '''     (Set|Get) The LIB_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:364 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_PRS as String.")>
            Public Property LIB_PRS() As String
                Get
                    Return _LIB_PRS
                End Get
                Set(ByVal Value As String)
                    _LIB_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_PRS as String.

#Region "[On] |2019/07/16 23h21:299| <01.00.11> <Property> <Columns> |.HEU_PRS()|Double|"' (Set|Get) The HEU_PRS as Double.
            Private _HEU_PRS As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_PRS as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:364 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_PRS as Double.")>
            Public Property HEU_PRS() As Double
                Get
                    Return _HEU_PRS
                End Get
                Set(ByVal Value As Double)
                    _HEU_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_PRS as Double.

#Region "[On] |2019/07/16 23h21:305| <01.00.12> <Property> <Columns> |.HEU_LUN()|Double|"' (Set|Get) The HEU_LUN as Double.
            Private _HEU_LUN As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_LUN as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:364 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_LUN as Double.")>
            Public Property HEU_LUN() As Double
                Get
                    Return _HEU_LUN
                End Get
                Set(ByVal Value As Double)
                    _HEU_LUN = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_LUN as Double.

#Region "[On] |2019/07/16 23h21:311| <01.00.13> <Property> <Columns> |.HEU_MAR()|Double|"' (Set|Get) The HEU_MAR as Double.
            Private _HEU_MAR As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_MAR as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:364 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_MAR as Double.")>
            Public Property HEU_MAR() As Double
                Get
                    Return _HEU_MAR
                End Get
                Set(ByVal Value As Double)
                    _HEU_MAR = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_MAR as Double.

#Region "[On] |2019/07/16 23h21:318| <01.00.14> <Property> <Columns> |.HEU_MER()|Double|"' (Set|Get) The HEU_MER as Double.
            Private _HEU_MER As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_MER as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:364 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_MER as Double.")>
            Public Property HEU_MER() As Double
                Get
                    Return _HEU_MER
                End Get
                Set(ByVal Value As Double)
                    _HEU_MER = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_MER as Double.

#Region "[On] |2019/07/16 23h21:323| <01.00.15> <Property> <Columns> |.HEU_JEU()|Double|"' (Set|Get) The HEU_JEU as Double.
            Private _HEU_JEU As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_JEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:365 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_JEU as Double.")>
            Public Property HEU_JEU() As Double
                Get
                    Return _HEU_JEU
                End Get
                Set(ByVal Value As Double)
                    _HEU_JEU = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_JEU as Double.

#Region "[On] |2019/07/16 23h21:328| <01.00.16> <Property> <Columns> |.HEU_VEN()|Double|"' (Set|Get) The HEU_VEN as Double.
            Private _HEU_VEN As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_VEN as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:365 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_VEN as Double.")>
            Public Property HEU_VEN() As Double
                Get
                    Return _HEU_VEN
                End Get
                Set(ByVal Value As Double)
                    _HEU_VEN = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_VEN as Double.

#Region "[On] |2019/07/16 23h21:333| <01.00.17> <Property> <Columns> |.HEU_SAM()|Double|"' (Set|Get) The HEU_SAM as Double.
            Private _HEU_SAM As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_SAM as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:365 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_SAM as Double.")>
            Public Property HEU_SAM() As Double
                Get
                    Return _HEU_SAM
                End Get
                Set(ByVal Value As Double)
                    _HEU_SAM = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_SAM as Double.

#Region "[On] |2019/07/16 23h21:339| <01.00.18> <Property> <Columns> |.HEU_DIM()|Double|"' (Set|Get) The HEU_DIM as Double.
            Private _HEU_DIM As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_DIM as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:365 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_DIM as Double.")>
            Public Property HEU_DIM() As Double
                Get
                    Return _HEU_DIM
                End Get
                Set(ByVal Value As Double)
                    _HEU_DIM = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_DIM as Double.

#Region "[On] |2019/07/16 23h21:344| <01.00.19> <Property> <Columns> |.COD_TAR()|String|"' (Set|Get) The COD_TAR as String.
            Private _COD_TAR As String
            '''    <Summary>
            '''     (Set|Get) The COD_TAR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:365 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TAR as String.")>
            Public Property COD_TAR() As String
                Get
                    Return _COD_TAR
                End Get
                Set(ByVal Value As String)
                    _COD_TAR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TAR as String.

#Region "[On] |2019/07/16 23h21:350| <01.00.20> <Property> <Columns> |.COD_ART()|String|"' (Set|Get) The COD_ART as String.
            Private _COD_ART As String
            '''    <Summary>
            '''     (Set|Get) The COD_ART as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:366 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_ART as String.")>
            Public Property COD_ART() As String
                Get
                    Return _COD_ART
                End Get
                Set(ByVal Value As String)
                    _COD_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_ART as String.

#Region "[On] |2019/07/16 23h21:355| <01.00.21> <Property> <Columns> |.COD_CAT()|String|"' (Set|Get) The COD_CAT as String.
            Private _COD_CAT As String
            '''    <Summary>
            '''     (Set|Get) The COD_CAT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:366 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_CAT as String.")>
            Public Property COD_CAT() As String
                Get
                    Return _COD_CAT
                End Get
                Set(ByVal Value As String)
                    _COD_CAT = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_CAT as String.

#Region "[On] |2019/07/16 23h21:361| <01.00.22> <Property> <Columns> |.PRX_VTE_HEU()|Double|"' (Set|Get) The PRX_VTE_HEU as Double.
            Private _PRX_VTE_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_VTE_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:366 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_VTE_HEU as Double.")>
            Public Property PRX_VTE_HEU() As Double
                Get
                    Return _PRX_VTE_HEU
                End Get
                Set(ByVal Value As Double)
                    _PRX_VTE_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_VTE_HEU as Double.

#Region "[On] |2019/07/16 23h21:367| <01.00.23> <Property> <Columns> |.PRX_RVT_HEU()|Double|"' (Set|Get) The PRX_RVT_HEU as Double.
            Private _PRX_RVT_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_RVT_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:366 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_RVT_HEU as Double.")>
            Public Property PRX_RVT_HEU() As Double
                Get
                    Return _PRX_RVT_HEU
                End Get
                Set(ByVal Value As Double)
                    _PRX_RVT_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_RVT_HEU as Double.

#Region "[On] |2019/07/16 23h21:373| <01.00.24> <Property> <Columns> |.MNT_VTE_HEU()|Double|"' (Set|Get) The MNT_VTE_HEU as Double.
            Private _MNT_VTE_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_VTE_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:367 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_VTE_HEU as Double.")>
            Public Property MNT_VTE_HEU() As Double
                Get
                    Return _MNT_VTE_HEU
                End Get
                Set(ByVal Value As Double)
                    _MNT_VTE_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_VTE_HEU as Double.

#Region "[On] |2019/07/16 23h21:379| <01.00.25> <Property> <Columns> |.MNT_RVT_HEU()|Double|"' (Set|Get) The MNT_RVT_HEU as Double.
            Private _MNT_RVT_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_RVT_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:367 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_RVT_HEU as Double.")>
            Public Property MNT_RVT_HEU() As Double
                Get
                    Return _MNT_RVT_HEU
                End Get
                Set(ByVal Value As Double)
                    _MNT_RVT_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_RVT_HEU as Double.

#Region "[On] |2019/07/16 23h21:385| <01.00.26> <Property> <Columns> |.MNT_FAC_HEU()|Double|"' (Set|Get) The MNT_FAC_HEU as Double.
            Private _MNT_FAC_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_FAC_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:367 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_FAC_HEU as Double.")>
            Public Property MNT_FAC_HEU() As Double
                Get
                    Return _MNT_FAC_HEU
                End Get
                Set(ByVal Value As Double)
                    _MNT_FAC_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_FAC_HEU as Double.

#Region "[On] |2019/07/16 23h21:390| <01.00.27> <Property> <Columns> |.QTE_ART()|Double|"' (Set|Get) The QTE_ART as Double.
            Private _QTE_ART As Double
            '''    <Summary>
            '''     (Set|Get) The QTE_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:367 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The QTE_ART as Double.")>
            Public Property QTE_ART() As Double
                Get
                    Return _QTE_ART
                End Get
                Set(ByVal Value As Double)
                    _QTE_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The QTE_ART as Double.

#Region "[On] |2019/07/16 23h21:396| <01.00.28> <Property> <Columns> |.PRX_VTE_ART()|Double|"' (Set|Get) The PRX_VTE_ART as Double.
            Private _PRX_VTE_ART As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_VTE_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:367 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_VTE_ART as Double.")>
            Public Property PRX_VTE_ART() As Double
                Get
                    Return _PRX_VTE_ART
                End Get
                Set(ByVal Value As Double)
                    _PRX_VTE_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_VTE_ART as Double.

#Region "[On] |2019/07/16 23h21:402| <01.00.29> <Property> <Columns> |.PRX_RMB_ART()|Double|"' (Set|Get) The PRX_RMB_ART as Double.
            Private _PRX_RMB_ART As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_RMB_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:368 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_RMB_ART as Double.")>
            Public Property PRX_RMB_ART() As Double
                Get
                    Return _PRX_RMB_ART
                End Get
                Set(ByVal Value As Double)
                    _PRX_RMB_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_RMB_ART as Double.

#Region "[On] |2019/07/16 23h21:419| <01.00.30> <Property> <Columns> |.PRX_RVT_ART()|Double|"' (Set|Get) The PRX_RVT_ART as Double.
            Private _PRX_RVT_ART As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_RVT_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:368 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_RVT_ART as Double.")>
            Public Property PRX_RVT_ART() As Double
                Get
                    Return _PRX_RVT_ART
                End Get
                Set(ByVal Value As Double)
                    _PRX_RVT_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_RVT_ART as Double.

#Region "[On] |2019/07/16 23h21:441| <01.00.31> <Property> <Columns> |.MNT_VTE_ART()|Double|"' (Set|Get) The MNT_VTE_ART as Double.
            Private _MNT_VTE_ART As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_VTE_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:368 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_VTE_ART as Double.")>
            Public Property MNT_VTE_ART() As Double
                Get
                    Return _MNT_VTE_ART
                End Get
                Set(ByVal Value As Double)
                    _MNT_VTE_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_VTE_ART as Double.

#Region "[On] |2019/07/16 23h21:447| <01.00.32> <Property> <Columns> |.MNT_RMB_ART()|Double|"' (Set|Get) The MNT_RMB_ART as Double.
            Private _MNT_RMB_ART As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_RMB_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:368 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_RMB_ART as Double.")>
            Public Property MNT_RMB_ART() As Double
                Get
                    Return _MNT_RMB_ART
                End Get
                Set(ByVal Value As Double)
                    _MNT_RMB_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_RMB_ART as Double.

#Region "[On] |2019/07/16 23h21:453| <01.00.33> <Property> <Columns> |.MNT_RVT_ART()|Double|"' (Set|Get) The MNT_RVT_ART as Double.
            Private _MNT_RVT_ART As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_RVT_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:369 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_RVT_ART as Double.")>
            Public Property MNT_RVT_ART() As Double
                Get
                    Return _MNT_RVT_ART
                End Get
                Set(ByVal Value As Double)
                    _MNT_RVT_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_RVT_ART as Double.

#Region "[On] |2019/07/16 23h21:460| <01.00.34> <Property> <Columns> |.MNT_FAC_ART()|Double|"' (Set|Get) The MNT_FAC_ART as Double.
            Private _MNT_FAC_ART As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_FAC_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:369 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_FAC_ART as Double.")>
            Public Property MNT_FAC_ART() As Double
                Get
                    Return _MNT_FAC_ART
                End Get
                Set(ByVal Value As Double)
                    _MNT_FAC_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_FAC_ART as Double.

#Region "[On] |2019/07/16 23h21:466| <01.00.35> <Property> <Columns> |.RMB_YON()|Boolean|"' (Set|Get) The RMB_YON as Boolean.
            Private _RMB_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The RMB_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:369 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RMB_YON as Boolean.")>
            Public Property RMB_YON() As Boolean
                Get
                    Return _RMB_YON
                End Get
                Set(ByVal Value As Boolean)
                    _RMB_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The RMB_YON as Boolean.

#Region "[On] |2019/07/16 23h21:473| <01.00.36> <Property> <Columns> |.FAC_YON()|Boolean|"' (Set|Get) The FAC_YON as Boolean.
            Private _FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:375 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_YON as Boolean.")>
            Public Property FAC_YON() As Boolean
                Get
                    Return _FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h21:479| <01.00.37> <Property> <Columns> |.HRS_TOT_YON()|Boolean|"' (Set|Get) The HRS_TOT_YON as Boolean.
            Private _HRS_TOT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The HRS_TOT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:375 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HRS_TOT_YON as Boolean.")>
            Public Property HRS_TOT_YON() As Boolean
                Get
                    Return _HRS_TOT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _HRS_TOT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The HRS_TOT_YON as Boolean.

#Region "[On] |2019/07/16 23h21:485| <01.00.38> <Property> <Columns> |.COD_RCP()|String|"' (Set|Get) The COD_RCP as String.
            Private _COD_RCP As String
            '''    <Summary>
            '''     (Set|Get) The COD_RCP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:375 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_RCP as String.")>
            Public Property COD_RCP() As String
                Get
                    Return _COD_RCP
                End Get
                Set(ByVal Value As String)
                    _COD_RCP = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_RCP as String.

#Region "[On] |2019/07/16 23h21:492| <01.00.39> <Property> <Columns> |.MNT_OPE()|Double|"' (Set|Get) The MNT_OPE as Double.
            Private _MNT_OPE As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_OPE as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:375 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_OPE as Double.")>
            Public Property MNT_OPE() As Double
                Get
                    Return _MNT_OPE
                End Get
                Set(ByVal Value As Double)
                    _MNT_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_OPE as Double.

#Region "[On] |2019/07/16 23h21:498| <01.00.40> <Property> <Columns> |.NUM_SEQ_FAC()|Integer|"' (Set|Get) The NUM_SEQ_FAC as Integer.
            Private _NUM_SEQ_FAC As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_FAC as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:376 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_FAC as Integer.")>
            Public Property NUM_SEQ_FAC() As Integer
                Get
                    Return _NUM_SEQ_FAC
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_FAC as Integer.

#Region "[On] |2019/07/16 23h21:505| <01.00.41> <Property> <Columns> |.FAC_ENR_YON()|Boolean|"' (Set|Get) The FAC_ENR_YON as Boolean.
            Private _FAC_ENR_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_ENR_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:376 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_ENR_YON as Boolean.")>
            Public Property FAC_ENR_YON() As Boolean
                Get
                    Return _FAC_ENR_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_ENR_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_ENR_YON as Boolean.

#Region "[On] |2019/07/16 23h21:512| <01.00.42> <Property> <Columns> |.SEL_FAC_YON()|Boolean|"' (Set|Get) The SEL_FAC_YON as Boolean.
            Private _SEL_FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The SEL_FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:376 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The SEL_FAC_YON as Boolean.")>
            Public Property SEL_FAC_YON() As Boolean
                Get
                    Return _SEL_FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _SEL_FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The SEL_FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h21:520| <01.00.43> <Property> <Columns> |.POST_IT()|String|"' (Set|Get) The POST_IT as String.
            Private _POST_IT As String
            '''    <Summary>
            '''     (Set|Get) The POST_IT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:376 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The POST_IT as String.")>
            Public Property POST_IT() As String
                Get
                    Return _POST_IT
                End Get
                Set(ByVal Value As String)
                    _POST_IT = Value
                End Set
            End Property
#End Region '(Set|Get) The POST_IT as String.

#Region "[On] |2019/07/16 23h21:526| <01.00.44> <Property> <Columns> |.HEU_CAL()|Double|"' (Set|Get) The HEU_CAL as Double.
            Private _HEU_CAL As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_CAL as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:376 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_CAL as Double.")>
            Public Property HEU_CAL() As Double
                Get
                    Return _HEU_CAL
                End Get
                Set(ByVal Value As Double)
                    _HEU_CAL = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_CAL as Double.

#Region "[On] |2019/07/16 23h21:535| <01.00.45> <Property> <Columns> |.EXT_YON()|Boolean|"' (Set|Get) The EXT_YON as Boolean.
            Private _EXT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The EXT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:377 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The EXT_YON as Boolean.")>
            Public Property EXT_YON() As Boolean
                Get
                    Return _EXT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _EXT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The EXT_YON as Boolean.

#Region "[On] |2019/07/16 23h21:542| <01.00.46> <Property> <Columns> |.NUM_SEQ_EXT()|Integer|"' (Set|Get) The NUM_SEQ_EXT as Integer.
            Private _NUM_SEQ_EXT As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_EXT as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:377 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_EXT as Integer.")>
            Public Property NUM_SEQ_EXT() As Integer
                Get
                    Return _NUM_SEQ_EXT
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_EXT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_EXT as Integer.

#Region "[On] |2019/07/16 23h21:551| <01.00.47> <Property> <Columns> |.GEN_OPE()|String|"' (Set|Get) The GEN_OPE as String.
            Private _GEN_OPE As String
            '''    <Summary>
            '''     (Set|Get) The GEN_OPE as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:377 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GEN_OPE as String.")>
            Public Property GEN_OPE() As String
                Get
                    Return _GEN_OPE
                End Get
                Set(ByVal Value As String)
                    _GEN_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The GEN_OPE as String.

#Region "[On] |2019/07/16 23h21:570| <01.00.48> <Property> <Columns> |.TFT_EXT_YON()|Boolean|"' (Set|Get) The TFT_EXT_YON as Boolean.
            Private _TFT_EXT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The TFT_EXT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:377 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TFT_EXT_YON as Boolean.")>
            Public Property TFT_EXT_YON() As Boolean
                Get
                    Return _TFT_EXT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _TFT_EXT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The TFT_EXT_YON as Boolean.

#Region "[On] |2019/07/16 23h21:580| <01.00.49> <Property> <Columns> |.TFT_SSM()|Integer|"' (Set|Get) The TFT_SSM as Integer.
            Private _TFT_SSM As Integer
            '''    <Summary>
            '''     (Set|Get) The TFT_SSM as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:378 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TFT_SSM as Integer.")>
            Public Property TFT_SSM() As Integer
                Get
                    Return _TFT_SSM
                End Get
                Set(ByVal Value As Integer)
                    _TFT_SSM = Value
                End Set
            End Property
#End Region '(Set|Get) The TFT_SSM as Integer.

#Region "[On] |2019/07/16 23h21:587| <01.00.50> <Property> <Columns> |.NUM_SEQ_FAC_BIS()|Integer|"' (Set|Get) The NUM_SEQ_FAC_BIS as Integer.
            Private _NUM_SEQ_FAC_BIS As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_FAC_BIS as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:378 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_FAC_BIS as Integer.")>
            Public Property NUM_SEQ_FAC_BIS() As Integer
                Get
                    Return _NUM_SEQ_FAC_BIS
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_FAC_BIS = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_FAC_BIS as Integer.

#Region "[On] |2019/07/16 23h21:595| <01.00.51> <Property> <Columns> |.HIS_YON()|Boolean|"' (Set|Get) The HIS_YON as Boolean.
            Private _HIS_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The HIS_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:378 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HIS_YON as Boolean.")>
            Public Property HIS_YON() As Boolean
                Get
                    Return _HIS_YON
                End Get
                Set(ByVal Value As Boolean)
                    _HIS_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The HIS_YON as Boolean.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h21:603| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{51}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:379 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_SEQ as Integer.</summary>
                [NUM_SEQ] = 0
                ''' <summary>(Set|Get) The NUM_SEQ_SAV as Integer.</summary>
                [NUM_SEQ_SAV] = 1
                ''' <summary>(Set|Get) The NUM_SEQ_PAP as Integer.</summary>
                [NUM_SEQ_PAP] = 2
                ''' <summary>(Set|Get) The TYP_OPE as String.</summary>
                [TYP_OPE] = 3
                ''' <summary>(Set|Get) The COR_YON as Boolean.</summary>
                [COR_YON] = 4
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 5
                ''' <summary>(Set|Get) The NUM_ETA as String.</summary>
                [NUM_ETA] = 6
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 7
                ''' <summary>(Set|Get) The DAT_OPE as DateTime.</summary>
                [DAT_OPE] = 8
                ''' <summary>(Set|Get) The NUM_FTA as Integer.</summary>
                [NUM_FTA] = 9
                ''' <summary>(Set|Get) The LIB_PRS as String.</summary>
                [LIB_PRS] = 10
                ''' <summary>(Set|Get) The HEU_PRS as Double.</summary>
                [HEU_PRS] = 11
                ''' <summary>(Set|Get) The HEU_LUN as Double.</summary>
                [HEU_LUN] = 12
                ''' <summary>(Set|Get) The HEU_MAR as Double.</summary>
                [HEU_MAR] = 13
                ''' <summary>(Set|Get) The HEU_MER as Double.</summary>
                [HEU_MER] = 14
                ''' <summary>(Set|Get) The HEU_JEU as Double.</summary>
                [HEU_JEU] = 15
                ''' <summary>(Set|Get) The HEU_VEN as Double.</summary>
                [HEU_VEN] = 16
                ''' <summary>(Set|Get) The HEU_SAM as Double.</summary>
                [HEU_SAM] = 17
                ''' <summary>(Set|Get) The HEU_DIM as Double.</summary>
                [HEU_DIM] = 18
                ''' <summary>(Set|Get) The COD_TAR as String.</summary>
                [COD_TAR] = 19
                ''' <summary>(Set|Get) The COD_ART as String.</summary>
                [COD_ART] = 20
                ''' <summary>(Set|Get) The COD_CAT as String.</summary>
                [COD_CAT] = 21
                ''' <summary>(Set|Get) The PRX_VTE_HEU as Double.</summary>
                [PRX_VTE_HEU] = 22
                ''' <summary>(Set|Get) The PRX_RVT_HEU as Double.</summary>
                [PRX_RVT_HEU] = 23
                ''' <summary>(Set|Get) The MNT_VTE_HEU as Double.</summary>
                [MNT_VTE_HEU] = 24
                ''' <summary>(Set|Get) The MNT_RVT_HEU as Double.</summary>
                [MNT_RVT_HEU] = 25
                ''' <summary>(Set|Get) The MNT_FAC_HEU as Double.</summary>
                [MNT_FAC_HEU] = 26
                ''' <summary>(Set|Get) The QTE_ART as Double.</summary>
                [QTE_ART] = 27
                ''' <summary>(Set|Get) The PRX_VTE_ART as Double.</summary>
                [PRX_VTE_ART] = 28
                ''' <summary>(Set|Get) The PRX_RMB_ART as Double.</summary>
                [PRX_RMB_ART] = 29
                ''' <summary>(Set|Get) The PRX_RVT_ART as Double.</summary>
                [PRX_RVT_ART] = 30
                ''' <summary>(Set|Get) The MNT_VTE_ART as Double.</summary>
                [MNT_VTE_ART] = 31
                ''' <summary>(Set|Get) The MNT_RMB_ART as Double.</summary>
                [MNT_RMB_ART] = 32
                ''' <summary>(Set|Get) The MNT_RVT_ART as Double.</summary>
                [MNT_RVT_ART] = 33
                ''' <summary>(Set|Get) The MNT_FAC_ART as Double.</summary>
                [MNT_FAC_ART] = 34
                ''' <summary>(Set|Get) The RMB_YON as Boolean.</summary>
                [RMB_YON] = 35
                ''' <summary>(Set|Get) The FAC_YON as Boolean.</summary>
                [FAC_YON] = 36
                ''' <summary>(Set|Get) The HRS_TOT_YON as Boolean.</summary>
                [HRS_TOT_YON] = 37
                ''' <summary>(Set|Get) The COD_RCP as String.</summary>
                [COD_RCP] = 38
                ''' <summary>(Set|Get) The MNT_OPE as Double.</summary>
                [MNT_OPE] = 39
                ''' <summary>(Set|Get) The NUM_SEQ_FAC as Integer.</summary>
                [NUM_SEQ_FAC] = 40
                ''' <summary>(Set|Get) The FAC_ENR_YON as Boolean.</summary>
                [FAC_ENR_YON] = 41
                ''' <summary>(Set|Get) The SEL_FAC_YON as Boolean.</summary>
                [SEL_FAC_YON] = 42
                ''' <summary>(Set|Get) The POST_IT as String.</summary>
                [POST_IT] = 43
                ''' <summary>(Set|Get) The HEU_CAL as Double.</summary>
                [HEU_CAL] = 44
                ''' <summary>(Set|Get) The EXT_YON as Boolean.</summary>
                [EXT_YON] = 45
                ''' <summary>(Set|Get) The NUM_SEQ_EXT as Integer.</summary>
                [NUM_SEQ_EXT] = 46
                ''' <summary>(Set|Get) The GEN_OPE as String.</summary>
                [GEN_OPE] = 47
                ''' <summary>(Set|Get) The TFT_EXT_YON as Boolean.</summary>
                [TFT_EXT_YON] = 48
                ''' <summary>(Set|Get) The TFT_SSM as Integer.</summary>
                [TFT_SSM] = 49
                ''' <summary>(Set|Get) The NUM_SEQ_FAC_BIS as Integer.</summary>
                [NUM_SEQ_FAC_BIS] = 50
                ''' <summary>(Set|Get) The HIS_YON as Boolean.</summary>
                [HIS_YON] = 51
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h21:613| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:380 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_SEQ = 0
                    .NUM_SEQ_SAV = 0
                    .NUM_SEQ_PAP = 0
                    .TYP_OPE = Nothing
                    .COR_YON = False
                    .NUM_MDT = Nothing
                    .NUM_ETA = Nothing
                    .REF_CLB = Nothing
                    .DAT_OPE = New DateTime
                    .NUM_FTA = 0
                    .LIB_PRS = Nothing
                    .HEU_PRS = 0
                    .HEU_LUN = 0
                    .HEU_MAR = 0
                    .HEU_MER = 0
                    .HEU_JEU = 0
                    .HEU_VEN = 0
                    .HEU_SAM = 0
                    .HEU_DIM = 0
                    .COD_TAR = Nothing
                    .COD_ART = Nothing
                    .COD_CAT = Nothing
                    .PRX_VTE_HEU = 0
                    .PRX_RVT_HEU = 0
                    .MNT_VTE_HEU = 0
                    .MNT_RVT_HEU = 0
                    .MNT_FAC_HEU = 0
                    .QTE_ART = 0
                    .PRX_VTE_ART = 0
                    .PRX_RMB_ART = 0
                    .PRX_RVT_ART = 0
                    .MNT_VTE_ART = 0
                    .MNT_RMB_ART = 0
                    .MNT_RVT_ART = 0
                    .MNT_FAC_ART = 0
                    .RMB_YON = False
                    .FAC_YON = False
                    .HRS_TOT_YON = False
                    .COD_RCP = Nothing
                    .MNT_OPE = 0
                    .NUM_SEQ_FAC = 0
                    .FAC_ENR_YON = False
                    .SEL_FAC_YON = False
                    .POST_IT = Nothing
                    .HEU_CAL = 0
                    .EXT_YON = False
                    .NUM_SEQ_EXT = 0
                    .GEN_OPE = Nothing
                    .TFT_EXT_YON = False
                    .TFT_SSM = 0
                    .NUM_SEQ_FAC_BIS = 0
                    .HIS_YON = False
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h21:619| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:380 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_HISTORIQUE_OPERATION"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_HISTORIQUE_OPERATION"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_HISTORIQUE_OPERATION"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h21:631| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:380 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_HISTORIQUE_OPERATION] (
`NUM_SEQ`, 
`NUM_SEQ_SAV`, 
`NUM_SEQ_PAP`, 
`TYP_OPE`, 
`COR_YON`, 
`NUM_MDT`, 
`NUM_ETA`, 
`REF_CLB`, 
`DAT_OPE`, 
`NUM_FTA`, 
`LIB_PRS`, 
`HEU_PRS`, 
`HEU_LUN`, 
`HEU_MAR`, 
`HEU_MER`, 
`HEU_JEU`, 
`HEU_VEN`, 
`HEU_SAM`, 
`HEU_DIM`, 
`COD_TAR`, 
`COD_ART`, 
`COD_CAT`, 
`PRX_VTE_HEU`, 
`PRX_RVT_HEU`, 
`MNT_VTE_HEU`, 
`MNT_RVT_HEU`, 
`MNT_FAC_HEU`, 
`QTE_ART`, 
`PRX_VTE_ART`, 
`PRX_RMB_ART`, 
`PRX_RVT_ART`, 
`MNT_VTE_ART`, 
`MNT_RMB_ART`, 
`MNT_RVT_ART`, 
`MNT_FAC_ART`, 
`RMB_YON`, 
`FAC_YON`, 
`HRS_TOT_YON`, 
`COD_RCP`, 
`MNT_OPE`, 
`NUM_SEQ_FAC`, 
`FAC_ENR_YON`, 
`SEL_FAC_YON`, 
`POST_IT`, 
`HEU_CAL`, 
`EXT_YON`, 
`NUM_SEQ_EXT`, 
`GEN_OPE`, 
`TFT_EXT_YON`, 
`TFT_SSM`, 
`NUM_SEQ_FAC_BIS`, 
`HIS_YON`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @16, @17, @18, @19, @20, @21, @22, @23, @24, @25, @26, @27, @28, @29, @30, @31, @32, @33, @34, @35, @36, @37, @38, @39, @40, @41, @42, @43, @44, @45, @46, @47, @48, @49, @50, @51)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_SEQ_SAV)
                    Cmd.Parameters.AddWithValue("@2", Me.NUM_SEQ_PAP)
                    Cmd.Parameters.AddWithValue("@3", Me.TYP_OPE)
                    Cmd.Parameters.AddWithValue("@4", Me.COR_YON)
                    Cmd.Parameters.AddWithValue("@5", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@6", Me.NUM_ETA)
                    Cmd.Parameters.AddWithValue("@7", Me.REF_CLB)
                    Cmd.Parameters.AddWithValue("@8", Me.DAT_OPE)
                    Cmd.Parameters.AddWithValue("@9", Me.NUM_FTA)
                    Cmd.Parameters.AddWithValue("@10", Me.LIB_PRS)
                    Cmd.Parameters.AddWithValue("@11", Me.HEU_PRS)
                    Cmd.Parameters.AddWithValue("@12", Me.HEU_LUN)
                    Cmd.Parameters.AddWithValue("@13", Me.HEU_MAR)
                    Cmd.Parameters.AddWithValue("@14", Me.HEU_MER)
                    Cmd.Parameters.AddWithValue("@15", Me.HEU_JEU)
                    Cmd.Parameters.AddWithValue("@16", Me.HEU_VEN)
                    Cmd.Parameters.AddWithValue("@17", Me.HEU_SAM)
                    Cmd.Parameters.AddWithValue("@18", Me.HEU_DIM)
                    Cmd.Parameters.AddWithValue("@19", Me.COD_TAR)
                    Cmd.Parameters.AddWithValue("@20", Me.COD_ART)
                    Cmd.Parameters.AddWithValue("@21", Me.COD_CAT)
                    Cmd.Parameters.AddWithValue("@22", Me.PRX_VTE_HEU)
                    Cmd.Parameters.AddWithValue("@23", Me.PRX_RVT_HEU)
                    Cmd.Parameters.AddWithValue("@24", Me.MNT_VTE_HEU)
                    Cmd.Parameters.AddWithValue("@25", Me.MNT_RVT_HEU)
                    Cmd.Parameters.AddWithValue("@26", Me.MNT_FAC_HEU)
                    Cmd.Parameters.AddWithValue("@27", Me.QTE_ART)
                    Cmd.Parameters.AddWithValue("@28", Me.PRX_VTE_ART)
                    Cmd.Parameters.AddWithValue("@29", Me.PRX_RMB_ART)
                    Cmd.Parameters.AddWithValue("@30", Me.PRX_RVT_ART)
                    Cmd.Parameters.AddWithValue("@31", Me.MNT_VTE_ART)
                    Cmd.Parameters.AddWithValue("@32", Me.MNT_RMB_ART)
                    Cmd.Parameters.AddWithValue("@33", Me.MNT_RVT_ART)
                    Cmd.Parameters.AddWithValue("@34", Me.MNT_FAC_ART)
                    Cmd.Parameters.AddWithValue("@35", Me.RMB_YON)
                    Cmd.Parameters.AddWithValue("@36", Me.FAC_YON)
                    Cmd.Parameters.AddWithValue("@37", Me.HRS_TOT_YON)
                    Cmd.Parameters.AddWithValue("@38", Me.COD_RCP)
                    Cmd.Parameters.AddWithValue("@39", Me.MNT_OPE)
                    Cmd.Parameters.AddWithValue("@40", Me.NUM_SEQ_FAC)
                    Cmd.Parameters.AddWithValue("@41", Me.FAC_ENR_YON)
                    Cmd.Parameters.AddWithValue("@42", Me.SEL_FAC_YON)
                    Cmd.Parameters.AddWithValue("@43", Me.POST_IT)
                    Cmd.Parameters.AddWithValue("@44", Me.HEU_CAL)
                    Cmd.Parameters.AddWithValue("@45", Me.EXT_YON)
                    Cmd.Parameters.AddWithValue("@46", Me.NUM_SEQ_EXT)
                    Cmd.Parameters.AddWithValue("@47", Me.GEN_OPE)
                    Cmd.Parameters.AddWithValue("@48", Me.TFT_EXT_YON)
                    Cmd.Parameters.AddWithValue("@49", Me.TFT_SSM)
                    Cmd.Parameters.AddWithValue("@50", Me.NUM_SEQ_FAC_BIS)
                    Cmd.Parameters.AddWithValue("@51", Me.HIS_YON)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h21:644| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:380 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_HISTORIQUE_OPERATION] SET NUM_SEQ_SAV = @NUM_SEQ_SAV, NUM_SEQ_PAP = @NUM_SEQ_PAP, TYP_OPE = @TYP_OPE, COR_YON = @COR_YON, NUM_MDT = @NUM_MDT, NUM_ETA = @NUM_ETA, REF_CLB = @REF_CLB, DAT_OPE = @DAT_OPE, NUM_FTA = @NUM_FTA, LIB_PRS = @LIB_PRS, HEU_PRS = @HEU_PRS, HEU_LUN = @HEU_LUN, HEU_MAR = @HEU_MAR, HEU_MER = @HEU_MER, HEU_JEU = @HEU_JEU, HEU_VEN = @HEU_VEN, HEU_SAM = @HEU_SAM, HEU_DIM = @HEU_DIM, COD_TAR = @COD_TAR, COD_ART = @COD_ART, COD_CAT = @COD_CAT, PRX_VTE_HEU = @PRX_VTE_HEU, PRX_RVT_HEU = @PRX_RVT_HEU, MNT_VTE_HEU = @MNT_VTE_HEU, MNT_RVT_HEU = @MNT_RVT_HEU, MNT_FAC_HEU = @MNT_FAC_HEU, QTE_ART = @QTE_ART, PRX_VTE_ART = @PRX_VTE_ART, PRX_RMB_ART = @PRX_RMB_ART, PRX_RVT_ART = @PRX_RVT_ART, MNT_VTE_ART = @MNT_VTE_ART, MNT_RMB_ART = @MNT_RMB_ART, MNT_RVT_ART = @MNT_RVT_ART, MNT_FAC_ART = @MNT_FAC_ART, RMB_YON = @RMB_YON, FAC_YON = @FAC_YON, HRS_TOT_YON = @HRS_TOT_YON, COD_RCP = @COD_RCP, MNT_OPE = @MNT_OPE, NUM_SEQ_FAC = @NUM_SEQ_FAC, FAC_ENR_YON = @FAC_ENR_YON, SEL_FAC_YON = @SEL_FAC_YON, POST_IT = @POST_IT, HEU_CAL = @HEU_CAL, EXT_YON = @EXT_YON, NUM_SEQ_EXT = @NUM_SEQ_EXT, GEN_OPE = @GEN_OPE, TFT_EXT_YON = @TFT_EXT_YON, TFT_SSM = @TFT_SSM, NUM_SEQ_FAC_BIS = @NUM_SEQ_FAC_BIS, HIS_YON = @HIS_YON WHERE NUM_SEQ = @NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_SAV", NUM_SEQ_SAV)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_PAP", NUM_SEQ_PAP)
                    Cmd.Parameters.AddWithValue("@TYP_OPE", TYP_OPE)
                    Cmd.Parameters.AddWithValue("@COR_YON", COR_YON)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    Cmd.Parameters.AddWithValue("@NUM_ETA", NUM_ETA)
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    Cmd.Parameters.AddWithValue("@DAT_OPE", DAT_OPE)
                    Cmd.Parameters.AddWithValue("@NUM_FTA", NUM_FTA)
                    Cmd.Parameters.AddWithValue("@LIB_PRS", LIB_PRS)
                    Cmd.Parameters.AddWithValue("@HEU_PRS", HEU_PRS)
                    Cmd.Parameters.AddWithValue("@HEU_LUN", HEU_LUN)
                    Cmd.Parameters.AddWithValue("@HEU_MAR", HEU_MAR)
                    Cmd.Parameters.AddWithValue("@HEU_MER", HEU_MER)
                    Cmd.Parameters.AddWithValue("@HEU_JEU", HEU_JEU)
                    Cmd.Parameters.AddWithValue("@HEU_VEN", HEU_VEN)
                    Cmd.Parameters.AddWithValue("@HEU_SAM", HEU_SAM)
                    Cmd.Parameters.AddWithValue("@HEU_DIM", HEU_DIM)
                    Cmd.Parameters.AddWithValue("@COD_TAR", COD_TAR)
                    Cmd.Parameters.AddWithValue("@COD_ART", COD_ART)
                    Cmd.Parameters.AddWithValue("@COD_CAT", COD_CAT)
                    Cmd.Parameters.AddWithValue("@PRX_VTE_HEU", PRX_VTE_HEU)
                    Cmd.Parameters.AddWithValue("@PRX_RVT_HEU", PRX_RVT_HEU)
                    Cmd.Parameters.AddWithValue("@MNT_VTE_HEU", MNT_VTE_HEU)
                    Cmd.Parameters.AddWithValue("@MNT_RVT_HEU", MNT_RVT_HEU)
                    Cmd.Parameters.AddWithValue("@MNT_FAC_HEU", MNT_FAC_HEU)
                    Cmd.Parameters.AddWithValue("@QTE_ART", QTE_ART)
                    Cmd.Parameters.AddWithValue("@PRX_VTE_ART", PRX_VTE_ART)
                    Cmd.Parameters.AddWithValue("@PRX_RMB_ART", PRX_RMB_ART)
                    Cmd.Parameters.AddWithValue("@PRX_RVT_ART", PRX_RVT_ART)
                    Cmd.Parameters.AddWithValue("@MNT_VTE_ART", MNT_VTE_ART)
                    Cmd.Parameters.AddWithValue("@MNT_RMB_ART", MNT_RMB_ART)
                    Cmd.Parameters.AddWithValue("@MNT_RVT_ART", MNT_RVT_ART)
                    Cmd.Parameters.AddWithValue("@MNT_FAC_ART", MNT_FAC_ART)
                    Cmd.Parameters.AddWithValue("@RMB_YON", RMB_YON)
                    Cmd.Parameters.AddWithValue("@FAC_YON", FAC_YON)
                    Cmd.Parameters.AddWithValue("@HRS_TOT_YON", HRS_TOT_YON)
                    Cmd.Parameters.AddWithValue("@COD_RCP", COD_RCP)
                    Cmd.Parameters.AddWithValue("@MNT_OPE", MNT_OPE)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_FAC", NUM_SEQ_FAC)
                    Cmd.Parameters.AddWithValue("@FAC_ENR_YON", FAC_ENR_YON)
                    Cmd.Parameters.AddWithValue("@SEL_FAC_YON", SEL_FAC_YON)
                    Cmd.Parameters.AddWithValue("@POST_IT", POST_IT)
                    Cmd.Parameters.AddWithValue("@HEU_CAL", HEU_CAL)
                    Cmd.Parameters.AddWithValue("@EXT_YON", EXT_YON)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_EXT", NUM_SEQ_EXT)
                    Cmd.Parameters.AddWithValue("@GEN_OPE", GEN_OPE)
                    Cmd.Parameters.AddWithValue("@TFT_EXT_YON", TFT_EXT_YON)
                    Cmd.Parameters.AddWithValue("@TFT_SSM", TFT_SSM)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_FAC_BIS", NUM_SEQ_FAC_BIS)
                    Cmd.Parameters.AddWithValue("@HIS_YON", HIS_YON)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h21:651| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:381 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_HISTORIQUE_OPERATION] WHERE NUM_SEQ =@NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h21:660| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:381 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h21:667| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:381 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h21:674| <05.00.02> <Function> <> |.List()|List(Of MDT_HISTORIQUE_OPERATION)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:381 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_HISTORIQUE_OPERATION)
                Dim Result As New List(Of MDT_HISTORIQUE_OPERATION)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_HISTORIQUE_OPERATION(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), 0, Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), False, Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), "", Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), "", Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), "", Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), New DateTime(1970, 1, 1), Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), 0, Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), "", Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), 0, Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), 0, Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), 0, Row.Item(13)),
IIf(IsDBNull(Row.Item(14)), 0, Row.Item(14)),
IIf(IsDBNull(Row.Item(15)), 0, Row.Item(15)),
IIf(IsDBNull(Row.Item(16)), 0, Row.Item(16)),
IIf(IsDBNull(Row.Item(17)), 0, Row.Item(17)),
IIf(IsDBNull(Row.Item(18)), 0, Row.Item(18)),
IIf(IsDBNull(Row.Item(19)), "", Row.Item(19)),
IIf(IsDBNull(Row.Item(20)), "", Row.Item(20)),
IIf(IsDBNull(Row.Item(21)), "", Row.Item(21)),
IIf(IsDBNull(Row.Item(22)), 0, Row.Item(22)),
IIf(IsDBNull(Row.Item(23)), 0, Row.Item(23)),
IIf(IsDBNull(Row.Item(24)), 0, Row.Item(24)),
IIf(IsDBNull(Row.Item(25)), 0, Row.Item(25)),
IIf(IsDBNull(Row.Item(26)), 0, Row.Item(26)),
IIf(IsDBNull(Row.Item(27)), 0, Row.Item(27)),
IIf(IsDBNull(Row.Item(28)), 0, Row.Item(28)),
IIf(IsDBNull(Row.Item(29)), 0, Row.Item(29)),
IIf(IsDBNull(Row.Item(30)), 0, Row.Item(30)),
IIf(IsDBNull(Row.Item(31)), 0, Row.Item(31)),
IIf(IsDBNull(Row.Item(32)), 0, Row.Item(32)),
IIf(IsDBNull(Row.Item(33)), 0, Row.Item(33)),
IIf(IsDBNull(Row.Item(34)), 0, Row.Item(34)),
IIf(IsDBNull(Row.Item(35)), False, Row.Item(35)),
IIf(IsDBNull(Row.Item(36)), False, Row.Item(36)),
IIf(IsDBNull(Row.Item(37)), False, Row.Item(37)),
IIf(IsDBNull(Row.Item(38)), "", Row.Item(38)),
IIf(IsDBNull(Row.Item(39)), 0, Row.Item(39)),
IIf(IsDBNull(Row.Item(40)), 0, Row.Item(40)),
IIf(IsDBNull(Row.Item(41)), False, Row.Item(41)),
IIf(IsDBNull(Row.Item(42)), False, Row.Item(42)),
IIf(IsDBNull(Row.Item(43)), "", Row.Item(43)),
IIf(IsDBNull(Row.Item(44)), 0, Row.Item(44)),
IIf(IsDBNull(Row.Item(45)), False, Row.Item(45)),
IIf(IsDBNull(Row.Item(46)), 0, Row.Item(46)),
IIf(IsDBNull(Row.Item(47)), "", Row.Item(47)),
IIf(IsDBNull(Row.Item(48)), False, Row.Item(48)),
IIf(IsDBNull(Row.Item(49)), 0, Row.Item(49)),
IIf(IsDBNull(Row.Item(50)), 0, Row.Item(50)),
      IIf(IsDBNull(Row.Item(51)), False, Row.Item(51)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h21:682| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_HISTORIQUE_OPERATION)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:383 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_HISTORIQUE_OPERATION)
                Dim Result As New List(Of MDT_HISTORIQUE_OPERATION)
                Dim C As New MDT_HISTORIQUE_OPERATION
                For Each Element As MDT_HISTORIQUE_OPERATION In C.List
                    If Element.TYP_OPE.ToLower() = Search.ToLower() Or Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NUM_ETA.ToLower() = Search.ToLower() Or Element.REF_CLB.ToLower() = Search.ToLower() Or Element.LIB_PRS.ToLower() = Search.ToLower() Or Element.COD_TAR.ToLower() = Search.ToLower() Or Element.COD_ART.ToLower() = Search.ToLower() Or Element.COD_CAT.ToLower() = Search.ToLower() Or Element.COD_RCP.ToLower() = Search.ToLower() Or Element.POST_IT.ToLower() = Search.ToLower() Or Element.GEN_OPE.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h21:690| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_HISTORIQUE_OPERATION)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:383 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_HISTORIQUE_OPERATION)
                Dim Result As New List(Of MDT_HISTORIQUE_OPERATION)
                Dim C As New MDT_HISTORIQUE_OPERATION
                For Each Element As MDT_HISTORIQUE_OPERATION In C.List
                    If Val(Element.NUM_SEQ) = Search Or Val(Element.NUM_SEQ_SAV) = Search Or Val(Element.NUM_SEQ_PAP) = Search Or Val(Element.NUM_FTA) = Search Or Val(Element.HEU_PRS) = Search Or Val(Element.HEU_LUN) = Search Or Val(Element.HEU_MAR) = Search Or Val(Element.HEU_MER) = Search Or Val(Element.HEU_JEU) = Search Or Val(Element.HEU_VEN) = Search Or Val(Element.HEU_SAM) = Search Or Val(Element.HEU_DIM) = Search Or Val(Element.PRX_VTE_HEU) = Search Or Val(Element.PRX_RVT_HEU) = Search Or Val(Element.MNT_VTE_HEU) = Search Or Val(Element.MNT_RVT_HEU) = Search Or Val(Element.MNT_FAC_HEU) = Search Or Val(Element.QTE_ART) = Search Or Val(Element.PRX_VTE_ART) = Search Or Val(Element.PRX_RMB_ART) = Search Or Val(Element.PRX_RVT_ART) = Search Or Val(Element.MNT_VTE_ART) = Search Or Val(Element.MNT_RMB_ART) = Search Or Val(Element.MNT_RVT_ART) = Search Or Val(Element.MNT_FAC_ART) = Search Or Val(Element.MNT_OPE) = Search Or Val(Element.NUM_SEQ_FAC) = Search Or Val(Element.HEU_CAL) = Search Or Val(Element.NUM_SEQ_EXT) = Search Or Val(Element.TFT_SSM) = Search Or Val(Element.NUM_SEQ_FAC_BIS) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h21:697| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:383 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_SEQ
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h21:703| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:384 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h21:723| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:384 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h21:730| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:384 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h21:739| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h21:745| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h21:752| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h21:760| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h21:769| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h21:774| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:386 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h21:781| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:386 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h21:789| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:386 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h21:801| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:386 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h21:818| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:387 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h21:825| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:387 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h21:828| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:387 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_SEQ">(Set|Get) The NUM_SEQ as Integer.</param>
            ''' <param name="NUM_SEQ_SAV">(Set|Get) The NUM_SEQ_SAV as Integer.</param>
            ''' <param name="NUM_SEQ_PAP">(Set|Get) The NUM_SEQ_PAP as Integer.</param>
            ''' <param name="TYP_OPE">(Set|Get) The TYP_OPE as String.</param>
            ''' <param name="COR_YON">(Set|Get) The COR_YON as Boolean.</param>
            ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="NUM_ETA">(Set|Get) The NUM_ETA as String.</param>
            ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>
            ''' <param name="DAT_OPE">(Set|Get) The DAT_OPE as DateTime.</param>
            ''' <param name="NUM_FTA">(Set|Get) The NUM_FTA as Integer.</param>
            ''' <param name="LIB_PRS">(Set|Get) The LIB_PRS as String.</param>
            ''' <param name="HEU_PRS">(Set|Get) The HEU_PRS as Double.</param>
            ''' <param name="HEU_LUN">(Set|Get) The HEU_LUN as Double.</param>
            ''' <param name="HEU_MAR">(Set|Get) The HEU_MAR as Double.</param>
            ''' <param name="HEU_MER">(Set|Get) The HEU_MER as Double.</param>
            ''' <param name="HEU_JEU">(Set|Get) The HEU_JEU as Double.</param>
            ''' <param name="HEU_VEN">(Set|Get) The HEU_VEN as Double.</param>
            ''' <param name="HEU_SAM">(Set|Get) The HEU_SAM as Double.</param>
            ''' <param name="HEU_DIM">(Set|Get) The HEU_DIM as Double.</param>
            ''' <param name="COD_TAR">(Set|Get) The COD_TAR as String.</param>
            ''' <param name="COD_ART">(Set|Get) The COD_ART as String.</param>
            ''' <param name="COD_CAT">(Set|Get) The COD_CAT as String.</param>
            ''' <param name="PRX_VTE_HEU">(Set|Get) The PRX_VTE_HEU as Double.</param>
            ''' <param name="PRX_RVT_HEU">(Set|Get) The PRX_RVT_HEU as Double.</param>
            ''' <param name="MNT_VTE_HEU">(Set|Get) The MNT_VTE_HEU as Double.</param>
            ''' <param name="MNT_RVT_HEU">(Set|Get) The MNT_RVT_HEU as Double.</param>
            ''' <param name="MNT_FAC_HEU">(Set|Get) The MNT_FAC_HEU as Double.</param>
            ''' <param name="QTE_ART">(Set|Get) The QTE_ART as Double.</param>
            ''' <param name="PRX_VTE_ART">(Set|Get) The PRX_VTE_ART as Double.</param>
            ''' <param name="PRX_RMB_ART">(Set|Get) The PRX_RMB_ART as Double.</param>
            ''' <param name="PRX_RVT_ART">(Set|Get) The PRX_RVT_ART as Double.</param>
            ''' <param name="MNT_VTE_ART">(Set|Get) The MNT_VTE_ART as Double.</param>
            ''' <param name="MNT_RMB_ART">(Set|Get) The MNT_RMB_ART as Double.</param>
            ''' <param name="MNT_RVT_ART">(Set|Get) The MNT_RVT_ART as Double.</param>
            ''' <param name="MNT_FAC_ART">(Set|Get) The MNT_FAC_ART as Double.</param>
            ''' <param name="RMB_YON">(Set|Get) The RMB_YON as Boolean.</param>
            ''' <param name="FAC_YON">(Set|Get) The FAC_YON as Boolean.</param>
            ''' <param name="HRS_TOT_YON">(Set|Get) The HRS_TOT_YON as Boolean.</param>
            ''' <param name="COD_RCP">(Set|Get) The COD_RCP as String.</param>
            ''' <param name="MNT_OPE">(Set|Get) The MNT_OPE as Double.</param>
            ''' <param name="NUM_SEQ_FAC">(Set|Get) The NUM_SEQ_FAC as Integer.</param>
            ''' <param name="FAC_ENR_YON">(Set|Get) The FAC_ENR_YON as Boolean.</param>
            ''' <param name="SEL_FAC_YON">(Set|Get) The SEL_FAC_YON as Boolean.</param>
            ''' <param name="POST_IT">(Set|Get) The POST_IT as String.</param>
            ''' <param name="HEU_CAL">(Set|Get) The HEU_CAL as Double.</param>
            ''' <param name="EXT_YON">(Set|Get) The EXT_YON as Boolean.</param>
            ''' <param name="NUM_SEQ_EXT">(Set|Get) The NUM_SEQ_EXT as Integer.</param>
            ''' <param name="GEN_OPE">(Set|Get) The GEN_OPE as String.</param>
            ''' <param name="TFT_EXT_YON">(Set|Get) The TFT_EXT_YON as Boolean.</param>
            ''' <param name="TFT_SSM">(Set|Get) The TFT_SSM as Integer.</param>
            ''' <param name="NUM_SEQ_FAC_BIS">(Set|Get) The NUM_SEQ_FAC_BIS as Integer.</param>
            ''' <param name="HIS_YON">(Set|Get) The HIS_YON as Boolean.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_SEQ As Integer,
ByVal NUM_SEQ_SAV As Integer,
ByVal NUM_SEQ_PAP As Integer,
ByVal TYP_OPE As String,
ByVal COR_YON As Boolean,
ByVal NUM_MDT As String,
ByVal NUM_ETA As String,
ByVal REF_CLB As String,
ByVal DAT_OPE As DateTime,
ByVal NUM_FTA As Integer,
ByVal LIB_PRS As String,
ByVal HEU_PRS As Double,
ByVal HEU_LUN As Double,
ByVal HEU_MAR As Double,
ByVal HEU_MER As Double,
ByVal HEU_JEU As Double,
ByVal HEU_VEN As Double,
ByVal HEU_SAM As Double,
ByVal HEU_DIM As Double,
ByVal COD_TAR As String,
ByVal COD_ART As String,
ByVal COD_CAT As String,
ByVal PRX_VTE_HEU As Double,
ByVal PRX_RVT_HEU As Double,
ByVal MNT_VTE_HEU As Double,
ByVal MNT_RVT_HEU As Double,
ByVal MNT_FAC_HEU As Double,
ByVal QTE_ART As Double,
ByVal PRX_VTE_ART As Double,
ByVal PRX_RMB_ART As Double,
ByVal PRX_RVT_ART As Double,
ByVal MNT_VTE_ART As Double,
ByVal MNT_RMB_ART As Double,
ByVal MNT_RVT_ART As Double,
ByVal MNT_FAC_ART As Double,
ByVal RMB_YON As Boolean,
ByVal FAC_YON As Boolean,
ByVal HRS_TOT_YON As Boolean,
ByVal COD_RCP As String,
ByVal MNT_OPE As Double,
ByVal NUM_SEQ_FAC As Integer,
ByVal FAC_ENR_YON As Boolean,
ByVal SEL_FAC_YON As Boolean,
ByVal POST_IT As String,
ByVal HEU_CAL As Double,
ByVal EXT_YON As Boolean,
ByVal NUM_SEQ_EXT As Integer,
ByVal GEN_OPE As String,
ByVal TFT_EXT_YON As Boolean,
ByVal TFT_SSM As Integer,
ByVal NUM_SEQ_FAC_BIS As Integer,
ByVal HIS_YON As Boolean)
                With Me
                    Clear()
                    Reset()
                    .NUM_SEQ = NUM_SEQ
                    .NUM_SEQ_SAV = NUM_SEQ_SAV
                    .NUM_SEQ_PAP = NUM_SEQ_PAP
                    .TYP_OPE = TYP_OPE
                    .COR_YON = COR_YON
                    .NUM_MDT = NUM_MDT
                    .NUM_ETA = NUM_ETA
                    .REF_CLB = REF_CLB
                    .DAT_OPE = DAT_OPE
                    .NUM_FTA = NUM_FTA
                    .LIB_PRS = LIB_PRS
                    .HEU_PRS = HEU_PRS
                    .HEU_LUN = HEU_LUN
                    .HEU_MAR = HEU_MAR
                    .HEU_MER = HEU_MER
                    .HEU_JEU = HEU_JEU
                    .HEU_VEN = HEU_VEN
                    .HEU_SAM = HEU_SAM
                    .HEU_DIM = HEU_DIM
                    .COD_TAR = COD_TAR
                    .COD_ART = COD_ART
                    .COD_CAT = COD_CAT
                    .PRX_VTE_HEU = PRX_VTE_HEU
                    .PRX_RVT_HEU = PRX_RVT_HEU
                    .MNT_VTE_HEU = MNT_VTE_HEU
                    .MNT_RVT_HEU = MNT_RVT_HEU
                    .MNT_FAC_HEU = MNT_FAC_HEU
                    .QTE_ART = QTE_ART
                    .PRX_VTE_ART = PRX_VTE_ART
                    .PRX_RMB_ART = PRX_RMB_ART
                    .PRX_RVT_ART = PRX_RVT_ART
                    .MNT_VTE_ART = MNT_VTE_ART
                    .MNT_RMB_ART = MNT_RMB_ART
                    .MNT_RVT_ART = MNT_RVT_ART
                    .MNT_FAC_ART = MNT_FAC_ART
                    .RMB_YON = RMB_YON
                    .FAC_YON = FAC_YON
                    .HRS_TOT_YON = HRS_TOT_YON
                    .COD_RCP = COD_RCP
                    .MNT_OPE = MNT_OPE
                    .NUM_SEQ_FAC = NUM_SEQ_FAC
                    .FAC_ENR_YON = FAC_ENR_YON
                    .SEL_FAC_YON = SEL_FAC_YON
                    .POST_IT = POST_IT
                    .HEU_CAL = HEU_CAL
                    .EXT_YON = EXT_YON
                    .NUM_SEQ_EXT = NUM_SEQ_EXT
                    .GEN_OPE = GEN_OPE
                    .TFT_EXT_YON = TFT_EXT_YON
                    .TFT_SSM = TFT_SSM
                    .NUM_SEQ_FAC_BIS = NUM_SEQ_FAC_BIS
                    .HIS_YON = HIS_YON
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:788| <08.00.00> <Class> <> |.MDT_IMPORT|Class|{39} |Production Cost : 49.2|Selling Price : 123|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_IMPORT
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:788
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{10}||0.8| |8
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{9}||1.6| |14.4
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{10}||0.5| |5
        '''    |12| |Parameter  |{18}||0.5| |9
        '''    |Production Cost             |49.2
        '''    |Selling Price without VAT   |123
        '''    |Total TVA                   |9.47
        '''    |Grand Total                 |132.47
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:463 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_IMPORT
#Region "<1> [Property]{10}"
#Region "[On] |2019/07/16 23h22:788| <01.00.00> <Property> <Columns> |.NUM_SEQ()|Integer|"' (Set|Get) The NUM_SEQ as Integer.
            Private _NUM_SEQ As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:463 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ as Integer.")>
            Public Property NUM_SEQ() As Integer
                Get
                    Return _NUM_SEQ
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ as Integer.

#Region "[On] |2019/07/16 23h22:794| <01.00.01> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:463 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h22:800| <01.00.02> <Property> <Columns> |.DAT_OPE()|DateTime|"' (Set|Get) The DAT_OPE as DateTime.
            Private _DAT_OPE As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_OPE as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:466 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_OPE as DateTime.")>
            Public Property DAT_OPE() As DateTime
                Get
                    Return _DAT_OPE
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_OPE as DateTime.

#Region "[On] |2019/07/16 23h22:805| <01.00.03> <Property> <Columns> |.LIB_PRS()|String|"' (Set|Get) The LIB_PRS as String.
            Private _LIB_PRS As String
            '''    <Summary>
            '''     (Set|Get) The LIB_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:467 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_PRS as String.")>
            Public Property LIB_PRS() As String
                Get
                    Return _LIB_PRS
                End Get
                Set(ByVal Value As String)
                    _LIB_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_PRS as String.

#Region "[On] |2019/07/16 23h22:811| <01.00.04> <Property> <Columns> |.MNT_REV()|Double|"' (Set|Get) The MNT_REV as Double.
            Private _MNT_REV As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_REV as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:472 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_REV as Double.")>
            Public Property MNT_REV() As Double
                Get
                    Return _MNT_REV
                End Get
                Set(ByVal Value As Double)
                    _MNT_REV = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_REV as Double.

#Region "[On] |2019/07/16 23h22:818| <01.00.05> <Property> <Columns> |.MNT_VTE()|Double|"' (Set|Get) The MNT_VTE as Double.
            Private _MNT_VTE As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_VTE as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:472 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_VTE as Double.")>
            Public Property MNT_VTE() As Double
                Get
                    Return _MNT_VTE
                End Get
                Set(ByVal Value As Double)
                    _MNT_VTE = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_VTE as Double.

#Region "[On] |2019/07/16 23h22:823| <01.00.06> <Property> <Columns> |.DAT_IMP()|DateTime|"' (Set|Get) The DAT_IMP as DateTime.
            Private _DAT_IMP As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_IMP as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:473 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_IMP as DateTime.")>
            Public Property DAT_IMP() As DateTime
                Get
                    Return _DAT_IMP
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_IMP = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_IMP as DateTime.

#Region "[On] |2019/07/16 23h22:828| <01.00.07> <Property> <Columns> |.TYP_PRS()|String|"' (Set|Get) The TYP_PRS as String.
            Private _TYP_PRS As String
            '''    <Summary>
            '''     (Set|Get) The TYP_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:473 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_PRS as String.")>
            Public Property TYP_PRS() As String
                Get
                    Return _TYP_PRS
                End Get
                Set(ByVal Value As String)
                    _TYP_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_PRS as String.

#Region "[On] |2019/07/16 23h22:834| <01.00.08> <Property> <Columns> |.RUB()|String|"' (Set|Get) The RUB as String.
            Private _RUB As String
            '''    <Summary>
            '''     (Set|Get) The RUB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:473 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RUB as String.")>
            Public Property RUB() As String
                Get
                    Return _RUB
                End Get
                Set(ByVal Value As String)
                    _RUB = Value
                End Set
            End Property
#End Region '(Set|Get) The RUB as String.

#Region "[On] |2019/07/16 23h22:840| <01.00.09> <Property> <Columns> |.NUM_OPE()|Double|"' (Set|Get) The NUM_OPE as Double.
            Private _NUM_OPE As Double
            '''    <Summary>
            '''     (Set|Get) The NUM_OPE as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:473 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_OPE as Double.")>
            Public Property NUM_OPE() As Double
                Get
                    Return _NUM_OPE
                End Get
                Set(ByVal Value As Double)
                    _NUM_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_OPE as Double.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:846| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{9}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:476 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_SEQ as Integer.</summary>
                [NUM_SEQ] = 0
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 1
                ''' <summary>(Set|Get) The DAT_OPE as DateTime.</summary>
                [DAT_OPE] = 2
                ''' <summary>(Set|Get) The LIB_PRS as String.</summary>
                [LIB_PRS] = 3
                ''' <summary>(Set|Get) The MNT_REV as Double.</summary>
                [MNT_REV] = 4
                ''' <summary>(Set|Get) The MNT_VTE as Double.</summary>
                [MNT_VTE] = 5
                ''' <summary>(Set|Get) The DAT_IMP as DateTime.</summary>
                [DAT_IMP] = 6
                ''' <summary>(Set|Get) The TYP_PRS as String.</summary>
                [TYP_PRS] = 7
                ''' <summary>(Set|Get) The RUB as String.</summary>
                [RUB] = 8
                ''' <summary>(Set|Get) The NUM_OPE as Double.</summary>
                [NUM_OPE] = 9
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:862| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:476 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_SEQ = 0
                    .NUM_MDT = Nothing
                    .DAT_OPE = New DateTime
                    .LIB_PRS = Nothing
                    .MNT_REV = 0
                    .MNT_VTE = 0
                    .DAT_IMP = New DateTime
                    .TYP_PRS = Nothing
                    .RUB = Nothing
                    .NUM_OPE = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:869| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:476 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_IMPORT"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_IMPORT"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_IMPORT"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:877| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:476 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_IMPORT] (
`NUM_SEQ`, 
`NUM_MDT`, 
`DAT_OPE`, 
`LIB_PRS`, 
`MNT_REV`, 
`MNT_VTE`, 
`DAT_IMP`, 
`TYP_PRS`, 
`RUB`, 
`NUM_OPE`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@2", Me.DAT_OPE)
                    Cmd.Parameters.AddWithValue("@3", Me.LIB_PRS)
                    Cmd.Parameters.AddWithValue("@4", Me.MNT_REV)
                    Cmd.Parameters.AddWithValue("@5", Me.MNT_VTE)
                    Cmd.Parameters.AddWithValue("@6", Me.DAT_IMP)
                    Cmd.Parameters.AddWithValue("@7", Me.TYP_PRS)
                    Cmd.Parameters.AddWithValue("@8", Me.RUB)
                    Cmd.Parameters.AddWithValue("@9", Me.NUM_OPE)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:883| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:477 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_IMPORT] SET NUM_MDT = @NUM_MDT, DAT_OPE = @DAT_OPE, LIB_PRS = @LIB_PRS, MNT_REV = @MNT_REV, MNT_VTE = @MNT_VTE, DAT_IMP = @DAT_IMP, TYP_PRS = @TYP_PRS, RUB = @RUB, NUM_OPE = @NUM_OPE WHERE NUM_SEQ = @NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    Cmd.Parameters.AddWithValue("@DAT_OPE", DAT_OPE)
                    Cmd.Parameters.AddWithValue("@LIB_PRS", LIB_PRS)
                    Cmd.Parameters.AddWithValue("@MNT_REV", MNT_REV)
                    Cmd.Parameters.AddWithValue("@MNT_VTE", MNT_VTE)
                    Cmd.Parameters.AddWithValue("@DAT_IMP", DAT_IMP)
                    Cmd.Parameters.AddWithValue("@TYP_PRS", TYP_PRS)
                    Cmd.Parameters.AddWithValue("@RUB", RUB)
                    Cmd.Parameters.AddWithValue("@NUM_OPE", NUM_OPE)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:889| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:477 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_IMPORT] WHERE NUM_SEQ =@NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{9}"
#Region "[On] |2019/07/16 23h22:895| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:477 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:901| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:477 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:906| <05.00.02> <Function> <> |.List()|List(Of MDT_IMPORT)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:480 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_IMPORT)
                Dim Result As New List(Of MDT_IMPORT)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_IMPORT(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), New DateTime(1970, 1, 1), Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), 0, Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), 0, Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), New DateTime(1970, 1, 1), Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), "", Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), "", Row.Item(8)),
      IIf(IsDBNull(Row.Item(9)), 0, Row.Item(9)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:912| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_IMPORT)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:480 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_IMPORT)
                Dim Result As New List(Of MDT_IMPORT)
                Dim C As New MDT_IMPORT
                For Each Element As MDT_IMPORT In C.List
                    If Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.LIB_PRS.ToLower() = Search.ToLower() Or Element.TYP_PRS.ToLower() = Search.ToLower() Or Element.RUB.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:917| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_IMPORT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:480 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_IMPORT)
                Dim Result As New List(Of MDT_IMPORT)
                Dim C As New MDT_IMPORT
                For Each Element As MDT_IMPORT In C.List
                    If Val(Element.NUM_SEQ) = Search Or Val(Element.MNT_REV) = Search Or Val(Element.MNT_VTE) = Search Or Val(Element.NUM_OPE) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:929| <05.00.05> <Function> <> |.SearchByDate()|List(Of MDT_IMPORT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:480 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDate(ByVal Search As DateTime) As List(Of MDT_IMPORT)
                Dim Result As New List(Of MDT_IMPORT)
                Dim C As New MDT_IMPORT
                For Each Element As MDT_IMPORT In C.List
                    If Element.DAT_OPE = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:941| <05.00.06> <Function> <> |.SearchByDateRange()|List(Of MDT_IMPORT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:481 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="From_Date">All element from this date and this date included.</param>
            ''' <param name="Until_Date">All element before and including this date.</param>

            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDateRange(ByVal From_Date As DateTime,
ByVal Until_Date As DateTime) As List(Of MDT_IMPORT)
                Dim Result As New List(Of MDT_IMPORT)
                Dim C As New MDT_IMPORT
                For Each Element As MDT_IMPORT In C.List
                    If (Element.DAT_OPE) >= From_Date And (Element.DAT_OPE) <= Until_Date Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:947| <05.00.07> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:481 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_SEQ
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:953| <05.00.08> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:481 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:959| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:481 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:965| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:481 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:971| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:482 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:976| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:484 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:981| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:484 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:987| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:487 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:994| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:487 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:997| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:487 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:002| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:488 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:012| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:488 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:034| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:488 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:040| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:488 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:045| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:489 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:047| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:489 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_SEQ">(Set|Get) The NUM_SEQ as Integer.</param>
            ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="DAT_OPE">(Set|Get) The DAT_OPE as DateTime.</param>
            ''' <param name="LIB_PRS">(Set|Get) The LIB_PRS as String.</param>
            ''' <param name="MNT_REV">(Set|Get) The MNT_REV as Double.</param>
            ''' <param name="MNT_VTE">(Set|Get) The MNT_VTE as Double.</param>
            ''' <param name="DAT_IMP">(Set|Get) The DAT_IMP as DateTime.</param>
            ''' <param name="TYP_PRS">(Set|Get) The TYP_PRS as String.</param>
            ''' <param name="RUB">(Set|Get) The RUB as String.</param>
            ''' <param name="NUM_OPE">(Set|Get) The NUM_OPE as Double.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_SEQ As Integer,
ByVal NUM_MDT As String,
ByVal DAT_OPE As DateTime,
ByVal LIB_PRS As String,
ByVal MNT_REV As Double,
ByVal MNT_VTE As Double,
ByVal DAT_IMP As DateTime,
ByVal TYP_PRS As String,
ByVal RUB As String,
ByVal NUM_OPE As Double)
                With Me
                    Clear()
                    Reset()
                    .NUM_SEQ = NUM_SEQ
                    .NUM_MDT = NUM_MDT
                    .DAT_OPE = DAT_OPE
                    .LIB_PRS = LIB_PRS
                    .MNT_REV = MNT_REV
                    .MNT_VTE = MNT_VTE
                    .DAT_IMP = DAT_IMP
                    .TYP_PRS = TYP_PRS
                    .RUB = RUB
                    .NUM_OPE = NUM_OPE
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:226| <08.00.00> <Class> <> |.MDT_MAJORATION|Class|{30} |Production Cost : 31.9|Selling Price : 79.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_MAJORATION
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:226
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{3}||0.8| |2.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{3}||0.5| |1.5
        '''    |12| |Parameter  |{8}||0.5| |4
        '''    |Production Cost             |31.9
        '''    |Selling Price without VAT   |79.75
        '''    |Total TVA                   |6.14
        '''    |Grand Total                 |85.89
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:505 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_MAJORATION
#Region "<1> [Property]{3}"
#Region "[On] |2019/07/16 23h22:227| <01.00.00> <Property> <Columns> |.COD_ART()|String|"' (Set|Get) The COD_ART as String.
            Private _COD_ART As String
            '''    <Summary>
            '''     (Set|Get) The COD_ART as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:505 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_ART as String.")>
            Public Property COD_ART() As String
                Get
                    Return _COD_ART
                End Get
                Set(ByVal Value As String)
                    _COD_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_ART as String.

#Region "[On] |2019/07/16 23h22:238| <01.00.01> <Property> <Columns> |.DATE_MAJO()|DateTime|"' (Set|Get) The DATE_MAJO as DateTime.
            Private _DATE_MAJO As DateTime
            '''    <Summary>
            '''     (Set|Get) The DATE_MAJO as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:505 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DATE_MAJO as DateTime.")>
            Public Property DATE_MAJO() As DateTime
                Get
                    Return _DATE_MAJO
                End Get
                Set(ByVal Value As DateTime)
                    _DATE_MAJO = Value
                End Set
            End Property
#End Region '(Set|Get) The DATE_MAJO as DateTime.

#Region "[On] |2019/07/16 23h22:244| <01.00.02> <Property> <Columns> |.TAUX_MAJO()|Integer|"' (Set|Get) The TAUX_MAJO as Integer.
            Private _TAUX_MAJO As Integer
            '''    <Summary>
            '''     (Set|Get) The TAUX_MAJO as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:505 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TAUX_MAJO as Integer.")>
            Public Property TAUX_MAJO() As Integer
                Get
                    Return _TAUX_MAJO
                End Get
                Set(ByVal Value As Integer)
                    _TAUX_MAJO = Value
                End Set
            End Property
#End Region '(Set|Get) The TAUX_MAJO as Integer.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:249| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{2}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:505 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_ART as String.</summary>
                [COD_ART] = 0
                ''' <summary>(Set|Get) The DATE_MAJO as DateTime.</summary>
                [DATE_MAJO] = 1
                ''' <summary>(Set|Get) The TAUX_MAJO as Integer.</summary>
                [TAUX_MAJO] = 2
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:253| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:506 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_ART = Nothing
                    .DATE_MAJO = New DateTime
                    .TAUX_MAJO = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:257| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:506 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_MAJORATION"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_MAJORATION"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_MAJORATION"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:262| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:506 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_MAJORATION] (
`COD_ART`, 
`DATE_MAJO`, 
`TAUX_MAJO`) Values (@0, @1, @2)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_ART)
                    Cmd.Parameters.AddWithValue("@1", Me.DATE_MAJO)
                    Cmd.Parameters.AddWithValue("@2", Me.TAUX_MAJO)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:267| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:506 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_MAJORATION] SET DATE_MAJO = @DATE_MAJO, TAUX_MAJO = @TAUX_MAJO WHERE COD_ART = @COD_ART"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@DATE_MAJO", DATE_MAJO)
                    Cmd.Parameters.AddWithValue("@TAUX_MAJO", TAUX_MAJO)
                    Cmd.Parameters.AddWithValue("@COD_ART", COD_ART)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:272| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:506 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_MAJORATION] WHERE COD_ART =@COD_ART"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_ART", COD_ART)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h22:276| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:509 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:292| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:509 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:315| <05.00.02> <Function> <> |.List()|List(Of MDT_MAJORATION)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:509 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_MAJORATION)
                Dim Result As New List(Of MDT_MAJORATION)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_MAJORATION(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), New DateTime(1970, 1, 1), Row.Item(1)),
      IIf(IsDBNull(Row.Item(2)), 0, Row.Item(2)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:320| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_MAJORATION)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:509 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_MAJORATION)
                Dim Result As New List(Of MDT_MAJORATION)
                Dim C As New MDT_MAJORATION
                For Each Element As MDT_MAJORATION In C.List
                    If Element.COD_ART.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:324| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_MAJORATION)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:509 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_MAJORATION)
                Dim Result As New List(Of MDT_MAJORATION)
                Dim C As New MDT_MAJORATION
                For Each Element As MDT_MAJORATION In C.List
                    If Val(Element.COD_ART) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:329| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:509 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_ART
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:333| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:511 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:339| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:511 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:347| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:511 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:352| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:511 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:357| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:511 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:364| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:511 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:370| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:515 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:375| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:515 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:378| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:515 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:411| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:515 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:417| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:515 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:422| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:515 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:429| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:515 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:434| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:516 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:435| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:516 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_ART">(Set|Get) The COD_ART as String.</param>
            ''' <param name="DATE_MAJO">(Set|Get) The DATE_MAJO as DateTime.</param>
            ''' <param name="TAUX_MAJO">(Set|Get) The TAUX_MAJO as Integer.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_ART As String,
ByVal DATE_MAJO As DateTime,
ByVal TAUX_MAJO As Integer)
                With Me
                    Clear()
                    Reset()
                    .COD_ART = COD_ART
                    .DATE_MAJO = DATE_MAJO
                    .TAUX_MAJO = TAUX_MAJO
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:615| <08.00.00> <Class> <> |.MDT_MANDAT|Class|{82} |Production Cost : 126.6|Selling Price : 316.5|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_MANDAT
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:615
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{53}||0.8| |42.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{9}||1.6| |14.4
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{53}||0.5| |26.5
        '''    |12| |Parameter  |{61}||0.5| |30.5
        '''    |Production Cost             |126.6
        '''    |Selling Price without VAT   |316.5
        '''    |Total TVA                   |24.37
        '''    |Grand Total                 |340.87
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:529 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_MANDAT
#Region "<1> [Property]{53}"
#Region "[On] |2019/07/16 23h22:616| <01.00.00> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:529 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h22:628| <01.00.01> <Property> <Columns> |.TRI_NUM()|Integer|"' (Set|Get) The TRI_NUM as Integer.
            Private _TRI_NUM As Integer
            '''    <Summary>
            '''     (Set|Get) The TRI_NUM as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:529 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TRI_NUM as Integer.")>
            Public Property TRI_NUM() As Integer
                Get
                    Return _TRI_NUM
                End Get
                Set(ByVal Value As Integer)
                    _TRI_NUM = Value
                End Set
            End Property
#End Region '(Set|Get) The TRI_NUM as Integer.

#Region "[On] |2019/07/16 23h22:633| <01.00.02> <Property> <Columns> |.NOM_MDT()|String|"' (Set|Get) The NOM_MDT as String.
            Private _NOM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NOM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:529 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_MDT as String.")>
            Public Property NOM_MDT() As String
                Get
                    Return _NOM_MDT
                End Get
                Set(ByVal Value As String)
                    _NOM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_MDT as String.

#Region "[On] |2019/07/16 23h22:638| <01.00.03> <Property> <Columns> |.NOM_ABR()|String|"' (Set|Get) The NOM_ABR as String.
            Private _NOM_ABR As String
            '''    <Summary>
            '''     (Set|Get) The NOM_ABR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:557 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_ABR as String.")>
            Public Property NOM_ABR() As String
                Get
                    Return _NOM_ABR
                End Get
                Set(ByVal Value As String)
                    _NOM_ABR = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_ABR as String.

#Region "[On] |2019/07/16 23h22:644| <01.00.04> <Property> <Columns> |.CLE_ALP()|String|"' (Set|Get) The CLE_ALP as String.
            Private _CLE_ALP As String
            '''    <Summary>
            '''     (Set|Get) The CLE_ALP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:557 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The CLE_ALP as String.")>
            Public Property CLE_ALP() As String
                Get
                    Return _CLE_ALP
                End Get
                Set(ByVal Value As String)
                    _CLE_ALP = Value
                End Set
            End Property
#End Region '(Set|Get) The CLE_ALP as String.

#Region "[On] |2019/07/16 23h22:650| <01.00.05> <Property> <Columns> |.NUM_CLI()|String|"' (Set|Get) The NUM_CLI as String.
            Private _NUM_CLI As String
            '''    <Summary>
            '''     (Set|Get) The NUM_CLI as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:558 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_CLI as String.")>
            Public Property NUM_CLI() As String
                Get
                    Return _NUM_CLI
                End Get
                Set(ByVal Value As String)
                    _NUM_CLI = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_CLI as String.

#Region "[On] |2019/07/16 23h22:655| <01.00.06> <Property> <Columns> |.COD_BUR()|String|"' (Set|Get) The COD_BUR as String.
            Private _COD_BUR As String
            '''    <Summary>
            '''     (Set|Get) The COD_BUR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:561 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_BUR as String.")>
            Public Property COD_BUR() As String
                Get
                    Return _COD_BUR
                End Get
                Set(ByVal Value As String)
                    _COD_BUR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_BUR as String.

#Region "[On] |2019/07/16 23h22:661| <01.00.07> <Property> <Columns> |.COD_TAR()|String|"' (Set|Get) The COD_TAR as String.
            Private _COD_TAR As String
            '''    <Summary>
            '''     (Set|Get) The COD_TAR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:561 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TAR as String.")>
            Public Property COD_TAR() As String
                Get
                    Return _COD_TAR
                End Get
                Set(ByVal Value As String)
                    _COD_TAR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TAR as String.

#Region "[On] |2019/07/16 23h22:666| <01.00.08> <Property> <Columns> |.CLB_1ER()|String|"' (Set|Get) The CLB_1ER as String.
            Private _CLB_1ER As String
            '''    <Summary>
            '''     (Set|Get) The CLB_1ER as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:561 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The CLB_1ER as String.")>
            Public Property CLB_1ER() As String
                Get
                    Return _CLB_1ER
                End Get
                Set(ByVal Value As String)
                    _CLB_1ER = Value
                End Set
            End Property
#End Region '(Set|Get) The CLB_1ER as String.

#Region "[On] |2019/07/16 23h22:671| <01.00.09> <Property> <Columns> |.CLB_2EM()|String|"' (Set|Get) The CLB_2EM as String.
            Private _CLB_2EM As String
            '''    <Summary>
            '''     (Set|Get) The CLB_2EM as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:561 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The CLB_2EM as String.")>
            Public Property CLB_2EM() As String
                Get
                    Return _CLB_2EM
                End Get
                Set(ByVal Value As String)
                    _CLB_2EM = Value
                End Set
            End Property
#End Region '(Set|Get) The CLB_2EM as String.

#Region "[On] |2019/07/16 23h22:676| <01.00.10> <Property> <Columns> |.DAT_COM()|DateTime|"' (Set|Get) The DAT_COM as DateTime.
            Private _DAT_COM As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_COM as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:562 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_COM as DateTime.")>
            Public Property DAT_COM() As DateTime
                Get
                    Return _DAT_COM
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_COM = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_COM as DateTime.

#Region "[On] |2019/07/16 23h22:682| <01.00.11> <Property> <Columns> |.DAT_FIN()|DateTime|"' (Set|Get) The DAT_FIN as DateTime.
            Private _DAT_FIN As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_FIN as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:562 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_FIN as DateTime.")>
            Public Property DAT_FIN() As DateTime
                Get
                    Return _DAT_FIN
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_FIN = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_FIN as DateTime.

#Region "[On] |2019/07/16 23h22:687| <01.00.12> <Property> <Columns> |.STA_MDT()|String|"' (Set|Get) The STA_MDT as String.
            Private _STA_MDT As String
            '''    <Summary>
            '''     (Set|Get) The STA_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:562 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The STA_MDT as String.")>
            Public Property STA_MDT() As String
                Get
                    Return _STA_MDT
                End Get
                Set(ByVal Value As String)
                    _STA_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The STA_MDT as String.

#Region "[On] |2019/07/16 23h22:692| <01.00.13> <Property> <Columns> |.COD_FRQ()|String|"' (Set|Get) The COD_FRQ as String.
            Private _COD_FRQ As String
            '''    <Summary>
            '''     (Set|Get) The COD_FRQ as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:562 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_FRQ as String.")>
            Public Property COD_FRQ() As String
                Get
                    Return _COD_FRQ
                End Get
                Set(ByVal Value As String)
                    _COD_FRQ = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_FRQ as String.

#Region "[On] |2019/07/16 23h22:697| <01.00.14> <Property> <Columns> |.COD_RCP()|String|"' (Set|Get) The COD_RCP as String.
            Private _COD_RCP As String
            '''    <Summary>
            '''     (Set|Get) The COD_RCP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:563 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_RCP as String.")>
            Public Property COD_RCP() As String
                Get
                    Return _COD_RCP
                End Get
                Set(ByVal Value As String)
                    _COD_RCP = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_RCP as String.

#Region "[On] |2019/07/16 23h22:703| <01.00.15> <Property> <Columns> |.HRS_TOT_YON()|Boolean|"' (Set|Get) The HRS_TOT_YON as Boolean.
            Private _HRS_TOT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The HRS_TOT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:566 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HRS_TOT_YON as Boolean.")>
            Public Property HRS_TOT_YON() As Boolean
                Get
                    Return _HRS_TOT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _HRS_TOT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The HRS_TOT_YON as Boolean.

#Region "[On] |2019/07/16 23h22:709| <01.00.16> <Property> <Columns> |.FAC_YON()|Boolean|"' (Set|Get) The FAC_YON as Boolean.
            Private _FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:566 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_YON as Boolean.")>
            Public Property FAC_YON() As Boolean
                Get
                    Return _FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h22:714| <01.00.17> <Property> <Columns> |.FRI_FAC_YON()|Boolean|"' (Set|Get) The FRI_FAC_YON as Boolean.
            Private _FRI_FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FRI_FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:566 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FRI_FAC_YON as Boolean.")>
            Public Property FRI_FAC_YON() As Boolean
                Get
                    Return _FRI_FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FRI_FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FRI_FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h22:720| <01.00.18> <Property> <Columns> |.VAC_YON()|Boolean|"' (Set|Get) The VAC_YON as Boolean.
            Private _VAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The VAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:566 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The VAC_YON as Boolean.")>
            Public Property VAC_YON() As Boolean
                Get
                    Return _VAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _VAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The VAC_YON as Boolean.

#Region "[On] |2019/07/16 23h22:735| <01.00.19> <Property> <Columns> |.ETA_YON()|Boolean|"' (Set|Get) The ETA_YON as Boolean.
            Private _ETA_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The ETA_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:567 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ETA_YON as Boolean.")>
            Public Property ETA_YON() As Boolean
                Get
                    Return _ETA_YON
                End Get
                Set(ByVal Value As Boolean)
                    _ETA_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The ETA_YON as Boolean.

#Region "[On] |2019/07/16 23h22:754| <01.00.20> <Property> <Columns> |.KLM_VOI()|Double|"' (Set|Get) The KLM_VOI as Double.
            Private _KLM_VOI As Double
            '''    <Summary>
            '''     (Set|Get) The KLM_VOI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:567 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The KLM_VOI as Double.")>
            Public Property KLM_VOI() As Double
                Get
                    Return _KLM_VOI
                End Get
                Set(ByVal Value As Double)
                    _KLM_VOI = Value
                End Set
            End Property
#End Region '(Set|Get) The KLM_VOI as Double.

#Region "[On] |2019/07/16 23h22:760| <01.00.21> <Property> <Columns> |.HEU_VOI()|Double|"' (Set|Get) The HEU_VOI as Double.
            Private _HEU_VOI As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_VOI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:567 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_VOI as Double.")>
            Public Property HEU_VOI() As Double
                Get
                    Return _HEU_VOI
                End Get
                Set(ByVal Value As Double)
                    _HEU_VOI = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_VOI as Double.

#Region "[On] |2019/07/16 23h22:767| <01.00.22> <Property> <Columns> |.HEU_PUB()|Double|"' (Set|Get) The HEU_PUB as Double.
            Private _HEU_PUB As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_PUB as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:567 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_PUB as Double.")>
            Public Property HEU_PUB() As Double
                Get
                    Return _HEU_PUB
                End Get
                Set(ByVal Value As Double)
                    _HEU_PUB = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_PUB as Double.

#Region "[On] |2019/07/16 23h22:773| <01.00.23> <Property> <Columns> |.TXT_DPL()|String|"' (Set|Get) The TXT_DPL as String.
            Private _TXT_DPL As String
            '''    <Summary>
            '''     (Set|Get) The TXT_DPL as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:570 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TXT_DPL as String.")>
            Public Property TXT_DPL() As String
                Get
                    Return _TXT_DPL
                End Get
                Set(ByVal Value As String)
                    _TXT_DPL = Value
                End Set
            End Property
#End Region '(Set|Get) The TXT_DPL as String.

#Region "[On] |2019/07/16 23h22:779| <01.00.24> <Property> <Columns> |.NUM_CPT()|String|"' (Set|Get) The NUM_CPT as String.
            Private _NUM_CPT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_CPT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:570 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_CPT as String.")>
            Public Property NUM_CPT() As String
                Get
                    Return _NUM_CPT
                End Get
                Set(ByVal Value As String)
                    _NUM_CPT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_CPT as String.

#Region "[On] |2019/07/16 23h22:786| <01.00.25> <Property> <Columns> |.RMQ_GEN()|String|"' (Set|Get) The RMQ_GEN as String.
            Private _RMQ_GEN As String
            '''    <Summary>
            '''     (Set|Get) The RMQ_GEN as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:570 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RMQ_GEN as String.")>
            Public Property RMQ_GEN() As String
                Get
                    Return _RMQ_GEN
                End Get
                Set(ByVal Value As String)
                    _RMQ_GEN = Value
                End Set
            End Property
#End Region '(Set|Get) The RMQ_GEN as String.

#Region "[On] |2019/07/16 23h22:791| <01.00.26> <Property> <Columns> |.MNT_FRF()|Double|"' (Set|Get) The MNT_FRF as Double.
            Private _MNT_FRF As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_FRF as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:570 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_FRF as Double.")>
            Public Property MNT_FRF() As Double
                Get
                    Return _MNT_FRF
                End Get
                Set(ByVal Value As Double)
                    _MNT_FRF = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_FRF as Double.

#Region "[On] |2019/07/16 23h22:797| <01.00.27> <Property> <Columns> |.LOC_MDT()|String|"' (Set|Get) The LOC_MDT as String.
            Private _LOC_MDT As String
            '''    <Summary>
            '''     (Set|Get) The LOC_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:571 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LOC_MDT as String.")>
            Public Property LOC_MDT() As String
                Get
                    Return _LOC_MDT
                End Get
                Set(ByVal Value As String)
                    _LOC_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The LOC_MDT as String.

#Region "[On] |2019/07/16 23h22:803| <01.00.28> <Property> <Columns> |.NOM_PNC()|String|"' (Set|Get) The NOM_PNC as String.
            Private _NOM_PNC As String
            '''    <Summary>
            '''     (Set|Get) The NOM_PNC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:571 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_PNC as String.")>
            Public Property NOM_PNC() As String
                Get
                    Return _NOM_PNC
                End Get
                Set(ByVal Value As String)
                    _NOM_PNC = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_PNC as String.

#Region "[On] |2019/07/16 23h22:809| <01.00.29> <Property> <Columns> |.FRF_DPL()|Double|"' (Set|Get) The FRF_DPL as Double.
            Private _FRF_DPL As Double
            '''    <Summary>
            '''     (Set|Get) The FRF_DPL as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:571 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FRF_DPL as Double.")>
            Public Property FRF_DPL() As Double
                Get
                    Return _FRF_DPL
                End Get
                Set(ByVal Value As Double)
                    _FRF_DPL = Value
                End Set
            End Property
#End Region '(Set|Get) The FRF_DPL as Double.

#Region "[On] |2019/07/16 23h22:816| <01.00.30> <Property> <Columns> |.GEFI_GEN()|Integer|"' (Set|Get) The GEFI_GEN as Integer.
            Private _GEFI_GEN As Integer
            '''    <Summary>
            '''     (Set|Get) The GEFI_GEN as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:571 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GEFI_GEN as Integer.")>
            Public Property GEFI_GEN() As Integer
                Get
                    Return _GEFI_GEN
                End Get
                Set(ByVal Value As Integer)
                    _GEFI_GEN = Value
                End Set
            End Property
#End Region '(Set|Get) The GEFI_GEN as Integer.

#Region "[On] |2019/07/16 23h22:822| <01.00.31> <Property> <Columns> |.GEFI_ART()|Integer|"' (Set|Get) The GEFI_ART as Integer.
            Private _GEFI_ART As Integer
            '''    <Summary>
            '''     (Set|Get) The GEFI_ART as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:571 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GEFI_ART as Integer.")>
            Public Property GEFI_ART() As Integer
                Get
                    Return _GEFI_ART
                End Get
                Set(ByVal Value As Integer)
                    _GEFI_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The GEFI_ART as Integer.

#Region "[On] |2019/07/16 23h22:828| <01.00.32> <Property> <Columns> |.BUD_DAT_COM()|DateTime|"' (Set|Get) The BUD_DAT_COM as DateTime.
            Private _BUD_DAT_COM As DateTime
            '''    <Summary>
            '''     (Set|Get) The BUD_DAT_COM as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:574 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_DAT_COM as DateTime.")>
            Public Property BUD_DAT_COM() As DateTime
                Get
                    Return _BUD_DAT_COM
                End Get
                Set(ByVal Value As DateTime)
                    _BUD_DAT_COM = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_DAT_COM as DateTime.

#Region "[On] |2019/07/16 23h22:835| <01.00.33> <Property> <Columns> |.BUD_DAT_FIN()|DateTime|"' (Set|Get) The BUD_DAT_FIN as DateTime.
            Private _BUD_DAT_FIN As DateTime
            '''    <Summary>
            '''     (Set|Get) The BUD_DAT_FIN as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:574 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_DAT_FIN as DateTime.")>
            Public Property BUD_DAT_FIN() As DateTime
                Get
                    Return _BUD_DAT_FIN
                End Get
                Set(ByVal Value As DateTime)
                    _BUD_DAT_FIN = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_DAT_FIN as DateTime.

#Region "[On] |2019/07/16 23h22:841| <01.00.34> <Property> <Columns> |.BUD_HRS_CTR()|Double|"' (Set|Get) The BUD_HRS_CTR as Double.
            Private _BUD_HRS_CTR As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_HRS_CTR as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:574 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_HRS_CTR as Double.")>
            Public Property BUD_HRS_CTR() As Double
                Get
                    Return _BUD_HRS_CTR
                End Get
                Set(ByVal Value As Double)
                    _BUD_HRS_CTR = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_HRS_CTR as Double.

#Region "[On] |2019/07/16 23h22:849| <01.00.35> <Property> <Columns> |.BUD_HON_SOC()|Double|"' (Set|Get) The BUD_HON_SOC as Double.
            Private _BUD_HON_SOC As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_HON_SOC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:574 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_HON_SOC as Double.")>
            Public Property BUD_HON_SOC() As Double
                Get
                    Return _BUD_HON_SOC
                End Get
                Set(ByVal Value As Double)
                    _BUD_HON_SOC = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_HON_SOC as Double.

#Region "[On] |2019/07/16 23h22:855| <01.00.36> <Property> <Columns> |.BUD_FRA_SOC()|Double|"' (Set|Get) The BUD_FRA_SOC as Double.
            Private _BUD_FRA_SOC As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_FRA_SOC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:575 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_FRA_SOC as Double.")>
            Public Property BUD_FRA_SOC() As Double
                Get
                    Return _BUD_FRA_SOC
                End Get
                Set(ByVal Value As Double)
                    _BUD_FRA_SOC = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_FRA_SOC as Double.

#Region "[On] |2019/07/16 23h22:862| <01.00.37> <Property> <Columns> |.BUD_HON_SST()|Double|"' (Set|Get) The BUD_HON_SST as Double.
            Private _BUD_HON_SST As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_HON_SST as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:575 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_HON_SST as Double.")>
            Public Property BUD_HON_SST() As Double
                Get
                    Return _BUD_HON_SST
                End Get
                Set(ByVal Value As Double)
                    _BUD_HON_SST = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_HON_SST as Double.

#Region "[On] |2019/07/16 23h22:880| <01.00.38> <Property> <Columns> |.BUD_FRA_SST()|Double|"' (Set|Get) The BUD_FRA_SST as Double.
            Private _BUD_FRA_SST As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_FRA_SST as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:575 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_FRA_SST as Double.")>
            Public Property BUD_FRA_SST() As Double
                Get
                    Return _BUD_FRA_SST
                End Get
                Set(ByVal Value As Double)
                    _BUD_FRA_SST = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_FRA_SST as Double.

#Region "[On] |2019/07/16 23h22:889| <01.00.39> <Property> <Columns> |.BUD_CAL_AUTO()|Boolean|"' (Set|Get) The BUD_CAL_AUTO as Boolean.
            Private _BUD_CAL_AUTO As Boolean
            '''    <Summary>
            '''     (Set|Get) The BUD_CAL_AUTO as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:575 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_CAL_AUTO as Boolean.")>
            Public Property BUD_CAL_AUTO() As Boolean
                Get
                    Return _BUD_CAL_AUTO
                End Get
                Set(ByVal Value As Boolean)
                    _BUD_CAL_AUTO = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_CAL_AUTO as Boolean.

#Region "[On] |2019/07/16 23h22:896| <01.00.40> <Property> <Columns> |.BUD_STA()|Boolean|"' (Set|Get) The BUD_STA as Boolean.
            Private _BUD_STA As Boolean
            '''    <Summary>
            '''     (Set|Get) The BUD_STA as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:581 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_STA as Boolean.")>
            Public Property BUD_STA() As Boolean
                Get
                    Return _BUD_STA
                End Get
                Set(ByVal Value As Boolean)
                    _BUD_STA = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_STA as Boolean.

#Region "[On] |2019/07/16 23h22:902| <01.00.41> <Property> <Columns> |.ATT_001()|String|"' (Set|Get) The ATT_001 as String.
            Private _ATT_001 As String
            '''    <Summary>
            '''     (Set|Get) The ATT_001 as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:582 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ATT_001 as String.")>
            Public Property ATT_001() As String
                Get
                    Return _ATT_001
                End Get
                Set(ByVal Value As String)
                    _ATT_001 = Value
                End Set
            End Property
#End Region '(Set|Get) The ATT_001 as String.

#Region "[On] |2019/07/16 23h22:910| <01.00.42> <Property> <Columns> |.ATT_002()|String|"' (Set|Get) The ATT_002 as String.
            Private _ATT_002 As String
            '''    <Summary>
            '''     (Set|Get) The ATT_002 as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:582 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ATT_002 as String.")>
            Public Property ATT_002() As String
                Get
                    Return _ATT_002
                End Get
                Set(ByVal Value As String)
                    _ATT_002 = Value
                End Set
            End Property
#End Region '(Set|Get) The ATT_002 as String.

#Region "[On] |2019/07/16 23h22:917| <01.00.43> <Property> <Columns> |.ATT_003()|String|"' (Set|Get) The ATT_003 as String.
            Private _ATT_003 As String
            '''    <Summary>
            '''     (Set|Get) The ATT_003 as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:582 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ATT_003 as String.")>
            Public Property ATT_003() As String
                Get
                    Return _ATT_003
                End Get
                Set(ByVal Value As String)
                    _ATT_003 = Value
                End Set
            End Property
#End Region '(Set|Get) The ATT_003 as String.

#Region "[On] |2019/07/16 23h22:924| <01.00.44> <Property> <Columns> |.ATT_004()|String|"' (Set|Get) The ATT_004 as String.
            Private _ATT_004 As String
            '''    <Summary>
            '''     (Set|Get) The ATT_004 as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:582 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ATT_004 as String.")>
            Public Property ATT_004() As String
                Get
                    Return _ATT_004
                End Get
                Set(ByVal Value As String)
                    _ATT_004 = Value
                End Set
            End Property
#End Region '(Set|Get) The ATT_004 as String.

#Region "[On] |2019/07/16 23h22:931| <01.00.45> <Property> <Columns> |.ATT_005()|String|"' (Set|Get) The ATT_005 as String.
            Private _ATT_005 As String
            '''    <Summary>
            '''     (Set|Get) The ATT_005 as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:583 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ATT_005 as String.")>
            Public Property ATT_005() As String
                Get
                    Return _ATT_005
                End Get
                Set(ByVal Value As String)
                    _ATT_005 = Value
                End Set
            End Property
#End Region '(Set|Get) The ATT_005 as String.

#Region "[On] |2019/07/16 23h22:938| <01.00.46> <Property> <Columns> |.ATT_006()|String|"' (Set|Get) The ATT_006 as String.
            Private _ATT_006 As String
            '''    <Summary>
            '''     (Set|Get) The ATT_006 as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:583 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ATT_006 as String.")>
            Public Property ATT_006() As String
                Get
                    Return _ATT_006
                End Get
                Set(ByVal Value As String)
                    _ATT_006 = Value
                End Set
            End Property
#End Region '(Set|Get) The ATT_006 as String.

#Region "[On] |2019/07/16 23h22:945| <01.00.47> <Property> <Columns> |.ATT_007()|String|"' (Set|Get) The ATT_007 as String.
            Private _ATT_007 As String
            '''    <Summary>
            '''     (Set|Get) The ATT_007 as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:583 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ATT_007 as String.")>
            Public Property ATT_007() As String
                Get
                    Return _ATT_007
                End Get
                Set(ByVal Value As String)
                    _ATT_007 = Value
                End Set
            End Property
#End Region '(Set|Get) The ATT_007 as String.

#Region "[On] |2019/07/16 23h22:952| <01.00.48> <Property> <Columns> |.ATT_008()|String|"' (Set|Get) The ATT_008 as String.
            Private _ATT_008 As String
            '''    <Summary>
            '''     (Set|Get) The ATT_008 as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:584 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ATT_008 as String.")>
            Public Property ATT_008() As String
                Get
                    Return _ATT_008
                End Get
                Set(ByVal Value As String)
                    _ATT_008 = Value
                End Set
            End Property
#End Region '(Set|Get) The ATT_008 as String.

#Region "[On] |2019/07/16 23h22:959| <01.00.49> <Property> <Columns> |.ATT_009()|String|"' (Set|Get) The ATT_009 as String.
            Private _ATT_009 As String
            '''    <Summary>
            '''     (Set|Get) The ATT_009 as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:587 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ATT_009 as String.")>
            Public Property ATT_009() As String
                Get
                    Return _ATT_009
                End Get
                Set(ByVal Value As String)
                    _ATT_009 = Value
                End Set
            End Property
#End Region '(Set|Get) The ATT_009 as String.

#Region "[On] |2019/07/16 23h22:966| <01.00.50> <Property> <Columns> |.ATT_010()|String|"' (Set|Get) The ATT_010 as String.
            Private _ATT_010 As String
            '''    <Summary>
            '''     (Set|Get) The ATT_010 as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:587 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ATT_010 as String.")>
            Public Property ATT_010() As String
                Get
                    Return _ATT_010
                End Get
                Set(ByVal Value As String)
                    _ATT_010 = Value
                End Set
            End Property
#End Region '(Set|Get) The ATT_010 as String.

#Region "[On] |2019/07/16 23h22:974| <01.00.51> <Property> <Columns> |.PRCT_AVAN()|Double|"' (Set|Get) The PRCT_AVAN as Double.
            Private _PRCT_AVAN As Double
            '''    <Summary>
            '''     (Set|Get) The PRCT_AVAN as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:587 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRCT_AVAN as Double.")>
            Public Property PRCT_AVAN() As Double
                Get
                    Return _PRCT_AVAN
                End Get
                Set(ByVal Value As Double)
                    _PRCT_AVAN = Value
                End Set
            End Property
#End Region '(Set|Get) The PRCT_AVAN as Double.

#Region "[On] |2019/07/16 23h22:981| <01.00.52> <Property> <Columns> |.BUD_HEU()|Double|"' (Set|Get) The BUD_HEU as Double.
            Private _BUD_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The BUD_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:588 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The BUD_HEU as Double.")>
            Public Property BUD_HEU() As Double
                Get
                    Return _BUD_HEU
                End Get
                Set(ByVal Value As Double)
                    _BUD_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The BUD_HEU as Double.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:988| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{52}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:588 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 0
                ''' <summary>(Set|Get) The TRI_NUM as Integer.</summary>
                [TRI_NUM] = 1
                ''' <summary>(Set|Get) The NOM_MDT as String.</summary>
                [NOM_MDT] = 2
                ''' <summary>(Set|Get) The NOM_ABR as String.</summary>
                [NOM_ABR] = 3
                ''' <summary>(Set|Get) The CLE_ALP as String.</summary>
                [CLE_ALP] = 4
                ''' <summary>(Set|Get) The NUM_CLI as String.</summary>
                [NUM_CLI] = 5
                ''' <summary>(Set|Get) The COD_BUR as String.</summary>
                [COD_BUR] = 6
                ''' <summary>(Set|Get) The COD_TAR as String.</summary>
                [COD_TAR] = 7
                ''' <summary>(Set|Get) The CLB_1ER as String.</summary>
                [CLB_1ER] = 8
                ''' <summary>(Set|Get) The CLB_2EM as String.</summary>
                [CLB_2EM] = 9
                ''' <summary>(Set|Get) The DAT_COM as DateTime.</summary>
                [DAT_COM] = 10
                ''' <summary>(Set|Get) The DAT_FIN as DateTime.</summary>
                [DAT_FIN] = 11
                ''' <summary>(Set|Get) The STA_MDT as String.</summary>
                [STA_MDT] = 12
                ''' <summary>(Set|Get) The COD_FRQ as String.</summary>
                [COD_FRQ] = 13
                ''' <summary>(Set|Get) The COD_RCP as String.</summary>
                [COD_RCP] = 14
                ''' <summary>(Set|Get) The HRS_TOT_YON as Boolean.</summary>
                [HRS_TOT_YON] = 15
                ''' <summary>(Set|Get) The FAC_YON as Boolean.</summary>
                [FAC_YON] = 16
                ''' <summary>(Set|Get) The FRI_FAC_YON as Boolean.</summary>
                [FRI_FAC_YON] = 17
                ''' <summary>(Set|Get) The VAC_YON as Boolean.</summary>
                [VAC_YON] = 18
                ''' <summary>(Set|Get) The ETA_YON as Boolean.</summary>
                [ETA_YON] = 19
                ''' <summary>(Set|Get) The KLM_VOI as Double.</summary>
                [KLM_VOI] = 20
                ''' <summary>(Set|Get) The HEU_VOI as Double.</summary>
                [HEU_VOI] = 21
                ''' <summary>(Set|Get) The HEU_PUB as Double.</summary>
                [HEU_PUB] = 22
                ''' <summary>(Set|Get) The TXT_DPL as String.</summary>
                [TXT_DPL] = 23
                ''' <summary>(Set|Get) The NUM_CPT as String.</summary>
                [NUM_CPT] = 24
                ''' <summary>(Set|Get) The RMQ_GEN as String.</summary>
                [RMQ_GEN] = 25
                ''' <summary>(Set|Get) The MNT_FRF as Double.</summary>
                [MNT_FRF] = 26
                ''' <summary>(Set|Get) The LOC_MDT as String.</summary>
                [LOC_MDT] = 27
                ''' <summary>(Set|Get) The NOM_PNC as String.</summary>
                [NOM_PNC] = 28
                ''' <summary>(Set|Get) The FRF_DPL as Double.</summary>
                [FRF_DPL] = 29
                ''' <summary>(Set|Get) The GEFI_GEN as Integer.</summary>
                [GEFI_GEN] = 30
                ''' <summary>(Set|Get) The GEFI_ART as Integer.</summary>
                [GEFI_ART] = 31
                ''' <summary>(Set|Get) The BUD_DAT_COM as DateTime.</summary>
                [BUD_DAT_COM] = 32
                ''' <summary>(Set|Get) The BUD_DAT_FIN as DateTime.</summary>
                [BUD_DAT_FIN] = 33
                ''' <summary>(Set|Get) The BUD_HRS_CTR as Double.</summary>
                [BUD_HRS_CTR] = 34
                ''' <summary>(Set|Get) The BUD_HON_SOC as Double.</summary>
                [BUD_HON_SOC] = 35
                ''' <summary>(Set|Get) The BUD_FRA_SOC as Double.</summary>
                [BUD_FRA_SOC] = 36
                ''' <summary>(Set|Get) The BUD_HON_SST as Double.</summary>
                [BUD_HON_SST] = 37
                ''' <summary>(Set|Get) The BUD_FRA_SST as Double.</summary>
                [BUD_FRA_SST] = 38
                ''' <summary>(Set|Get) The BUD_CAL_AUTO as Boolean.</summary>
                [BUD_CAL_AUTO] = 39
                ''' <summary>(Set|Get) The BUD_STA as Boolean.</summary>
                [BUD_STA] = 40
                ''' <summary>(Set|Get) The ATT_001 as String.</summary>
                [ATT_001] = 41
                ''' <summary>(Set|Get) The ATT_002 as String.</summary>
                [ATT_002] = 42
                ''' <summary>(Set|Get) The ATT_003 as String.</summary>
                [ATT_003] = 43
                ''' <summary>(Set|Get) The ATT_004 as String.</summary>
                [ATT_004] = 44
                ''' <summary>(Set|Get) The ATT_005 as String.</summary>
                [ATT_005] = 45
                ''' <summary>(Set|Get) The ATT_006 as String.</summary>
                [ATT_006] = 46
                ''' <summary>(Set|Get) The ATT_007 as String.</summary>
                [ATT_007] = 47
                ''' <summary>(Set|Get) The ATT_008 as String.</summary>
                [ATT_008] = 48
                ''' <summary>(Set|Get) The ATT_009 as String.</summary>
                [ATT_009] = 49
                ''' <summary>(Set|Get) The ATT_010 as String.</summary>
                [ATT_010] = 50
                ''' <summary>(Set|Get) The PRCT_AVAN as Double.</summary>
                [PRCT_AVAN] = 51
                ''' <summary>(Set|Get) The BUD_HEU as Double.</summary>
                [BUD_HEU] = 52
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:022| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:594 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_MDT = Nothing
                    .TRI_NUM = 0
                    .NOM_MDT = Nothing
                    .NOM_ABR = Nothing
                    .CLE_ALP = Nothing
                    .NUM_CLI = Nothing
                    .COD_BUR = Nothing
                    .COD_TAR = Nothing
                    .CLB_1ER = Nothing
                    .CLB_2EM = Nothing
                    .DAT_COM = New DateTime
                    .DAT_FIN = New DateTime
                    .STA_MDT = Nothing
                    .COD_FRQ = Nothing
                    .COD_RCP = Nothing
                    .HRS_TOT_YON = False
                    .FAC_YON = False
                    .FRI_FAC_YON = False
                    .VAC_YON = False
                    .ETA_YON = False
                    .KLM_VOI = 0
                    .HEU_VOI = 0
                    .HEU_PUB = 0
                    .TXT_DPL = Nothing
                    .NUM_CPT = Nothing
                    .RMQ_GEN = Nothing
                    .MNT_FRF = 0
                    .LOC_MDT = Nothing
                    .NOM_PNC = Nothing
                    .FRF_DPL = 0
                    .GEFI_GEN = 0
                    .GEFI_ART = 0
                    .BUD_DAT_COM = New DateTime
                    .BUD_DAT_FIN = New DateTime
                    .BUD_HRS_CTR = 0
                    .BUD_HON_SOC = 0
                    .BUD_FRA_SOC = 0
                    .BUD_HON_SST = 0
                    .BUD_FRA_SST = 0
                    .BUD_CAL_AUTO = False
                    .BUD_STA = False
                    .ATT_001 = Nothing
                    .ATT_002 = Nothing
                    .ATT_003 = Nothing
                    .ATT_004 = Nothing
                    .ATT_005 = Nothing
                    .ATT_006 = Nothing
                    .ATT_007 = Nothing
                    .ATT_008 = Nothing
                    .ATT_009 = Nothing
                    .ATT_010 = Nothing
                    .PRCT_AVAN = 0
                    .BUD_HEU = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:029| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:594 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_MANDAT"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_MANDAT"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_MANDAT"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:035| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:594 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_MANDAT] (
`NUM_MDT`, 
`TRI_NUM`, 
`NOM_MDT`, 
`NOM_ABR`, 
`CLE_ALP`, 
`NUM_CLI`, 
`COD_BUR`, 
`COD_TAR`, 
`CLB_1ER`, 
`CLB_2EM`, 
`DAT_COM`, 
`DAT_FIN`, 
`STA_MDT`, 
`COD_FRQ`, 
`COD_RCP`, 
`HRS_TOT_YON`, 
`FAC_YON`, 
`FRI_FAC_YON`, 
`VAC_YON`, 
`ETA_YON`, 
`KLM_VOI`, 
`HEU_VOI`, 
`HEU_PUB`, 
`TXT_DPL`, 
`NUM_CPT`, 
`RMQ_GEN`, 
`MNT_FRF`, 
`LOC_MDT`, 
`NOM_PNC`, 
`FRF_DPL`, 
`GEFI_GEN`, 
`GEFI_ART`, 
`BUD_DAT_COM`, 
`BUD_DAT_FIN`, 
`BUD_HRS_CTR`, 
`BUD_HON_SOC`, 
`BUD_FRA_SOC`, 
`BUD_HON_SST`, 
`BUD_FRA_SST`, 
`BUD_CAL_AUTO`, 
`BUD_STA`, 
`ATT_001`, 
`ATT_002`, 
`ATT_003`, 
`ATT_004`, 
`ATT_005`, 
`ATT_006`, 
`ATT_007`, 
`ATT_008`, 
`ATT_009`, 
`ATT_010`, 
`PRCT_AVAN`, 
`BUD_HEU`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @16, @17, @18, @19, @20, @21, @22, @23, @24, @25, @26, @27, @28, @29, @30, @31, @32, @33, @34, @35, @36, @37, @38, @39, @40, @41, @42, @43, @44, @45, @46, @47, @48, @49, @50, @51, @52)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@1", Me.TRI_NUM)
                    Cmd.Parameters.AddWithValue("@2", Me.NOM_MDT)
                    Cmd.Parameters.AddWithValue("@3", Me.NOM_ABR)
                    Cmd.Parameters.AddWithValue("@4", Me.CLE_ALP)
                    Cmd.Parameters.AddWithValue("@5", Me.NUM_CLI)
                    Cmd.Parameters.AddWithValue("@6", Me.COD_BUR)
                    Cmd.Parameters.AddWithValue("@7", Me.COD_TAR)
                    Cmd.Parameters.AddWithValue("@8", Me.CLB_1ER)
                    Cmd.Parameters.AddWithValue("@9", Me.CLB_2EM)
                    Cmd.Parameters.AddWithValue("@10", Me.DAT_COM)
                    Cmd.Parameters.AddWithValue("@11", Me.DAT_FIN)
                    Cmd.Parameters.AddWithValue("@12", Me.STA_MDT)
                    Cmd.Parameters.AddWithValue("@13", Me.COD_FRQ)
                    Cmd.Parameters.AddWithValue("@14", Me.COD_RCP)
                    Cmd.Parameters.AddWithValue("@15", Me.HRS_TOT_YON)
                    Cmd.Parameters.AddWithValue("@16", Me.FAC_YON)
                    Cmd.Parameters.AddWithValue("@17", Me.FRI_FAC_YON)
                    Cmd.Parameters.AddWithValue("@18", Me.VAC_YON)
                    Cmd.Parameters.AddWithValue("@19", Me.ETA_YON)
                    Cmd.Parameters.AddWithValue("@20", Me.KLM_VOI)
                    Cmd.Parameters.AddWithValue("@21", Me.HEU_VOI)
                    Cmd.Parameters.AddWithValue("@22", Me.HEU_PUB)
                    Cmd.Parameters.AddWithValue("@23", Me.TXT_DPL)
                    Cmd.Parameters.AddWithValue("@24", Me.NUM_CPT)
                    Cmd.Parameters.AddWithValue("@25", Me.RMQ_GEN)
                    Cmd.Parameters.AddWithValue("@26", Me.MNT_FRF)
                    Cmd.Parameters.AddWithValue("@27", Me.LOC_MDT)
                    Cmd.Parameters.AddWithValue("@28", Me.NOM_PNC)
                    Cmd.Parameters.AddWithValue("@29", Me.FRF_DPL)
                    Cmd.Parameters.AddWithValue("@30", Me.GEFI_GEN)
                    Cmd.Parameters.AddWithValue("@31", Me.GEFI_ART)
                    Cmd.Parameters.AddWithValue("@32", Me.BUD_DAT_COM)
                    Cmd.Parameters.AddWithValue("@33", Me.BUD_DAT_FIN)
                    Cmd.Parameters.AddWithValue("@34", Me.BUD_HRS_CTR)
                    Cmd.Parameters.AddWithValue("@35", Me.BUD_HON_SOC)
                    Cmd.Parameters.AddWithValue("@36", Me.BUD_FRA_SOC)
                    Cmd.Parameters.AddWithValue("@37", Me.BUD_HON_SST)
                    Cmd.Parameters.AddWithValue("@38", Me.BUD_FRA_SST)
                    Cmd.Parameters.AddWithValue("@39", Me.BUD_CAL_AUTO)
                    Cmd.Parameters.AddWithValue("@40", Me.BUD_STA)
                    Cmd.Parameters.AddWithValue("@41", Me.ATT_001)
                    Cmd.Parameters.AddWithValue("@42", Me.ATT_002)
                    Cmd.Parameters.AddWithValue("@43", Me.ATT_003)
                    Cmd.Parameters.AddWithValue("@44", Me.ATT_004)
                    Cmd.Parameters.AddWithValue("@45", Me.ATT_005)
                    Cmd.Parameters.AddWithValue("@46", Me.ATT_006)
                    Cmd.Parameters.AddWithValue("@47", Me.ATT_007)
                    Cmd.Parameters.AddWithValue("@48", Me.ATT_008)
                    Cmd.Parameters.AddWithValue("@49", Me.ATT_009)
                    Cmd.Parameters.AddWithValue("@50", Me.ATT_010)
                    Cmd.Parameters.AddWithValue("@51", Me.PRCT_AVAN)
                    Cmd.Parameters.AddWithValue("@52", Me.BUD_HEU)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:042| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:597 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_MANDAT] SET TRI_NUM = @TRI_NUM, NOM_MDT = @NOM_MDT, NOM_ABR = @NOM_ABR, CLE_ALP = @CLE_ALP, NUM_CLI = @NUM_CLI, COD_BUR = @COD_BUR, COD_TAR = @COD_TAR, CLB_1ER = @CLB_1ER, CLB_2EM = @CLB_2EM, DAT_COM = @DAT_COM, DAT_FIN = @DAT_FIN, STA_MDT = @STA_MDT, COD_FRQ = @COD_FRQ, COD_RCP = @COD_RCP, HRS_TOT_YON = @HRS_TOT_YON, FAC_YON = @FAC_YON, FRI_FAC_YON = @FRI_FAC_YON, VAC_YON = @VAC_YON, ETA_YON = @ETA_YON, KLM_VOI = @KLM_VOI, HEU_VOI = @HEU_VOI, HEU_PUB = @HEU_PUB, TXT_DPL = @TXT_DPL, NUM_CPT = @NUM_CPT, RMQ_GEN = @RMQ_GEN, MNT_FRF = @MNT_FRF, LOC_MDT = @LOC_MDT, NOM_PNC = @NOM_PNC, FRF_DPL = @FRF_DPL, GEFI_GEN = @GEFI_GEN, GEFI_ART = @GEFI_ART, BUD_DAT_COM = @BUD_DAT_COM, BUD_DAT_FIN = @BUD_DAT_FIN, BUD_HRS_CTR = @BUD_HRS_CTR, BUD_HON_SOC = @BUD_HON_SOC, BUD_FRA_SOC = @BUD_FRA_SOC, BUD_HON_SST = @BUD_HON_SST, BUD_FRA_SST = @BUD_FRA_SST, BUD_CAL_AUTO = @BUD_CAL_AUTO, BUD_STA = @BUD_STA, ATT_001 = @ATT_001, ATT_002 = @ATT_002, ATT_003 = @ATT_003, ATT_004 = @ATT_004, ATT_005 = @ATT_005, ATT_006 = @ATT_006, ATT_007 = @ATT_007, ATT_008 = @ATT_008, ATT_009 = @ATT_009, ATT_010 = @ATT_010, PRCT_AVAN = @PRCT_AVAN, BUD_HEU = @BUD_HEU WHERE NUM_MDT = @NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@TRI_NUM", TRI_NUM)
                    Cmd.Parameters.AddWithValue("@NOM_MDT", NOM_MDT)
                    Cmd.Parameters.AddWithValue("@NOM_ABR", NOM_ABR)
                    Cmd.Parameters.AddWithValue("@CLE_ALP", CLE_ALP)
                    Cmd.Parameters.AddWithValue("@NUM_CLI", NUM_CLI)
                    Cmd.Parameters.AddWithValue("@COD_BUR", COD_BUR)
                    Cmd.Parameters.AddWithValue("@COD_TAR", COD_TAR)
                    Cmd.Parameters.AddWithValue("@CLB_1ER", CLB_1ER)
                    Cmd.Parameters.AddWithValue("@CLB_2EM", CLB_2EM)
                    Cmd.Parameters.AddWithValue("@DAT_COM", DAT_COM)
                    Cmd.Parameters.AddWithValue("@DAT_FIN", DAT_FIN)
                    Cmd.Parameters.AddWithValue("@STA_MDT", STA_MDT)
                    Cmd.Parameters.AddWithValue("@COD_FRQ", COD_FRQ)
                    Cmd.Parameters.AddWithValue("@COD_RCP", COD_RCP)
                    Cmd.Parameters.AddWithValue("@HRS_TOT_YON", HRS_TOT_YON)
                    Cmd.Parameters.AddWithValue("@FAC_YON", FAC_YON)
                    Cmd.Parameters.AddWithValue("@FRI_FAC_YON", FRI_FAC_YON)
                    Cmd.Parameters.AddWithValue("@VAC_YON", VAC_YON)
                    Cmd.Parameters.AddWithValue("@ETA_YON", ETA_YON)
                    Cmd.Parameters.AddWithValue("@KLM_VOI", KLM_VOI)
                    Cmd.Parameters.AddWithValue("@HEU_VOI", HEU_VOI)
                    Cmd.Parameters.AddWithValue("@HEU_PUB", HEU_PUB)
                    Cmd.Parameters.AddWithValue("@TXT_DPL", TXT_DPL)
                    Cmd.Parameters.AddWithValue("@NUM_CPT", NUM_CPT)
                    Cmd.Parameters.AddWithValue("@RMQ_GEN", RMQ_GEN)
                    Cmd.Parameters.AddWithValue("@MNT_FRF", MNT_FRF)
                    Cmd.Parameters.AddWithValue("@LOC_MDT", LOC_MDT)
                    Cmd.Parameters.AddWithValue("@NOM_PNC", NOM_PNC)
                    Cmd.Parameters.AddWithValue("@FRF_DPL", FRF_DPL)
                    Cmd.Parameters.AddWithValue("@GEFI_GEN", GEFI_GEN)
                    Cmd.Parameters.AddWithValue("@GEFI_ART", GEFI_ART)
                    Cmd.Parameters.AddWithValue("@BUD_DAT_COM", BUD_DAT_COM)
                    Cmd.Parameters.AddWithValue("@BUD_DAT_FIN", BUD_DAT_FIN)
                    Cmd.Parameters.AddWithValue("@BUD_HRS_CTR", BUD_HRS_CTR)
                    Cmd.Parameters.AddWithValue("@BUD_HON_SOC", BUD_HON_SOC)
                    Cmd.Parameters.AddWithValue("@BUD_FRA_SOC", BUD_FRA_SOC)
                    Cmd.Parameters.AddWithValue("@BUD_HON_SST", BUD_HON_SST)
                    Cmd.Parameters.AddWithValue("@BUD_FRA_SST", BUD_FRA_SST)
                    Cmd.Parameters.AddWithValue("@BUD_CAL_AUTO", BUD_CAL_AUTO)
                    Cmd.Parameters.AddWithValue("@BUD_STA", BUD_STA)
                    Cmd.Parameters.AddWithValue("@ATT_001", ATT_001)
                    Cmd.Parameters.AddWithValue("@ATT_002", ATT_002)
                    Cmd.Parameters.AddWithValue("@ATT_003", ATT_003)
                    Cmd.Parameters.AddWithValue("@ATT_004", ATT_004)
                    Cmd.Parameters.AddWithValue("@ATT_005", ATT_005)
                    Cmd.Parameters.AddWithValue("@ATT_006", ATT_006)
                    Cmd.Parameters.AddWithValue("@ATT_007", ATT_007)
                    Cmd.Parameters.AddWithValue("@ATT_008", ATT_008)
                    Cmd.Parameters.AddWithValue("@ATT_009", ATT_009)
                    Cmd.Parameters.AddWithValue("@ATT_010", ATT_010)
                    Cmd.Parameters.AddWithValue("@PRCT_AVAN", PRCT_AVAN)
                    Cmd.Parameters.AddWithValue("@BUD_HEU", BUD_HEU)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:050| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:597 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_MANDAT] WHERE NUM_MDT =@NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{9}"
#Region "[On] |2019/07/16 23h22:060| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:598 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:083| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:598 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:091| <05.00.02> <Function> <> |.List()|List(Of MDT_MANDAT)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:599 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_MANDAT)
                Dim Result As New List(Of MDT_MANDAT)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_MANDAT(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), "", Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), "", Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), "", Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), "", Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), "", Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), New DateTime(1970, 1, 1), Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), New DateTime(1970, 1, 1), Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), "", Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), "", Row.Item(13)),
IIf(IsDBNull(Row.Item(14)), "", Row.Item(14)),
IIf(IsDBNull(Row.Item(15)), False, Row.Item(15)),
IIf(IsDBNull(Row.Item(16)), False, Row.Item(16)),
IIf(IsDBNull(Row.Item(17)), False, Row.Item(17)),
IIf(IsDBNull(Row.Item(18)), False, Row.Item(18)),
IIf(IsDBNull(Row.Item(19)), False, Row.Item(19)),
IIf(IsDBNull(Row.Item(20)), 0, Row.Item(20)),
IIf(IsDBNull(Row.Item(21)), 0, Row.Item(21)),
IIf(IsDBNull(Row.Item(22)), 0, Row.Item(22)),
IIf(IsDBNull(Row.Item(23)), "", Row.Item(23)),
IIf(IsDBNull(Row.Item(24)), "", Row.Item(24)),
IIf(IsDBNull(Row.Item(25)), "", Row.Item(25)),
IIf(IsDBNull(Row.Item(26)), 0, Row.Item(26)),
IIf(IsDBNull(Row.Item(27)), "", Row.Item(27)),
IIf(IsDBNull(Row.Item(28)), "", Row.Item(28)),
IIf(IsDBNull(Row.Item(29)), 0, Row.Item(29)),
IIf(IsDBNull(Row.Item(30)), 0, Row.Item(30)),
IIf(IsDBNull(Row.Item(31)), 0, Row.Item(31)),
IIf(IsDBNull(Row.Item(32)), New DateTime(1970, 1, 1), Row.Item(32)),
IIf(IsDBNull(Row.Item(33)), New DateTime(1970, 1, 1), Row.Item(33)),
IIf(IsDBNull(Row.Item(34)), 0, Row.Item(34)),
IIf(IsDBNull(Row.Item(35)), 0, Row.Item(35)),
IIf(IsDBNull(Row.Item(36)), 0, Row.Item(36)),
IIf(IsDBNull(Row.Item(37)), 0, Row.Item(37)),
IIf(IsDBNull(Row.Item(38)), 0, Row.Item(38)),
IIf(IsDBNull(Row.Item(39)), False, Row.Item(39)),
IIf(IsDBNull(Row.Item(40)), False, Row.Item(40)),
IIf(IsDBNull(Row.Item(41)), "", Row.Item(41)),
IIf(IsDBNull(Row.Item(42)), "", Row.Item(42)),
IIf(IsDBNull(Row.Item(43)), "", Row.Item(43)),
IIf(IsDBNull(Row.Item(44)), "", Row.Item(44)),
IIf(IsDBNull(Row.Item(45)), "", Row.Item(45)),
IIf(IsDBNull(Row.Item(46)), "", Row.Item(46)),
IIf(IsDBNull(Row.Item(47)), "", Row.Item(47)),
IIf(IsDBNull(Row.Item(48)), "", Row.Item(48)),
IIf(IsDBNull(Row.Item(49)), "", Row.Item(49)),
IIf(IsDBNull(Row.Item(50)), "", Row.Item(50)),
IIf(IsDBNull(Row.Item(51)), 0, Row.Item(51)),
      IIf(IsDBNull(Row.Item(52)), 0, Row.Item(52)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:099| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_MANDAT)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:599 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_MANDAT)
                Dim Result As New List(Of MDT_MANDAT)
                Dim C As New MDT_MANDAT
                For Each Element As MDT_MANDAT In C.List
                    If Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NOM_MDT.ToLower() = Search.ToLower() Or Element.NOM_ABR.ToLower() = Search.ToLower() Or Element.CLE_ALP.ToLower() = Search.ToLower() Or Element.NUM_CLI.ToLower() = Search.ToLower() Or Element.COD_BUR.ToLower() = Search.ToLower() Or Element.COD_TAR.ToLower() = Search.ToLower() Or Element.CLB_1ER.ToLower() = Search.ToLower() Or Element.CLB_2EM.ToLower() = Search.ToLower() Or Element.STA_MDT.ToLower() = Search.ToLower() Or Element.COD_FRQ.ToLower() = Search.ToLower() Or Element.COD_RCP.ToLower() = Search.ToLower() Or Element.TXT_DPL.ToLower() = Search.ToLower() Or Element.NUM_CPT.ToLower() = Search.ToLower() Or Element.RMQ_GEN.ToLower() = Search.ToLower() Or Element.LOC_MDT.ToLower() = Search.ToLower() Or Element.NOM_PNC.ToLower() = Search.ToLower() Or Element.ATT_001.ToLower() = Search.ToLower() Or Element.ATT_002.ToLower() = Search.ToLower() Or Element.ATT_003.ToLower() = Search.ToLower() Or Element.ATT_004.ToLower() = Search.ToLower() Or Element.ATT_005.ToLower() = Search.ToLower() Or Element.ATT_006.ToLower() = Search.ToLower() Or Element.ATT_007.ToLower() = Search.ToLower() Or Element.ATT_008.ToLower() = Search.ToLower() Or Element.ATT_009.ToLower() = Search.ToLower() Or Element.ATT_010.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:106| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_MANDAT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:599 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_MANDAT)
                Dim Result As New List(Of MDT_MANDAT)
                Dim C As New MDT_MANDAT
                For Each Element As MDT_MANDAT In C.List
                    If Val(Element.TRI_NUM) = Search Or Val(Element.KLM_VOI) = Search Or Val(Element.HEU_VOI) = Search Or Val(Element.HEU_PUB) = Search Or Val(Element.MNT_FRF) = Search Or Val(Element.FRF_DPL) = Search Or Val(Element.GEFI_GEN) = Search Or Val(Element.GEFI_ART) = Search Or Val(Element.BUD_HRS_CTR) = Search Or Val(Element.BUD_HON_SOC) = Search Or Val(Element.BUD_FRA_SOC) = Search Or Val(Element.BUD_HON_SST) = Search Or Val(Element.BUD_FRA_SST) = Search Or Val(Element.PRCT_AVAN) = Search Or Val(Element.BUD_HEU) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:112| <05.00.05> <Function> <> |.SearchByDate()|List(Of MDT_MANDAT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:599 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDate(ByVal Search As DateTime) As List(Of MDT_MANDAT)
                Dim Result As New List(Of MDT_MANDAT)
                Dim C As New MDT_MANDAT
                For Each Element As MDT_MANDAT In C.List
                    If Element.DAT_COM = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:119| <05.00.06> <Function> <> |.SearchByDateRange()|List(Of MDT_MANDAT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:600 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="From_Date">All element from this date and this date included.</param>
            ''' <param name="Until_Date">All element before and including this date.</param>

            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDateRange(ByVal From_Date As DateTime,
ByVal Until_Date As DateTime) As List(Of MDT_MANDAT)
                Dim Result As New List(Of MDT_MANDAT)
                Dim C As New MDT_MANDAT
                For Each Element As MDT_MANDAT In C.List
                    If (Element.DAT_COM) >= From_Date And (Element.DAT_COM) <= Until_Date Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:126| <05.00.07> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:603 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_MDT
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:133| <05.00.08> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:603 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:141| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:606 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:153| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:606 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:164| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:607 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:171| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:607 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:180| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:607 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:187| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:607 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:195| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:608 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:200| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:608 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:207| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:608 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:213| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:608 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:221| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:608 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:229| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:609 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:256| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:609 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:260| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:610 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="TRI_NUM">(Set|Get) The TRI_NUM as Integer.</param>
            ''' <param name="NOM_MDT">(Set|Get) The NOM_MDT as String.</param>
            ''' <param name="NOM_ABR">(Set|Get) The NOM_ABR as String.</param>
            ''' <param name="CLE_ALP">(Set|Get) The CLE_ALP as String.</param>
            ''' <param name="NUM_CLI">(Set|Get) The NUM_CLI as String.</param>
            ''' <param name="COD_BUR">(Set|Get) The COD_BUR as String.</param>
            ''' <param name="COD_TAR">(Set|Get) The COD_TAR as String.</param>
            ''' <param name="CLB_1ER">(Set|Get) The CLB_1ER as String.</param>
            ''' <param name="CLB_2EM">(Set|Get) The CLB_2EM as String.</param>
            ''' <param name="DAT_COM">(Set|Get) The DAT_COM as DateTime.</param>
            ''' <param name="DAT_FIN">(Set|Get) The DAT_FIN as DateTime.</param>
            ''' <param name="STA_MDT">(Set|Get) The STA_MDT as String.</param>
            ''' <param name="COD_FRQ">(Set|Get) The COD_FRQ as String.</param>
            ''' <param name="COD_RCP">(Set|Get) The COD_RCP as String.</param>
            ''' <param name="HRS_TOT_YON">(Set|Get) The HRS_TOT_YON as Boolean.</param>
            ''' <param name="FAC_YON">(Set|Get) The FAC_YON as Boolean.</param>
            ''' <param name="FRI_FAC_YON">(Set|Get) The FRI_FAC_YON as Boolean.</param>
            ''' <param name="VAC_YON">(Set|Get) The VAC_YON as Boolean.</param>
            ''' <param name="ETA_YON">(Set|Get) The ETA_YON as Boolean.</param>
            ''' <param name="KLM_VOI">(Set|Get) The KLM_VOI as Double.</param>
            ''' <param name="HEU_VOI">(Set|Get) The HEU_VOI as Double.</param>
            ''' <param name="HEU_PUB">(Set|Get) The HEU_PUB as Double.</param>
            ''' <param name="TXT_DPL">(Set|Get) The TXT_DPL as String.</param>
            ''' <param name="NUM_CPT">(Set|Get) The NUM_CPT as String.</param>
            ''' <param name="RMQ_GEN">(Set|Get) The RMQ_GEN as String.</param>
            ''' <param name="MNT_FRF">(Set|Get) The MNT_FRF as Double.</param>
            ''' <param name="LOC_MDT">(Set|Get) The LOC_MDT as String.</param>
            ''' <param name="NOM_PNC">(Set|Get) The NOM_PNC as String.</param>
            ''' <param name="FRF_DPL">(Set|Get) The FRF_DPL as Double.</param>
            ''' <param name="GEFI_GEN">(Set|Get) The GEFI_GEN as Integer.</param>
            ''' <param name="GEFI_ART">(Set|Get) The GEFI_ART as Integer.</param>
            ''' <param name="BUD_DAT_COM">(Set|Get) The BUD_DAT_COM as DateTime.</param>
            ''' <param name="BUD_DAT_FIN">(Set|Get) The BUD_DAT_FIN as DateTime.</param>
            ''' <param name="BUD_HRS_CTR">(Set|Get) The BUD_HRS_CTR as Double.</param>
            ''' <param name="BUD_HON_SOC">(Set|Get) The BUD_HON_SOC as Double.</param>
            ''' <param name="BUD_FRA_SOC">(Set|Get) The BUD_FRA_SOC as Double.</param>
            ''' <param name="BUD_HON_SST">(Set|Get) The BUD_HON_SST as Double.</param>
            ''' <param name="BUD_FRA_SST">(Set|Get) The BUD_FRA_SST as Double.</param>
            ''' <param name="BUD_CAL_AUTO">(Set|Get) The BUD_CAL_AUTO as Boolean.</param>
            ''' <param name="BUD_STA">(Set|Get) The BUD_STA as Boolean.</param>
            ''' <param name="ATT_001">(Set|Get) The ATT_001 as String.</param>
            ''' <param name="ATT_002">(Set|Get) The ATT_002 as String.</param>
            ''' <param name="ATT_003">(Set|Get) The ATT_003 as String.</param>
            ''' <param name="ATT_004">(Set|Get) The ATT_004 as String.</param>
            ''' <param name="ATT_005">(Set|Get) The ATT_005 as String.</param>
            ''' <param name="ATT_006">(Set|Get) The ATT_006 as String.</param>
            ''' <param name="ATT_007">(Set|Get) The ATT_007 as String.</param>
            ''' <param name="ATT_008">(Set|Get) The ATT_008 as String.</param>
            ''' <param name="ATT_009">(Set|Get) The ATT_009 as String.</param>
            ''' <param name="ATT_010">(Set|Get) The ATT_010 as String.</param>
            ''' <param name="PRCT_AVAN">(Set|Get) The PRCT_AVAN as Double.</param>
            ''' <param name="BUD_HEU">(Set|Get) The BUD_HEU as Double.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_MDT As String,
ByVal TRI_NUM As Integer,
ByVal NOM_MDT As String,
ByVal NOM_ABR As String,
ByVal CLE_ALP As String,
ByVal NUM_CLI As String,
ByVal COD_BUR As String,
ByVal COD_TAR As String,
ByVal CLB_1ER As String,
ByVal CLB_2EM As String,
ByVal DAT_COM As DateTime,
ByVal DAT_FIN As DateTime,
ByVal STA_MDT As String,
ByVal COD_FRQ As String,
ByVal COD_RCP As String,
ByVal HRS_TOT_YON As Boolean,
ByVal FAC_YON As Boolean,
ByVal FRI_FAC_YON As Boolean,
ByVal VAC_YON As Boolean,
ByVal ETA_YON As Boolean,
ByVal KLM_VOI As Double,
ByVal HEU_VOI As Double,
ByVal HEU_PUB As Double,
ByVal TXT_DPL As String,
ByVal NUM_CPT As String,
ByVal RMQ_GEN As String,
ByVal MNT_FRF As Double,
ByVal LOC_MDT As String,
ByVal NOM_PNC As String,
ByVal FRF_DPL As Double,
ByVal GEFI_GEN As Integer,
ByVal GEFI_ART As Integer,
ByVal BUD_DAT_COM As DateTime,
ByVal BUD_DAT_FIN As DateTime,
ByVal BUD_HRS_CTR As Double,
ByVal BUD_HON_SOC As Double,
ByVal BUD_FRA_SOC As Double,
ByVal BUD_HON_SST As Double,
ByVal BUD_FRA_SST As Double,
ByVal BUD_CAL_AUTO As Boolean,
ByVal BUD_STA As Boolean,
ByVal ATT_001 As String,
ByVal ATT_002 As String,
ByVal ATT_003 As String,
ByVal ATT_004 As String,
ByVal ATT_005 As String,
ByVal ATT_006 As String,
ByVal ATT_007 As String,
ByVal ATT_008 As String,
ByVal ATT_009 As String,
ByVal ATT_010 As String,
ByVal PRCT_AVAN As Double,
ByVal BUD_HEU As Double)
                With Me
                    Clear()
                    Reset()
                    .NUM_MDT = NUM_MDT
                    .TRI_NUM = TRI_NUM
                    .NOM_MDT = NOM_MDT
                    .NOM_ABR = NOM_ABR
                    .CLE_ALP = CLE_ALP
                    .NUM_CLI = NUM_CLI
                    .COD_BUR = COD_BUR
                    .COD_TAR = COD_TAR
                    .CLB_1ER = CLB_1ER
                    .CLB_2EM = CLB_2EM
                    .DAT_COM = DAT_COM
                    .DAT_FIN = DAT_FIN
                    .STA_MDT = STA_MDT
                    .COD_FRQ = COD_FRQ
                    .COD_RCP = COD_RCP
                    .HRS_TOT_YON = HRS_TOT_YON
                    .FAC_YON = FAC_YON
                    .FRI_FAC_YON = FRI_FAC_YON
                    .VAC_YON = VAC_YON
                    .ETA_YON = ETA_YON
                    .KLM_VOI = KLM_VOI
                    .HEU_VOI = HEU_VOI
                    .HEU_PUB = HEU_PUB
                    .TXT_DPL = TXT_DPL
                    .NUM_CPT = NUM_CPT
                    .RMQ_GEN = RMQ_GEN
                    .MNT_FRF = MNT_FRF
                    .LOC_MDT = LOC_MDT
                    .NOM_PNC = NOM_PNC
                    .FRF_DPL = FRF_DPL
                    .GEFI_GEN = GEFI_GEN
                    .GEFI_ART = GEFI_ART
                    .BUD_DAT_COM = BUD_DAT_COM
                    .BUD_DAT_FIN = BUD_DAT_FIN
                    .BUD_HRS_CTR = BUD_HRS_CTR
                    .BUD_HON_SOC = BUD_HON_SOC
                    .BUD_FRA_SOC = BUD_FRA_SOC
                    .BUD_HON_SST = BUD_HON_SST
                    .BUD_FRA_SST = BUD_FRA_SST
                    .BUD_CAL_AUTO = BUD_CAL_AUTO
                    .BUD_STA = BUD_STA
                    .ATT_001 = ATT_001
                    .ATT_002 = ATT_002
                    .ATT_003 = ATT_003
                    .ATT_004 = ATT_004
                    .ATT_005 = ATT_005
                    .ATT_006 = ATT_006
                    .ATT_007 = ATT_007
                    .ATT_008 = ATT_008
                    .ATT_009 = ATT_009
                    .ATT_010 = ATT_010
                    .PRCT_AVAN = PRCT_AVAN
                    .BUD_HEU = BUD_HEU
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:183| <08.00.00> <Class> <> |.MDT_MODELE_ETAPE|Class|{40} |Production Cost : 49.9|Selling Price : 124.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_MODELE_ETAPE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:183
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{13}||0.8| |10.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{13}||0.5| |6.5
        '''    |12| |Parameter  |{18}||0.5| |9
        '''    |Production Cost             |49.9
        '''    |Selling Price without VAT   |124.75
        '''    |Total TVA                   |9.61
        '''    |Grand Total                 |134.36
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:650 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_MODELE_ETAPE
#Region "<1> [Property]{13}"
#Region "[On] |2019/07/16 23h22:185| <01.00.00> <Property> <Columns> |.COD_MOD()|String|"' (Set|Get) The COD_MOD as String.
            Private _COD_MOD As String
            '''    <Summary>
            '''     (Set|Get) The COD_MOD as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:650 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_MOD as String.")>
            Public Property COD_MOD() As String
                Get
                    Return _COD_MOD
                End Get
                Set(ByVal Value As String)
                    _COD_MOD = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_MOD as String.

#Region "[On] |2019/07/16 23h22:191| <01.00.01> <Property> <Columns> |.NUM_ETA()|String|"' (Set|Get) The NUM_ETA as String.
            Private _NUM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NUM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:651 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_ETA as String.")>
            Public Property NUM_ETA() As String
                Get
                    Return _NUM_ETA
                End Get
                Set(ByVal Value As String)
                    _NUM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_ETA as String.

#Region "[On] |2019/07/16 23h22:197| <01.00.02> <Property> <Columns> |.TRI_NUM()|Integer|"' (Set|Get) The TRI_NUM as Integer.
            Private _TRI_NUM As Integer
            '''    <Summary>
            '''     (Set|Get) The TRI_NUM as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:651 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TRI_NUM as Integer.")>
            Public Property TRI_NUM() As Integer
                Get
                    Return _TRI_NUM
                End Get
                Set(ByVal Value As Integer)
                    _TRI_NUM = Value
                End Set
            End Property
#End Region '(Set|Get) The TRI_NUM as Integer.

#Region "[On] |2019/07/16 23h22:203| <01.00.03> <Property> <Columns> |.NOM_ETA()|String|"' (Set|Get) The NOM_ETA as String.
            Private _NOM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NOM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:651 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_ETA as String.")>
            Public Property NOM_ETA() As String
                Get
                    Return _NOM_ETA
                End Get
                Set(ByVal Value As String)
                    _NOM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_ETA as String.

#Region "[On] |2019/07/16 23h22:208| <01.00.04> <Property> <Columns> |.COD_TAR()|String|"' (Set|Get) The COD_TAR as String.
            Private _COD_TAR As String
            '''    <Summary>
            '''     (Set|Get) The COD_TAR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:651 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TAR as String.")>
            Public Property COD_TAR() As String
                Get
                    Return _COD_TAR
                End Get
                Set(ByVal Value As String)
                    _COD_TAR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TAR as String.

#Region "[On] |2019/07/16 23h22:214| <01.00.05> <Property> <Columns> |.COD_CAT()|String|"' (Set|Get) The COD_CAT as String.
            Private _COD_CAT As String
            '''    <Summary>
            '''     (Set|Get) The COD_CAT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:652 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_CAT as String.")>
            Public Property COD_CAT() As String
                Get
                    Return _COD_CAT
                End Get
                Set(ByVal Value As String)
                    _COD_CAT = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_CAT as String.

#Region "[On] |2019/07/16 23h22:219| <01.00.06> <Property> <Columns> |.COD_RCP()|String|"' (Set|Get) The COD_RCP as String.
            Private _COD_RCP As String
            '''    <Summary>
            '''     (Set|Get) The COD_RCP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:671 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_RCP as String.")>
            Public Property COD_RCP() As String
                Get
                    Return _COD_RCP
                End Get
                Set(ByVal Value As String)
                    _COD_RCP = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_RCP as String.

#Region "[On] |2019/07/16 23h22:227| <01.00.07> <Property> <Columns> |.HRS_TOT_YON()|Boolean|"' (Set|Get) The HRS_TOT_YON as Boolean.
            Private _HRS_TOT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The HRS_TOT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:673 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HRS_TOT_YON as Boolean.")>
            Public Property HRS_TOT_YON() As Boolean
                Get
                    Return _HRS_TOT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _HRS_TOT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The HRS_TOT_YON as Boolean.

#Region "[On] |2019/07/16 23h22:233| <01.00.08> <Property> <Columns> |.FAC_YON()|Boolean|"' (Set|Get) The FAC_YON as Boolean.
            Private _FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:673 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_YON as Boolean.")>
            Public Property FAC_YON() As Boolean
                Get
                    Return _FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h22:239| <01.00.09> <Property> <Columns> |.TYP_ETA()|String|"' (Set|Get) The TYP_ETA as String.
            Private _TYP_ETA As String
            '''    <Summary>
            '''     (Set|Get) The TYP_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:674 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_ETA as String.")>
            Public Property TYP_ETA() As String
                Get
                    Return _TYP_ETA
                End Get
                Set(ByVal Value As String)
                    _TYP_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_ETA as String.

#Region "[On] |2019/07/16 23h22:244| <01.00.10> <Property> <Columns> |.GRP_PRS()|String|"' (Set|Get) The GRP_PRS as String.
            Private _GRP_PRS As String
            '''    <Summary>
            '''     (Set|Get) The GRP_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:674 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GRP_PRS as String.")>
            Public Property GRP_PRS() As String
                Get
                    Return _GRP_PRS
                End Get
                Set(ByVal Value As String)
                    _GRP_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The GRP_PRS as String.

#Region "[On] |2019/07/16 23h22:255| <01.00.11> <Property> <Columns> |.GRP_UNQ_YON()|Boolean|"' (Set|Get) The GRP_UNQ_YON as Boolean.
            Private _GRP_UNQ_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The GRP_UNQ_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:674 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GRP_UNQ_YON as Boolean.")>
            Public Property GRP_UNQ_YON() As Boolean
                Get
                    Return _GRP_UNQ_YON
                End Get
                Set(ByVal Value As Boolean)
                    _GRP_UNQ_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The GRP_UNQ_YON as Boolean.

#Region "[On] |2019/07/16 23h22:269| <01.00.12> <Property> <Columns> |.GEFI_ART()|Integer|"' (Set|Get) The GEFI_ART as Integer.
            Private _GEFI_ART As Integer
            '''    <Summary>
            '''     (Set|Get) The GEFI_ART as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:674 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GEFI_ART as Integer.")>
            Public Property GEFI_ART() As Integer
                Get
                    Return _GEFI_ART
                End Get
                Set(ByVal Value As Integer)
                    _GEFI_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The GEFI_ART as Integer.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:275| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{12}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:674 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_MOD as String.</summary>
                [COD_MOD] = 0
                ''' <summary>(Set|Get) The NUM_ETA as String.</summary>
                [NUM_ETA] = 1
                ''' <summary>(Set|Get) The TRI_NUM as Integer.</summary>
                [TRI_NUM] = 2
                ''' <summary>(Set|Get) The NOM_ETA as String.</summary>
                [NOM_ETA] = 3
                ''' <summary>(Set|Get) The COD_TAR as String.</summary>
                [COD_TAR] = 4
                ''' <summary>(Set|Get) The COD_CAT as String.</summary>
                [COD_CAT] = 5
                ''' <summary>(Set|Get) The COD_RCP as String.</summary>
                [COD_RCP] = 6
                ''' <summary>(Set|Get) The HRS_TOT_YON as Boolean.</summary>
                [HRS_TOT_YON] = 7
                ''' <summary>(Set|Get) The FAC_YON as Boolean.</summary>
                [FAC_YON] = 8
                ''' <summary>(Set|Get) The TYP_ETA as String.</summary>
                [TYP_ETA] = 9
                ''' <summary>(Set|Get) The GRP_PRS as String.</summary>
                [GRP_PRS] = 10
                ''' <summary>(Set|Get) The GRP_UNQ_YON as Boolean.</summary>
                [GRP_UNQ_YON] = 11
                ''' <summary>(Set|Get) The GEFI_ART as Integer.</summary>
                [GEFI_ART] = 12
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:282| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:677 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_MOD = Nothing
                    .NUM_ETA = Nothing
                    .TRI_NUM = 0
                    .NOM_ETA = Nothing
                    .COD_TAR = Nothing
                    .COD_CAT = Nothing
                    .COD_RCP = Nothing
                    .HRS_TOT_YON = False
                    .FAC_YON = False
                    .TYP_ETA = Nothing
                    .GRP_PRS = Nothing
                    .GRP_UNQ_YON = False
                    .GEFI_ART = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:288| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:677 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_MODELE_ETAPE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_MODELE_ETAPE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_MODELE_ETAPE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:294| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:677 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_MODELE_ETAPE] (
`COD_MOD`, 
`NUM_ETA`, 
`TRI_NUM`, 
`NOM_ETA`, 
`COD_TAR`, 
`COD_CAT`, 
`COD_RCP`, 
`HRS_TOT_YON`, 
`FAC_YON`, 
`TYP_ETA`, 
`GRP_PRS`, 
`GRP_UNQ_YON`, 
`GEFI_ART`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_MOD)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_ETA)
                    Cmd.Parameters.AddWithValue("@2", Me.TRI_NUM)
                    Cmd.Parameters.AddWithValue("@3", Me.NOM_ETA)
                    Cmd.Parameters.AddWithValue("@4", Me.COD_TAR)
                    Cmd.Parameters.AddWithValue("@5", Me.COD_CAT)
                    Cmd.Parameters.AddWithValue("@6", Me.COD_RCP)
                    Cmd.Parameters.AddWithValue("@7", Me.HRS_TOT_YON)
                    Cmd.Parameters.AddWithValue("@8", Me.FAC_YON)
                    Cmd.Parameters.AddWithValue("@9", Me.TYP_ETA)
                    Cmd.Parameters.AddWithValue("@10", Me.GRP_PRS)
                    Cmd.Parameters.AddWithValue("@11", Me.GRP_UNQ_YON)
                    Cmd.Parameters.AddWithValue("@12", Me.GEFI_ART)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:301| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:677 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_MODELE_ETAPE] SET NUM_ETA = @NUM_ETA, TRI_NUM = @TRI_NUM, NOM_ETA = @NOM_ETA, COD_TAR = @COD_TAR, COD_CAT = @COD_CAT, COD_RCP = @COD_RCP, HRS_TOT_YON = @HRS_TOT_YON, FAC_YON = @FAC_YON, TYP_ETA = @TYP_ETA, GRP_PRS = @GRP_PRS, GRP_UNQ_YON = @GRP_UNQ_YON, GEFI_ART = @GEFI_ART WHERE COD_MOD = @COD_MOD"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_ETA", NUM_ETA)
                    Cmd.Parameters.AddWithValue("@TRI_NUM", TRI_NUM)
                    Cmd.Parameters.AddWithValue("@NOM_ETA", NOM_ETA)
                    Cmd.Parameters.AddWithValue("@COD_TAR", COD_TAR)
                    Cmd.Parameters.AddWithValue("@COD_CAT", COD_CAT)
                    Cmd.Parameters.AddWithValue("@COD_RCP", COD_RCP)
                    Cmd.Parameters.AddWithValue("@HRS_TOT_YON", HRS_TOT_YON)
                    Cmd.Parameters.AddWithValue("@FAC_YON", FAC_YON)
                    Cmd.Parameters.AddWithValue("@TYP_ETA", TYP_ETA)
                    Cmd.Parameters.AddWithValue("@GRP_PRS", GRP_PRS)
                    Cmd.Parameters.AddWithValue("@GRP_UNQ_YON", GRP_UNQ_YON)
                    Cmd.Parameters.AddWithValue("@GEFI_ART", GEFI_ART)
                    Cmd.Parameters.AddWithValue("@COD_MOD", COD_MOD)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:307| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:677 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_MODELE_ETAPE] WHERE COD_MOD =@COD_MOD"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_MOD", COD_MOD)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h22:312| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:677 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:318| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:677 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:334| <05.00.02> <Function> <> |.List()|List(Of MDT_MODELE_ETAPE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:678 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_MODELE_ETAPE)
                Dim Result As New List(Of MDT_MODELE_ETAPE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_MODELE_ETAPE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), 0, Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), "", Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), "", Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), False, Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), False, Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), "", Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), "", Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), False, Row.Item(11)),
      IIf(IsDBNull(Row.Item(12)), 0, Row.Item(12)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:347| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_MODELE_ETAPE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:678 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_MODELE_ETAPE)
                Dim Result As New List(Of MDT_MODELE_ETAPE)
                Dim C As New MDT_MODELE_ETAPE
                For Each Element As MDT_MODELE_ETAPE In C.List
                    If Element.COD_MOD.ToLower() = Search.ToLower() Or Element.NUM_ETA.ToLower() = Search.ToLower() Or Element.NOM_ETA.ToLower() = Search.ToLower() Or Element.COD_TAR.ToLower() = Search.ToLower() Or Element.COD_CAT.ToLower() = Search.ToLower() Or Element.COD_RCP.ToLower() = Search.ToLower() Or Element.TYP_ETA.ToLower() = Search.ToLower() Or Element.GRP_PRS.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:352| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_MODELE_ETAPE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:681 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_MODELE_ETAPE)
                Dim Result As New List(Of MDT_MODELE_ETAPE)
                Dim C As New MDT_MODELE_ETAPE
                For Each Element As MDT_MODELE_ETAPE In C.List
                    If Val(Element.TRI_NUM) = Search Or Val(Element.GEFI_ART) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:358| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:681 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_MOD
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:363| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:681 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:369| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:681 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:375| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:681 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:383| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:683 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:389| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:683 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:410| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:683 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:416| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:685 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:422| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:685 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:426| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:685 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:432| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:685 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:437| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:685 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:443| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:686 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:449| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:686 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:460| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:689 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:462| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:689 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_MOD">(Set|Get) The COD_MOD as String.</param>
            ''' <param name="NUM_ETA">(Set|Get) The NUM_ETA as String.</param>
            ''' <param name="TRI_NUM">(Set|Get) The TRI_NUM as Integer.</param>
            ''' <param name="NOM_ETA">(Set|Get) The NOM_ETA as String.</param>
            ''' <param name="COD_TAR">(Set|Get) The COD_TAR as String.</param>
            ''' <param name="COD_CAT">(Set|Get) The COD_CAT as String.</param>
            ''' <param name="COD_RCP">(Set|Get) The COD_RCP as String.</param>
            ''' <param name="HRS_TOT_YON">(Set|Get) The HRS_TOT_YON as Boolean.</param>
            ''' <param name="FAC_YON">(Set|Get) The FAC_YON as Boolean.</param>
            ''' <param name="TYP_ETA">(Set|Get) The TYP_ETA as String.</param>
            ''' <param name="GRP_PRS">(Set|Get) The GRP_PRS as String.</param>
            ''' <param name="GRP_UNQ_YON">(Set|Get) The GRP_UNQ_YON as Boolean.</param>
            ''' <param name="GEFI_ART">(Set|Get) The GEFI_ART as Integer.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_MOD As String,
ByVal NUM_ETA As String,
ByVal TRI_NUM As Integer,
ByVal NOM_ETA As String,
ByVal COD_TAR As String,
ByVal COD_CAT As String,
ByVal COD_RCP As String,
ByVal HRS_TOT_YON As Boolean,
ByVal FAC_YON As Boolean,
ByVal TYP_ETA As String,
ByVal GRP_PRS As String,
ByVal GRP_UNQ_YON As Boolean,
ByVal GEFI_ART As Integer)
                With Me
                    Clear()
                    Reset()
                    .COD_MOD = COD_MOD
                    .NUM_ETA = NUM_ETA
                    .TRI_NUM = TRI_NUM
                    .NOM_ETA = NOM_ETA
                    .COD_TAR = COD_TAR
                    .COD_CAT = COD_CAT
                    .COD_RCP = COD_RCP
                    .HRS_TOT_YON = HRS_TOT_YON
                    .FAC_YON = FAC_YON
                    .TYP_ETA = TYP_ETA
                    .GRP_PRS = GRP_PRS
                    .GRP_UNQ_YON = GRP_UNQ_YON
                    .GEFI_ART = GEFI_ART
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:658| <08.00.00> <Class> <> |.MDT_MODELE_SEMAINE|Class|{36} |Production Cost : 42.7|Selling Price : 106.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_MODELE_SEMAINE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:658
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{9}||0.8| |7.2
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{9}||0.5| |4.5
        '''    |12| |Parameter  |{14}||0.5| |7
        '''    |Production Cost             |42.7
        '''    |Selling Price without VAT   |106.75
        '''    |Total TVA                   |8.22
        '''    |Grand Total                 |114.97
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:704 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_MODELE_SEMAINE
#Region "<1> [Property]{9}"
#Region "[On] |2019/07/16 23h22:659| <01.00.00> <Property> <Columns> |.NUM_SEQ()|Integer|"' (Set|Get) The NUM_SEQ as Integer.
            Private _NUM_SEQ As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:704 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ as Integer.")>
            Public Property NUM_SEQ() As Integer
                Get
                    Return _NUM_SEQ
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ as Integer.

#Region "[On] |2019/07/16 23h22:676| <01.00.01> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:705 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#Region "[On] |2019/07/16 23h22:681| <01.00.02> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:705 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h22:686| <01.00.03> <Property> <Columns> |.NUM_ETA()|String|"' (Set|Get) The NUM_ETA as String.
            Private _NUM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NUM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:705 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_ETA as String.")>
            Public Property NUM_ETA() As String
                Get
                    Return _NUM_ETA
                End Get
                Set(ByVal Value As String)
                    _NUM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_ETA as String.

#Region "[On] |2019/07/16 23h22:692| <01.00.04> <Property> <Columns> |.COD_ART()|String|"' (Set|Get) The COD_ART as String.
            Private _COD_ART As String
            '''    <Summary>
            '''     (Set|Get) The COD_ART as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:708 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_ART as String.")>
            Public Property COD_ART() As String
                Get
                    Return _COD_ART
                End Get
                Set(ByVal Value As String)
                    _COD_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_ART as String.

#Region "[On] |2019/07/16 23h22:697| <01.00.05> <Property> <Columns> |.NUM_FTA()|Integer|"' (Set|Get) The NUM_FTA as Integer.
            Private _NUM_FTA As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_FTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:708 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FTA as Integer.")>
            Public Property NUM_FTA() As Integer
                Get
                    Return _NUM_FTA
                End Get
                Set(ByVal Value As Integer)
                    _NUM_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FTA as Integer.

#Region "[On] |2019/07/16 23h22:703| <01.00.06> <Property> <Columns> |.LIB_PRS()|String|"' (Set|Get) The LIB_PRS as String.
            Private _LIB_PRS As String
            '''    <Summary>
            '''     (Set|Get) The LIB_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:708 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_PRS as String.")>
            Public Property LIB_PRS() As String
                Get
                    Return _LIB_PRS
                End Get
                Set(ByVal Value As String)
                    _LIB_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_PRS as String.

#Region "[On] |2019/07/16 23h22:722| <01.00.07> <Property> <Columns> |.FAC_YON()|Boolean|"' (Set|Get) The FAC_YON as Boolean.
            Private _FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:709 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_YON as Boolean.")>
            Public Property FAC_YON() As Boolean
                Get
                    Return _FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h22:727| <01.00.08> <Property> <Columns> |.NUM_SEQ_FTA()|Integer|"' (Set|Get) The NUM_SEQ_FTA as Integer.
            Private _NUM_SEQ_FTA As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_FTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:709 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_FTA as Integer.")>
            Public Property NUM_SEQ_FTA() As Integer
                Get
                    Return _NUM_SEQ_FTA
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_FTA as Integer.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:732| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{8}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:709 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_SEQ as Integer.</summary>
                [NUM_SEQ] = 0
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 1
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 2
                ''' <summary>(Set|Get) The NUM_ETA as String.</summary>
                [NUM_ETA] = 3
                ''' <summary>(Set|Get) The COD_ART as String.</summary>
                [COD_ART] = 4
                ''' <summary>(Set|Get) The NUM_FTA as Integer.</summary>
                [NUM_FTA] = 5
                ''' <summary>(Set|Get) The LIB_PRS as String.</summary>
                [LIB_PRS] = 6
                ''' <summary>(Set|Get) The FAC_YON as Boolean.</summary>
                [FAC_YON] = 7
                ''' <summary>(Set|Get) The NUM_SEQ_FTA as Integer.</summary>
                [NUM_SEQ_FTA] = 8
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:737| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:709 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_SEQ = 0
                    .REF_CLB = Nothing
                    .NUM_MDT = Nothing
                    .NUM_ETA = Nothing
                    .COD_ART = Nothing
                    .NUM_FTA = 0
                    .LIB_PRS = Nothing
                    .FAC_YON = False
                    .NUM_SEQ_FTA = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:742| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:712 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_MODELE_SEMAINE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_MODELE_SEMAINE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_MODELE_SEMAINE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:747| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:712 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_MODELE_SEMAINE] (
`NUM_SEQ`, 
`REF_CLB`, 
`NUM_MDT`, 
`NUM_ETA`, 
`COD_ART`, 
`NUM_FTA`, 
`LIB_PRS`, 
`FAC_YON`, 
`NUM_SEQ_FTA`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@1", Me.REF_CLB)
                    Cmd.Parameters.AddWithValue("@2", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@3", Me.NUM_ETA)
                    Cmd.Parameters.AddWithValue("@4", Me.COD_ART)
                    Cmd.Parameters.AddWithValue("@5", Me.NUM_FTA)
                    Cmd.Parameters.AddWithValue("@6", Me.LIB_PRS)
                    Cmd.Parameters.AddWithValue("@7", Me.FAC_YON)
                    Cmd.Parameters.AddWithValue("@8", Me.NUM_SEQ_FTA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:751| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:712 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_MODELE_SEMAINE] SET REF_CLB = @REF_CLB, NUM_MDT = @NUM_MDT, NUM_ETA = @NUM_ETA, COD_ART = @COD_ART, NUM_FTA = @NUM_FTA, LIB_PRS = @LIB_PRS, FAC_YON = @FAC_YON, NUM_SEQ_FTA = @NUM_SEQ_FTA WHERE NUM_SEQ = @NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    Cmd.Parameters.AddWithValue("@NUM_ETA", NUM_ETA)
                    Cmd.Parameters.AddWithValue("@COD_ART", COD_ART)
                    Cmd.Parameters.AddWithValue("@NUM_FTA", NUM_FTA)
                    Cmd.Parameters.AddWithValue("@LIB_PRS", LIB_PRS)
                    Cmd.Parameters.AddWithValue("@FAC_YON", FAC_YON)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_FTA", NUM_SEQ_FTA)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:756| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:712 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_MODELE_SEMAINE] WHERE NUM_SEQ =@NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h22:761| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:712 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:769| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:712 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:775| <05.00.02> <Function> <> |.List()|List(Of MDT_MODELE_SEMAINE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:712 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_MODELE_SEMAINE)
                Dim Result As New List(Of MDT_MODELE_SEMAINE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_MODELE_SEMAINE(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), 0, Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), "", Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), False, Row.Item(7)),
      IIf(IsDBNull(Row.Item(8)), 0, Row.Item(8)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:780| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_MODELE_SEMAINE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:714 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_MODELE_SEMAINE)
                Dim Result As New List(Of MDT_MODELE_SEMAINE)
                Dim C As New MDT_MODELE_SEMAINE
                For Each Element As MDT_MODELE_SEMAINE In C.List
                    If Element.REF_CLB.ToLower() = Search.ToLower() Or Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NUM_ETA.ToLower() = Search.ToLower() Or Element.COD_ART.ToLower() = Search.ToLower() Or Element.LIB_PRS.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:785| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_MODELE_SEMAINE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:714 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_MODELE_SEMAINE)
                Dim Result As New List(Of MDT_MODELE_SEMAINE)
                Dim C As New MDT_MODELE_SEMAINE
                For Each Element As MDT_MODELE_SEMAINE In C.List
                    If Val(Element.NUM_SEQ) = Search Or Val(Element.NUM_FTA) = Search Or Val(Element.NUM_SEQ_FTA) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:790| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:714 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_SEQ
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:815| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:718 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:822| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:718 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:828| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:718 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:833| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:718 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:839| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:718 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:843| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:718 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:849| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:718 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:855| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:719 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:862| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:719 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:879| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:719 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:884| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:719 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:889| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:719 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:894| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:719 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:899| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:720 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:901| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:720 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_SEQ">(Set|Get) The NUM_SEQ as Integer.</param>
            ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>
            ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="NUM_ETA">(Set|Get) The NUM_ETA as String.</param>
            ''' <param name="COD_ART">(Set|Get) The COD_ART as String.</param>
            ''' <param name="NUM_FTA">(Set|Get) The NUM_FTA as Integer.</param>
            ''' <param name="LIB_PRS">(Set|Get) The LIB_PRS as String.</param>
            ''' <param name="FAC_YON">(Set|Get) The FAC_YON as Boolean.</param>
            ''' <param name="NUM_SEQ_FTA">(Set|Get) The NUM_SEQ_FTA as Integer.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_SEQ As Integer,
ByVal REF_CLB As String,
ByVal NUM_MDT As String,
ByVal NUM_ETA As String,
ByVal COD_ART As String,
ByVal NUM_FTA As Integer,
ByVal LIB_PRS As String,
ByVal FAC_YON As Boolean,
ByVal NUM_SEQ_FTA As Integer)
                With Me
                    Clear()
                    Reset()
                    .NUM_SEQ = NUM_SEQ
                    .REF_CLB = REF_CLB
                    .NUM_MDT = NUM_MDT
                    .NUM_ETA = NUM_ETA
                    .COD_ART = COD_ART
                    .NUM_FTA = NUM_FTA
                    .LIB_PRS = LIB_PRS
                    .FAC_YON = FAC_YON
                    .NUM_SEQ_FTA = NUM_SEQ_FTA
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:097| <08.00.00> <Class> <> |.MDT_NOM_MODELE_ETAPE|Class|{29} |Production Cost : 30.1|Selling Price : 75.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_NOM_MODELE_ETAPE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:097
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{2}||0.8| |1.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{2}||0.5| |1
        '''    |12| |Parameter  |{7}||0.5| |3.5
        '''    |Production Cost             |30.1
        '''    |Selling Price without VAT   |75.25
        '''    |Total TVA                   |5.79
        '''    |Grand Total                 |81.04
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:734 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_NOM_MODELE_ETAPE
#Region "<1> [Property]{2}"
#Region "[On] |2019/07/16 23h22:098| <01.00.00> <Property> <Columns> |.COD_MOD()|String|"' (Set|Get) The COD_MOD as String.
            Private _COD_MOD As String
            '''    <Summary>
            '''     (Set|Get) The COD_MOD as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:734 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_MOD as String.")>
            Public Property COD_MOD() As String
                Get
                    Return _COD_MOD
                End Get
                Set(ByVal Value As String)
                    _COD_MOD = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_MOD as String.

#Region "[On] |2019/07/16 23h22:113| <01.00.01> <Property> <Columns> |.NOM_MOD()|String|"' (Set|Get) The NOM_MOD as String.
            Private _NOM_MOD As String
            '''    <Summary>
            '''     (Set|Get) The NOM_MOD as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:734 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_MOD as String.")>
            Public Property NOM_MOD() As String
                Get
                    Return _NOM_MOD
                End Get
                Set(ByVal Value As String)
                    _NOM_MOD = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_MOD as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:118| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{1}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:735 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_MOD as String.</summary>
                [COD_MOD] = 0
                ''' <summary>(Set|Get) The NOM_MOD as String.</summary>
                [NOM_MOD] = 1
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:122| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:735 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_MOD = Nothing
                    .NOM_MOD = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:127| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:738 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_NOM_MODELE_ETAPE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_NOM_MODELE_ETAPE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_NOM_MODELE_ETAPE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:132| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:738 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_NOM_MODELE_ETAPE] (
`COD_MOD`, 
`NOM_MOD`) Values (@0, @1)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_MOD)
                    Cmd.Parameters.AddWithValue("@1", Me.NOM_MOD)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:137| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:738 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_NOM_MODELE_ETAPE] SET NOM_MOD = @NOM_MOD WHERE COD_MOD = @COD_MOD"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NOM_MOD", NOM_MOD)
                    Cmd.Parameters.AddWithValue("@COD_MOD", COD_MOD)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:143| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:738 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_NOM_MODELE_ETAPE] WHERE COD_MOD =@COD_MOD"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_MOD", COD_MOD)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h22:147| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:738 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:153| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:738 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:160| <05.00.02> <Function> <> |.List()|List(Of MDT_NOM_MODELE_ETAPE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:739 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_NOM_MODELE_ETAPE)
                Dim Result As New List(Of MDT_NOM_MODELE_ETAPE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_NOM_MODELE_ETAPE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
      IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:166| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_NOM_MODELE_ETAPE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:739 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_NOM_MODELE_ETAPE)
                Dim Result As New List(Of MDT_NOM_MODELE_ETAPE)
                Dim C As New MDT_NOM_MODELE_ETAPE
                For Each Element As MDT_NOM_MODELE_ETAPE In C.List
                    If Element.COD_MOD.ToLower() = Search.ToLower() Or Element.NOM_MOD.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:191| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_NOM_MODELE_ETAPE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:739 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_NOM_MODELE_ETAPE)
                Dim Result As New List(Of MDT_NOM_MODELE_ETAPE)
                Dim C As New MDT_NOM_MODELE_ETAPE
                For Each Element As MDT_NOM_MODELE_ETAPE In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:197| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:739 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_MOD
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:202| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:741 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:208| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:744 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:214| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:744 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:219| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:744 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:225| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:744 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:230| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:744 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:236| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:744 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:241| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:744 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:244| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:745 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:250| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:745 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:254| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:745 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:285| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:745 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:290| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:745 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:296| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:745 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:297| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:745 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_MOD">(Set|Get) The COD_MOD as String.</param>
            ''' <param name="NOM_MOD">(Set|Get) The NOM_MOD as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_MOD As String,
ByVal NOM_MOD As String)
                With Me
                    Clear()
                    Reset()
                    .COD_MOD = COD_MOD
                    .NOM_MOD = NOM_MOD
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:481| <08.00.00> <Class> <> |.MDT_NUMERO_UTILISATEUR|Class|{30} |Production Cost : 31.9|Selling Price : 79.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_NUMERO_UTILISATEUR
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:481
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{3}||0.8| |2.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{3}||0.5| |1.5
        '''    |12| |Parameter  |{8}||0.5| |4
        '''    |Production Cost             |31.9
        '''    |Selling Price without VAT   |79.75
        '''    |Total TVA                   |6.14
        '''    |Grand Total                 |85.89
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:756 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_NUMERO_UTILISATEUR
#Region "<1> [Property]{3}"
#Region "[On] |2019/07/16 23h22:482| <01.00.00> <Property> <Columns> |.NUM_USR()|Integer|"' (Set|Get) The NUM_USR as Integer.
            Private _NUM_USR As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_USR as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:756 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_USR as Integer.")>
            Public Property NUM_USR() As Integer
                Get
                    Return _NUM_USR
                End Get
                Set(ByVal Value As Integer)
                    _NUM_USR = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_USR as Integer.

#Region "[On] |2019/07/16 23h22:503| <01.00.01> <Property> <Columns> |.REF_USR()|String|"' (Set|Get) The REF_USR as String.
            Private _REF_USR As String
            '''    <Summary>
            '''     (Set|Get) The REF_USR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:756 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_USR as String.")>
            Public Property REF_USR() As String
                Get
                    Return _REF_USR
                End Get
                Set(ByVal Value As String)
                    _REF_USR = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_USR as String.

#Region "[On] |2019/07/16 23h22:508| <01.00.02> <Property> <Columns> |.DAT_HEU()|DateTime|"' (Set|Get) The DAT_HEU as DateTime.
            Private _DAT_HEU As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_HEU as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:757 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_HEU as DateTime.")>
            Public Property DAT_HEU() As DateTime
                Get
                    Return _DAT_HEU
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_HEU as DateTime.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:513| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{2}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:759 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_USR as Integer.</summary>
                [NUM_USR] = 0
                ''' <summary>(Set|Get) The REF_USR as String.</summary>
                [REF_USR] = 1
                ''' <summary>(Set|Get) The DAT_HEU as DateTime.</summary>
                [DAT_HEU] = 2
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:518| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:759 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_USR = 0
                    .REF_USR = Nothing
                    .DAT_HEU = New DateTime
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:522| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:760 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_NUMERO_UTILISATEUR"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_NUMERO_UTILISATEUR"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_NUMERO_UTILISATEUR"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:527| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:761 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_NUMERO_UTILISATEUR] (
`NUM_USR`, 
`REF_USR`, 
`DAT_HEU`) Values (@0, @1, @2)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_USR)
                    Cmd.Parameters.AddWithValue("@1", Me.REF_USR)
                    Cmd.Parameters.AddWithValue("@2", Me.DAT_HEU)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:532| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:761 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_NUMERO_UTILISATEUR] SET REF_USR = @REF_USR, DAT_HEU = @DAT_HEU WHERE NUM_USR = @NUM_USR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@REF_USR", REF_USR)
                    Cmd.Parameters.AddWithValue("@DAT_HEU", DAT_HEU)
                    Cmd.Parameters.AddWithValue("@NUM_USR", NUM_USR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:537| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:761 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_NUMERO_UTILISATEUR] WHERE NUM_USR =@NUM_USR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_USR", NUM_USR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h22:541| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:762 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:546| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:762 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:551| <05.00.02> <Function> <> |.List()|List(Of MDT_NUMERO_UTILISATEUR)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:762 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_NUMERO_UTILISATEUR)
                Dim Result As New List(Of MDT_NUMERO_UTILISATEUR)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_NUMERO_UTILISATEUR(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
      IIf(IsDBNull(Row.Item(2)), New DateTime(1970, 1, 1), Row.Item(2)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:556| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_NUMERO_UTILISATEUR)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:762 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_NUMERO_UTILISATEUR)
                Dim Result As New List(Of MDT_NUMERO_UTILISATEUR)
                Dim C As New MDT_NUMERO_UTILISATEUR
                For Each Element As MDT_NUMERO_UTILISATEUR In C.List
                    If Element.REF_USR.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:561| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_NUMERO_UTILISATEUR)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:765 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_NUMERO_UTILISATEUR)
                Dim Result As New List(Of MDT_NUMERO_UTILISATEUR)
                Dim C As New MDT_NUMERO_UTILISATEUR
                For Each Element As MDT_NUMERO_UTILISATEUR In C.List
                    If Val(Element.REF_USR) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:581| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:765 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_USR
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:588| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:765 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:596| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:765 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:601| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:765 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:606| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:765 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:612| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:766 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:619| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:766 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:624| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:766 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:628| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:766 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:632| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:766 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:638| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:766 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:644| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:766 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:649| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:767 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:662| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:769 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:674| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:769 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:676| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:770 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_USR">(Set|Get) The NUM_USR as Integer.</param>
            ''' <param name="REF_USR">(Set|Get) The REF_USR as String.</param>
            ''' <param name="DAT_HEU">(Set|Get) The DAT_HEU as DateTime.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_USR As Integer,
ByVal REF_USR As String,
ByVal DAT_HEU As DateTime)
                With Me
                    Clear()
                    Reset()
                    .NUM_USR = NUM_USR
                    .REF_USR = REF_USR
                    .DAT_HEU = DAT_HEU
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:872| <08.00.00> <Class> <> |.MDT_OPERATION|Class|{80} |Production Cost : 121.9|Selling Price : 304.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_OPERATION
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:872
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{53}||0.8| |42.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{53}||0.5| |26.5
        '''    |12| |Parameter  |{58}||0.5| |29
        '''    |Production Cost             |121.9
        '''    |Selling Price without VAT   |304.75
        '''    |Total TVA                   |23.47
        '''    |Grand Total                 |328.22
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:781 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_OPERATION
#Region "<1> [Property]{53}"
#Region "[On] |2019/07/16 23h22:873| <01.00.00> <Property> <Columns> |.NUM_SEQ()|Integer|"' (Set|Get) The NUM_SEQ as Integer.
            Private _NUM_SEQ As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:781 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ as Integer.")>
            Public Property NUM_SEQ() As Integer
                Get
                    Return _NUM_SEQ
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ as Integer.

#Region "[On] |2019/07/16 23h22:893| <01.00.01> <Property> <Columns> |.NUM_SEQ_SAV()|Integer|"' (Set|Get) The NUM_SEQ_SAV as Integer.
            Private _NUM_SEQ_SAV As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_SAV as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:784 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_SAV as Integer.")>
            Public Property NUM_SEQ_SAV() As Integer
                Get
                    Return _NUM_SEQ_SAV
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_SAV = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_SAV as Integer.

#Region "[On] |2019/07/16 23h22:899| <01.00.02> <Property> <Columns> |.NUM_SEQ_PAP()|Integer|"' (Set|Get) The NUM_SEQ_PAP as Integer.
            Private _NUM_SEQ_PAP As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_PAP as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:784 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_PAP as Integer.")>
            Public Property NUM_SEQ_PAP() As Integer
                Get
                    Return _NUM_SEQ_PAP
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_PAP = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_PAP as Integer.

#Region "[On] |2019/07/16 23h22:904| <01.00.03> <Property> <Columns> |.TYP_OPE()|String|"' (Set|Get) The TYP_OPE as String.
            Private _TYP_OPE As String
            '''    <Summary>
            '''     (Set|Get) The TYP_OPE as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:784 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TYP_OPE as String.")>
            Public Property TYP_OPE() As String
                Get
                    Return _TYP_OPE
                End Get
                Set(ByVal Value As String)
                    _TYP_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The TYP_OPE as String.

#Region "[On] |2019/07/16 23h22:910| <01.00.04> <Property> <Columns> |.COR_YON()|Boolean|"' (Set|Get) The COR_YON as Boolean.
            Private _COR_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The COR_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:784 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COR_YON as Boolean.")>
            Public Property COR_YON() As Boolean
                Get
                    Return _COR_YON
                End Get
                Set(ByVal Value As Boolean)
                    _COR_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The COR_YON as Boolean.

#Region "[On] |2019/07/16 23h22:915| <01.00.05> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:785 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h22:921| <01.00.06> <Property> <Columns> |.NUM_ETA()|String|"' (Set|Get) The NUM_ETA as String.
            Private _NUM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NUM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:785 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_ETA as String.")>
            Public Property NUM_ETA() As String
                Get
                    Return _NUM_ETA
                End Get
                Set(ByVal Value As String)
                    _NUM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_ETA as String.

#Region "[On] |2019/07/16 23h22:927| <01.00.07> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:785 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#Region "[On] |2019/07/16 23h22:932| <01.00.08> <Property> <Columns> |.DAT_OPE()|DateTime|"' (Set|Get) The DAT_OPE as DateTime.
            Private _DAT_OPE As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_OPE as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:785 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_OPE as DateTime.")>
            Public Property DAT_OPE() As DateTime
                Get
                    Return _DAT_OPE
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_OPE as DateTime.

#Region "[On] |2019/07/16 23h22:937| <01.00.09> <Property> <Columns> |.NUM_FTA()|Integer|"' (Set|Get) The NUM_FTA as Integer.
            Private _NUM_FTA As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_FTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:788 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FTA as Integer.")>
            Public Property NUM_FTA() As Integer
                Get
                    Return _NUM_FTA
                End Get
                Set(ByVal Value As Integer)
                    _NUM_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FTA as Integer.

#Region "[On] |2019/07/16 23h22:942| <01.00.10> <Property> <Columns> |.LIB_PRS()|String|"' (Set|Get) The LIB_PRS as String.
            Private _LIB_PRS As String
            '''    <Summary>
            '''     (Set|Get) The LIB_PRS as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:788 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_PRS as String.")>
            Public Property LIB_PRS() As String
                Get
                    Return _LIB_PRS
                End Get
                Set(ByVal Value As String)
                    _LIB_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_PRS as String.

#Region "[On] |2019/07/16 23h22:947| <01.00.11> <Property> <Columns> |.HEU_PRS()|Double|"' (Set|Get) The HEU_PRS as Double.
            Private _HEU_PRS As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_PRS as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:788 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_PRS as Double.")>
            Public Property HEU_PRS() As Double
                Get
                    Return _HEU_PRS
                End Get
                Set(ByVal Value As Double)
                    _HEU_PRS = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_PRS as Double.

#Region "[On] |2019/07/16 23h22:952| <01.00.12> <Property> <Columns> |.HEU_LUN()|Double|"' (Set|Get) The HEU_LUN as Double.
            Private _HEU_LUN As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_LUN as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:788 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_LUN as Double.")>
            Public Property HEU_LUN() As Double
                Get
                    Return _HEU_LUN
                End Get
                Set(ByVal Value As Double)
                    _HEU_LUN = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_LUN as Double.

#Region "[On] |2019/07/16 23h22:957| <01.00.13> <Property> <Columns> |.HEU_MAR()|Double|"' (Set|Get) The HEU_MAR as Double.
            Private _HEU_MAR As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_MAR as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:788 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_MAR as Double.")>
            Public Property HEU_MAR() As Double
                Get
                    Return _HEU_MAR
                End Get
                Set(ByVal Value As Double)
                    _HEU_MAR = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_MAR as Double.

#Region "[On] |2019/07/16 23h22:963| <01.00.14> <Property> <Columns> |.HEU_MER()|Double|"' (Set|Get) The HEU_MER as Double.
            Private _HEU_MER As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_MER as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:789 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_MER as Double.")>
            Public Property HEU_MER() As Double
                Get
                    Return _HEU_MER
                End Get
                Set(ByVal Value As Double)
                    _HEU_MER = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_MER as Double.

#Region "[On] |2019/07/16 23h22:968| <01.00.15> <Property> <Columns> |.HEU_JEU()|Double|"' (Set|Get) The HEU_JEU as Double.
            Private _HEU_JEU As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_JEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:789 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_JEU as Double.")>
            Public Property HEU_JEU() As Double
                Get
                    Return _HEU_JEU
                End Get
                Set(ByVal Value As Double)
                    _HEU_JEU = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_JEU as Double.

#Region "[On] |2019/07/16 23h22:974| <01.00.16> <Property> <Columns> |.HEU_VEN()|Double|"' (Set|Get) The HEU_VEN as Double.
            Private _HEU_VEN As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_VEN as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:789 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_VEN as Double.")>
            Public Property HEU_VEN() As Double
                Get
                    Return _HEU_VEN
                End Get
                Set(ByVal Value As Double)
                    _HEU_VEN = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_VEN as Double.

#Region "[On] |2019/07/16 23h22:003| <01.00.17> <Property> <Columns> |.HEU_SAM()|Double|"' (Set|Get) The HEU_SAM as Double.
            Private _HEU_SAM As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_SAM as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:789 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_SAM as Double.")>
            Public Property HEU_SAM() As Double
                Get
                    Return _HEU_SAM
                End Get
                Set(ByVal Value As Double)
                    _HEU_SAM = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_SAM as Double.

#Region "[On] |2019/07/16 23h22:009| <01.00.18> <Property> <Columns> |.HEU_DIM()|Double|"' (Set|Get) The HEU_DIM as Double.
            Private _HEU_DIM As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_DIM as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:792 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_DIM as Double.")>
            Public Property HEU_DIM() As Double
                Get
                    Return _HEU_DIM
                End Get
                Set(ByVal Value As Double)
                    _HEU_DIM = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_DIM as Double.

#Region "[On] |2019/07/16 23h22:015| <01.00.19> <Property> <Columns> |.COD_TAR()|String|"' (Set|Get) The COD_TAR as String.
            Private _COD_TAR As String
            '''    <Summary>
            '''     (Set|Get) The COD_TAR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:792 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TAR as String.")>
            Public Property COD_TAR() As String
                Get
                    Return _COD_TAR
                End Get
                Set(ByVal Value As String)
                    _COD_TAR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TAR as String.

#Region "[On] |2019/07/16 23h22:020| <01.00.20> <Property> <Columns> |.COD_ART()|String|"' (Set|Get) The COD_ART as String.
            Private _COD_ART As String
            '''    <Summary>
            '''     (Set|Get) The COD_ART as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:792 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_ART as String.")>
            Public Property COD_ART() As String
                Get
                    Return _COD_ART
                End Get
                Set(ByVal Value As String)
                    _COD_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_ART as String.

#Region "[On] |2019/07/16 23h22:026| <01.00.21> <Property> <Columns> |.COD_CAT()|String|"' (Set|Get) The COD_CAT as String.
            Private _COD_CAT As String
            '''    <Summary>
            '''     (Set|Get) The COD_CAT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:792 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_CAT as String.")>
            Public Property COD_CAT() As String
                Get
                    Return _COD_CAT
                End Get
                Set(ByVal Value As String)
                    _COD_CAT = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_CAT as String.

#Region "[On] |2019/07/16 23h22:031| <01.00.22> <Property> <Columns> |.PRX_VTE_HEU()|Double|"' (Set|Get) The PRX_VTE_HEU as Double.
            Private _PRX_VTE_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_VTE_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:793 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_VTE_HEU as Double.")>
            Public Property PRX_VTE_HEU() As Double
                Get
                    Return _PRX_VTE_HEU
                End Get
                Set(ByVal Value As Double)
                    _PRX_VTE_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_VTE_HEU as Double.

#Region "[On] |2019/07/16 23h22:038| <01.00.23> <Property> <Columns> |.PRX_RVT_HEU()|Double|"' (Set|Get) The PRX_RVT_HEU as Double.
            Private _PRX_RVT_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_RVT_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:793 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_RVT_HEU as Double.")>
            Public Property PRX_RVT_HEU() As Double
                Get
                    Return _PRX_RVT_HEU
                End Get
                Set(ByVal Value As Double)
                    _PRX_RVT_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_RVT_HEU as Double.

#Region "[On] |2019/07/16 23h22:043| <01.00.24> <Property> <Columns> |.MNT_VTE_HEU()|Double|"' (Set|Get) The MNT_VTE_HEU as Double.
            Private _MNT_VTE_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_VTE_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:793 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_VTE_HEU as Double.")>
            Public Property MNT_VTE_HEU() As Double
                Get
                    Return _MNT_VTE_HEU
                End Get
                Set(ByVal Value As Double)
                    _MNT_VTE_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_VTE_HEU as Double.

#Region "[On] |2019/07/16 23h22:051| <01.00.25> <Property> <Columns> |.MNT_RVT_HEU()|Double|"' (Set|Get) The MNT_RVT_HEU as Double.
            Private _MNT_RVT_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_RVT_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:793 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_RVT_HEU as Double.")>
            Public Property MNT_RVT_HEU() As Double
                Get
                    Return _MNT_RVT_HEU
                End Get
                Set(ByVal Value As Double)
                    _MNT_RVT_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_RVT_HEU as Double.

#Region "[On] |2019/07/16 23h22:057| <01.00.26> <Property> <Columns> |.MNT_FAC_HEU()|Double|"' (Set|Get) The MNT_FAC_HEU as Double.
            Private _MNT_FAC_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_FAC_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:796 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_FAC_HEU as Double.")>
            Public Property MNT_FAC_HEU() As Double
                Get
                    Return _MNT_FAC_HEU
                End Get
                Set(ByVal Value As Double)
                    _MNT_FAC_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_FAC_HEU as Double.

#Region "[On] |2019/07/16 23h22:063| <01.00.27> <Property> <Columns> |.QTE_ART()|Double|"' (Set|Get) The QTE_ART as Double.
            Private _QTE_ART As Double
            '''    <Summary>
            '''     (Set|Get) The QTE_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:796 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The QTE_ART as Double.")>
            Public Property QTE_ART() As Double
                Get
                    Return _QTE_ART
                End Get
                Set(ByVal Value As Double)
                    _QTE_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The QTE_ART as Double.

#Region "[On] |2019/07/16 23h22:069| <01.00.28> <Property> <Columns> |.PRX_VTE_ART()|Double|"' (Set|Get) The PRX_VTE_ART as Double.
            Private _PRX_VTE_ART As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_VTE_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:796 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_VTE_ART as Double.")>
            Public Property PRX_VTE_ART() As Double
                Get
                    Return _PRX_VTE_ART
                End Get
                Set(ByVal Value As Double)
                    _PRX_VTE_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_VTE_ART as Double.

#Region "[On] |2019/07/16 23h22:075| <01.00.29> <Property> <Columns> |.PRX_RMB_ART()|Double|"' (Set|Get) The PRX_RMB_ART as Double.
            Private _PRX_RMB_ART As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_RMB_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:796 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_RMB_ART as Double.")>
            Public Property PRX_RMB_ART() As Double
                Get
                    Return _PRX_RMB_ART
                End Get
                Set(ByVal Value As Double)
                    _PRX_RMB_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_RMB_ART as Double.

#Region "[On] |2019/07/16 23h22:080| <01.00.30> <Property> <Columns> |.PRX_RVT_ART()|Double|"' (Set|Get) The PRX_RVT_ART as Double.
            Private _PRX_RVT_ART As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_RVT_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:796 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_RVT_ART as Double.")>
            Public Property PRX_RVT_ART() As Double
                Get
                    Return _PRX_RVT_ART
                End Get
                Set(ByVal Value As Double)
                    _PRX_RVT_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_RVT_ART as Double.

#Region "[On] |2019/07/16 23h22:086| <01.00.31> <Property> <Columns> |.MNT_VTE_ART()|Double|"' (Set|Get) The MNT_VTE_ART as Double.
            Private _MNT_VTE_ART As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_VTE_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:797 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_VTE_ART as Double.")>
            Public Property MNT_VTE_ART() As Double
                Get
                    Return _MNT_VTE_ART
                End Get
                Set(ByVal Value As Double)
                    _MNT_VTE_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_VTE_ART as Double.

#Region "[On] |2019/07/16 23h22:091| <01.00.32> <Property> <Columns> |.MNT_RMB_ART()|Double|"' (Set|Get) The MNT_RMB_ART as Double.
            Private _MNT_RMB_ART As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_RMB_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:797 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_RMB_ART as Double.")>
            Public Property MNT_RMB_ART() As Double
                Get
                    Return _MNT_RMB_ART
                End Get
                Set(ByVal Value As Double)
                    _MNT_RMB_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_RMB_ART as Double.

#Region "[On] |2019/07/16 23h22:099| <01.00.33> <Property> <Columns> |.MNT_RVT_ART()|Double|"' (Set|Get) The MNT_RVT_ART as Double.
            Private _MNT_RVT_ART As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_RVT_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:817 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_RVT_ART as Double.")>
            Public Property MNT_RVT_ART() As Double
                Get
                    Return _MNT_RVT_ART
                End Get
                Set(ByVal Value As Double)
                    _MNT_RVT_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_RVT_ART as Double.

#Region "[On] |2019/07/16 23h22:105| <01.00.34> <Property> <Columns> |.MNT_FAC_ART()|Double|"' (Set|Get) The MNT_FAC_ART as Double.
            Private _MNT_FAC_ART As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_FAC_ART as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:817 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_FAC_ART as Double.")>
            Public Property MNT_FAC_ART() As Double
                Get
                    Return _MNT_FAC_ART
                End Get
                Set(ByVal Value As Double)
                    _MNT_FAC_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_FAC_ART as Double.

#Region "[On] |2019/07/16 23h22:120| <01.00.35> <Property> <Columns> |.RMB_YON()|Boolean|"' (Set|Get) The RMB_YON as Boolean.
            Private _RMB_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The RMB_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:820 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The RMB_YON as Boolean.")>
            Public Property RMB_YON() As Boolean
                Get
                    Return _RMB_YON
                End Get
                Set(ByVal Value As Boolean)
                    _RMB_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The RMB_YON as Boolean.

#Region "[On] |2019/07/16 23h22:131| <01.00.36> <Property> <Columns> |.FAC_YON()|Boolean|"' (Set|Get) The FAC_YON as Boolean.
            Private _FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:820 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_YON as Boolean.")>
            Public Property FAC_YON() As Boolean
                Get
                    Return _FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h22:139| <01.00.37> <Property> <Columns> |.HRS_TOT_YON()|Boolean|"' (Set|Get) The HRS_TOT_YON as Boolean.
            Private _HRS_TOT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The HRS_TOT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:820 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HRS_TOT_YON as Boolean.")>
            Public Property HRS_TOT_YON() As Boolean
                Get
                    Return _HRS_TOT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _HRS_TOT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The HRS_TOT_YON as Boolean.

#Region "[On] |2019/07/16 23h22:146| <01.00.38> <Property> <Columns> |.COD_RCP()|String|"' (Set|Get) The COD_RCP as String.
            Private _COD_RCP As String
            '''    <Summary>
            '''     (Set|Get) The COD_RCP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:821 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_RCP as String.")>
            Public Property COD_RCP() As String
                Get
                    Return _COD_RCP
                End Get
                Set(ByVal Value As String)
                    _COD_RCP = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_RCP as String.

#Region "[On] |2019/07/16 23h22:152| <01.00.39> <Property> <Columns> |.MNT_OPE()|Double|"' (Set|Get) The MNT_OPE as Double.
            Private _MNT_OPE As Double
            '''    <Summary>
            '''     (Set|Get) The MNT_OPE as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:821 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MNT_OPE as Double.")>
            Public Property MNT_OPE() As Double
                Get
                    Return _MNT_OPE
                End Get
                Set(ByVal Value As Double)
                    _MNT_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The MNT_OPE as Double.

#Region "[On] |2019/07/16 23h22:159| <01.00.40> <Property> <Columns> |.NUM_SEQ_FAC()|Integer|"' (Set|Get) The NUM_SEQ_FAC as Integer.
            Private _NUM_SEQ_FAC As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_FAC as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:821 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_FAC as Integer.")>
            Public Property NUM_SEQ_FAC() As Integer
                Get
                    Return _NUM_SEQ_FAC
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_FAC = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_FAC as Integer.

#Region "[On] |2019/07/16 23h22:166| <01.00.41> <Property> <Columns> |.FAC_ENR_YON()|Boolean|"' (Set|Get) The FAC_ENR_YON as Boolean.
            Private _FAC_ENR_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FAC_ENR_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:822 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FAC_ENR_YON as Boolean.")>
            Public Property FAC_ENR_YON() As Boolean
                Get
                    Return _FAC_ENR_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FAC_ENR_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FAC_ENR_YON as Boolean.

#Region "[On] |2019/07/16 23h22:172| <01.00.42> <Property> <Columns> |.SEL_FAC_YON()|Boolean|"' (Set|Get) The SEL_FAC_YON as Boolean.
            Private _SEL_FAC_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The SEL_FAC_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:822 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The SEL_FAC_YON as Boolean.")>
            Public Property SEL_FAC_YON() As Boolean
                Get
                    Return _SEL_FAC_YON
                End Get
                Set(ByVal Value As Boolean)
                    _SEL_FAC_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The SEL_FAC_YON as Boolean.

#Region "[On] |2019/07/16 23h22:178| <01.00.43> <Property> <Columns> |.POST_IT()|String|"' (Set|Get) The POST_IT as String.
            Private _POST_IT As String
            '''    <Summary>
            '''     (Set|Get) The POST_IT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:825 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The POST_IT as String.")>
            Public Property POST_IT() As String
                Get
                    Return _POST_IT
                End Get
                Set(ByVal Value As String)
                    _POST_IT = Value
                End Set
            End Property
#End Region '(Set|Get) The POST_IT as String.

#Region "[On] |2019/07/16 23h22:185| <01.00.44> <Property> <Columns> |.HEU_CAL()|Double|"' (Set|Get) The HEU_CAL as Double.
            Private _HEU_CAL As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_CAL as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:825 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_CAL as Double.")>
            Public Property HEU_CAL() As Double
                Get
                    Return _HEU_CAL
                End Get
                Set(ByVal Value As Double)
                    _HEU_CAL = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_CAL as Double.

#Region "[On] |2019/07/16 23h22:192| <01.00.45> <Property> <Columns> |.EXT_YON()|Boolean|"' (Set|Get) The EXT_YON as Boolean.
            Private _EXT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The EXT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:825 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The EXT_YON as Boolean.")>
            Public Property EXT_YON() As Boolean
                Get
                    Return _EXT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _EXT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The EXT_YON as Boolean.

#Region "[On] |2019/07/16 23h22:198| <01.00.46> <Property> <Columns> |.NUM_SEQ_EXT()|Integer|"' (Set|Get) The NUM_SEQ_EXT as Integer.
            Private _NUM_SEQ_EXT As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_EXT as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:826 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_EXT as Integer.")>
            Public Property NUM_SEQ_EXT() As Integer
                Get
                    Return _NUM_SEQ_EXT
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_EXT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_EXT as Integer.

#Region "[On] |2019/07/16 23h22:205| <01.00.47> <Property> <Columns> |.GEN_OPE()|String|"' (Set|Get) The GEN_OPE as String.
            Private _GEN_OPE As String
            '''    <Summary>
            '''     (Set|Get) The GEN_OPE as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:826 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The GEN_OPE as String.")>
            Public Property GEN_OPE() As String
                Get
                    Return _GEN_OPE
                End Get
                Set(ByVal Value As String)
                    _GEN_OPE = Value
                End Set
            End Property
#End Region '(Set|Get) The GEN_OPE as String.

#Region "[On] |2019/07/16 23h22:212| <01.00.48> <Property> <Columns> |.TFT_EXT_YON()|Boolean|"' (Set|Get) The TFT_EXT_YON as Boolean.
            Private _TFT_EXT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The TFT_EXT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:826 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TFT_EXT_YON as Boolean.")>
            Public Property TFT_EXT_YON() As Boolean
                Get
                    Return _TFT_EXT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _TFT_EXT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The TFT_EXT_YON as Boolean.

#Region "[On] |2019/07/16 23h22:220| <01.00.49> <Property> <Columns> |.TFT_SSM()|Integer|"' (Set|Get) The TFT_SSM as Integer.
            Private _TFT_SSM As Integer
            '''    <Summary>
            '''     (Set|Get) The TFT_SSM as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:827 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TFT_SSM as Integer.")>
            Public Property TFT_SSM() As Integer
                Get
                    Return _TFT_SSM
                End Get
                Set(ByVal Value As Integer)
                    _TFT_SSM = Value
                End Set
            End Property
#End Region '(Set|Get) The TFT_SSM as Integer.

#Region "[On] |2019/07/16 23h22:226| <01.00.50> <Property> <Columns> |.NUM_SEQ_FAC_BIS()|Integer|"' (Set|Get) The NUM_SEQ_FAC_BIS as Integer.
            Private _NUM_SEQ_FAC_BIS As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_FAC_BIS as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:827 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_FAC_BIS as Integer.")>
            Public Property NUM_SEQ_FAC_BIS() As Integer
                Get
                    Return _NUM_SEQ_FAC_BIS
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_FAC_BIS = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_FAC_BIS as Integer.

#Region "[On] |2019/07/16 23h22:234| <01.00.51> <Property> <Columns> |.HIS_YON()|Boolean|"' (Set|Get) The HIS_YON as Boolean.
            Private _HIS_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The HIS_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:827 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HIS_YON as Boolean.")>
            Public Property HIS_YON() As Boolean
                Get
                    Return _HIS_YON
                End Get
                Set(ByVal Value As Boolean)
                    _HIS_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The HIS_YON as Boolean.

#Region "[On] |2019/07/16 23h22:244| <01.00.52> <Property> <Columns> |.NUM_SEQ_FTA()|Integer|"' (Set|Get) The NUM_SEQ_FTA as Integer.
            Private _NUM_SEQ_FTA As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ_FTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:830 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ_FTA as Integer.")>
            Public Property NUM_SEQ_FTA() As Integer
                Get
                    Return _NUM_SEQ_FTA
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ_FTA as Integer.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:271| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{52}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:831 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_SEQ as Integer.</summary>
                [NUM_SEQ] = 0
                ''' <summary>(Set|Get) The NUM_SEQ_SAV as Integer.</summary>
                [NUM_SEQ_SAV] = 1
                ''' <summary>(Set|Get) The NUM_SEQ_PAP as Integer.</summary>
                [NUM_SEQ_PAP] = 2
                ''' <summary>(Set|Get) The TYP_OPE as String.</summary>
                [TYP_OPE] = 3
                ''' <summary>(Set|Get) The COR_YON as Boolean.</summary>
                [COR_YON] = 4
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 5
                ''' <summary>(Set|Get) The NUM_ETA as String.</summary>
                [NUM_ETA] = 6
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 7
                ''' <summary>(Set|Get) The DAT_OPE as DateTime.</summary>
                [DAT_OPE] = 8
                ''' <summary>(Set|Get) The NUM_FTA as Integer.</summary>
                [NUM_FTA] = 9
                ''' <summary>(Set|Get) The LIB_PRS as String.</summary>
                [LIB_PRS] = 10
                ''' <summary>(Set|Get) The HEU_PRS as Double.</summary>
                [HEU_PRS] = 11
                ''' <summary>(Set|Get) The HEU_LUN as Double.</summary>
                [HEU_LUN] = 12
                ''' <summary>(Set|Get) The HEU_MAR as Double.</summary>
                [HEU_MAR] = 13
                ''' <summary>(Set|Get) The HEU_MER as Double.</summary>
                [HEU_MER] = 14
                ''' <summary>(Set|Get) The HEU_JEU as Double.</summary>
                [HEU_JEU] = 15
                ''' <summary>(Set|Get) The HEU_VEN as Double.</summary>
                [HEU_VEN] = 16
                ''' <summary>(Set|Get) The HEU_SAM as Double.</summary>
                [HEU_SAM] = 17
                ''' <summary>(Set|Get) The HEU_DIM as Double.</summary>
                [HEU_DIM] = 18
                ''' <summary>(Set|Get) The COD_TAR as String.</summary>
                [COD_TAR] = 19
                ''' <summary>(Set|Get) The COD_ART as String.</summary>
                [COD_ART] = 20
                ''' <summary>(Set|Get) The COD_CAT as String.</summary>
                [COD_CAT] = 21
                ''' <summary>(Set|Get) The PRX_VTE_HEU as Double.</summary>
                [PRX_VTE_HEU] = 22
                ''' <summary>(Set|Get) The PRX_RVT_HEU as Double.</summary>
                [PRX_RVT_HEU] = 23
                ''' <summary>(Set|Get) The MNT_VTE_HEU as Double.</summary>
                [MNT_VTE_HEU] = 24
                ''' <summary>(Set|Get) The MNT_RVT_HEU as Double.</summary>
                [MNT_RVT_HEU] = 25
                ''' <summary>(Set|Get) The MNT_FAC_HEU as Double.</summary>
                [MNT_FAC_HEU] = 26
                ''' <summary>(Set|Get) The QTE_ART as Double.</summary>
                [QTE_ART] = 27
                ''' <summary>(Set|Get) The PRX_VTE_ART as Double.</summary>
                [PRX_VTE_ART] = 28
                ''' <summary>(Set|Get) The PRX_RMB_ART as Double.</summary>
                [PRX_RMB_ART] = 29
                ''' <summary>(Set|Get) The PRX_RVT_ART as Double.</summary>
                [PRX_RVT_ART] = 30
                ''' <summary>(Set|Get) The MNT_VTE_ART as Double.</summary>
                [MNT_VTE_ART] = 31
                ''' <summary>(Set|Get) The MNT_RMB_ART as Double.</summary>
                [MNT_RMB_ART] = 32
                ''' <summary>(Set|Get) The MNT_RVT_ART as Double.</summary>
                [MNT_RVT_ART] = 33
                ''' <summary>(Set|Get) The MNT_FAC_ART as Double.</summary>
                [MNT_FAC_ART] = 34
                ''' <summary>(Set|Get) The RMB_YON as Boolean.</summary>
                [RMB_YON] = 35
                ''' <summary>(Set|Get) The FAC_YON as Boolean.</summary>
                [FAC_YON] = 36
                ''' <summary>(Set|Get) The HRS_TOT_YON as Boolean.</summary>
                [HRS_TOT_YON] = 37
                ''' <summary>(Set|Get) The COD_RCP as String.</summary>
                [COD_RCP] = 38
                ''' <summary>(Set|Get) The MNT_OPE as Double.</summary>
                [MNT_OPE] = 39
                ''' <summary>(Set|Get) The NUM_SEQ_FAC as Integer.</summary>
                [NUM_SEQ_FAC] = 40
                ''' <summary>(Set|Get) The FAC_ENR_YON as Boolean.</summary>
                [FAC_ENR_YON] = 41
                ''' <summary>(Set|Get) The SEL_FAC_YON as Boolean.</summary>
                [SEL_FAC_YON] = 42
                ''' <summary>(Set|Get) The POST_IT as String.</summary>
                [POST_IT] = 43
                ''' <summary>(Set|Get) The HEU_CAL as Double.</summary>
                [HEU_CAL] = 44
                ''' <summary>(Set|Get) The EXT_YON as Boolean.</summary>
                [EXT_YON] = 45
                ''' <summary>(Set|Get) The NUM_SEQ_EXT as Integer.</summary>
                [NUM_SEQ_EXT] = 46
                ''' <summary>(Set|Get) The GEN_OPE as String.</summary>
                [GEN_OPE] = 47
                ''' <summary>(Set|Get) The TFT_EXT_YON as Boolean.</summary>
                [TFT_EXT_YON] = 48
                ''' <summary>(Set|Get) The TFT_SSM as Integer.</summary>
                [TFT_SSM] = 49
                ''' <summary>(Set|Get) The NUM_SEQ_FAC_BIS as Integer.</summary>
                [NUM_SEQ_FAC_BIS] = 50
                ''' <summary>(Set|Get) The HIS_YON as Boolean.</summary>
                [HIS_YON] = 51
                ''' <summary>(Set|Get) The NUM_SEQ_FTA as Integer.</summary>
                [NUM_SEQ_FTA] = 52
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:280| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:840 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_SEQ = 0
                    .NUM_SEQ_SAV = 0
                    .NUM_SEQ_PAP = 0
                    .TYP_OPE = Nothing
                    .COR_YON = False
                    .NUM_MDT = Nothing
                    .NUM_ETA = Nothing
                    .REF_CLB = Nothing
                    .DAT_OPE = New DateTime
                    .NUM_FTA = 0
                    .LIB_PRS = Nothing
                    .HEU_PRS = 0
                    .HEU_LUN = 0
                    .HEU_MAR = 0
                    .HEU_MER = 0
                    .HEU_JEU = 0
                    .HEU_VEN = 0
                    .HEU_SAM = 0
                    .HEU_DIM = 0
                    .COD_TAR = Nothing
                    .COD_ART = Nothing
                    .COD_CAT = Nothing
                    .PRX_VTE_HEU = 0
                    .PRX_RVT_HEU = 0
                    .MNT_VTE_HEU = 0
                    .MNT_RVT_HEU = 0
                    .MNT_FAC_HEU = 0
                    .QTE_ART = 0
                    .PRX_VTE_ART = 0
                    .PRX_RMB_ART = 0
                    .PRX_RVT_ART = 0
                    .MNT_VTE_ART = 0
                    .MNT_RMB_ART = 0
                    .MNT_RVT_ART = 0
                    .MNT_FAC_ART = 0
                    .RMB_YON = False
                    .FAC_YON = False
                    .HRS_TOT_YON = False
                    .COD_RCP = Nothing
                    .MNT_OPE = 0
                    .NUM_SEQ_FAC = 0
                    .FAC_ENR_YON = False
                    .SEL_FAC_YON = False
                    .POST_IT = Nothing
                    .HEU_CAL = 0
                    .EXT_YON = False
                    .NUM_SEQ_EXT = 0
                    .GEN_OPE = Nothing
                    .TFT_EXT_YON = False
                    .TFT_SSM = 0
                    .NUM_SEQ_FAC_BIS = 0
                    .HIS_YON = False
                    .NUM_SEQ_FTA = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:287| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:840 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_OPERATION"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_OPERATION"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_OPERATION"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:295| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:840 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_OPERATION] (
`NUM_SEQ`, 
`NUM_SEQ_SAV`, 
`NUM_SEQ_PAP`, 
`TYP_OPE`, 
`COR_YON`, 
`NUM_MDT`, 
`NUM_ETA`, 
`REF_CLB`, 
`DAT_OPE`, 
`NUM_FTA`, 
`LIB_PRS`, 
`HEU_PRS`, 
`HEU_LUN`, 
`HEU_MAR`, 
`HEU_MER`, 
`HEU_JEU`, 
`HEU_VEN`, 
`HEU_SAM`, 
`HEU_DIM`, 
`COD_TAR`, 
`COD_ART`, 
`COD_CAT`, 
`PRX_VTE_HEU`, 
`PRX_RVT_HEU`, 
`MNT_VTE_HEU`, 
`MNT_RVT_HEU`, 
`MNT_FAC_HEU`, 
`QTE_ART`, 
`PRX_VTE_ART`, 
`PRX_RMB_ART`, 
`PRX_RVT_ART`, 
`MNT_VTE_ART`, 
`MNT_RMB_ART`, 
`MNT_RVT_ART`, 
`MNT_FAC_ART`, 
`RMB_YON`, 
`FAC_YON`, 
`HRS_TOT_YON`, 
`COD_RCP`, 
`MNT_OPE`, 
`NUM_SEQ_FAC`, 
`FAC_ENR_YON`, 
`SEL_FAC_YON`, 
`POST_IT`, 
`HEU_CAL`, 
`EXT_YON`, 
`NUM_SEQ_EXT`, 
`GEN_OPE`, 
`TFT_EXT_YON`, 
`TFT_SSM`, 
`NUM_SEQ_FAC_BIS`, 
`HIS_YON`, 
`NUM_SEQ_FTA`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @16, @17, @18, @19, @20, @21, @22, @23, @24, @25, @26, @27, @28, @29, @30, @31, @32, @33, @34, @35, @36, @37, @38, @39, @40, @41, @42, @43, @44, @45, @46, @47, @48, @49, @50, @51, @52)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_SEQ_SAV)
                    Cmd.Parameters.AddWithValue("@2", Me.NUM_SEQ_PAP)
                    Cmd.Parameters.AddWithValue("@3", Me.TYP_OPE)
                    Cmd.Parameters.AddWithValue("@4", Me.COR_YON)
                    Cmd.Parameters.AddWithValue("@5", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@6", Me.NUM_ETA)
                    Cmd.Parameters.AddWithValue("@7", Me.REF_CLB)
                    Cmd.Parameters.AddWithValue("@8", Me.DAT_OPE)
                    Cmd.Parameters.AddWithValue("@9", Me.NUM_FTA)
                    Cmd.Parameters.AddWithValue("@10", Me.LIB_PRS)
                    Cmd.Parameters.AddWithValue("@11", Me.HEU_PRS)
                    Cmd.Parameters.AddWithValue("@12", Me.HEU_LUN)
                    Cmd.Parameters.AddWithValue("@13", Me.HEU_MAR)
                    Cmd.Parameters.AddWithValue("@14", Me.HEU_MER)
                    Cmd.Parameters.AddWithValue("@15", Me.HEU_JEU)
                    Cmd.Parameters.AddWithValue("@16", Me.HEU_VEN)
                    Cmd.Parameters.AddWithValue("@17", Me.HEU_SAM)
                    Cmd.Parameters.AddWithValue("@18", Me.HEU_DIM)
                    Cmd.Parameters.AddWithValue("@19", Me.COD_TAR)
                    Cmd.Parameters.AddWithValue("@20", Me.COD_ART)
                    Cmd.Parameters.AddWithValue("@21", Me.COD_CAT)
                    Cmd.Parameters.AddWithValue("@22", Me.PRX_VTE_HEU)
                    Cmd.Parameters.AddWithValue("@23", Me.PRX_RVT_HEU)
                    Cmd.Parameters.AddWithValue("@24", Me.MNT_VTE_HEU)
                    Cmd.Parameters.AddWithValue("@25", Me.MNT_RVT_HEU)
                    Cmd.Parameters.AddWithValue("@26", Me.MNT_FAC_HEU)
                    Cmd.Parameters.AddWithValue("@27", Me.QTE_ART)
                    Cmd.Parameters.AddWithValue("@28", Me.PRX_VTE_ART)
                    Cmd.Parameters.AddWithValue("@29", Me.PRX_RMB_ART)
                    Cmd.Parameters.AddWithValue("@30", Me.PRX_RVT_ART)
                    Cmd.Parameters.AddWithValue("@31", Me.MNT_VTE_ART)
                    Cmd.Parameters.AddWithValue("@32", Me.MNT_RMB_ART)
                    Cmd.Parameters.AddWithValue("@33", Me.MNT_RVT_ART)
                    Cmd.Parameters.AddWithValue("@34", Me.MNT_FAC_ART)
                    Cmd.Parameters.AddWithValue("@35", Me.RMB_YON)
                    Cmd.Parameters.AddWithValue("@36", Me.FAC_YON)
                    Cmd.Parameters.AddWithValue("@37", Me.HRS_TOT_YON)
                    Cmd.Parameters.AddWithValue("@38", Me.COD_RCP)
                    Cmd.Parameters.AddWithValue("@39", Me.MNT_OPE)
                    Cmd.Parameters.AddWithValue("@40", Me.NUM_SEQ_FAC)
                    Cmd.Parameters.AddWithValue("@41", Me.FAC_ENR_YON)
                    Cmd.Parameters.AddWithValue("@42", Me.SEL_FAC_YON)
                    Cmd.Parameters.AddWithValue("@43", Me.POST_IT)
                    Cmd.Parameters.AddWithValue("@44", Me.HEU_CAL)
                    Cmd.Parameters.AddWithValue("@45", Me.EXT_YON)
                    Cmd.Parameters.AddWithValue("@46", Me.NUM_SEQ_EXT)
                    Cmd.Parameters.AddWithValue("@47", Me.GEN_OPE)
                    Cmd.Parameters.AddWithValue("@48", Me.TFT_EXT_YON)
                    Cmd.Parameters.AddWithValue("@49", Me.TFT_SSM)
                    Cmd.Parameters.AddWithValue("@50", Me.NUM_SEQ_FAC_BIS)
                    Cmd.Parameters.AddWithValue("@51", Me.HIS_YON)
                    Cmd.Parameters.AddWithValue("@52", Me.NUM_SEQ_FTA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:302| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:842 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_OPERATION] SET NUM_SEQ_SAV = @NUM_SEQ_SAV, NUM_SEQ_PAP = @NUM_SEQ_PAP, TYP_OPE = @TYP_OPE, COR_YON = @COR_YON, NUM_MDT = @NUM_MDT, NUM_ETA = @NUM_ETA, REF_CLB = @REF_CLB, DAT_OPE = @DAT_OPE, NUM_FTA = @NUM_FTA, LIB_PRS = @LIB_PRS, HEU_PRS = @HEU_PRS, HEU_LUN = @HEU_LUN, HEU_MAR = @HEU_MAR, HEU_MER = @HEU_MER, HEU_JEU = @HEU_JEU, HEU_VEN = @HEU_VEN, HEU_SAM = @HEU_SAM, HEU_DIM = @HEU_DIM, COD_TAR = @COD_TAR, COD_ART = @COD_ART, COD_CAT = @COD_CAT, PRX_VTE_HEU = @PRX_VTE_HEU, PRX_RVT_HEU = @PRX_RVT_HEU, MNT_VTE_HEU = @MNT_VTE_HEU, MNT_RVT_HEU = @MNT_RVT_HEU, MNT_FAC_HEU = @MNT_FAC_HEU, QTE_ART = @QTE_ART, PRX_VTE_ART = @PRX_VTE_ART, PRX_RMB_ART = @PRX_RMB_ART, PRX_RVT_ART = @PRX_RVT_ART, MNT_VTE_ART = @MNT_VTE_ART, MNT_RMB_ART = @MNT_RMB_ART, MNT_RVT_ART = @MNT_RVT_ART, MNT_FAC_ART = @MNT_FAC_ART, RMB_YON = @RMB_YON, FAC_YON = @FAC_YON, HRS_TOT_YON = @HRS_TOT_YON, COD_RCP = @COD_RCP, MNT_OPE = @MNT_OPE, NUM_SEQ_FAC = @NUM_SEQ_FAC, FAC_ENR_YON = @FAC_ENR_YON, SEL_FAC_YON = @SEL_FAC_YON, POST_IT = @POST_IT, HEU_CAL = @HEU_CAL, EXT_YON = @EXT_YON, NUM_SEQ_EXT = @NUM_SEQ_EXT, GEN_OPE = @GEN_OPE, TFT_EXT_YON = @TFT_EXT_YON, TFT_SSM = @TFT_SSM, NUM_SEQ_FAC_BIS = @NUM_SEQ_FAC_BIS, HIS_YON = @HIS_YON, NUM_SEQ_FTA = @NUM_SEQ_FTA WHERE NUM_SEQ = @NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_SAV", NUM_SEQ_SAV)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_PAP", NUM_SEQ_PAP)
                    Cmd.Parameters.AddWithValue("@TYP_OPE", TYP_OPE)
                    Cmd.Parameters.AddWithValue("@COR_YON", COR_YON)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    Cmd.Parameters.AddWithValue("@NUM_ETA", NUM_ETA)
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    Cmd.Parameters.AddWithValue("@DAT_OPE", DAT_OPE)
                    Cmd.Parameters.AddWithValue("@NUM_FTA", NUM_FTA)
                    Cmd.Parameters.AddWithValue("@LIB_PRS", LIB_PRS)
                    Cmd.Parameters.AddWithValue("@HEU_PRS", HEU_PRS)
                    Cmd.Parameters.AddWithValue("@HEU_LUN", HEU_LUN)
                    Cmd.Parameters.AddWithValue("@HEU_MAR", HEU_MAR)
                    Cmd.Parameters.AddWithValue("@HEU_MER", HEU_MER)
                    Cmd.Parameters.AddWithValue("@HEU_JEU", HEU_JEU)
                    Cmd.Parameters.AddWithValue("@HEU_VEN", HEU_VEN)
                    Cmd.Parameters.AddWithValue("@HEU_SAM", HEU_SAM)
                    Cmd.Parameters.AddWithValue("@HEU_DIM", HEU_DIM)
                    Cmd.Parameters.AddWithValue("@COD_TAR", COD_TAR)
                    Cmd.Parameters.AddWithValue("@COD_ART", COD_ART)
                    Cmd.Parameters.AddWithValue("@COD_CAT", COD_CAT)
                    Cmd.Parameters.AddWithValue("@PRX_VTE_HEU", PRX_VTE_HEU)
                    Cmd.Parameters.AddWithValue("@PRX_RVT_HEU", PRX_RVT_HEU)
                    Cmd.Parameters.AddWithValue("@MNT_VTE_HEU", MNT_VTE_HEU)
                    Cmd.Parameters.AddWithValue("@MNT_RVT_HEU", MNT_RVT_HEU)
                    Cmd.Parameters.AddWithValue("@MNT_FAC_HEU", MNT_FAC_HEU)
                    Cmd.Parameters.AddWithValue("@QTE_ART", QTE_ART)
                    Cmd.Parameters.AddWithValue("@PRX_VTE_ART", PRX_VTE_ART)
                    Cmd.Parameters.AddWithValue("@PRX_RMB_ART", PRX_RMB_ART)
                    Cmd.Parameters.AddWithValue("@PRX_RVT_ART", PRX_RVT_ART)
                    Cmd.Parameters.AddWithValue("@MNT_VTE_ART", MNT_VTE_ART)
                    Cmd.Parameters.AddWithValue("@MNT_RMB_ART", MNT_RMB_ART)
                    Cmd.Parameters.AddWithValue("@MNT_RVT_ART", MNT_RVT_ART)
                    Cmd.Parameters.AddWithValue("@MNT_FAC_ART", MNT_FAC_ART)
                    Cmd.Parameters.AddWithValue("@RMB_YON", RMB_YON)
                    Cmd.Parameters.AddWithValue("@FAC_YON", FAC_YON)
                    Cmd.Parameters.AddWithValue("@HRS_TOT_YON", HRS_TOT_YON)
                    Cmd.Parameters.AddWithValue("@COD_RCP", COD_RCP)
                    Cmd.Parameters.AddWithValue("@MNT_OPE", MNT_OPE)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_FAC", NUM_SEQ_FAC)
                    Cmd.Parameters.AddWithValue("@FAC_ENR_YON", FAC_ENR_YON)
                    Cmd.Parameters.AddWithValue("@SEL_FAC_YON", SEL_FAC_YON)
                    Cmd.Parameters.AddWithValue("@POST_IT", POST_IT)
                    Cmd.Parameters.AddWithValue("@HEU_CAL", HEU_CAL)
                    Cmd.Parameters.AddWithValue("@EXT_YON", EXT_YON)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_EXT", NUM_SEQ_EXT)
                    Cmd.Parameters.AddWithValue("@GEN_OPE", GEN_OPE)
                    Cmd.Parameters.AddWithValue("@TFT_EXT_YON", TFT_EXT_YON)
                    Cmd.Parameters.AddWithValue("@TFT_SSM", TFT_SSM)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_FAC_BIS", NUM_SEQ_FAC_BIS)
                    Cmd.Parameters.AddWithValue("@HIS_YON", HIS_YON)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ_FTA", NUM_SEQ_FTA)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:318| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:842 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_OPERATION] WHERE NUM_SEQ =@NUM_SEQ"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h22:325| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:846 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:334| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:846 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:341| <05.00.02> <Function> <> |.List()|List(Of MDT_OPERATION)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:846 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_OPERATION)
                Dim Result As New List(Of MDT_OPERATION)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_OPERATION(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), 0, Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), False, Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), "", Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), "", Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), "", Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), New DateTime(1970, 1, 1), Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), 0, Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), "", Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), 0, Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), 0, Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), 0, Row.Item(13)),
IIf(IsDBNull(Row.Item(14)), 0, Row.Item(14)),
IIf(IsDBNull(Row.Item(15)), 0, Row.Item(15)),
IIf(IsDBNull(Row.Item(16)), 0, Row.Item(16)),
IIf(IsDBNull(Row.Item(17)), 0, Row.Item(17)),
IIf(IsDBNull(Row.Item(18)), 0, Row.Item(18)),
IIf(IsDBNull(Row.Item(19)), "", Row.Item(19)),
IIf(IsDBNull(Row.Item(20)), "", Row.Item(20)),
IIf(IsDBNull(Row.Item(21)), "", Row.Item(21)),
IIf(IsDBNull(Row.Item(22)), 0, Row.Item(22)),
IIf(IsDBNull(Row.Item(23)), 0, Row.Item(23)),
IIf(IsDBNull(Row.Item(24)), 0, Row.Item(24)),
IIf(IsDBNull(Row.Item(25)), 0, Row.Item(25)),
IIf(IsDBNull(Row.Item(26)), 0, Row.Item(26)),
IIf(IsDBNull(Row.Item(27)), 0, Row.Item(27)),
IIf(IsDBNull(Row.Item(28)), 0, Row.Item(28)),
IIf(IsDBNull(Row.Item(29)), 0, Row.Item(29)),
IIf(IsDBNull(Row.Item(30)), 0, Row.Item(30)),
IIf(IsDBNull(Row.Item(31)), 0, Row.Item(31)),
IIf(IsDBNull(Row.Item(32)), 0, Row.Item(32)),
IIf(IsDBNull(Row.Item(33)), 0, Row.Item(33)),
IIf(IsDBNull(Row.Item(34)), 0, Row.Item(34)),
IIf(IsDBNull(Row.Item(35)), False, Row.Item(35)),
IIf(IsDBNull(Row.Item(36)), False, Row.Item(36)),
IIf(IsDBNull(Row.Item(37)), False, Row.Item(37)),
IIf(IsDBNull(Row.Item(38)), "", Row.Item(38)),
IIf(IsDBNull(Row.Item(39)), 0, Row.Item(39)),
IIf(IsDBNull(Row.Item(40)), 0, Row.Item(40)),
IIf(IsDBNull(Row.Item(41)), False, Row.Item(41)),
IIf(IsDBNull(Row.Item(42)), False, Row.Item(42)),
IIf(IsDBNull(Row.Item(43)), "", Row.Item(43)),
IIf(IsDBNull(Row.Item(44)), 0, Row.Item(44)),
IIf(IsDBNull(Row.Item(45)), False, Row.Item(45)),
IIf(IsDBNull(Row.Item(46)), 0, Row.Item(46)),
IIf(IsDBNull(Row.Item(47)), "", Row.Item(47)),
IIf(IsDBNull(Row.Item(48)), False, Row.Item(48)),
IIf(IsDBNull(Row.Item(49)), 0, Row.Item(49)),
IIf(IsDBNull(Row.Item(50)), 0, Row.Item(50)),
IIf(IsDBNull(Row.Item(51)), False, Row.Item(51)),
      IIf(IsDBNull(Row.Item(52)), 0, Row.Item(52)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:350| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_OPERATION)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:846 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_OPERATION)
                Dim Result As New List(Of MDT_OPERATION)
                Dim C As New MDT_OPERATION
                For Each Element As MDT_OPERATION In C.List
                    If Element.TYP_OPE.ToLower() = Search.ToLower() Or Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NUM_ETA.ToLower() = Search.ToLower() Or Element.REF_CLB.ToLower() = Search.ToLower() Or Element.LIB_PRS.ToLower() = Search.ToLower() Or Element.COD_TAR.ToLower() = Search.ToLower() Or Element.COD_ART.ToLower() = Search.ToLower() Or Element.COD_CAT.ToLower() = Search.ToLower() Or Element.COD_RCP.ToLower() = Search.ToLower() Or Element.POST_IT.ToLower() = Search.ToLower() Or Element.GEN_OPE.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:357| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_OPERATION)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:847 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_OPERATION)
                Dim Result As New List(Of MDT_OPERATION)
                Dim C As New MDT_OPERATION
                For Each Element As MDT_OPERATION In C.List
                    If Val(Element.NUM_SEQ) = Search Or Val(Element.NUM_SEQ_SAV) = Search Or Val(Element.NUM_SEQ_PAP) = Search Or Val(Element.NUM_FTA) = Search Or Val(Element.HEU_PRS) = Search Or Val(Element.HEU_LUN) = Search Or Val(Element.HEU_MAR) = Search Or Val(Element.HEU_MER) = Search Or Val(Element.HEU_JEU) = Search Or Val(Element.HEU_VEN) = Search Or Val(Element.HEU_SAM) = Search Or Val(Element.HEU_DIM) = Search Or Val(Element.PRX_VTE_HEU) = Search Or Val(Element.PRX_RVT_HEU) = Search Or Val(Element.MNT_VTE_HEU) = Search Or Val(Element.MNT_RVT_HEU) = Search Or Val(Element.MNT_FAC_HEU) = Search Or Val(Element.QTE_ART) = Search Or Val(Element.PRX_VTE_ART) = Search Or Val(Element.PRX_RMB_ART) = Search Or Val(Element.PRX_RVT_ART) = Search Or Val(Element.MNT_VTE_ART) = Search Or Val(Element.MNT_RMB_ART) = Search Or Val(Element.MNT_RVT_ART) = Search Or Val(Element.MNT_FAC_ART) = Search Or Val(Element.MNT_OPE) = Search Or Val(Element.NUM_SEQ_FAC) = Search Or Val(Element.HEU_CAL) = Search Or Val(Element.NUM_SEQ_EXT) = Search Or Val(Element.TFT_SSM) = Search Or Val(Element.NUM_SEQ_FAC_BIS) = Search Or Val(Element.NUM_SEQ_FTA) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:364| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:847 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_SEQ
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:371| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:847 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:379| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:848 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:387| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:848 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:414| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:848 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:421| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:848 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:428| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:849 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:435| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:852 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:443| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:852 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:448| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:852 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:455| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:853 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:463| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:853 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:472| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:853 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:480| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:853 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:494| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:854 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:497| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:854 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_SEQ">(Set|Get) The NUM_SEQ as Integer.</param>
            ''' <param name="NUM_SEQ_SAV">(Set|Get) The NUM_SEQ_SAV as Integer.</param>
            ''' <param name="NUM_SEQ_PAP">(Set|Get) The NUM_SEQ_PAP as Integer.</param>
            ''' <param name="TYP_OPE">(Set|Get) The TYP_OPE as String.</param>
            ''' <param name="COR_YON">(Set|Get) The COR_YON as Boolean.</param>
            ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="NUM_ETA">(Set|Get) The NUM_ETA as String.</param>
            ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>
            ''' <param name="DAT_OPE">(Set|Get) The DAT_OPE as DateTime.</param>
            ''' <param name="NUM_FTA">(Set|Get) The NUM_FTA as Integer.</param>
            ''' <param name="LIB_PRS">(Set|Get) The LIB_PRS as String.</param>
            ''' <param name="HEU_PRS">(Set|Get) The HEU_PRS as Double.</param>
            ''' <param name="HEU_LUN">(Set|Get) The HEU_LUN as Double.</param>
            ''' <param name="HEU_MAR">(Set|Get) The HEU_MAR as Double.</param>
            ''' <param name="HEU_MER">(Set|Get) The HEU_MER as Double.</param>
            ''' <param name="HEU_JEU">(Set|Get) The HEU_JEU as Double.</param>
            ''' <param name="HEU_VEN">(Set|Get) The HEU_VEN as Double.</param>
            ''' <param name="HEU_SAM">(Set|Get) The HEU_SAM as Double.</param>
            ''' <param name="HEU_DIM">(Set|Get) The HEU_DIM as Double.</param>
            ''' <param name="COD_TAR">(Set|Get) The COD_TAR as String.</param>
            ''' <param name="COD_ART">(Set|Get) The COD_ART as String.</param>
            ''' <param name="COD_CAT">(Set|Get) The COD_CAT as String.</param>
            ''' <param name="PRX_VTE_HEU">(Set|Get) The PRX_VTE_HEU as Double.</param>
            ''' <param name="PRX_RVT_HEU">(Set|Get) The PRX_RVT_HEU as Double.</param>
            ''' <param name="MNT_VTE_HEU">(Set|Get) The MNT_VTE_HEU as Double.</param>
            ''' <param name="MNT_RVT_HEU">(Set|Get) The MNT_RVT_HEU as Double.</param>
            ''' <param name="MNT_FAC_HEU">(Set|Get) The MNT_FAC_HEU as Double.</param>
            ''' <param name="QTE_ART">(Set|Get) The QTE_ART as Double.</param>
            ''' <param name="PRX_VTE_ART">(Set|Get) The PRX_VTE_ART as Double.</param>
            ''' <param name="PRX_RMB_ART">(Set|Get) The PRX_RMB_ART as Double.</param>
            ''' <param name="PRX_RVT_ART">(Set|Get) The PRX_RVT_ART as Double.</param>
            ''' <param name="MNT_VTE_ART">(Set|Get) The MNT_VTE_ART as Double.</param>
            ''' <param name="MNT_RMB_ART">(Set|Get) The MNT_RMB_ART as Double.</param>
            ''' <param name="MNT_RVT_ART">(Set|Get) The MNT_RVT_ART as Double.</param>
            ''' <param name="MNT_FAC_ART">(Set|Get) The MNT_FAC_ART as Double.</param>
            ''' <param name="RMB_YON">(Set|Get) The RMB_YON as Boolean.</param>
            ''' <param name="FAC_YON">(Set|Get) The FAC_YON as Boolean.</param>
            ''' <param name="HRS_TOT_YON">(Set|Get) The HRS_TOT_YON as Boolean.</param>
            ''' <param name="COD_RCP">(Set|Get) The COD_RCP as String.</param>
            ''' <param name="MNT_OPE">(Set|Get) The MNT_OPE as Double.</param>
            ''' <param name="NUM_SEQ_FAC">(Set|Get) The NUM_SEQ_FAC as Integer.</param>
            ''' <param name="FAC_ENR_YON">(Set|Get) The FAC_ENR_YON as Boolean.</param>
            ''' <param name="SEL_FAC_YON">(Set|Get) The SEL_FAC_YON as Boolean.</param>
            ''' <param name="POST_IT">(Set|Get) The POST_IT as String.</param>
            ''' <param name="HEU_CAL">(Set|Get) The HEU_CAL as Double.</param>
            ''' <param name="EXT_YON">(Set|Get) The EXT_YON as Boolean.</param>
            ''' <param name="NUM_SEQ_EXT">(Set|Get) The NUM_SEQ_EXT as Integer.</param>
            ''' <param name="GEN_OPE">(Set|Get) The GEN_OPE as String.</param>
            ''' <param name="TFT_EXT_YON">(Set|Get) The TFT_EXT_YON as Boolean.</param>
            ''' <param name="TFT_SSM">(Set|Get) The TFT_SSM as Integer.</param>
            ''' <param name="NUM_SEQ_FAC_BIS">(Set|Get) The NUM_SEQ_FAC_BIS as Integer.</param>
            ''' <param name="HIS_YON">(Set|Get) The HIS_YON as Boolean.</param>
            ''' <param name="NUM_SEQ_FTA">(Set|Get) The NUM_SEQ_FTA as Integer.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_SEQ As Integer,
ByVal NUM_SEQ_SAV As Integer,
ByVal NUM_SEQ_PAP As Integer,
ByVal TYP_OPE As String,
ByVal COR_YON As Boolean,
ByVal NUM_MDT As String,
ByVal NUM_ETA As String,
ByVal REF_CLB As String,
ByVal DAT_OPE As DateTime,
ByVal NUM_FTA As Integer,
ByVal LIB_PRS As String,
ByVal HEU_PRS As Double,
ByVal HEU_LUN As Double,
ByVal HEU_MAR As Double,
ByVal HEU_MER As Double,
ByVal HEU_JEU As Double,
ByVal HEU_VEN As Double,
ByVal HEU_SAM As Double,
ByVal HEU_DIM As Double,
ByVal COD_TAR As String,
ByVal COD_ART As String,
ByVal COD_CAT As String,
ByVal PRX_VTE_HEU As Double,
ByVal PRX_RVT_HEU As Double,
ByVal MNT_VTE_HEU As Double,
ByVal MNT_RVT_HEU As Double,
ByVal MNT_FAC_HEU As Double,
ByVal QTE_ART As Double,
ByVal PRX_VTE_ART As Double,
ByVal PRX_RMB_ART As Double,
ByVal PRX_RVT_ART As Double,
ByVal MNT_VTE_ART As Double,
ByVal MNT_RMB_ART As Double,
ByVal MNT_RVT_ART As Double,
ByVal MNT_FAC_ART As Double,
ByVal RMB_YON As Boolean,
ByVal FAC_YON As Boolean,
ByVal HRS_TOT_YON As Boolean,
ByVal COD_RCP As String,
ByVal MNT_OPE As Double,
ByVal NUM_SEQ_FAC As Integer,
ByVal FAC_ENR_YON As Boolean,
ByVal SEL_FAC_YON As Boolean,
ByVal POST_IT As String,
ByVal HEU_CAL As Double,
ByVal EXT_YON As Boolean,
ByVal NUM_SEQ_EXT As Integer,
ByVal GEN_OPE As String,
ByVal TFT_EXT_YON As Boolean,
ByVal TFT_SSM As Integer,
ByVal NUM_SEQ_FAC_BIS As Integer,
ByVal HIS_YON As Boolean,
ByVal NUM_SEQ_FTA As Integer)
                With Me
                    Clear()
                    Reset()
                    .NUM_SEQ = NUM_SEQ
                    .NUM_SEQ_SAV = NUM_SEQ_SAV
                    .NUM_SEQ_PAP = NUM_SEQ_PAP
                    .TYP_OPE = TYP_OPE
                    .COR_YON = COR_YON
                    .NUM_MDT = NUM_MDT
                    .NUM_ETA = NUM_ETA
                    .REF_CLB = REF_CLB
                    .DAT_OPE = DAT_OPE
                    .NUM_FTA = NUM_FTA
                    .LIB_PRS = LIB_PRS
                    .HEU_PRS = HEU_PRS
                    .HEU_LUN = HEU_LUN
                    .HEU_MAR = HEU_MAR
                    .HEU_MER = HEU_MER
                    .HEU_JEU = HEU_JEU
                    .HEU_VEN = HEU_VEN
                    .HEU_SAM = HEU_SAM
                    .HEU_DIM = HEU_DIM
                    .COD_TAR = COD_TAR
                    .COD_ART = COD_ART
                    .COD_CAT = COD_CAT
                    .PRX_VTE_HEU = PRX_VTE_HEU
                    .PRX_RVT_HEU = PRX_RVT_HEU
                    .MNT_VTE_HEU = MNT_VTE_HEU
                    .MNT_RVT_HEU = MNT_RVT_HEU
                    .MNT_FAC_HEU = MNT_FAC_HEU
                    .QTE_ART = QTE_ART
                    .PRX_VTE_ART = PRX_VTE_ART
                    .PRX_RMB_ART = PRX_RMB_ART
                    .PRX_RVT_ART = PRX_RVT_ART
                    .MNT_VTE_ART = MNT_VTE_ART
                    .MNT_RMB_ART = MNT_RMB_ART
                    .MNT_RVT_ART = MNT_RVT_ART
                    .MNT_FAC_ART = MNT_FAC_ART
                    .RMB_YON = RMB_YON
                    .FAC_YON = FAC_YON
                    .HRS_TOT_YON = HRS_TOT_YON
                    .COD_RCP = COD_RCP
                    .MNT_OPE = MNT_OPE
                    .NUM_SEQ_FAC = NUM_SEQ_FAC
                    .FAC_ENR_YON = FAC_ENR_YON
                    .SEL_FAC_YON = SEL_FAC_YON
                    .POST_IT = POST_IT
                    .HEU_CAL = HEU_CAL
                    .EXT_YON = EXT_YON
                    .NUM_SEQ_EXT = NUM_SEQ_EXT
                    .GEN_OPE = GEN_OPE
                    .TFT_EXT_YON = TFT_EXT_YON
                    .TFT_SSM = TFT_SSM
                    .NUM_SEQ_FAC_BIS = NUM_SEQ_FAC_BIS
                    .HIS_YON = HIS_YON
                    .NUM_SEQ_FTA = NUM_SEQ_FTA
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:755| <08.00.00> <Class> <> |.MDT_ORTHOGRAPHE|Class|{30} |Production Cost : 31.9|Selling Price : 79.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_ORTHOGRAPHE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:755
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{3}||0.8| |2.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{3}||0.5| |1.5
        '''    |12| |Parameter  |{8}||0.5| |4
        '''    |Production Cost             |31.9
        '''    |Selling Price without VAT   |79.75
        '''    |Total TVA                   |6.14
        '''    |Grand Total                 |85.89
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:895 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_ORTHOGRAPHE
#Region "<1> [Property]{3}"
#Region "[On] |2019/07/16 23h22:755| <01.00.00> <Property> <Columns> |.Num_Seq_Nom()|Integer|"' (Set|Get) The Num_Seq_Nom as Integer.
            Private _Num_Seq_Nom As Integer
            '''    <Summary>
            '''     (Set|Get) The Num_Seq_Nom as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:896 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The Num_Seq_Nom as Integer.")>
            Public Property Num_Seq_Nom() As Integer
                Get
                    Return _Num_Seq_Nom
                End Get
                Set(ByVal Value As Integer)
                    _Num_Seq_Nom = Value
                End Set
            End Property
#End Region '(Set|Get) The Num_Seq_Nom as Integer.

#Region "[On] |2019/07/16 23h22:769| <01.00.01> <Property> <Columns> |.NomFaux()|String|"' (Set|Get) The NomFaux as String.
            Private _NomFaux As String
            '''    <Summary>
            '''     (Set|Get) The NomFaux as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:896 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NomFaux as String.")>
            Public Property NomFaux() As String
                Get
                    Return _NomFaux
                End Get
                Set(ByVal Value As String)
                    _NomFaux = Value
                End Set
            End Property
#End Region '(Set|Get) The NomFaux as String.

#Region "[On] |2019/07/16 23h22:774| <01.00.02> <Property> <Columns> |.NomJuste()|String|"' (Set|Get) The NomJuste as String.
            Private _NomJuste As String
            '''    <Summary>
            '''     (Set|Get) The NomJuste as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:896 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NomJuste as String.")>
            Public Property NomJuste() As String
                Get
                    Return _NomJuste
                End Get
                Set(ByVal Value As String)
                    _NomJuste = Value
                End Set
            End Property
#End Region '(Set|Get) The NomJuste as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:780| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{2}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:899 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The Num_Seq_Nom as Integer.</summary>
                [Num_Seq_Nom] = 0
                ''' <summary>(Set|Get) The NomFaux as String.</summary>
                [NomFaux] = 1
                ''' <summary>(Set|Get) The NomJuste as String.</summary>
                [NomJuste] = 2
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:785| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:899 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .Num_Seq_Nom = 0
                    .NomFaux = Nothing
                    .NomJuste = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:815| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:899 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_ORTHOGRAPHE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_ORTHOGRAPHE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_ORTHOGRAPHE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:819| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:899 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_ORTHOGRAPHE] (
`Num_Seq_Nom`, 
`NomFaux`, 
`NomJuste`) Values (@0, @1, @2)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.Num_Seq_Nom)
                    Cmd.Parameters.AddWithValue("@1", Me.NomFaux)
                    Cmd.Parameters.AddWithValue("@2", Me.NomJuste)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:823| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:899 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_ORTHOGRAPHE] SET NomFaux = @NomFaux, NomJuste = @NomJuste WHERE Num_Seq_Nom = @Num_Seq_Nom"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NomFaux", NomFaux)
                    Cmd.Parameters.AddWithValue("@NomJuste", NomJuste)
                    Cmd.Parameters.AddWithValue("@Num_Seq_Nom", Num_Seq_Nom)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:827| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:899 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_ORTHOGRAPHE] WHERE Num_Seq_Nom =@Num_Seq_Nom"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@Num_Seq_Nom", Num_Seq_Nom)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h22:832| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:900 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:837| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:900 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:841| <05.00.02> <Function> <> |.List()|List(Of MDT_ORTHOGRAPHE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:900 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_ORTHOGRAPHE)
                Dim Result As New List(Of MDT_ORTHOGRAPHE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_ORTHOGRAPHE(IIf(IsDBNull(Row.Item(0)), 0, Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
      IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:849| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_ORTHOGRAPHE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:903 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_ORTHOGRAPHE)
                Dim Result As New List(Of MDT_ORTHOGRAPHE)
                Dim C As New MDT_ORTHOGRAPHE
                For Each Element As MDT_ORTHOGRAPHE In C.List
                    If Element.NomFaux.ToLower() = Search.ToLower() Or Element.NomJuste.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:854| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_ORTHOGRAPHE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:903 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_ORTHOGRAPHE)
                Dim Result As New List(Of MDT_ORTHOGRAPHE)
                Dim C As New MDT_ORTHOGRAPHE
                For Each Element As MDT_ORTHOGRAPHE In C.List
                    If Val(Element.NomFaux) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:859| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:903 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.Num_Seq_Nom
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:864| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:903 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:869| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:903 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:874| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:903 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:894| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:903 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:900| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:904 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:905| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:904 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:910| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:904 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:915| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:904 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:918| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:904 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:924| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:904 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:929| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:904 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:933| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:907 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:937| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:907 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:942| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:924 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:944| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:925 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="Num_Seq_Nom">(Set|Get) The Num_Seq_Nom as Integer.</param>
            ''' <param name="NomFaux">(Set|Get) The NomFaux as String.</param>
            ''' <param name="NomJuste">(Set|Get) The NomJuste as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal Num_Seq_Nom As Integer,
ByVal NomFaux As String,
ByVal NomJuste As String)
                With Me
                    Clear()
                    Reset()
                    .Num_Seq_Nom = Num_Seq_Nom
                    .NomFaux = NomFaux
                    .NomJuste = NomJuste
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:229| <08.00.00> <Class> <> |.MDT_RECAPITULATION|Class|{37} |Production Cost : 44.5|Selling Price : 111.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_RECAPITULATION
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:229
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{10}||0.8| |8
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{10}||0.5| |5
        '''    |12| |Parameter  |{15}||0.5| |7.5
        '''    |Production Cost             |44.5
        '''    |Selling Price without VAT   |111.25
        '''    |Total TVA                   |8.57
        '''    |Grand Total                 |119.82
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:936 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_RECAPITULATION
#Region "<1> [Property]{10}"
#Region "[On] |2019/07/16 23h22:230| <01.00.00> <Property> <Columns> |.COD_RCP()|String|"' (Set|Get) The COD_RCP as String.
            Private _COD_RCP As String
            '''    <Summary>
            '''     (Set|Get) The COD_RCP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:936 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_RCP as String.")>
            Public Property COD_RCP() As String
                Get
                    Return _COD_RCP
                End Get
                Set(ByVal Value As String)
                    _COD_RCP = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_RCP as String.

#Region "[On] |2019/07/16 23h22:237| <01.00.01> <Property> <Columns> |.TOT_YON()|Boolean|"' (Set|Get) The TOT_YON as Boolean.
            Private _TOT_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The TOT_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:936 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_YON as Boolean.")>
            Public Property TOT_YON() As Boolean
                Get
                    Return _TOT_YON
                End Get
                Set(ByVal Value As Boolean)
                    _TOT_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_YON as Boolean.

#Region "[On] |2019/07/16 23h22:243| <01.00.02> <Property> <Columns> |.NOM_RCP()|String|"' (Set|Get) The NOM_RCP as String.
            Private _NOM_RCP As String
            '''    <Summary>
            '''     (Set|Get) The NOM_RCP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:936 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_RCP as String.")>
            Public Property NOM_RCP() As String
                Get
                    Return _NOM_RCP
                End Get
                Set(ByVal Value As String)
                    _NOM_RCP = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_RCP as String.

#Region "[On] |2019/07/16 23h22:247| <01.00.03> <Property> <Columns> |.NOM_ABR()|String|"' (Set|Get) The NOM_ABR as String.
            Private _NOM_ABR As String
            '''    <Summary>
            '''     (Set|Get) The NOM_ABR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:936 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_ABR as String.")>
            Public Property NOM_ABR() As String
                Get
                    Return _NOM_ABR
                End Get
                Set(ByVal Value As String)
                    _NOM_ABR = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_ABR as String.

#Region "[On] |2019/07/16 23h22:255| <01.00.04> <Property> <Columns> |.FRS_YON()|Boolean|"' (Set|Get) The FRS_YON as Boolean.
            Private _FRS_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The FRS_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:937 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The FRS_YON as Boolean.")>
            Public Property FRS_YON() As Boolean
                Get
                    Return _FRS_YON
                End Get
                Set(ByVal Value As Boolean)
                    _FRS_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The FRS_YON as Boolean.

#Region "[On] |2019/07/16 23h22:260| <01.00.05> <Property> <Columns> |.PCG_YON()|Boolean|"' (Set|Get) The PCG_YON as Boolean.
            Private _PCG_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The PCG_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:937 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PCG_YON as Boolean.")>
            Public Property PCG_YON() As Boolean
                Get
                    Return _PCG_YON
                End Get
                Set(ByVal Value As Boolean)
                    _PCG_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The PCG_YON as Boolean.

#Region "[On] |2019/07/16 23h22:265| <01.00.06> <Property> <Columns> |.TOT_1ER()|String|"' (Set|Get) The TOT_1ER as String.
            Private _TOT_1ER As String
            '''    <Summary>
            '''     (Set|Get) The TOT_1ER as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:937 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_1ER as String.")>
            Public Property TOT_1ER() As String
                Get
                    Return _TOT_1ER
                End Get
                Set(ByVal Value As String)
                    _TOT_1ER = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_1ER as String.

#Region "[On] |2019/07/16 23h22:271| <01.00.07> <Property> <Columns> |.TOT_2EM()|String|"' (Set|Get) The TOT_2EM as String.
            Private _TOT_2EM As String
            '''    <Summary>
            '''     (Set|Get) The TOT_2EM as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:937 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TOT_2EM as String.")>
            Public Property TOT_2EM() As String
                Get
                    Return _TOT_2EM
                End Get
                Set(ByVal Value As String)
                    _TOT_2EM = Value
                End Set
            End Property
#End Region '(Set|Get) The TOT_2EM as String.

#Region "[On] |2019/07/16 23h22:276| <01.00.08> <Property> <Columns> |.COL_STAT()|Double|"' (Set|Get) The COL_STAT as Double.
            Private _COL_STAT As Double
            '''    <Summary>
            '''     (Set|Get) The COL_STAT as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:937 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COL_STAT as Double.")>
            Public Property COL_STAT() As Double
                Get
                    Return _COL_STAT
                End Get
                Set(ByVal Value As Double)
                    _COL_STAT = Value
                End Set
            End Property
#End Region '(Set|Get) The COL_STAT as Double.

#Region "[On] |2019/07/16 23h22:281| <01.00.09> <Property> <Columns> |.TAU_PRO()|String|"' (Set|Get) The TAU_PRO as String.
            Private _TAU_PRO As String
            '''    <Summary>
            '''     (Set|Get) The TAU_PRO as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:940 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TAU_PRO as String.")>
            Public Property TAU_PRO() As String
                Get
                    Return _TAU_PRO
                End Get
                Set(ByVal Value As String)
                    _TAU_PRO = Value
                End Set
            End Property
#End Region '(Set|Get) The TAU_PRO as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:286| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{9}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:940 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_RCP as String.</summary>
                [COD_RCP] = 0
                ''' <summary>(Set|Get) The TOT_YON as Boolean.</summary>
                [TOT_YON] = 1
                ''' <summary>(Set|Get) The NOM_RCP as String.</summary>
                [NOM_RCP] = 2
                ''' <summary>(Set|Get) The NOM_ABR as String.</summary>
                [NOM_ABR] = 3
                ''' <summary>(Set|Get) The FRS_YON as Boolean.</summary>
                [FRS_YON] = 4
                ''' <summary>(Set|Get) The PCG_YON as Boolean.</summary>
                [PCG_YON] = 5
                ''' <summary>(Set|Get) The TOT_1ER as String.</summary>
                [TOT_1ER] = 6
                ''' <summary>(Set|Get) The TOT_2EM as String.</summary>
                [TOT_2EM] = 7
                ''' <summary>(Set|Get) The COL_STAT as Double.</summary>
                [COL_STAT] = 8
                ''' <summary>(Set|Get) The TAU_PRO as String.</summary>
                [TAU_PRO] = 9
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:291| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:940 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_RCP = Nothing
                    .TOT_YON = False
                    .NOM_RCP = Nothing
                    .NOM_ABR = Nothing
                    .FRS_YON = False
                    .PCG_YON = False
                    .TOT_1ER = Nothing
                    .TOT_2EM = Nothing
                    .COL_STAT = 0
                    .TAU_PRO = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:296| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:941 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_RECAPITULATION"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_RECAPITULATION"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_RECAPITULATION"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:302| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:941 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_RECAPITULATION] (
`COD_RCP`, 
`TOT_YON`, 
`NOM_RCP`, 
`NOM_ABR`, 
`FRS_YON`, 
`PCG_YON`, 
`TOT_1ER`, 
`TOT_2EM`, 
`COL_STAT`, 
`TAU_PRO`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_RCP)
                    Cmd.Parameters.AddWithValue("@1", Me.TOT_YON)
                    Cmd.Parameters.AddWithValue("@2", Me.NOM_RCP)
                    Cmd.Parameters.AddWithValue("@3", Me.NOM_ABR)
                    Cmd.Parameters.AddWithValue("@4", Me.FRS_YON)
                    Cmd.Parameters.AddWithValue("@5", Me.PCG_YON)
                    Cmd.Parameters.AddWithValue("@6", Me.TOT_1ER)
                    Cmd.Parameters.AddWithValue("@7", Me.TOT_2EM)
                    Cmd.Parameters.AddWithValue("@8", Me.COL_STAT)
                    Cmd.Parameters.AddWithValue("@9", Me.TAU_PRO)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:307| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:943 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_RECAPITULATION] SET TOT_YON = @TOT_YON, NOM_RCP = @NOM_RCP, NOM_ABR = @NOM_ABR, FRS_YON = @FRS_YON, PCG_YON = @PCG_YON, TOT_1ER = @TOT_1ER, TOT_2EM = @TOT_2EM, COL_STAT = @COL_STAT, TAU_PRO = @TAU_PRO WHERE COD_RCP = @COD_RCP"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@TOT_YON", TOT_YON)
                    Cmd.Parameters.AddWithValue("@NOM_RCP", NOM_RCP)
                    Cmd.Parameters.AddWithValue("@NOM_ABR", NOM_ABR)
                    Cmd.Parameters.AddWithValue("@FRS_YON", FRS_YON)
                    Cmd.Parameters.AddWithValue("@PCG_YON", PCG_YON)
                    Cmd.Parameters.AddWithValue("@TOT_1ER", TOT_1ER)
                    Cmd.Parameters.AddWithValue("@TOT_2EM", TOT_2EM)
                    Cmd.Parameters.AddWithValue("@COL_STAT", COL_STAT)
                    Cmd.Parameters.AddWithValue("@TAU_PRO", TAU_PRO)
                    Cmd.Parameters.AddWithValue("@COD_RCP", COD_RCP)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:311| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:943 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_RECAPITULATION] WHERE COD_RCP =@COD_RCP"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_RCP", COD_RCP)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h22:336| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:343| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:348| <05.00.02> <Function> <> |.List()|List(Of MDT_RECAPITULATION)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_RECAPITULATION)
                Dim Result As New List(Of MDT_RECAPITULATION)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_RECAPITULATION(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), False, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), False, Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), False, Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), "", Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), "", Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), 0, Row.Item(8)),
      IIf(IsDBNull(Row.Item(9)), "", Row.Item(9)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:353| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_RECAPITULATION)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_RECAPITULATION)
                Dim Result As New List(Of MDT_RECAPITULATION)
                Dim C As New MDT_RECAPITULATION
                For Each Element As MDT_RECAPITULATION In C.List
                    If Element.COD_RCP.ToLower() = Search.ToLower() Or Element.NOM_RCP.ToLower() = Search.ToLower() Or Element.NOM_ABR.ToLower() = Search.ToLower() Or Element.TOT_1ER.ToLower() = Search.ToLower() Or Element.TOT_2EM.ToLower() = Search.ToLower() Or Element.TAU_PRO.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:358| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_RECAPITULATION)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_RECAPITULATION)
                Dim Result As New List(Of MDT_RECAPITULATION)
                Dim C As New MDT_RECAPITULATION
                For Each Element As MDT_RECAPITULATION In C.List
                    If Val(Element.COD_RCP) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:362| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_RCP
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:368| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:946 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:373| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:947 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:378| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:947 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:384| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:947 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:389| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:947 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:395| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:950 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:400| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:950 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:426| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:950 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:429| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:951 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:434| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:951 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:440| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:951 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:445| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:951 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:450| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:952 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:455| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:952 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:457| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:952 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_RCP">(Set|Get) The COD_RCP as String.</param>
            ''' <param name="TOT_YON">(Set|Get) The TOT_YON as Boolean.</param>
            ''' <param name="NOM_RCP">(Set|Get) The NOM_RCP as String.</param>
            ''' <param name="NOM_ABR">(Set|Get) The NOM_ABR as String.</param>
            ''' <param name="FRS_YON">(Set|Get) The FRS_YON as Boolean.</param>
            ''' <param name="PCG_YON">(Set|Get) The PCG_YON as Boolean.</param>
            ''' <param name="TOT_1ER">(Set|Get) The TOT_1ER as String.</param>
            ''' <param name="TOT_2EM">(Set|Get) The TOT_2EM as String.</param>
            ''' <param name="COL_STAT">(Set|Get) The COL_STAT as Double.</param>
            ''' <param name="TAU_PRO">(Set|Get) The TAU_PRO as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_RCP As String,
ByVal TOT_YON As Boolean,
ByVal NOM_RCP As String,
ByVal NOM_ABR As String,
ByVal FRS_YON As Boolean,
ByVal PCG_YON As Boolean,
ByVal TOT_1ER As String,
ByVal TOT_2EM As String,
ByVal COL_STAT As Double,
ByVal TAU_PRO As String)
                With Me
                    Clear()
                    Reset()
                    .COD_RCP = COD_RCP
                    .TOT_YON = TOT_YON
                    .NOM_RCP = NOM_RCP
                    .NOM_ABR = NOM_ABR
                    .FRS_YON = FRS_YON
                    .PCG_YON = PCG_YON
                    .TOT_1ER = TOT_1ER
                    .TOT_2EM = TOT_2EM
                    .COL_STAT = COL_STAT
                    .TAU_PRO = TAU_PRO
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h22:673| <08.00.00> <Class> <> |.MDT_SELECTION_MDT|Class|{29} |Production Cost : 30.1|Selling Price : 75.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_SELECTION_MDT
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h22:673
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{2}||0.8| |1.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{2}||0.5| |1
        '''    |12| |Parameter  |{7}||0.5| |3.5
        '''    |Production Cost             |30.1
        '''    |Selling Price without VAT   |75.25
        '''    |Total TVA                   |5.79
        '''    |Grand Total                 |81.04
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:994 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_SELECTION_MDT
#Region "<1> [Property]{2}"
#Region "[On] |2019/07/16 23h22:673| <01.00.00> <Property> <Columns> |.IdUsr()|String|"' (Set|Get) The IdUsr as String.
            Private _IdUsr As String
            '''    <Summary>
            '''     (Set|Get) The IdUsr as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:994 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The IdUsr as String.")>
            Public Property IdUsr() As String
                Get
                    Return _IdUsr
                End Get
                Set(ByVal Value As String)
                    _IdUsr = Value
                End Set
            End Property
#End Region '(Set|Get) The IdUsr as String.

#Region "[On] |2019/07/16 23h22:690| <01.00.01> <Property> <Columns> |.NumMdt()|String|"' (Set|Get) The NumMdt as String.
            Private _NumMdt As String
            '''    <Summary>
            '''     (Set|Get) The NumMdt as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:994 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NumMdt as String.")>
            Public Property NumMdt() As String
                Get
                    Return _NumMdt
                End Get
                Set(ByVal Value As String)
                    _NumMdt = Value
                End Set
            End Property
#End Region '(Set|Get) The NumMdt as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h22:696| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{1}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:994 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The IdUsr as String.</summary>
                [IdUsr] = 0
                ''' <summary>(Set|Get) The NumMdt as String.</summary>
                [NumMdt] = 1
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h22:701| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:995 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .IdUsr = Nothing
                    .NumMdt = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h22:720| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:995 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_SELECTION_MDT"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_SELECTION_MDT"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_SELECTION_MDT"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h22:725| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:995 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_SELECTION_MDT] (
`IdUsr`, 
`NumMdt`) Values (@0, @1)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.IdUsr)
                    Cmd.Parameters.AddWithValue("@1", Me.NumMdt)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h22:730| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:995 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_SELECTION_MDT] SET NumMdt = @NumMdt WHERE IdUsr = @IdUsr"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NumMdt", NumMdt)
                    Cmd.Parameters.AddWithValue("@IdUsr", IdUsr)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h22:735| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:995 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_SELECTION_MDT] WHERE IdUsr =@IdUsr"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@IdUsr", IdUsr)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h22:739| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:995 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h22:745| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:998 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h22:750| <05.00.02> <Function> <> |.List()|List(Of MDT_SELECTION_MDT)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:998 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_SELECTION_MDT)
                Dim Result As New List(Of MDT_SELECTION_MDT)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_SELECTION_MDT(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
      IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h22:755| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_SELECTION_MDT)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:050 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_SELECTION_MDT)
                Dim Result As New List(Of MDT_SELECTION_MDT)
                Dim C As New MDT_SELECTION_MDT
                For Each Element As MDT_SELECTION_MDT In C.List
                    If Element.IdUsr.ToLower() = Search.ToLower() Or Element.NumMdt.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h22:759| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_SELECTION_MDT)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:050 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_SELECTION_MDT)
                Dim Result As New List(Of MDT_SELECTION_MDT)
                Dim C As New MDT_SELECTION_MDT
                For Each Element As MDT_SELECTION_MDT In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h22:764| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:050 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.IdUsr
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h22:769| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:050 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h22:775| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:050 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h22:780| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:050 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h22:787| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:050 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h22:817| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:050 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h22:822| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:051 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h22:827| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:051 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h22:834| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h22:836| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h22:841| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h22:846| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h22:852| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h22:857| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h22:864| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:054 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h22:865| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:055 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="IdUsr">(Set|Get) The IdUsr as String.</param>
            ''' <param name="NumMdt">(Set|Get) The NumMdt as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal IdUsr As String,
ByVal NumMdt As String)
                With Me
                    Clear()
                    Reset()
                    .IdUsr = IdUsr
                    .NumMdt = NumMdt
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:641| <08.00.00> <Class> <> |.MDT_TACHE_COLLABO|Class|{44} |Production Cost : 58.2|Selling Price : 145.5|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_TACHE_COLLABO
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:641
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{15}||0.8| |12
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{9}||1.6| |14.4
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{15}||0.5| |7.5
        '''    |12| |Parameter  |{23}||0.5| |11.5
        '''    |Production Cost             |58.2
        '''    |Selling Price without VAT   |145.5
        '''    |Total TVA                   |11.2
        '''    |Grand Total                 |156.7
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:083 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_TACHE_COLLABO
#Region "<1> [Property]{15}"
#Region "[On] |2019/07/16 23h23:642| <01.00.00> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:083 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h23:654| <01.00.01> <Property> <Columns> |.NUM_FTA()|Integer|"' (Set|Get) The NUM_FTA as Integer.
            Private _NUM_FTA As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_FTA as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:084 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FTA as Integer.")>
            Public Property NUM_FTA() As Integer
                Get
                    Return _NUM_FTA
                End Get
                Set(ByVal Value As Integer)
                    _NUM_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FTA as Integer.

#Region "[On] |2019/07/16 23h23:666| <01.00.02> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:084 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#Region "[On] |2019/07/16 23h23:671| <01.00.03> <Property> <Columns> |.ELE_TRT()|String|"' (Set|Get) The ELE_TRT as String.
            Private _ELE_TRT As String
            '''    <Summary>
            '''     (Set|Get) The ELE_TRT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:085 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The ELE_TRT as String.")>
            Public Property ELE_TRT() As String
                Get
                    Return _ELE_TRT
                End Get
                Set(ByVal Value As String)
                    _ELE_TRT = Value
                End Set
            End Property
#End Region '(Set|Get) The ELE_TRT as String.

#Region "[On] |2019/07/16 23h23:676| <01.00.04> <Property> <Columns> |.DAT_ECH_CLB()|DateTime|"' (Set|Get) The DAT_ECH_CLB as DateTime.
            Private _DAT_ECH_CLB As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_ECH_CLB as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:086 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_ECH_CLB as DateTime.")>
            Public Property DAT_ECH_CLB() As DateTime
                Get
                    Return _DAT_ECH_CLB
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_ECH_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_ECH_CLB as DateTime.

#Region "[On] |2019/07/16 23h23:682| <01.00.05> <Property> <Columns> |.DAT_FIN()|DateTime|"' (Set|Get) The DAT_FIN as DateTime.
            Private _DAT_FIN As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_FIN as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:086 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_FIN as DateTime.")>
            Public Property DAT_FIN() As DateTime
                Get
                    Return _DAT_FIN
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_FIN = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_FIN as DateTime.

#Region "[On] |2019/07/16 23h23:707| <01.00.06> <Property> <Columns> |.HEU_BUD()|Double|"' (Set|Get) The HEU_BUD as Double.
            Private _HEU_BUD As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_BUD as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:086 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_BUD as Double.")>
            Public Property HEU_BUD() As Double
                Get
                    Return _HEU_BUD
                End Get
                Set(ByVal Value As Double)
                    _HEU_BUD = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_BUD as Double.

#Region "[On] |2019/07/16 23h23:713| <01.00.07> <Property> <Columns> |.HEU_EFF()|Double|"' (Set|Get) The HEU_EFF as Double.
            Private _HEU_EFF As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_EFF as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:089 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_EFF as Double.")>
            Public Property HEU_EFF() As Double
                Get
                    Return _HEU_EFF
                End Get
                Set(ByVal Value As Double)
                    _HEU_EFF = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_EFF as Double.

#Region "[On] |2019/07/16 23h23:719| <01.00.08> <Property> <Columns> |.HEU_INI()|Double|"' (Set|Get) The HEU_INI as Double.
            Private _HEU_INI As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_INI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:089 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_INI as Double.")>
            Public Property HEU_INI() As Double
                Get
                    Return _HEU_INI
                End Get
                Set(ByVal Value As Double)
                    _HEU_INI = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_INI as Double.

#Region "[On] |2019/07/16 23h23:724| <01.00.09> <Property> <Columns> |.NUM_FTA_REP()|Integer|"' (Set|Get) The NUM_FTA_REP as Integer.
            Private _NUM_FTA_REP As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_FTA_REP as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:089 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FTA_REP as Integer.")>
            Public Property NUM_FTA_REP() As Integer
                Get
                    Return _NUM_FTA_REP
                End Get
                Set(ByVal Value As Integer)
                    _NUM_FTA_REP = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FTA_REP as Integer.

#Region "[On] |2019/07/16 23h23:729| <01.00.10> <Property> <Columns> |.AUTO_TERM()|Boolean|"' (Set|Get) The AUTO_TERM as Boolean.
            Private _AUTO_TERM As Boolean
            '''    <Summary>
            '''     (Set|Get) The AUTO_TERM as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:089 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The AUTO_TERM as Boolean.")>
            Public Property AUTO_TERM() As Boolean
                Get
                    Return _AUTO_TERM
                End Get
                Set(ByVal Value As Boolean)
                    _AUTO_TERM = Value
                End Set
            End Property
#End Region '(Set|Get) The AUTO_TERM as Boolean.

#Region "[On] |2019/07/16 23h23:734| <01.00.11> <Property> <Columns> |.CLB_MOD()|String|"' (Set|Get) The CLB_MOD as String.
            Private _CLB_MOD As String
            '''    <Summary>
            '''     (Set|Get) The CLB_MOD as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:090 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The CLB_MOD as String.")>
            Public Property CLB_MOD() As String
                Get
                    Return _CLB_MOD
                End Get
                Set(ByVal Value As String)
                    _CLB_MOD = Value
                End Set
            End Property
#End Region '(Set|Get) The CLB_MOD as String.

#Region "[On] |2019/07/16 23h23:741| <01.00.12> <Property> <Columns> |.DAT_MOD()|DateTime|"' (Set|Get) The DAT_MOD as DateTime.
            Private _DAT_MOD As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_MOD as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:090 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_MOD as DateTime.")>
            Public Property DAT_MOD() As DateTime
                Get
                    Return _DAT_MOD
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_MOD = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_MOD as DateTime.

#Region "[On] |2019/07/16 23h23:747| <01.00.13> <Property> <Columns> |.NUM_SEQ()|Integer|"' (Set|Get) The NUM_SEQ as Integer.
            Private _NUM_SEQ As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_SEQ as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:090 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_SEQ as Integer.")>
            Public Property NUM_SEQ() As Integer
                Get
                    Return _NUM_SEQ
                End Get
                Set(ByVal Value As Integer)
                    _NUM_SEQ = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_SEQ as Integer.

#Region "[On] |2019/07/16 23h23:752| <01.00.14> <Property> <Columns> |.PLA_YON()|Boolean|"' (Set|Get) The PLA_YON as Boolean.
            Private _PLA_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The PLA_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:090 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PLA_YON as Boolean.")>
            Public Property PLA_YON() As Boolean
                Get
                    Return _PLA_YON
                End Get
                Set(ByVal Value As Boolean)
                    _PLA_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The PLA_YON as Boolean.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:760| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{14}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:093 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 0
                ''' <summary>(Set|Get) The NUM_FTA as Integer.</summary>
                [NUM_FTA] = 1
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 2
                ''' <summary>(Set|Get) The ELE_TRT as String.</summary>
                [ELE_TRT] = 3
                ''' <summary>(Set|Get) The DAT_ECH_CLB as DateTime.</summary>
                [DAT_ECH_CLB] = 4
                ''' <summary>(Set|Get) The DAT_FIN as DateTime.</summary>
                [DAT_FIN] = 5
                ''' <summary>(Set|Get) The HEU_BUD as Double.</summary>
                [HEU_BUD] = 6
                ''' <summary>(Set|Get) The HEU_EFF as Double.</summary>
                [HEU_EFF] = 7
                ''' <summary>(Set|Get) The HEU_INI as Double.</summary>
                [HEU_INI] = 8
                ''' <summary>(Set|Get) The NUM_FTA_REP as Integer.</summary>
                [NUM_FTA_REP] = 9
                ''' <summary>(Set|Get) The AUTO_TERM as Boolean.</summary>
                [AUTO_TERM] = 10
                ''' <summary>(Set|Get) The CLB_MOD as String.</summary>
                [CLB_MOD] = 11
                ''' <summary>(Set|Get) The DAT_MOD as DateTime.</summary>
                [DAT_MOD] = 12
                ''' <summary>(Set|Get) The NUM_SEQ as Integer.</summary>
                [NUM_SEQ] = 13
                ''' <summary>(Set|Get) The PLA_YON as Boolean.</summary>
                [PLA_YON] = 14
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:765| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:093 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_MDT = Nothing
                    .NUM_FTA = 0
                    .REF_CLB = Nothing
                    .ELE_TRT = Nothing
                    .DAT_ECH_CLB = New DateTime
                    .DAT_FIN = New DateTime
                    .HEU_BUD = 0
                    .HEU_EFF = 0
                    .HEU_INI = 0
                    .NUM_FTA_REP = 0
                    .AUTO_TERM = False
                    .CLB_MOD = Nothing
                    .DAT_MOD = New DateTime
                    .NUM_SEQ = 0
                    .PLA_YON = False
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:770| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:093 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_TACHE_COLLABO"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_TACHE_COLLABO"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_TACHE_COLLABO"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:784| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:093 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_TACHE_COLLABO] (
`NUM_MDT`, 
`NUM_FTA`, 
`REF_CLB`, 
`ELE_TRT`, 
`DAT_ECH_CLB`, 
`DAT_FIN`, 
`HEU_BUD`, 
`HEU_EFF`, 
`HEU_INI`, 
`NUM_FTA_REP`, 
`AUTO_TERM`, 
`CLB_MOD`, 
`DAT_MOD`, 
`NUM_SEQ`, 
`PLA_YON`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_FTA)
                    Cmd.Parameters.AddWithValue("@2", Me.REF_CLB)
                    Cmd.Parameters.AddWithValue("@3", Me.ELE_TRT)
                    Cmd.Parameters.AddWithValue("@4", Me.DAT_ECH_CLB)
                    Cmd.Parameters.AddWithValue("@5", Me.DAT_FIN)
                    Cmd.Parameters.AddWithValue("@6", Me.HEU_BUD)
                    Cmd.Parameters.AddWithValue("@7", Me.HEU_EFF)
                    Cmd.Parameters.AddWithValue("@8", Me.HEU_INI)
                    Cmd.Parameters.AddWithValue("@9", Me.NUM_FTA_REP)
                    Cmd.Parameters.AddWithValue("@10", Me.AUTO_TERM)
                    Cmd.Parameters.AddWithValue("@11", Me.CLB_MOD)
                    Cmd.Parameters.AddWithValue("@12", Me.DAT_MOD)
                    Cmd.Parameters.AddWithValue("@13", Me.NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@14", Me.PLA_YON)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:790| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:093 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_TACHE_COLLABO] SET NUM_FTA = @NUM_FTA, REF_CLB = @REF_CLB, ELE_TRT = @ELE_TRT, DAT_ECH_CLB = @DAT_ECH_CLB, DAT_FIN = @DAT_FIN, HEU_BUD = @HEU_BUD, HEU_EFF = @HEU_EFF, HEU_INI = @HEU_INI, NUM_FTA_REP = @NUM_FTA_REP, AUTO_TERM = @AUTO_TERM, CLB_MOD = @CLB_MOD, DAT_MOD = @DAT_MOD, NUM_SEQ = @NUM_SEQ, PLA_YON = @PLA_YON WHERE NUM_MDT = @NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_FTA", NUM_FTA)
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    Cmd.Parameters.AddWithValue("@ELE_TRT", ELE_TRT)
                    Cmd.Parameters.AddWithValue("@DAT_ECH_CLB", DAT_ECH_CLB)
                    Cmd.Parameters.AddWithValue("@DAT_FIN", DAT_FIN)
                    Cmd.Parameters.AddWithValue("@HEU_BUD", HEU_BUD)
                    Cmd.Parameters.AddWithValue("@HEU_EFF", HEU_EFF)
                    Cmd.Parameters.AddWithValue("@HEU_INI", HEU_INI)
                    Cmd.Parameters.AddWithValue("@NUM_FTA_REP", NUM_FTA_REP)
                    Cmd.Parameters.AddWithValue("@AUTO_TERM", AUTO_TERM)
                    Cmd.Parameters.AddWithValue("@CLB_MOD", CLB_MOD)
                    Cmd.Parameters.AddWithValue("@DAT_MOD", DAT_MOD)
                    Cmd.Parameters.AddWithValue("@NUM_SEQ", NUM_SEQ)
                    Cmd.Parameters.AddWithValue("@PLA_YON", PLA_YON)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:796| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:094 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_TACHE_COLLABO] WHERE NUM_MDT =@NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{9}"
#Region "[On] |2019/07/16 23h23:801| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:094 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:806| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:097 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:811| <05.00.02> <Function> <> |.List()|List(Of MDT_TACHE_COLLABO)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:097 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_TACHE_COLLABO)
                Dim Result As New List(Of MDT_TACHE_COLLABO)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_TACHE_COLLABO(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), New DateTime(1970, 1, 1), Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), New DateTime(1970, 1, 1), Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), 0, Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), 0, Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), 0, Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), 0, Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), False, Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), "", Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), New DateTime(1970, 1, 1), Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), 0, Row.Item(13)),
      IIf(IsDBNull(Row.Item(14)), False, Row.Item(14)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:817| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_TACHE_COLLABO)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:097 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_TACHE_COLLABO)
                Dim Result As New List(Of MDT_TACHE_COLLABO)
                Dim C As New MDT_TACHE_COLLABO
                For Each Element As MDT_TACHE_COLLABO In C.List
                    If Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.REF_CLB.ToLower() = Search.ToLower() Or Element.ELE_TRT.ToLower() = Search.ToLower() Or Element.CLB_MOD.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:824| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_TACHE_COLLABO)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:097 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_TACHE_COLLABO)
                Dim Result As New List(Of MDT_TACHE_COLLABO)
                Dim C As New MDT_TACHE_COLLABO
                For Each Element As MDT_TACHE_COLLABO In C.List
                    If Val(Element.NUM_FTA) = Search Or Val(Element.HEU_BUD) = Search Or Val(Element.HEU_EFF) = Search Or Val(Element.HEU_INI) = Search Or Val(Element.NUM_FTA_REP) = Search Or Val(Element.NUM_SEQ) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:847| <05.00.05> <Function> <> |.SearchByDate()|List(Of MDT_TACHE_COLLABO)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:098 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDate(ByVal Search As DateTime) As List(Of MDT_TACHE_COLLABO)
                Dim Result As New List(Of MDT_TACHE_COLLABO)
                Dim C As New MDT_TACHE_COLLABO
                For Each Element As MDT_TACHE_COLLABO In C.List
                    If Element.DAT_ECH_CLB = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:852| <05.00.06> <Function> <> |.SearchByDateRange()|List(Of MDT_TACHE_COLLABO)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:098 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="From_Date">All element from this date and this date included.</param>
            ''' <param name="Until_Date">All element before and including this date.</param>

            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDateRange(ByVal From_Date As DateTime,
ByVal Until_Date As DateTime) As List(Of MDT_TACHE_COLLABO)
                Dim Result As New List(Of MDT_TACHE_COLLABO)
                Dim C As New MDT_TACHE_COLLABO
                For Each Element As MDT_TACHE_COLLABO In C.List
                    If (Element.DAT_ECH_CLB) >= From_Date And (Element.DAT_ECH_CLB) <= Until_Date Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:858| <05.00.07> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:098 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_MDT
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:863| <05.00.08> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:098 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:869| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:099 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:874| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:099 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:882| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:099 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:887| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:099 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:894| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:900| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:906| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:911| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:102 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:923| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:941| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:947| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:952| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:103 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:959| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:104 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:960| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:104 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="NUM_FTA">(Set|Get) The NUM_FTA as Integer.</param>
            ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>
            ''' <param name="ELE_TRT">(Set|Get) The ELE_TRT as String.</param>
            ''' <param name="DAT_ECH_CLB">(Set|Get) The DAT_ECH_CLB as DateTime.</param>
            ''' <param name="DAT_FIN">(Set|Get) The DAT_FIN as DateTime.</param>
            ''' <param name="HEU_BUD">(Set|Get) The HEU_BUD as Double.</param>
            ''' <param name="HEU_EFF">(Set|Get) The HEU_EFF as Double.</param>
            ''' <param name="HEU_INI">(Set|Get) The HEU_INI as Double.</param>
            ''' <param name="NUM_FTA_REP">(Set|Get) The NUM_FTA_REP as Integer.</param>
            ''' <param name="AUTO_TERM">(Set|Get) The AUTO_TERM as Boolean.</param>
            ''' <param name="CLB_MOD">(Set|Get) The CLB_MOD as String.</param>
            ''' <param name="DAT_MOD">(Set|Get) The DAT_MOD as DateTime.</param>
            ''' <param name="NUM_SEQ">(Set|Get) The NUM_SEQ as Integer.</param>
            ''' <param name="PLA_YON">(Set|Get) The PLA_YON as Boolean.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_MDT As String,
ByVal NUM_FTA As Integer,
ByVal REF_CLB As String,
ByVal ELE_TRT As String,
ByVal DAT_ECH_CLB As DateTime,
ByVal DAT_FIN As DateTime,
ByVal HEU_BUD As Double,
ByVal HEU_EFF As Double,
ByVal HEU_INI As Double,
ByVal NUM_FTA_REP As Integer,
ByVal AUTO_TERM As Boolean,
ByVal CLB_MOD As String,
ByVal DAT_MOD As DateTime,
ByVal NUM_SEQ As Integer,
ByVal PLA_YON As Boolean)
                With Me
                    Clear()
                    Reset()
                    .NUM_MDT = NUM_MDT
                    .NUM_FTA = NUM_FTA
                    .REF_CLB = REF_CLB
                    .ELE_TRT = ELE_TRT
                    .DAT_ECH_CLB = DAT_ECH_CLB
                    .DAT_FIN = DAT_FIN
                    .HEU_BUD = HEU_BUD
                    .HEU_EFF = HEU_EFF
                    .HEU_INI = HEU_INI
                    .NUM_FTA_REP = NUM_FTA_REP
                    .AUTO_TERM = AUTO_TERM
                    .CLB_MOD = CLB_MOD
                    .DAT_MOD = DAT_MOD
                    .NUM_SEQ = NUM_SEQ
                    .PLA_YON = PLA_YON
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:164| <08.00.00> <Class> <> |.MDT_TACHE_REP_COLLABO|Class|{30} |Production Cost : 31.9|Selling Price : 79.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_TACHE_REP_COLLABO
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:164
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{3}||0.8| |2.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{3}||0.5| |1.5
        '''    |12| |Parameter  |{8}||0.5| |4
        '''    |Production Cost             |31.9
        '''    |Selling Price without VAT   |79.75
        '''    |Total TVA                   |6.14
        '''    |Grand Total                 |85.89
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:126 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_TACHE_REP_COLLABO
#Region "<1> [Property]{3}"
#Region "[On] |2019/07/16 23h23:165| <01.00.00> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:127 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h23:178| <01.00.01> <Property> <Columns> |.NUM_FTA_REP()|Integer|"' (Set|Get) The NUM_FTA_REP as Integer.
            Private _NUM_FTA_REP As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_FTA_REP as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:127 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FTA_REP as Integer.")>
            Public Property NUM_FTA_REP() As Integer
                Get
                    Return _NUM_FTA_REP
                End Get
                Set(ByVal Value As Integer)
                    _NUM_FTA_REP = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FTA_REP as Integer.

#Region "[On] |2019/07/16 23h23:183| <01.00.02> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:127 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:188| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{2}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:127 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 0
                ''' <summary>(Set|Get) The NUM_FTA_REP as Integer.</summary>
                [NUM_FTA_REP] = 1
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 2
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:192| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:127 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_MDT = Nothing
                    .NUM_FTA_REP = 0
                    .REF_CLB = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:197| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:128 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_TACHE_REP_COLLABO"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_TACHE_REP_COLLABO"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_TACHE_REP_COLLABO"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:201| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:128 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_TACHE_REP_COLLABO] (
`NUM_MDT`, 
`NUM_FTA_REP`, 
`REF_CLB`) Values (@0, @1, @2)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_FTA_REP)
                    Cmd.Parameters.AddWithValue("@2", Me.REF_CLB)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:206| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:128 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_TACHE_REP_COLLABO] SET NUM_FTA_REP = @NUM_FTA_REP, REF_CLB = @REF_CLB WHERE NUM_MDT = @NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_FTA_REP", NUM_FTA_REP)
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:211| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:128 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_TACHE_REP_COLLABO] WHERE NUM_MDT =@NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h23:215| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:131 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:233| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:131 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:252| <05.00.02> <Function> <> |.List()|List(Of MDT_TACHE_REP_COLLABO)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:131 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_TACHE_REP_COLLABO)
                Dim Result As New List(Of MDT_TACHE_REP_COLLABO)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_TACHE_REP_COLLABO(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
      IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:257| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_TACHE_REP_COLLABO)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:131 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_TACHE_REP_COLLABO)
                Dim Result As New List(Of MDT_TACHE_REP_COLLABO)
                Dim C As New MDT_TACHE_REP_COLLABO
                For Each Element As MDT_TACHE_REP_COLLABO In C.List
                    If Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.REF_CLB.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:263| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_TACHE_REP_COLLABO)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:131 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_TACHE_REP_COLLABO)
                Dim Result As New List(Of MDT_TACHE_REP_COLLABO)
                Dim C As New MDT_TACHE_REP_COLLABO
                For Each Element As MDT_TACHE_REP_COLLABO In C.List
                    If Val(Element.NUM_MDT) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:271| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:131 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_MDT
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:275| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:131 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:280| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:132 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:285| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:132 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:290| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:132 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:316| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:132 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:321| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:135 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:325| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:135 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:331| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:135 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:334| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:135 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:339| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:135 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:343| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:135 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:348| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:135 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:353| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:136 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:362| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:136 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:365| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:137 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="NUM_FTA_REP">(Set|Get) The NUM_FTA_REP as Integer.</param>
            ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_MDT As String,
ByVal NUM_FTA_REP As Integer,
ByVal REF_CLB As String)
                With Me
                    Clear()
                    Reset()
                    .NUM_MDT = NUM_MDT
                    .NUM_FTA_REP = NUM_FTA_REP
                    .REF_CLB = REF_CLB
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:606| <08.00.00> <Class> <> |.MDT_TACHE_REPETITIVE|Class|{46} |Production Cost : 61.8|Selling Price : 154.5|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_TACHE_REPETITIVE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:606
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{17}||0.8| |13.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{9}||1.6| |14.4
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{17}||0.5| |8.5
        '''    |12| |Parameter  |{25}||0.5| |12.5
        '''    |Production Cost             |61.8
        '''    |Selling Price without VAT   |154.5
        '''    |Total TVA                   |11.9
        '''    |Grand Total                 |166.4
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:148 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_TACHE_REPETITIVE
#Region "<1> [Property]{17}"
#Region "[On] |2019/07/16 23h23:607| <01.00.00> <Property> <Columns> |.NUM_MDT()|String|"' (Set|Get) The NUM_MDT as String.
            Private _NUM_MDT As String
            '''    <Summary>
            '''     (Set|Get) The NUM_MDT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:148 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_MDT as String.")>
            Public Property NUM_MDT() As String
                Get
                    Return _NUM_MDT
                End Get
                Set(ByVal Value As String)
                    _NUM_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_MDT as String.

#Region "[On] |2019/07/16 23h23:628| <01.00.01> <Property> <Columns> |.NUM_FTA_REP()|Integer|"' (Set|Get) The NUM_FTA_REP as Integer.
            Private _NUM_FTA_REP As Integer
            '''    <Summary>
            '''     (Set|Get) The NUM_FTA_REP as Integer.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:148 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_FTA_REP as Integer.")>
            Public Property NUM_FTA_REP() As Integer
                Get
                    Return _NUM_FTA_REP
                End Get
                Set(ByVal Value As Integer)
                    _NUM_FTA_REP = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_FTA_REP as Integer.

#Region "[On] |2019/07/16 23h23:633| <01.00.02> <Property> <Columns> |.NUM_ETA()|String|"' (Set|Get) The NUM_ETA as String.
            Private _NUM_ETA As String
            '''    <Summary>
            '''     (Set|Get) The NUM_ETA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:148 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NUM_ETA as String.")>
            Public Property NUM_ETA() As String
                Get
                    Return _NUM_ETA
                End Get
                Set(ByVal Value As String)
                    _NUM_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) The NUM_ETA as String.

#Region "[On] |2019/07/16 23h23:638| <01.00.03> <Property> <Columns> |.PERIOD()|Double|"' (Set|Get) The PERIOD as Double.
            Private _PERIOD As Double
            '''    <Summary>
            '''     (Set|Get) The PERIOD as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:149 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PERIOD as Double.")>
            Public Property PERIOD() As Double
                Get
                    Return _PERIOD
                End Get
                Set(ByVal Value As Double)
                    _PERIOD = Value
                End Set
            End Property
#End Region '(Set|Get) The PERIOD as Double.

#Region "[On] |2019/07/16 23h23:643| <01.00.04> <Property> <Columns> |.UN_SIX()|Double|"' (Set|Get) The UN_SIX as Double.
            Private _UN_SIX As Double
            '''    <Summary>
            '''     (Set|Get) The UN_SIX as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:149 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The UN_SIX as Double.")>
            Public Property UN_SIX() As Double
                Get
                    Return _UN_SIX
                End Get
                Set(ByVal Value As Double)
                    _UN_SIX = Value
                End Set
            End Property
#End Region '(Set|Get) The UN_SIX as Double.

#Region "[On] |2019/07/16 23h23:648| <01.00.05> <Property> <Columns> |.NMB_OCC()|Double|"' (Set|Get) The NMB_OCC as Double.
            Private _NMB_OCC As Double
            '''    <Summary>
            '''     (Set|Get) The NMB_OCC as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:149 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NMB_OCC as Double.")>
            Public Property NMB_OCC() As Double
                Get
                    Return _NMB_OCC
                End Get
                Set(ByVal Value As Double)
                    _NMB_OCC = Value
                End Set
            End Property
#End Region '(Set|Get) The NMB_OCC as Double.

#Region "[On] |2019/07/16 23h23:654| <01.00.06> <Property> <Columns> |.DAT_PRE()|DateTime|"' (Set|Get) The DAT_PRE as DateTime.
            Private _DAT_PRE As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_PRE as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:152 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_PRE as DateTime.")>
            Public Property DAT_PRE() As DateTime
                Get
                    Return _DAT_PRE
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_PRE = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_PRE as DateTime.

#Region "[On] |2019/07/16 23h23:661| <01.00.07> <Property> <Columns> |.DAT_DER()|DateTime|"' (Set|Get) The DAT_DER as DateTime.
            Private _DAT_DER As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_DER as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:152 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_DER as DateTime.")>
            Public Property DAT_DER() As DateTime
                Get
                    Return _DAT_DER
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_DER = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_DER as DateTime.

#Region "[On] |2019/07/16 23h23:667| <01.00.08> <Property> <Columns> |.COD_PRI()|String|"' (Set|Get) The COD_PRI as String.
            Private _COD_PRI As String
            '''    <Summary>
            '''     (Set|Get) The COD_PRI as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:153 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_PRI as String.")>
            Public Property COD_PRI() As String
                Get
                    Return _COD_PRI
                End Get
                Set(ByVal Value As String)
                    _COD_PRI = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_PRI as String.

#Region "[On] |2019/07/16 23h23:673| <01.00.09> <Property> <Columns> |.HEU_INI()|Double|"' (Set|Get) The HEU_INI as Double.
            Private _HEU_INI As Double
            '''    <Summary>
            '''     (Set|Get) The HEU_INI as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:153 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The HEU_INI as Double.")>
            Public Property HEU_INI() As Double
                Get
                    Return _HEU_INI
                End Get
                Set(ByVal Value As Double)
                    _HEU_INI = Value
                End Set
            End Property
#End Region '(Set|Get) The HEU_INI as Double.

#Region "[On] |2019/07/16 23h23:677| <01.00.10> <Property> <Columns> |.LIB_FTA()|String|"' (Set|Get) The LIB_FTA as String.
            Private _LIB_FTA As String
            '''    <Summary>
            '''     (Set|Get) The LIB_FTA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:153 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_FTA as String.")>
            Public Property LIB_FTA() As String
                Get
                    Return _LIB_FTA
                End Get
                Set(ByVal Value As String)
                    _LIB_FTA = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_FTA as String.

#Region "[On] |2019/07/16 23h23:683| <01.00.11> <Property> <Columns> |.POST_IT()|String|"' (Set|Get) The POST_IT as String.
            Private _POST_IT As String
            '''    <Summary>
            '''     (Set|Get) The POST_IT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:153 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The POST_IT as String.")>
            Public Property POST_IT() As String
                Get
                    Return _POST_IT
                End Get
                Set(ByVal Value As String)
                    _POST_IT = Value
                End Set
            End Property
#End Region '(Set|Get) The POST_IT as String.

#Region "[On] |2019/07/16 23h23:691| <01.00.12> <Property> <Columns> |.AUTO_TERM()|Boolean|"' (Set|Get) The AUTO_TERM as Boolean.
            Private _AUTO_TERM As Boolean
            '''    <Summary>
            '''     (Set|Get) The AUTO_TERM as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:153 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The AUTO_TERM as Boolean.")>
            Public Property AUTO_TERM() As Boolean
                Get
                    Return _AUTO_TERM
                End Get
                Set(ByVal Value As Boolean)
                    _AUTO_TERM = Value
                End Set
            End Property
#End Region '(Set|Get) The AUTO_TERM as Boolean.

#Region "[On] |2019/07/16 23h23:696| <01.00.13> <Property> <Columns> |.CRE_YON()|Boolean|"' (Set|Get) The CRE_YON as Boolean.
            Private _CRE_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The CRE_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:154 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The CRE_YON as Boolean.")>
            Public Property CRE_YON() As Boolean
                Get
                    Return _CRE_YON
                End Get
                Set(ByVal Value As Boolean)
                    _CRE_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The CRE_YON as Boolean.

#Region "[On] |2019/07/16 23h23:702| <01.00.14> <Property> <Columns> |.COD_PER()|String|"' (Set|Get) The COD_PER as String.
            Private _COD_PER As String
            '''    <Summary>
            '''     (Set|Get) The COD_PER as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:156 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_PER as String.")>
            Public Property COD_PER() As String
                Get
                    Return _COD_PER
                End Get
                Set(ByVal Value As String)
                    _COD_PER = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_PER as String.

#Region "[On] |2019/07/16 23h23:723| <01.00.15> <Property> <Columns> |.CLB_CRE()|String|"' (Set|Get) The CLB_CRE as String.
            Private _CLB_CRE As String
            '''    <Summary>
            '''     (Set|Get) The CLB_CRE as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:156 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The CLB_CRE as String.")>
            Public Property CLB_CRE() As String
                Get
                    Return _CLB_CRE
                End Get
                Set(ByVal Value As String)
                    _CLB_CRE = Value
                End Set
            End Property
#End Region '(Set|Get) The CLB_CRE as String.

#Region "[On] |2019/07/16 23h23:730| <01.00.16> <Property> <Columns> |.DAT_CRE()|DateTime|"' (Set|Get) The DAT_CRE as DateTime.
            Private _DAT_CRE As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_CRE as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:176 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_CRE as DateTime.")>
            Public Property DAT_CRE() As DateTime
                Get
                    Return _DAT_CRE
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_CRE = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_CRE as DateTime.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:738| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{16}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:176 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NUM_MDT as String.</summary>
                [NUM_MDT] = 0
                ''' <summary>(Set|Get) The NUM_FTA_REP as Integer.</summary>
                [NUM_FTA_REP] = 1
                ''' <summary>(Set|Get) The NUM_ETA as String.</summary>
                [NUM_ETA] = 2
                ''' <summary>(Set|Get) The PERIOD as Double.</summary>
                [PERIOD] = 3
                ''' <summary>(Set|Get) The UN_SIX as Double.</summary>
                [UN_SIX] = 4
                ''' <summary>(Set|Get) The NMB_OCC as Double.</summary>
                [NMB_OCC] = 5
                ''' <summary>(Set|Get) The DAT_PRE as DateTime.</summary>
                [DAT_PRE] = 6
                ''' <summary>(Set|Get) The DAT_DER as DateTime.</summary>
                [DAT_DER] = 7
                ''' <summary>(Set|Get) The COD_PRI as String.</summary>
                [COD_PRI] = 8
                ''' <summary>(Set|Get) The HEU_INI as Double.</summary>
                [HEU_INI] = 9
                ''' <summary>(Set|Get) The LIB_FTA as String.</summary>
                [LIB_FTA] = 10
                ''' <summary>(Set|Get) The POST_IT as String.</summary>
                [POST_IT] = 11
                ''' <summary>(Set|Get) The AUTO_TERM as Boolean.</summary>
                [AUTO_TERM] = 12
                ''' <summary>(Set|Get) The CRE_YON as Boolean.</summary>
                [CRE_YON] = 13
                ''' <summary>(Set|Get) The COD_PER as String.</summary>
                [COD_PER] = 14
                ''' <summary>(Set|Get) The CLB_CRE as String.</summary>
                [CLB_CRE] = 15
                ''' <summary>(Set|Get) The DAT_CRE as DateTime.</summary>
                [DAT_CRE] = 16
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:744| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:177 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NUM_MDT = Nothing
                    .NUM_FTA_REP = 0
                    .NUM_ETA = Nothing
                    .PERIOD = 0
                    .UN_SIX = 0
                    .NMB_OCC = 0
                    .DAT_PRE = New DateTime
                    .DAT_DER = New DateTime
                    .COD_PRI = Nothing
                    .HEU_INI = 0
                    .LIB_FTA = Nothing
                    .POST_IT = Nothing
                    .AUTO_TERM = False
                    .CRE_YON = False
                    .COD_PER = Nothing
                    .CLB_CRE = Nothing
                    .DAT_CRE = New DateTime
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:749| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:177 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_TACHE_REPETITIVE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_TACHE_REPETITIVE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_TACHE_REPETITIVE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:757| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:180 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_TACHE_REPETITIVE] (
`NUM_MDT`, 
`NUM_FTA_REP`, 
`NUM_ETA`, 
`PERIOD`, 
`UN_SIX`, 
`NMB_OCC`, 
`DAT_PRE`, 
`DAT_DER`, 
`COD_PRI`, 
`HEU_INI`, 
`LIB_FTA`, 
`POST_IT`, 
`AUTO_TERM`, 
`CRE_YON`, 
`COD_PER`, 
`CLB_CRE`, 
`DAT_CRE`) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @16)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NUM_MDT)
                    Cmd.Parameters.AddWithValue("@1", Me.NUM_FTA_REP)
                    Cmd.Parameters.AddWithValue("@2", Me.NUM_ETA)
                    Cmd.Parameters.AddWithValue("@3", Me.PERIOD)
                    Cmd.Parameters.AddWithValue("@4", Me.UN_SIX)
                    Cmd.Parameters.AddWithValue("@5", Me.NMB_OCC)
                    Cmd.Parameters.AddWithValue("@6", Me.DAT_PRE)
                    Cmd.Parameters.AddWithValue("@7", Me.DAT_DER)
                    Cmd.Parameters.AddWithValue("@8", Me.COD_PRI)
                    Cmd.Parameters.AddWithValue("@9", Me.HEU_INI)
                    Cmd.Parameters.AddWithValue("@10", Me.LIB_FTA)
                    Cmd.Parameters.AddWithValue("@11", Me.POST_IT)
                    Cmd.Parameters.AddWithValue("@12", Me.AUTO_TERM)
                    Cmd.Parameters.AddWithValue("@13", Me.CRE_YON)
                    Cmd.Parameters.AddWithValue("@14", Me.COD_PER)
                    Cmd.Parameters.AddWithValue("@15", Me.CLB_CRE)
                    Cmd.Parameters.AddWithValue("@16", Me.DAT_CRE)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:762| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:180 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_TACHE_REPETITIVE] SET NUM_FTA_REP = @NUM_FTA_REP, NUM_ETA = @NUM_ETA, PERIOD = @PERIOD, UN_SIX = @UN_SIX, NMB_OCC = @NMB_OCC, DAT_PRE = @DAT_PRE, DAT_DER = @DAT_DER, COD_PRI = @COD_PRI, HEU_INI = @HEU_INI, LIB_FTA = @LIB_FTA, POST_IT = @POST_IT, AUTO_TERM = @AUTO_TERM, CRE_YON = @CRE_YON, COD_PER = @COD_PER, CLB_CRE = @CLB_CRE, DAT_CRE = @DAT_CRE WHERE NUM_MDT = @NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_FTA_REP", NUM_FTA_REP)
                    Cmd.Parameters.AddWithValue("@NUM_ETA", NUM_ETA)
                    Cmd.Parameters.AddWithValue("@PERIOD", PERIOD)
                    Cmd.Parameters.AddWithValue("@UN_SIX", UN_SIX)
                    Cmd.Parameters.AddWithValue("@NMB_OCC", NMB_OCC)
                    Cmd.Parameters.AddWithValue("@DAT_PRE", DAT_PRE)
                    Cmd.Parameters.AddWithValue("@DAT_DER", DAT_DER)
                    Cmd.Parameters.AddWithValue("@COD_PRI", COD_PRI)
                    Cmd.Parameters.AddWithValue("@HEU_INI", HEU_INI)
                    Cmd.Parameters.AddWithValue("@LIB_FTA", LIB_FTA)
                    Cmd.Parameters.AddWithValue("@POST_IT", POST_IT)
                    Cmd.Parameters.AddWithValue("@AUTO_TERM", AUTO_TERM)
                    Cmd.Parameters.AddWithValue("@CRE_YON", CRE_YON)
                    Cmd.Parameters.AddWithValue("@COD_PER", COD_PER)
                    Cmd.Parameters.AddWithValue("@CLB_CRE", CLB_CRE)
                    Cmd.Parameters.AddWithValue("@DAT_CRE", DAT_CRE)
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:768| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:180 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_TACHE_REPETITIVE] WHERE NUM_MDT =@NUM_MDT"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NUM_MDT", NUM_MDT)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{9}"
#Region "[On] |2019/07/16 23h23:773| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:180 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:777| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:180 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:783| <05.00.02> <Function> <> |.List()|List(Of MDT_TACHE_REPETITIVE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:180 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_TACHE_REPETITIVE)
                Dim Result As New List(Of MDT_TACHE_REPETITIVE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_TACHE_REPETITIVE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), 0, Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), 0, Row.Item(4)),
IIf(IsDBNull(Row.Item(5)), 0, Row.Item(5)),
IIf(IsDBNull(Row.Item(6)), New DateTime(1970, 1, 1), Row.Item(6)),
IIf(IsDBNull(Row.Item(7)), New DateTime(1970, 1, 1), Row.Item(7)),
IIf(IsDBNull(Row.Item(8)), "", Row.Item(8)),
IIf(IsDBNull(Row.Item(9)), 0, Row.Item(9)),
IIf(IsDBNull(Row.Item(10)), "", Row.Item(10)),
IIf(IsDBNull(Row.Item(11)), "", Row.Item(11)),
IIf(IsDBNull(Row.Item(12)), False, Row.Item(12)),
IIf(IsDBNull(Row.Item(13)), False, Row.Item(13)),
IIf(IsDBNull(Row.Item(14)), "", Row.Item(14)),
IIf(IsDBNull(Row.Item(15)), "", Row.Item(15)),
      IIf(IsDBNull(Row.Item(16)), New DateTime(1970, 1, 1), Row.Item(16)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:789| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_TACHE_REPETITIVE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:180 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_TACHE_REPETITIVE)
                Dim Result As New List(Of MDT_TACHE_REPETITIVE)
                Dim C As New MDT_TACHE_REPETITIVE
                For Each Element As MDT_TACHE_REPETITIVE In C.List
                    If Element.NUM_MDT.ToLower() = Search.ToLower() Or Element.NUM_ETA.ToLower() = Search.ToLower() Or Element.COD_PRI.ToLower() = Search.ToLower() Or Element.LIB_FTA.ToLower() = Search.ToLower() Or Element.POST_IT.ToLower() = Search.ToLower() Or Element.COD_PER.ToLower() = Search.ToLower() Or Element.CLB_CRE.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:805| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_TACHE_REPETITIVE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:181 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_TACHE_REPETITIVE)
                Dim Result As New List(Of MDT_TACHE_REPETITIVE)
                Dim C As New MDT_TACHE_REPETITIVE
                For Each Element As MDT_TACHE_REPETITIVE In C.List
                    If Val(Element.NUM_FTA_REP) = Search Or Val(Element.PERIOD) = Search Or Val(Element.UN_SIX) = Search Or Val(Element.NMB_OCC) = Search Or Val(Element.HEU_INI) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:815| <05.00.05> <Function> <> |.SearchByDate()|List(Of MDT_TACHE_REPETITIVE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:181 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDate(ByVal Search As DateTime) As List(Of MDT_TACHE_REPETITIVE)
                Dim Result As New List(Of MDT_TACHE_REPETITIVE)
                Dim C As New MDT_TACHE_REPETITIVE
                For Each Element As MDT_TACHE_REPETITIVE In C.List
                    If Element.DAT_PRE = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:822| <05.00.06> <Function> <> |.SearchByDateRange()|List(Of MDT_TACHE_REPETITIVE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:184 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="From_Date">All element from this date and this date included.</param>
            ''' <param name="Until_Date">All element before and including this date.</param>

            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDateRange(ByVal From_Date As DateTime,
ByVal Until_Date As DateTime) As List(Of MDT_TACHE_REPETITIVE)
                Dim Result As New List(Of MDT_TACHE_REPETITIVE)
                Dim C As New MDT_TACHE_REPETITIVE
                For Each Element As MDT_TACHE_REPETITIVE In C.List
                    If (Element.DAT_PRE) >= From_Date And (Element.DAT_PRE) <= Until_Date Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:827| <05.00.07> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:184 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NUM_MDT
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:834| <05.00.08> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:184 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:840| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:184 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:845| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:851| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:856| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:861| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:867| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:872| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:185 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:876| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:186 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:894| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:186 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:901| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:186 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:908| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:186 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:914| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:186 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:919| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:187 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:921| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:190 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NUM_MDT">(Set|Get) The NUM_MDT as String.</param>
            ''' <param name="NUM_FTA_REP">(Set|Get) The NUM_FTA_REP as Integer.</param>
            ''' <param name="NUM_ETA">(Set|Get) The NUM_ETA as String.</param>
            ''' <param name="PERIOD">(Set|Get) The PERIOD as Double.</param>
            ''' <param name="UN_SIX">(Set|Get) The UN_SIX as Double.</param>
            ''' <param name="NMB_OCC">(Set|Get) The NMB_OCC as Double.</param>
            ''' <param name="DAT_PRE">(Set|Get) The DAT_PRE as DateTime.</param>
            ''' <param name="DAT_DER">(Set|Get) The DAT_DER as DateTime.</param>
            ''' <param name="COD_PRI">(Set|Get) The COD_PRI as String.</param>
            ''' <param name="HEU_INI">(Set|Get) The HEU_INI as Double.</param>
            ''' <param name="LIB_FTA">(Set|Get) The LIB_FTA as String.</param>
            ''' <param name="POST_IT">(Set|Get) The POST_IT as String.</param>
            ''' <param name="AUTO_TERM">(Set|Get) The AUTO_TERM as Boolean.</param>
            ''' <param name="CRE_YON">(Set|Get) The CRE_YON as Boolean.</param>
            ''' <param name="COD_PER">(Set|Get) The COD_PER as String.</param>
            ''' <param name="CLB_CRE">(Set|Get) The CLB_CRE as String.</param>
            ''' <param name="DAT_CRE">(Set|Get) The DAT_CRE as DateTime.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NUM_MDT As String,
ByVal NUM_FTA_REP As Integer,
ByVal NUM_ETA As String,
ByVal PERIOD As Double,
ByVal UN_SIX As Double,
ByVal NMB_OCC As Double,
ByVal DAT_PRE As DateTime,
ByVal DAT_DER As DateTime,
ByVal COD_PRI As String,
ByVal HEU_INI As Double,
ByVal LIB_FTA As String,
ByVal POST_IT As String,
ByVal AUTO_TERM As Boolean,
ByVal CRE_YON As Boolean,
ByVal COD_PER As String,
ByVal CLB_CRE As String,
ByVal DAT_CRE As DateTime)
                With Me
                    Clear()
                    Reset()
                    .NUM_MDT = NUM_MDT
                    .NUM_FTA_REP = NUM_FTA_REP
                    .NUM_ETA = NUM_ETA
                    .PERIOD = PERIOD
                    .UN_SIX = UN_SIX
                    .NMB_OCC = NMB_OCC
                    .DAT_PRE = DAT_PRE
                    .DAT_DER = DAT_DER
                    .COD_PRI = COD_PRI
                    .HEU_INI = HEU_INI
                    .LIB_FTA = LIB_FTA
                    .POST_IT = POST_IT
                    .AUTO_TERM = AUTO_TERM
                    .CRE_YON = CRE_YON
                    .COD_PER = COD_PER
                    .CLB_CRE = CLB_CRE
                    .DAT_CRE = DAT_CRE
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:148| <08.00.00> <Class> <> |.MDT_TARIF_HORAIRE|Class|{35} |Production Cost : 42|Selling Price : 105|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_TARIF_HORAIRE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:148
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{6}||0.8| |4.8
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{9}||1.6| |14.4
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{6}||0.5| |3
        '''    |12| |Parameter  |{14}||0.5| |7
        '''    |Production Cost             |42
        '''    |Selling Price without VAT   |105
        '''    |Total TVA                   |8.08
        '''    |Grand Total                 |113.08
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:206 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_TARIF_HORAIRE
#Region "<1> [Property]{6}"
#Region "[On] |2019/07/16 23h23:148| <01.00.00> <Property> <Columns> |.COD_TAR()|String|"' (Set|Get) The COD_TAR as String.
            Private _COD_TAR As String
            '''    <Summary>
            '''     (Set|Get) The COD_TAR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:206 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TAR as String.")>
            Public Property COD_TAR() As String
                Get
                    Return _COD_TAR
                End Get
                Set(ByVal Value As String)
                    _COD_TAR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TAR as String.

#Region "[On] |2019/07/16 23h23:175| <01.00.01> <Property> <Columns> |.COD_CAT()|String|"' (Set|Get) The COD_CAT as String.
            Private _COD_CAT As String
            '''    <Summary>
            '''     (Set|Get) The COD_CAT as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:206 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_CAT as String.")>
            Public Property COD_CAT() As String
                Get
                    Return _COD_CAT
                End Get
                Set(ByVal Value As String)
                    _COD_CAT = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_CAT as String.

#Region "[On] |2019/07/16 23h23:181| <01.00.02> <Property> <Columns> |.COD_ART()|String|"' (Set|Get) The COD_ART as String.
            Private _COD_ART As String
            '''    <Summary>
            '''     (Set|Get) The COD_ART as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:207 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_ART as String.")>
            Public Property COD_ART() As String
                Get
                    Return _COD_ART
                End Get
                Set(ByVal Value As String)
                    _COD_ART = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_ART as String.

#Region "[On] |2019/07/16 23h23:187| <01.00.03> <Property> <Columns> |.DAT_COM()|DateTime|"' (Set|Get) The DAT_COM as DateTime.
            Private _DAT_COM As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_COM as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:207 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_COM as DateTime.")>
            Public Property DAT_COM() As DateTime
                Get
                    Return _DAT_COM
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_COM = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_COM as DateTime.

#Region "[On] |2019/07/16 23h23:192| <01.00.04> <Property> <Columns> |.DAT_FIN()|DateTime|"' (Set|Get) The DAT_FIN as DateTime.
            Private _DAT_FIN As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_FIN as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:210 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_FIN as DateTime.")>
            Public Property DAT_FIN() As DateTime
                Get
                    Return _DAT_FIN
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_FIN = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_FIN as DateTime.

#Region "[On] |2019/07/16 23h23:196| <01.00.05> <Property> <Columns> |.PRX_VTE()|Double|"' (Set|Get) The PRX_VTE as Double.
            Private _PRX_VTE As Double
            '''    <Summary>
            '''     (Set|Get) The PRX_VTE as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:210 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PRX_VTE as Double.")>
            Public Property PRX_VTE() As Double
                Get
                    Return _PRX_VTE
                End Get
                Set(ByVal Value As Double)
                    _PRX_VTE = Value
                End Set
            End Property
#End Region '(Set|Get) The PRX_VTE as Double.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:201| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{5}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:210 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_TAR as String.</summary>
                [COD_TAR] = 0
                ''' <summary>(Set|Get) The COD_CAT as String.</summary>
                [COD_CAT] = 1
                ''' <summary>(Set|Get) The COD_ART as String.</summary>
                [COD_ART] = 2
                ''' <summary>(Set|Get) The DAT_COM as DateTime.</summary>
                [DAT_COM] = 3
                ''' <summary>(Set|Get) The DAT_FIN as DateTime.</summary>
                [DAT_FIN] = 4
                ''' <summary>(Set|Get) The PRX_VTE as Double.</summary>
                [PRX_VTE] = 5
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:206| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:211 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_TAR = Nothing
                    .COD_CAT = Nothing
                    .COD_ART = Nothing
                    .DAT_COM = New DateTime
                    .DAT_FIN = New DateTime
                    .PRX_VTE = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:210| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:211 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_TARIF_HORAIRE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_TARIF_HORAIRE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_TARIF_HORAIRE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:215| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:211 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_TARIF_HORAIRE] (
`COD_TAR`, 
`COD_CAT`, 
`COD_ART`, 
`DAT_COM`, 
`DAT_FIN`, 
`PRX_VTE`) Values (@0, @1, @2, @3, @4, @5)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_TAR)
                    Cmd.Parameters.AddWithValue("@1", Me.COD_CAT)
                    Cmd.Parameters.AddWithValue("@2", Me.COD_ART)
                    Cmd.Parameters.AddWithValue("@3", Me.DAT_COM)
                    Cmd.Parameters.AddWithValue("@4", Me.DAT_FIN)
                    Cmd.Parameters.AddWithValue("@5", Me.PRX_VTE)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:222| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:212 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_TARIF_HORAIRE] SET COD_CAT = @COD_CAT, COD_ART = @COD_ART, DAT_COM = @DAT_COM, DAT_FIN = @DAT_FIN, PRX_VTE = @PRX_VTE WHERE COD_TAR = @COD_TAR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_CAT", COD_CAT)
                    Cmd.Parameters.AddWithValue("@COD_ART", COD_ART)
                    Cmd.Parameters.AddWithValue("@DAT_COM", DAT_COM)
                    Cmd.Parameters.AddWithValue("@DAT_FIN", DAT_FIN)
                    Cmd.Parameters.AddWithValue("@PRX_VTE", PRX_VTE)
                    Cmd.Parameters.AddWithValue("@COD_TAR", COD_TAR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:228| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:213 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_TARIF_HORAIRE] WHERE COD_TAR =@COD_TAR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_TAR", COD_TAR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{9}"
#Region "[On] |2019/07/16 23h23:233| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:213 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:237| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:216 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:243| <05.00.02> <Function> <> |.List()|List(Of MDT_TARIF_HORAIRE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:216 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_TARIF_HORAIRE)
                Dim Result As New List(Of MDT_TARIF_HORAIRE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_TARIF_HORAIRE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), New DateTime(1970, 1, 1), Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), New DateTime(1970, 1, 1), Row.Item(4)),
      IIf(IsDBNull(Row.Item(5)), 0, Row.Item(5)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:247| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_TARIF_HORAIRE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:216 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_TARIF_HORAIRE)
                Dim Result As New List(Of MDT_TARIF_HORAIRE)
                Dim C As New MDT_TARIF_HORAIRE
                For Each Element As MDT_TARIF_HORAIRE In C.List
                    If Element.COD_TAR.ToLower() = Search.ToLower() Or Element.COD_CAT.ToLower() = Search.ToLower() Or Element.COD_ART.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:263| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_TARIF_HORAIRE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:216 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_TARIF_HORAIRE)
                Dim Result As New List(Of MDT_TARIF_HORAIRE)
                Dim C As New MDT_TARIF_HORAIRE
                For Each Element As MDT_TARIF_HORAIRE In C.List
                    If Val(Element.COD_TAR) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:285| <05.00.05> <Function> <> |.SearchByDate()|List(Of MDT_TARIF_HORAIRE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:216 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDate(ByVal Search As DateTime) As List(Of MDT_TARIF_HORAIRE)
                Dim Result As New List(Of MDT_TARIF_HORAIRE)
                Dim C As New MDT_TARIF_HORAIRE
                For Each Element As MDT_TARIF_HORAIRE In C.List
                    If Element.DAT_COM = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:290| <05.00.06> <Function> <> |.SearchByDateRange()|List(Of MDT_TARIF_HORAIRE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:216 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="From_Date">All element from this date and this date included.</param>
            ''' <param name="Until_Date">All element before and including this date.</param>

            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDateRange(ByVal From_Date As DateTime,
ByVal Until_Date As DateTime) As List(Of MDT_TARIF_HORAIRE)
                Dim Result As New List(Of MDT_TARIF_HORAIRE)
                Dim C As New MDT_TARIF_HORAIRE
                For Each Element As MDT_TARIF_HORAIRE In C.List
                    If (Element.DAT_COM) >= From_Date And (Element.DAT_COM) <= Until_Date Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:295| <05.00.07> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:216 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_TAR
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:300| <05.00.08> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:217 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:306| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:217 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:311| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:217 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:316| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:220 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:321| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:220 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:326| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:220 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:331| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:220 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:336| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:220 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:339| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:220 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:350| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:220 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:363| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:220 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:369| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:221 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:374| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:221 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:380| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:221 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:382| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:222 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_TAR">(Set|Get) The COD_TAR as String.</param>
            ''' <param name="COD_CAT">(Set|Get) The COD_CAT as String.</param>
            ''' <param name="COD_ART">(Set|Get) The COD_ART as String.</param>
            ''' <param name="DAT_COM">(Set|Get) The DAT_COM as DateTime.</param>
            ''' <param name="DAT_FIN">(Set|Get) The DAT_FIN as DateTime.</param>
            ''' <param name="PRX_VTE">(Set|Get) The PRX_VTE as Double.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_TAR As String,
ByVal COD_CAT As String,
ByVal COD_ART As String,
ByVal DAT_COM As DateTime,
ByVal DAT_FIN As DateTime,
ByVal PRX_VTE As Double)
                With Me
                    Clear()
                    Reset()
                    .COD_TAR = COD_TAR
                    .COD_CAT = COD_CAT
                    .COD_ART = COD_ART
                    .DAT_COM = DAT_COM
                    .DAT_FIN = DAT_FIN
                    .PRX_VTE = PRX_VTE
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:626| <08.00.00> <Class> <> |.MDT_TAUX_TVA|Class|{33} |Production Cost : 38.4|Selling Price : 96|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_TAUX_TVA
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:626
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{4}||0.8| |3.2
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{9}||1.6| |14.4
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{4}||0.5| |2
        '''    |12| |Parameter  |{12}||0.5| |6
        '''    |Production Cost             |38.4
        '''    |Selling Price without VAT   |96
        '''    |Total TVA                   |7.39
        '''    |Grand Total                 |103.39
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:238 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_TAUX_TVA
#Region "<1> [Property]{4}"
#Region "[On] |2019/07/16 23h23:627| <01.00.00> <Property> <Columns> |.COD_TVA()|String|"' (Set|Get) The COD_TVA as String.
            Private _COD_TVA As String
            '''    <Summary>
            '''     (Set|Get) The COD_TVA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:238 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TVA as String.")>
            Public Property COD_TVA() As String
                Get
                    Return _COD_TVA
                End Get
                Set(ByVal Value As String)
                    _COD_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TVA as String.

#Region "[On] |2019/07/16 23h23:643| <01.00.01> <Property> <Columns> |.DAT_COM()|DateTime|"' (Set|Get) The DAT_COM as DateTime.
            Private _DAT_COM As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_COM as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:238 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_COM as DateTime.")>
            Public Property DAT_COM() As DateTime
                Get
                    Return _DAT_COM
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_COM = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_COM as DateTime.

#Region "[On] |2019/07/16 23h23:675| <01.00.02> <Property> <Columns> |.DAT_FIN()|DateTime|"' (Set|Get) The DAT_FIN as DateTime.
            Private _DAT_FIN As DateTime
            '''    <Summary>
            '''     (Set|Get) The DAT_FIN as DateTime.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:239 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DAT_FIN as DateTime.")>
            Public Property DAT_FIN() As DateTime
                Get
                    Return _DAT_FIN
                End Get
                Set(ByVal Value As DateTime)
                    _DAT_FIN = Value
                End Set
            End Property
#End Region '(Set|Get) The DAT_FIN as DateTime.

#Region "[On] |2019/07/16 23h23:680| <01.00.03> <Property> <Columns> |.TUX_TVA()|Double|"' (Set|Get) The TUX_TVA as Double.
            Private _TUX_TVA As Double
            '''    <Summary>
            '''     (Set|Get) The TUX_TVA as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:239 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The TUX_TVA as Double.")>
            Public Property TUX_TVA() As Double
                Get
                    Return _TUX_TVA
                End Get
                Set(ByVal Value As Double)
                    _TUX_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) The TUX_TVA as Double.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:685| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{3}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:239 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_TVA as String.</summary>
                [COD_TVA] = 0
                ''' <summary>(Set|Get) The DAT_COM as DateTime.</summary>
                [DAT_COM] = 1
                ''' <summary>(Set|Get) The DAT_FIN as DateTime.</summary>
                [DAT_FIN] = 2
                ''' <summary>(Set|Get) The TUX_TVA as Double.</summary>
                [TUX_TVA] = 3
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:692| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:239 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_TVA = Nothing
                    .DAT_COM = New DateTime
                    .DAT_FIN = New DateTime
                    .TUX_TVA = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:696| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:242 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_TAUX_TVA"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_TAUX_TVA"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_TAUX_TVA"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:701| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:242 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_TAUX_TVA] (
`COD_TVA`, 
`DAT_COM`, 
`DAT_FIN`, 
`TUX_TVA`) Values (@0, @1, @2, @3)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_TVA)
                    Cmd.Parameters.AddWithValue("@1", Me.DAT_COM)
                    Cmd.Parameters.AddWithValue("@2", Me.DAT_FIN)
                    Cmd.Parameters.AddWithValue("@3", Me.TUX_TVA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:705| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:242 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_TAUX_TVA] SET DAT_COM = @DAT_COM, DAT_FIN = @DAT_FIN, TUX_TVA = @TUX_TVA WHERE COD_TVA = @COD_TVA"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@DAT_COM", DAT_COM)
                    Cmd.Parameters.AddWithValue("@DAT_FIN", DAT_FIN)
                    Cmd.Parameters.AddWithValue("@TUX_TVA", TUX_TVA)
                    Cmd.Parameters.AddWithValue("@COD_TVA", COD_TVA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:710| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:242 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_TAUX_TVA] WHERE COD_TVA =@COD_TVA"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_TVA", COD_TVA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{9}"
#Region "[On] |2019/07/16 23h23:715| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:242 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:720| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:242 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:725| <05.00.02> <Function> <> |.List()|List(Of MDT_TAUX_TVA)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:242 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_TAUX_TVA)
                Dim Result As New List(Of MDT_TAUX_TVA)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_TAUX_TVA(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), New DateTime(1970, 1, 1), Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), New DateTime(1970, 1, 1), Row.Item(2)),
      IIf(IsDBNull(Row.Item(3)), 0, Row.Item(3)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:729| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_TAUX_TVA)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:242 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_TAUX_TVA)
                Dim Result As New List(Of MDT_TAUX_TVA)
                Dim C As New MDT_TAUX_TVA
                For Each Element As MDT_TAUX_TVA In C.List
                    If Element.COD_TVA.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:734| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_TAUX_TVA)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:243 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_TAUX_TVA)
                Dim Result As New List(Of MDT_TAUX_TVA)
                Dim C As New MDT_TAUX_TVA
                For Each Element As MDT_TAUX_TVA In C.List
                    If Val(Element.COD_TVA) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:738| <05.00.05> <Function> <> |.SearchByDate()|List(Of MDT_TAUX_TVA)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:243 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDate(ByVal Search As DateTime) As List(Of MDT_TAUX_TVA)
                Dim Result As New List(Of MDT_TAUX_TVA)
                Dim C As New MDT_TAUX_TVA
                For Each Element As MDT_TAUX_TVA In C.List
                    If Element.DAT_COM = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:754| <05.00.06> <Function> <> |.SearchByDateRange()|List(Of MDT_TAUX_TVA)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:246 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="From_Date">All element from this date and this date included.</param>
            ''' <param name="Until_Date">All element before and including this date.</param>

            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByDateRange(ByVal From_Date As DateTime,
ByVal Until_Date As DateTime) As List(Of MDT_TAUX_TVA)
                Dim Result As New List(Of MDT_TAUX_TVA)
                Dim C As New MDT_TAUX_TVA
                For Each Element As MDT_TAUX_TVA In C.List
                    If (Element.DAT_COM) >= From_Date And (Element.DAT_COM) <= Until_Date Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:769| <05.00.07> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:246 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_TVA
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:773| <05.00.08> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:246 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:778| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:247 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:785| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:247 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:790| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:247 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:795| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:247 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:800| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:248 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:804| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:248 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:809| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:248 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:812| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:248 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:817| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:248 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:822| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:248 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:828| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:248 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:847| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:251 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:852| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:251 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:854| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:251 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_TVA">(Set|Get) The COD_TVA as String.</param>
            ''' <param name="DAT_COM">(Set|Get) The DAT_COM as DateTime.</param>
            ''' <param name="DAT_FIN">(Set|Get) The DAT_FIN as DateTime.</param>
            ''' <param name="TUX_TVA">(Set|Get) The TUX_TVA as Double.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_TVA As String,
ByVal DAT_COM As DateTime,
ByVal DAT_FIN As DateTime,
ByVal TUX_TVA As Double)
                With Me
                    Clear()
                    Reset()
                    .COD_TVA = COD_TVA
                    .DAT_COM = DAT_COM
                    .DAT_FIN = DAT_FIN
                    .TUX_TVA = TUX_TVA
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:104| <08.00.00> <Class> <> |.MDT_TRAJET|Class|{30} |Production Cost : 31.9|Selling Price : 79.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_TRAJET
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:104
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{3}||0.8| |2.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{3}||0.5| |1.5
        '''    |12| |Parameter  |{8}||0.5| |4
        '''    |Production Cost             |31.9
        '''    |Selling Price without VAT   |79.75
        '''    |Total TVA                   |6.14
        '''    |Grand Total                 |85.89
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:265 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_TRAJET
#Region "<1> [Property]{3}"
#Region "[On] |2019/07/16 23h23:105| <01.00.00> <Property> <Columns> |.NOM_LOC()|String|"' (Set|Get) The NOM_LOC as String.
            Private _NOM_LOC As String
            '''    <Summary>
            '''     (Set|Get) The NOM_LOC as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:265 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_LOC as String.")>
            Public Property NOM_LOC() As String
                Get
                    Return _NOM_LOC
                End Get
                Set(ByVal Value As String)
                    _NOM_LOC = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_LOC as String.

#Region "[On] |2019/07/16 23h23:111| <01.00.01> <Property> <Columns> |.NBR_KLM()|Double|"' (Set|Get) The NBR_KLM as Double.
            Private _NBR_KLM As Double
            '''    <Summary>
            '''     (Set|Get) The NBR_KLM as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:268 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NBR_KLM as Double.")>
            Public Property NBR_KLM() As Double
                Get
                    Return _NBR_KLM
                End Get
                Set(ByVal Value As Double)
                    _NBR_KLM = Value
                End Set
            End Property
#End Region '(Set|Get) The NBR_KLM as Double.

#Region "[On] |2019/07/16 23h23:118| <01.00.02> <Property> <Columns> |.NBR_HEU()|Double|"' (Set|Get) The NBR_HEU as Double.
            Private _NBR_HEU As Double
            '''    <Summary>
            '''     (Set|Get) The NBR_HEU as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:268 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NBR_HEU as Double.")>
            Public Property NBR_HEU() As Double
                Get
                    Return _NBR_HEU
                End Get
                Set(ByVal Value As Double)
                    _NBR_HEU = Value
                End Set
            End Property
#End Region '(Set|Get) The NBR_HEU as Double.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:123| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{2}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:269 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The NOM_LOC as String.</summary>
                [NOM_LOC] = 0
                ''' <summary>(Set|Get) The NBR_KLM as Double.</summary>
                [NBR_KLM] = 1
                ''' <summary>(Set|Get) The NBR_HEU as Double.</summary>
                [NBR_HEU] = 2
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:128| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:269 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .NOM_LOC = Nothing
                    .NBR_KLM = 0
                    .NBR_HEU = 0
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:132| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:269 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_TRAJET"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_TRAJET"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_TRAJET"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:136| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:269 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_TRAJET] (
`NOM_LOC`, 
`NBR_KLM`, 
`NBR_HEU`) Values (@0, @1, @2)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.NOM_LOC)
                    Cmd.Parameters.AddWithValue("@1", Me.NBR_KLM)
                    Cmd.Parameters.AddWithValue("@2", Me.NBR_HEU)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:140| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:269 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_TRAJET] SET NBR_KLM = @NBR_KLM, NBR_HEU = @NBR_HEU WHERE NOM_LOC = @NOM_LOC"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NBR_KLM", NBR_KLM)
                    Cmd.Parameters.AddWithValue("@NBR_HEU", NBR_HEU)
                    Cmd.Parameters.AddWithValue("@NOM_LOC", NOM_LOC)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:145| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:269 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_TRAJET] WHERE NOM_LOC =@NOM_LOC"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NOM_LOC", NOM_LOC)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h23:149| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:269 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:154| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:270 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:160| <05.00.02> <Function> <> |.List()|List(Of MDT_TRAJET)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:272 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_TRAJET)
                Dim Result As New List(Of MDT_TRAJET)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_TRAJET(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), 0, Row.Item(1)),
      IIf(IsDBNull(Row.Item(2)), 0, Row.Item(2)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:164| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_TRAJET)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:272 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_TRAJET)
                Dim Result As New List(Of MDT_TRAJET)
                Dim C As New MDT_TRAJET
                For Each Element As MDT_TRAJET In C.List
                    If Element.NOM_LOC.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:169| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_TRAJET)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:272 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_TRAJET)
                Dim Result As New List(Of MDT_TRAJET)
                Dim C As New MDT_TRAJET
                For Each Element As MDT_TRAJET In C.List
                    If Val(Element.NBR_KLM) = Search Or Val(Element.NBR_HEU) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:173| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:273 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.NOM_LOC
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:206| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:273 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:211| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:273 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:216| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:273 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:222| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:273 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:227| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:273 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:232| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:273 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:237| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:273 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:242| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:275 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:245| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:277 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:250| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:277 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:254| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:277 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:260| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:277 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:265| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:277 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:284| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:277 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:285| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:277 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="NOM_LOC">(Set|Get) The NOM_LOC as String.</param>
            ''' <param name="NBR_KLM">(Set|Get) The NBR_KLM as Double.</param>
            ''' <param name="NBR_HEU">(Set|Get) The NBR_HEU as Double.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal NOM_LOC As String,
ByVal NBR_KLM As Double,
ByVal NBR_HEU As Double)
                With Me
                    Clear()
                    Reset()
                    .NOM_LOC = NOM_LOC
                    .NBR_KLM = NBR_KLM
                    .NBR_HEU = NBR_HEU
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:524| <08.00.00> <Class> <> |.MDT_TYPE_HORAIRE|Class|{29} |Production Cost : 30.1|Selling Price : 75.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_TYPE_HORAIRE
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:524
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{2}||0.8| |1.6
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{2}||0.5| |1
        '''    |12| |Parameter  |{7}||0.5| |3.5
        '''    |Production Cost             |30.1
        '''    |Selling Price without VAT   |75.25
        '''    |Total TVA                   |5.79
        '''    |Grand Total                 |81.04
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:289 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_TYPE_HORAIRE
#Region "<1> [Property]{2}"
#Region "[On] |2019/07/16 23h23:525| <01.00.00> <Property> <Columns> |.COD_HOR()|String|"' (Set|Get) The COD_HOR as String.
            Private _COD_HOR As String
            '''    <Summary>
            '''     (Set|Get) The COD_HOR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:289 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_HOR as String.")>
            Public Property COD_HOR() As String
                Get
                    Return _COD_HOR
                End Get
                Set(ByVal Value As String)
                    _COD_HOR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_HOR as String.

#Region "[On] |2019/07/16 23h23:540| <01.00.01> <Property> <Columns> |.NOM_HOR()|String|"' (Set|Get) The NOM_HOR as String.
            Private _NOM_HOR As String
            '''    <Summary>
            '''     (Set|Get) The NOM_HOR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:290 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_HOR as String.")>
            Public Property NOM_HOR() As String
                Get
                    Return _NOM_HOR
                End Get
                Set(ByVal Value As String)
                    _NOM_HOR = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_HOR as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:545| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{1}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:290 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_HOR as String.</summary>
                [COD_HOR] = 0
                ''' <summary>(Set|Get) The NOM_HOR as String.</summary>
                [NOM_HOR] = 1
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:564| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:290 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_HOR = Nothing
                    .NOM_HOR = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:569| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:290 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_TYPE_HORAIRE"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_TYPE_HORAIRE"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_TYPE_HORAIRE"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:573| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:290 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_TYPE_HORAIRE] (
`COD_HOR`, 
`NOM_HOR`) Values (@0, @1)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_HOR)
                    Cmd.Parameters.AddWithValue("@1", Me.NOM_HOR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:577| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:291 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_TYPE_HORAIRE] SET NOM_HOR = @NOM_HOR WHERE COD_HOR = @COD_HOR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NOM_HOR", NOM_HOR)
                    Cmd.Parameters.AddWithValue("@COD_HOR", COD_HOR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:581| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:291 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_TYPE_HORAIRE] WHERE COD_HOR =@COD_HOR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_HOR", COD_HOR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h23:586| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:294 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:590| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:294 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:595| <05.00.02> <Function> <> |.List()|List(Of MDT_TYPE_HORAIRE)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:295 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_TYPE_HORAIRE)
                Dim Result As New List(Of MDT_TYPE_HORAIRE)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_TYPE_HORAIRE(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
      IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:600| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_TYPE_HORAIRE)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:295 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_TYPE_HORAIRE)
                Dim Result As New List(Of MDT_TYPE_HORAIRE)
                Dim C As New MDT_TYPE_HORAIRE
                For Each Element As MDT_TYPE_HORAIRE In C.List
                    If Element.COD_HOR.ToLower() = Search.ToLower() Or Element.NOM_HOR.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:628| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_TYPE_HORAIRE)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:295 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_TYPE_HORAIRE)
                Dim Result As New List(Of MDT_TYPE_HORAIRE)
                Dim C As New MDT_TYPE_HORAIRE
                For Each Element As MDT_TYPE_HORAIRE In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:633| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:295 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_HOR
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:637| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:296 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:642| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:296 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:648| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:296 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:652| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:296 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:657| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:296 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:663| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:668| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:690| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:693| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:698| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:703| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:709| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:299 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:714| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:300 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:718| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:300 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:721| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:300 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_HOR">(Set|Get) The COD_HOR as String.</param>
            ''' <param name="NOM_HOR">(Set|Get) The NOM_HOR as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_HOR As String,
ByVal NOM_HOR As String)
                With Me
                    Clear()
                    Reset()
                    .COD_HOR = COD_HOR
                    .NOM_HOR = NOM_HOR
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:958| <08.00.00> <Class> <> |.MDT_TYPE_TARIF|Class|{30} |Production Cost : 31.9|Selling Price : 79.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_TYPE_TARIF
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:958
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{3}||0.8| |2.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{3}||0.5| |1.5
        '''    |12| |Parameter  |{8}||0.5| |4
        '''    |Production Cost             |31.9
        '''    |Selling Price without VAT   |79.75
        '''    |Total TVA                   |6.14
        '''    |Grand Total                 |85.89
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:314 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_TYPE_TARIF
#Region "<1> [Property]{3}"
#Region "[On] |2019/07/16 23h23:959| <01.00.00> <Property> <Columns> |.COD_TAR()|String|"' (Set|Get) The COD_TAR as String.
            Private _COD_TAR As String
            '''    <Summary>
            '''     (Set|Get) The COD_TAR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:314 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TAR as String.")>
            Public Property COD_TAR() As String
                Get
                    Return _COD_TAR
                End Get
                Set(ByVal Value As String)
                    _COD_TAR = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TAR as String.

#Region "[On] |2019/07/16 23h23:973| <01.00.01> <Property> <Columns> |.NOM_TAR()|String|"' (Set|Get) The NOM_TAR as String.
            Private _NOM_TAR As String
            '''    <Summary>
            '''     (Set|Get) The NOM_TAR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:314 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_TAR as String.")>
            Public Property NOM_TAR() As String
                Get
                    Return _NOM_TAR
                End Get
                Set(ByVal Value As String)
                    _NOM_TAR = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_TAR as String.

#Region "[On] |2019/07/16 23h23:978| <01.00.02> <Property> <Columns> |.NOM_TAR_ABR()|String|"' (Set|Get) The NOM_TAR_ABR as String.
            Private _NOM_TAR_ABR As String
            '''    <Summary>
            '''     (Set|Get) The NOM_TAR_ABR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:331 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_TAR_ABR as String.")>
            Public Property NOM_TAR_ABR() As String
                Get
                    Return _NOM_TAR_ABR
                End Get
                Set(ByVal Value As String)
                    _NOM_TAR_ABR = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_TAR_ABR as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:983| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{2}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:331 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_TAR as String.</summary>
                [COD_TAR] = 0
                ''' <summary>(Set|Get) The NOM_TAR as String.</summary>
                [NOM_TAR] = 1
                ''' <summary>(Set|Get) The NOM_TAR_ABR as String.</summary>
                [NOM_TAR_ABR] = 2
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:988| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:332 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_TAR = Nothing
                    .NOM_TAR = Nothing
                    .NOM_TAR_ABR = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:993| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:332 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_TYPE_TARIF"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_TYPE_TARIF"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_TYPE_TARIF"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:997| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:332 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_TYPE_TARIF] (
`COD_TAR`, 
`NOM_TAR`, 
`NOM_TAR_ABR`) Values (@0, @1, @2)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_TAR)
                    Cmd.Parameters.AddWithValue("@1", Me.NOM_TAR)
                    Cmd.Parameters.AddWithValue("@2", Me.NOM_TAR_ABR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:002| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:335 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_TYPE_TARIF] SET NOM_TAR = @NOM_TAR, NOM_TAR_ABR = @NOM_TAR_ABR WHERE COD_TAR = @COD_TAR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NOM_TAR", NOM_TAR)
                    Cmd.Parameters.AddWithValue("@NOM_TAR_ABR", NOM_TAR_ABR)
                    Cmd.Parameters.AddWithValue("@COD_TAR", COD_TAR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:006| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:335 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_TYPE_TARIF] WHERE COD_TAR =@COD_TAR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_TAR", COD_TAR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h23:010| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:335 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:014| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:335 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:020| <05.00.02> <Function> <> |.List()|List(Of MDT_TYPE_TARIF)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:335 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_TYPE_TARIF)
                Dim Result As New List(Of MDT_TYPE_TARIF)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_TYPE_TARIF(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
      IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:049| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_TYPE_TARIF)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:336 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_TYPE_TARIF)
                Dim Result As New List(Of MDT_TYPE_TARIF)
                Dim C As New MDT_TYPE_TARIF
                For Each Element As MDT_TYPE_TARIF In C.List
                    If Element.COD_TAR.ToLower() = Search.ToLower() Or Element.NOM_TAR.ToLower() = Search.ToLower() Or Element.NOM_TAR_ABR.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:055| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_TYPE_TARIF)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:336 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_TYPE_TARIF)
                Dim Result As New List(Of MDT_TYPE_TARIF)
                Dim C As New MDT_TYPE_TARIF
                For Each Element As MDT_TYPE_TARIF In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:060| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:336 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_TAR
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:065| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:336 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:070| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:075| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:081| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:086| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:091| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:096| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:101| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:104| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:339 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:109| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:340 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:123| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:340 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:143| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:340 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:148| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:340 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:154| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:340 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:155| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:340 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_TAR">(Set|Get) The COD_TAR as String.</param>
            ''' <param name="NOM_TAR">(Set|Get) The NOM_TAR as String.</param>
            ''' <param name="NOM_TAR_ABR">(Set|Get) The NOM_TAR_ABR as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_TAR As String,
ByVal NOM_TAR As String,
ByVal NOM_TAR_ABR As String)
                With Me
                    Clear()
                    Reset()
                    .COD_TAR = COD_TAR
                    .NOM_TAR = NOM_TAR
                    .NOM_TAR_ABR = NOM_TAR_ABR
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:413| <08.00.00> <Class> <> |.MDT_TYPE_TVA|Class|{30} |Production Cost : 31.9|Selling Price : 79.75|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_TYPE_TVA
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:413
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{3}||0.8| |2.4
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{3}||0.5| |1.5
        '''    |12| |Parameter  |{8}||0.5| |4
        '''    |Production Cost             |31.9
        '''    |Selling Price without VAT   |79.75
        '''    |Total TVA                   |6.14
        '''    |Grand Total                 |85.89
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:353 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_TYPE_TVA
#Region "<1> [Property]{3}"
#Region "[On] |2019/07/16 23h23:414| <01.00.00> <Property> <Columns> |.COD_TVA()|String|"' (Set|Get) The COD_TVA as String.
            Private _COD_TVA As String
            '''    <Summary>
            '''     (Set|Get) The COD_TVA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:353 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_TVA as String.")>
            Public Property COD_TVA() As String
                Get
                    Return _COD_TVA
                End Get
                Set(ByVal Value As String)
                    _COD_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_TVA as String.

#Region "[On] |2019/07/16 23h23:427| <01.00.01> <Property> <Columns> |.LIB_TVA()|String|"' (Set|Get) The LIB_TVA as String.
            Private _LIB_TVA As String
            '''    <Summary>
            '''     (Set|Get) The LIB_TVA as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:353 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LIB_TVA as String.")>
            Public Property LIB_TVA() As String
                Get
                    Return _LIB_TVA
                End Get
                Set(ByVal Value As String)
                    _LIB_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) The LIB_TVA as String.

#Region "[On] |2019/07/16 23h23:433| <01.00.02> <Property> <Columns> |.DEF_YON()|Boolean|"' (Set|Get) The DEF_YON as Boolean.
            Private _DEF_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The DEF_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:353 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The DEF_YON as Boolean.")>
            Public Property DEF_YON() As Boolean
                Get
                    Return _DEF_YON
                End Get
                Set(ByVal Value As Boolean)
                    _DEF_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The DEF_YON as Boolean.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:438| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{2}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:353 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The COD_TVA as String.</summary>
                [COD_TVA] = 0
                ''' <summary>(Set|Get) The LIB_TVA as String.</summary>
                [LIB_TVA] = 1
                ''' <summary>(Set|Get) The DEF_YON as Boolean.</summary>
                [DEF_YON] = 2
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:443| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:357 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .COD_TVA = Nothing
                    .LIB_TVA = Nothing
                    .DEF_YON = False
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:446| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:357 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_TYPE_TVA"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_TYPE_TVA"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_TYPE_TVA"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:451| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:357 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_TYPE_TVA] (
`COD_TVA`, 
`LIB_TVA`, 
`DEF_YON`) Values (@0, @1, @2)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.COD_TVA)
                    Cmd.Parameters.AddWithValue("@1", Me.LIB_TVA)
                    Cmd.Parameters.AddWithValue("@2", Me.DEF_YON)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:456| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:357 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_TYPE_TVA] SET LIB_TVA = @LIB_TVA, DEF_YON = @DEF_YON WHERE COD_TVA = @COD_TVA"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@LIB_TVA", LIB_TVA)
                    Cmd.Parameters.AddWithValue("@DEF_YON", DEF_YON)
                    Cmd.Parameters.AddWithValue("@COD_TVA", COD_TVA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:460| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:357 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_TYPE_TVA] WHERE COD_TVA =@COD_TVA"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@COD_TVA", COD_TVA)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h23:466| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:358 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:471| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:358 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:476| <05.00.02> <Function> <> |.List()|List(Of MDT_TYPE_TVA)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:358 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_TYPE_TVA)
                Dim Result As New List(Of MDT_TYPE_TVA)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_TYPE_TVA(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
      IIf(IsDBNull(Row.Item(2)), False, Row.Item(2)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:494| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_TYPE_TVA)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:358 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_TYPE_TVA)
                Dim Result As New List(Of MDT_TYPE_TVA)
                Dim C As New MDT_TYPE_TVA
                For Each Element As MDT_TYPE_TVA In C.List
                    If Element.COD_TVA.ToLower() = Search.ToLower() Or Element.LIB_TVA.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:505| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_TYPE_TVA)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:358 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_TYPE_TVA)
                Dim Result As New List(Of MDT_TYPE_TVA)
                Dim C As New MDT_TYPE_TVA
                For Each Element As MDT_TYPE_TVA In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:511| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.COD_TVA
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:519| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:525| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:530| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:535| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:540| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:544| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:362 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:549| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:554| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:558| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:563| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:568| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:597| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:603| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:363 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:607| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:366 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:609| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:366 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="COD_TVA">(Set|Get) The COD_TVA as String.</param>
            ''' <param name="LIB_TVA">(Set|Get) The LIB_TVA as String.</param>
            ''' <param name="DEF_YON">(Set|Get) The DEF_YON as Boolean.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal COD_TVA As String,
ByVal LIB_TVA As String,
ByVal DEF_YON As Boolean)
                With Me
                    Clear()
                    Reset()
                    .COD_TVA = COD_TVA
                    .LIB_TVA = LIB_TVA
                    .DEF_YON = DEF_YON
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:857| <08.00.00> <Class> <> |.MDT_UTILISATEUR|Class|{33} |Production Cost : 37.3|Selling Price : 93.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class MDT_UTILISATEUR
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:857
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{6}||0.8| |4.8
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{6}||0.5| |3
        '''    |12| |Parameter  |{11}||0.5| |5.5
        '''    |Production Cost             |37.3
        '''    |Selling Price without VAT   |93.25
        '''    |Total TVA                   |7.18
        '''    |Grand Total                 |100.43
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:378 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class MDT_UTILISATEUR
#Region "<1> [Property]{6}"
#Region "[On] |2019/07/16 23h23:858| <01.00.00> <Property> <Columns> |.REF_USR()|String|"' (Set|Get) The REF_USR as String.
            Private _REF_USR As String
            '''    <Summary>
            '''     (Set|Get) The REF_USR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:378 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_USR as String.")>
            Public Property REF_USR() As String
                Get
                    Return _REF_USR
                End Get
                Set(ByVal Value As String)
                    _REF_USR = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_USR as String.

#Region "[On] |2019/07/16 23h23:877| <01.00.01> <Property> <Columns> |.NOM_USR()|String|"' (Set|Get) The NOM_USR as String.
            Private _NOM_USR As String
            '''    <Summary>
            '''     (Set|Get) The NOM_USR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:381 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The NOM_USR as String.")>
            Public Property NOM_USR() As String
                Get
                    Return _NOM_USR
                End Get
                Set(ByVal Value As String)
                    _NOM_USR = Value
                End Set
            End Property
#End Region '(Set|Get) The NOM_USR as String.

#Region "[On] |2019/07/16 23h23:883| <01.00.02> <Property> <Columns> |.COD_GRP()|String|"' (Set|Get) The COD_GRP as String.
            Private _COD_GRP As String
            '''    <Summary>
            '''     (Set|Get) The COD_GRP as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:381 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The COD_GRP as String.")>
            Public Property COD_GRP() As String
                Get
                    Return _COD_GRP
                End Get
                Set(ByVal Value As String)
                    _COD_GRP = Value
                End Set
            End Property
#End Region '(Set|Get) The COD_GRP as String.

#Region "[On] |2019/07/16 23h23:888| <01.00.03> <Property> <Columns> |.REF_CLB()|String|"' (Set|Get) The REF_CLB as String.
            Private _REF_CLB As String
            '''    <Summary>
            '''     (Set|Get) The REF_CLB as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:381 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The REF_CLB as String.")>
            Public Property REF_CLB() As String
                Get
                    Return _REF_CLB
                End Get
                Set(ByVal Value As String)
                    _REF_CLB = Value
                End Set
            End Property
#End Region '(Set|Get) The REF_CLB as String.

#Region "[On] |2019/07/16 23h23:893| <01.00.04> <Property> <Columns> |.MDP_USR()|String|"' (Set|Get) The MDP_USR as String.
            Private _MDP_USR As String
            '''    <Summary>
            '''     (Set|Get) The MDP_USR as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:381 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MDP_USR as String.")>
            Public Property MDP_USR() As String
                Get
                    Return _MDP_USR
                End Get
                Set(ByVal Value As String)
                    _MDP_USR = Value
                End Set
            End Property
#End Region '(Set|Get) The MDP_USR as String.

#Region "[On] |2019/07/16 23h23:898| <01.00.05> <Property> <Columns> |.LOG_YON()|Boolean|"' (Set|Get) The LOG_YON as Boolean.
            Private _LOG_YON As Boolean
            '''    <Summary>
            '''     (Set|Get) The LOG_YON as Boolean.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:381 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The LOG_YON as Boolean.")>
            Public Property LOG_YON() As Boolean
                Get
                    Return _LOG_YON
                End Get
                Set(ByVal Value As Boolean)
                    _LOG_YON = Value
                End Set
            End Property
#End Region '(Set|Get) The LOG_YON as Boolean.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:904| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{5}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:382 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The REF_USR as String.</summary>
                [REF_USR] = 0
                ''' <summary>(Set|Get) The NOM_USR as String.</summary>
                [NOM_USR] = 1
                ''' <summary>(Set|Get) The COD_GRP as String.</summary>
                [COD_GRP] = 2
                ''' <summary>(Set|Get) The REF_CLB as String.</summary>
                [REF_CLB] = 3
                ''' <summary>(Set|Get) The MDP_USR as String.</summary>
                [MDP_USR] = 4
                ''' <summary>(Set|Get) The LOG_YON as Boolean.</summary>
                [LOG_YON] = 5
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:909| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:382 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .REF_USR = Nothing
                    .NOM_USR = Nothing
                    .COD_GRP = Nothing
                    .REF_CLB = Nothing
                    .MDP_USR = Nothing
                    .LOG_YON = False
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:913| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:382 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "MDT_UTILISATEUR"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "MDT_UTILISATEUR"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "MDT_UTILISATEUR"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:918| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:382 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [MDT_UTILISATEUR] (
`REF_USR`, 
`NOM_USR`, 
`COD_GRP`, 
`REF_CLB`, 
`MDP_USR`, 
`LOG_YON`) Values (@0, @1, @2, @3, @4, @5)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.REF_USR)
                    Cmd.Parameters.AddWithValue("@1", Me.NOM_USR)
                    Cmd.Parameters.AddWithValue("@2", Me.COD_GRP)
                    Cmd.Parameters.AddWithValue("@3", Me.REF_CLB)
                    Cmd.Parameters.AddWithValue("@4", Me.MDP_USR)
                    Cmd.Parameters.AddWithValue("@5", Me.LOG_YON)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:923| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [MDT_UTILISATEUR] SET NOM_USR = @NOM_USR, COD_GRP = @COD_GRP, REF_CLB = @REF_CLB, MDP_USR = @MDP_USR, LOG_YON = @LOG_YON WHERE REF_USR = @REF_USR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@NOM_USR", NOM_USR)
                    Cmd.Parameters.AddWithValue("@COD_GRP", COD_GRP)
                    Cmd.Parameters.AddWithValue("@REF_CLB", REF_CLB)
                    Cmd.Parameters.AddWithValue("@MDP_USR", MDP_USR)
                    Cmd.Parameters.AddWithValue("@LOG_YON", LOG_YON)
                    Cmd.Parameters.AddWithValue("@REF_USR", REF_USR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:928| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [MDT_UTILISATEUR] WHERE REF_USR =@REF_USR"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@REF_USR", REF_USR)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h23:933| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:952| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:973| <05.00.02> <Function> <> |.List()|List(Of MDT_UTILISATEUR)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of MDT_UTILISATEUR)
                Dim Result As New List(Of MDT_UTILISATEUR)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New MDT_UTILISATEUR(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), "", Row.Item(2)),
IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)),
IIf(IsDBNull(Row.Item(4)), "", Row.Item(4)),
      IIf(IsDBNull(Row.Item(5)), False, Row.Item(5)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:978| <05.00.03> <Function> <> |.SearchByName()|List(Of MDT_UTILISATEUR)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of MDT_UTILISATEUR)
                Dim Result As New List(Of MDT_UTILISATEUR)
                Dim C As New MDT_UTILISATEUR
                For Each Element As MDT_UTILISATEUR In C.List
                    If Element.REF_USR.ToLower() = Search.ToLower() Or Element.NOM_USR.ToLower() = Search.ToLower() Or Element.COD_GRP.ToLower() = Search.ToLower() Or Element.REF_CLB.ToLower() = Search.ToLower() Or Element.MDP_USR.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:983| <05.00.04> <Function> <> |.SearchByID()|List(Of MDT_UTILISATEUR)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:385 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of MDT_UTILISATEUR)
                Dim Result As New List(Of MDT_UTILISATEUR)
                Dim C As New MDT_UTILISATEUR
                For Each Element As MDT_UTILISATEUR In C.List
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:988| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:386 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.REF_USR
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:993| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:386 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:997| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:391 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:002| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:391 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:008| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:391 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:013| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:391 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:019| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:392 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:023| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:392 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:028| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:392 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:032| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:392 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:050| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:392 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:056| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:392 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:060| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:392 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:066| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:392 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:071| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:393 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:072| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:393 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="REF_USR">(Set|Get) The REF_USR as String.</param>
            ''' <param name="NOM_USR">(Set|Get) The NOM_USR as String.</param>
            ''' <param name="COD_GRP">(Set|Get) The COD_GRP as String.</param>
            ''' <param name="REF_CLB">(Set|Get) The REF_CLB as String.</param>
            ''' <param name="MDP_USR">(Set|Get) The MDP_USR as String.</param>
            ''' <param name="LOG_YON">(Set|Get) The LOG_YON as Boolean.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal REF_USR As String,
ByVal NOM_USR As String,
ByVal COD_GRP As String,
ByVal REF_CLB As String,
ByVal MDP_USR As String,
ByVal LOG_YON As Boolean)
                With Me
                    Clear()
                    Reset()
                    .REF_USR = REF_USR
                    .NOM_USR = NOM_USR
                    .COD_GRP = COD_GRP
                    .REF_CLB = REF_CLB
                    .MDP_USR = MDP_USR
                    .LOG_YON = LOG_YON
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:242| <08.00.00> <Class> <> |.Pcompta|Class|{31} |Production Cost : 33.7|Selling Price : 84.25|"' Class created automatically by SmartOffice (c)Copyright 2019.
        '''    <Summary>
        '''     Class created automatically by SmartOffice (c)Copyright 2019.'''    Object Name :             Public  Class Pcompta
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:242
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{4}||0.8| |3.2
        '''    |02| |Enumeration|{1}||0.4| |0.4
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{5}||1.2| |6
        '''    |05| |Function   |{7}||1.6| |11.2
        '''    |06| |Runtime    |{12}||0.4| |4.8
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{4}||0.5| |2
        '''    |12| |Parameter  |{9}||0.5| |4.5
        '''    |Production Cost             |33.7
        '''    |Selling Price without VAT   |84.25
        '''    |Total TVA                   |6.49
        '''    |Grand Total                 |90.74
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:406 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class Pcompta
#Region "<1> [Property]{4}"
#Region "[On] |2019/07/16 23h23:243| <01.00.00> <Property> <Columns> |.MDT_ID()|String|"' (Set|Get) The MDT_ID as String.
            Private _MDT_ID As String
            '''    <Summary>
            '''     (Set|Get) The MDT_ID as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:406 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MDT_ID as String.")>
            Public Property MDT_ID() As String
                Get
                    Return _MDT_ID
                End Get
                Set(ByVal Value As String)
                    _MDT_ID = Value
                End Set
            End Property
#End Region '(Set|Get) The MDT_ID as String.

#Region "[On] |2019/07/16 23h23:250| <01.00.01> <Property> <Columns> |.MDTC_D()|String|"' (Set|Get) The MDTC_D as String.
            Private _MDTC_D As String
            '''    <Summary>
            '''     (Set|Get) The MDTC_D as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:406 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MDTC_D as String.")>
            Public Property MDTC_D() As String
                Get
                    Return _MDTC_D
                End Get
                Set(ByVal Value As String)
                    _MDTC_D = Value
                End Set
            End Property
#End Region '(Set|Get) The MDTC_D as String.

#Region "[On] |2019/07/16 23h23:256| <01.00.02> <Property> <Columns> |.PCOMPTA()|Double|"' (Set|Get) The PCOMPTA as Double.
            Private _PCOMPTA As Double
            '''    <Summary>
            '''     (Set|Get) The PCOMPTA as Double.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:407 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The PCOMPTA as Double.")>
            Public Property PCOMPTA() As Double
                Get
                    Return _PCOMPTA
                End Get
                Set(ByVal Value As Double)
                    _PCOMPTA = Value
                End Set
            End Property
#End Region '(Set|Get) The PCOMPTA as Double.

#Region "[On] |2019/07/16 23h23:261| <01.00.03> <Property> <Columns> |.MDT_DEF()|String|"' (Set|Get) The MDT_DEF as String.
            Private _MDT_DEF As String
            '''    <Summary>
            '''     (Set|Get) The MDT_DEF as String.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:407 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Columns"), Description("(Set|Get) The MDT_DEF as String.")>
            Public Property MDT_DEF() As String
                Get
                    Return _MDT_DEF
                End Get
                Set(ByVal Value As String)
                    _MDT_DEF = Value
                End Set
            End Property
#End Region '(Set|Get) The MDT_DEF as String.

#End Region
#Region "<2> [Enumeration]{1}"
#Region "[On] |2019/07/16 23h23:267| <02.00.00> <Enumeration> <> |.Schema()|Enumeration{3}|"' (Set|Get) The enumeration of Schema.
            '''    <Summary>
            '''     (Set|Get) The enumeration of Schema.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:410 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The enumeration of Schema.")>
            Enum Schema
                ''' <summary>(Set|Get) The MDT_ID as String.</summary>
                [MDT_ID] = 0
                ''' <summary>(Set|Get) The MDTC_D as String.</summary>
                [MDTC_D] = 1
                ''' <summary>(Set|Get) The PCOMPTA as Double.</summary>
                [PCOMPTA] = 2
                ''' <summary>(Set|Get) The MDT_DEF as String.</summary>
                [MDT_DEF] = 3
            End Enum
#End Region '(Set|Get) The enumeration of Schema.

#End Region
#Region "<4> [Sub]{5}"
#Region "[On] |2019/07/16 23h23:272| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:410 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class element.")>
            Public Sub Clear()
                With Me
                    .MDT_ID = Nothing
                    .MDTC_D = Nothing
                    .PCOMPTA = 0
                    .MDT_DEF = Nothing
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class element.

#Region "[On] |2019/07/16 23h23:277| <04.00.01> <Sub> <> |.Reset()|Sub}|"' (Set|Get) This will reinitialize the variables of this class.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the variables of this class.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:410 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the variables of this class.")>
            Public Sub Reset(Optional ByVal Connector As LineInfo = Nothing)
                If Not IsNothing(Connector) Then
                    Me.Connector = Connector
                    Me.FilePath = ""
                    Me.Password = ""
                    Me.Line = ""
                    If Connector.Status <> Status.Broken Then
                        FilePath = Connector.FilePath
                        Password = Connector.Password
                        Me.Connector = Connector
                        TableName = "Pcompta"
                        Line = Connector.Line
                        UseSQL = False
                    Else
                        FilePath = My.Settings.Db_mdtdata_FilePath
                        Password = My.Settings.Db_mdtdata_Password
                        Me.Line = My.Settings.Db_mdtdata_Line
                        TableName = "Pcompta"
                        UseSQL = False
                    End If
                Else
                    If IsNothing(FilePath) Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    If FilePath.Length < 1 Then
                        FilePath = My.Settings.Db_mdtdata_FilePath
                    End If
                    FilePath = My.Settings.Db_mdtdata_FilePath
                    Password = My.Settings.Db_mdtdata_Password
                    Me.Line = My.Settings.Db_mdtdata_Line
                    TableName = "Pcompta"
                    UseSQL = False
                End If

            End Sub
#End Region '(Set|Get) This will reinitialize the variables of this class.

#Region "[On] |2019/07/16 23h23:281| <04.00.02> <Sub> <> |.Add()|Sub}|"' (Set|Get) This will add a new row in the table.
            '''    <Summary>
            '''     (Set|Get) This will add a new row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:411 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will add a new row in the table.")>
            Public Sub Add()
                Try
                    Dim Str As String = Nothing
                    Str = "Insert Into [Pcompta] (
`MDT_ID`, 
`MDTC_D`, 
`PCOMPTA`, 
`MDT_DEF`) Values (@0, @1, @2, @3)"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@0", Me.MDT_ID)
                    Cmd.Parameters.AddWithValue("@1", Me.MDTC_D)
                    Cmd.Parameters.AddWithValue("@2", Me.PCOMPTA)
                    Cmd.Parameters.AddWithValue("@3", Me.MDT_DEF)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Addd")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will add a new row in the table.

#Region "[On] |2019/07/16 23h23:298| <04.00.03> <Sub> <> |.Save()|Sub}|"' (Set|Get) This will update a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will update a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:411 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will update a row in the table.")>
            Public Sub Save()
                Try
                    Dim Str As String = Nothing
                    Str = "UPDATE [Pcompta] SET MDTC_D = @MDTC_D, PCOMPTA = @PCOMPTA, MDT_DEF = @MDT_DEF WHERE MDT_ID = @MDT_ID"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@MDTC_D", MDTC_D)
                    Cmd.Parameters.AddWithValue("@PCOMPTA", PCOMPTA)
                    Cmd.Parameters.AddWithValue("@MDT_DEF", MDT_DEF)
                    Cmd.Parameters.AddWithValue("@MDT_ID", MDT_ID)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Saved")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will update a row in the table.

#Region "[On] |2019/07/16 23h23:304| <04.00.04> <Sub> <> |.Delete()|Sub}|"' (Set|Get) This will Delete a row in the table.
            '''    <Summary>
            '''     (Set|Get) This will Delete a row in the table.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:411 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will Delete a row in the table.")>
            Public Sub Delete()
                Try
                    Dim Str As String = Nothing
                    Str = "Delete From [Pcompta] WHERE MDT_ID =@MDT_ID"
                    Con = New OleDb.OleDbConnection(New LineInfo(FilePath, Password).Line)
                    Cmd = New OleDb.OleDbCommand(Str, Con)
                    Con.Open()
                    Cmd.Parameters.AddWithValue("@MDT_ID", MDT_ID)
                    If Cmd.ExecuteNonQuery >= 0 Then
                    Else
                        MsgBox("Element not Deleted")
                    End If
                Catch ex As Exception
                Finally
                    Close(True)
                End Try

            End Sub
#End Region '(Set|Get) This will Delete a row in the table.

#End Region
#Region "<5> [Function]{7}"
#Region "[On] |2019/07/16 23h23:310| <05.00.00> <Function> <> |.Open()|TestItem}|"' (Set|Get) This will initialise the connection and import the data.
            '''    <Summary>
            '''     (Set|Get) This will initialise the connection and import the data.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:411 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will initialise the connection and import the data.")>
            Public Function Open(ByVal SqlCommand As String) As TestItem
                Dim Result As New TestItem("Open(SqlCommand)", " Openning the connection line to the database.")
                If CheckConnection() = True Then
                    Con = New OleDb.OleDbConnection(Me.Line)
                    Cmd = New OleDb.OleDbCommand(SqlCommand, Con)
                    If Con.State = ConnectionState.Open Then
                        Close(True)
                    Else
                        Try
                            Con.Open()
                            Result.Status = Status.Online
                        Catch ex As Exception
                            Result.AddBug(ex, "Error while opening database", "SqlCon.Open()")
                            Result.Why += ex.Message & vbNewLine
                            Result.Status = Status.Broken
                        End Try
                    End If
                Else
                    Result.Status = Status.Broken
                    Result.Why += Log & vbNewLine
                End If
                Return Result

            End Function
#End Region '(Set|Get) This will initialise the connection and import the data.

#Region "[On] |2019/07/16 23h23:317| <05.00.01> <Function> <> |.Close()|TestItem}|"' (Set|Get) This willClosing the connection
            '''    <Summary>
            '''     (Set|Get) This willClosing the connection
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:411 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This willClosing the connection")>
            Public Function Close(ByVal Dispose As Boolean) As TestItem
                Dim Result As New TestItem("Close()", " Closing the connection line to the database.")
                If Not IsNothing(Line) Then
                    Result.Write("The line is configured")
                    If Not IsNothing(Con) Then
                        Result.Write("Con Exist.")
                        If Con.State = ConnectionState.Closed Then
                            Result.Write("Con is already close. No further action required. Mission accomplished.")
                            Result.Status = Status.Finished
                        ElseIf Con.State = ConnectionState.Broken Then
                            Result.Write("Con is broken.")
                            Result.Why += "The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened." & vbNewLine
                            Result.Status = Status.Broken
                        ElseIf Con.State = ConnectionState.Connecting Then
                            Result.Write("The connection object is connecting to the data source.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Executing Then
                            Result.Write("The connection object is executing a command.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        ElseIf Con.State = ConnectionState.Fetching Then
                            Result.Write("The connection object is retrieving data.")
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        Else
                            Result.Write("Sending command to close the connection.")
                            Con.Close()
                            If Dispose = True Then
                                Con.Dispose()
                                Result.Write("Sending command to dispose of the object.")
                            End If
                            If Con.State = ConnectionState.Closed Then
                                Result.Status = Status.Finished
                                Result.Write("The connection is closed.")
                            Else
                                Result.Status = Status.Broken
                                Result.Write("The connection will not close.")
                                Result.Why += "The connection will not close." & vbNewLine
                            End If
                        End If
                    End If
                End If
                Return Result

            End Function
#End Region '(Set|Get) This willClosing the connection

#Region "[On] |2019/07/16 23h23:324| <05.00.02> <Function> <> |.List()|List(Of Pcompta)}|"' (Set|Get) Return the entire table listed
            '''    <Summary>
            '''     (Set|Get) Return the entire table listed
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:412 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Return the entire table listed")>
            Public Function List() As List(Of Pcompta)
                Dim Result As New List(Of Pcompta)
                Me.Table = New Table(Me.TableName, Me.FilePath, Me.Password, False)
                For Each Row As DataRow In Me.Table.DataTable.Rows
                    Dim Element As New Pcompta(IIf(IsDBNull(Row.Item(0)), "", Row.Item(0)),
IIf(IsDBNull(Row.Item(1)), "", Row.Item(1)),
IIf(IsDBNull(Row.Item(2)), 0, Row.Item(2)),
      IIf(IsDBNull(Row.Item(3)), "", Row.Item(3)))
                    Element.Reset(Table.Line)
                    Result.Add(Element)
                Next
                Return Result
            End Function
#End Region '(Set|Get) Return the entire table listed

#Region "[On] |2019/07/16 23h23:330| <05.00.03> <Function> <> |.SearchByName()|List(Of Pcompta)}|"' (Set|Get) Search for each property that match the Search String.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search String.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:412 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search String.")>
            Public Shared Function SearchByName(ByVal Search As String) As List(Of Pcompta)
                Dim Result As New List(Of Pcompta)
                Dim C As New Pcompta
                For Each Element As Pcompta In C.List
                    If Element.MDT_ID.ToLower() = Search.ToLower() Or Element.MDTC_D.ToLower() = Search.ToLower() Or Element.MDT_DEF.ToLower() = Search.ToLower() Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search String.

#Region "[On] |2019/07/16 23h23:335| <05.00.04> <Function> <> |.SearchByID()|List(Of Pcompta)}|"' (Set|Get) Search for each property that match the Search Id.
            '''    <Summary>
            '''     (Set|Get) Search for each property that match the Search Id.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:415 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Search for each property that match the Search Id.")>
            Public Shared Function SearchByID(ByVal Search As Double) As List(Of Pcompta)
                Dim Result As New List(Of Pcompta)
                Dim C As New Pcompta
                For Each Element As Pcompta In C.List
                    If Val(Element.MDT_ID) = Search Then
                        Result.Add(Element)
                    End If
                Next
                Return Result
            End Function
#End Region '(Set|Get) Search for each property that match the Search Id.

#Region "[On] |2019/07/16 23h23:341| <05.00.05> <Function> <> |.ToString()|String}|"' (Set|Get) The function ToString.
            '''    <Summary>
            '''     (Set|Get) The function ToString.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:415 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The function ToString.")>
            Public Overrides Function ToString() As String
                Return Me.MDT_ID
            End Function
#End Region '(Set|Get) The function ToString.

#Region "[On] |2019/07/16 23h23:347| <05.00.06> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:415 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Try
                        Con = New OleDb.OleDbConnection(Me.Line)
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Log += Message & vbNewLine
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{12}"
#Region "[On] |2019/07/16 23h23:353| <15.00.00> <Runtime> <> |.Table()|Table"' (Set|Get) The Table.
            '''    <Summary>
            '''     (Set|Get) The Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:415 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Table.")>
            Public Table As Table
#End Region '(Set|Get) The Table.

#Region "[On] |2019/07/16 23h23:358| <15.00.01> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:415 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:362| <15.00.02> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:415 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:368| <15.00.03> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:418 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:379| <15.00.04> <Runtime> <> |.UseSQL()|Boolean"' (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <Summary>
            '''     (Set|Get) Determines if the Database Connection is of type SQL.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:418 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Determines if the Database Connection is of type SQL.")>
            Public UseSQL As Boolean
#End Region '(Set|Get) Determines if the Database Connection is of type SQL.

#Region "[On] |2019/07/16 23h23:393| <15.00.05> <Runtime> <> |.TableName()|String"' (Set|Get) The name of the Table.
            '''    <Summary>
            '''     (Set|Get) The name of the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:418 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The name of the Table.")>
            Public TableName As String
#End Region '(Set|Get) The name of the Table.

#Region "[On] |2019/07/16 23h23:398| <15.00.06> <Runtime> <> |.Con()|OleDb.OleDbConnection"' (Set|Get) The Con To the Table.
            '''    <Summary>
            '''     (Set|Get) The Con To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:418 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Con To the Table.")>
            Public Con As OleDb.OleDbConnection
#End Region '(Set|Get) The Con To the Table.

#Region "[On] |2019/07/16 23h23:402| <15.00.07> <Runtime> <> |.Cmd()|OleDb.OleDbCommand"' (Set|Get) The Cmd To the Table.
            '''    <Summary>
            '''     (Set|Get) The Cmd To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:418 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Cmd To the Table.")>
            Public Cmd As OleDb.OleDbCommand
#End Region '(Set|Get) The Cmd To the Table.

#Region "[On] |2019/07/16 23h23:407| <15.00.08> <Runtime> <> |.DataReader()|OleDb.OleDbDataReader"' (Set|Get) The DataReader To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataReader To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:418 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataReader To the Table.")>
            Public DataReader As OleDb.OleDbDataReader
#End Region '(Set|Get) The DataReader To the Table.

#Region "[On] |2019/07/16 23h23:413| <15.00.09> <Runtime> <> |.DataAdapter()|OleDb.OleDbDataAdapter"' (Set|Get) The DataAdapter To the Table.
            '''    <Summary>
            '''     (Set|Get) The DataAdapter To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:418 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The DataAdapter To the Table.")>
            Public DataAdapter As OleDb.OleDbDataAdapter
#End Region '(Set|Get) The DataAdapter To the Table.

#Region "[On] |2019/07/16 23h23:418| <15.00.10> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:418 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#Region "[On] |2019/07/16 23h23:424| <15.00.11> <Runtime> <> |.Log()|String"' (Set|Get) The Log To the Table.
            '''    <Summary>
            '''     (Set|Get) The Log To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:421 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Log To the Table.")>
            Public Log As String
#End Region '(Set|Get) The Log To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:429| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:421 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Reset
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:430| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:421 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="MDT_ID">(Set|Get) The MDT_ID as String.</param>
            ''' <param name="MDTC_D">(Set|Get) The MDTC_D as String.</param>
            ''' <param name="PCOMPTA">(Set|Get) The PCOMPTA as Double.</param>
            ''' <param name="MDT_DEF">(Set|Get) The MDT_DEF as String.</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal MDT_ID As String,
ByVal MDTC_D As String,
ByVal PCOMPTA As Double,
ByVal MDT_DEF As String)
                With Me
                    Clear()
                    Reset()
                    .MDT_ID = MDT_ID
                    .MDTC_D = MDTC_D
                    .PCOMPTA = PCOMPTA
                    .MDT_DEF = MDT_DEF
                End With

            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#Region "[On] |2019/07/16 23h23:699| <08.00.00> <Class> <> |.Initializor_mdtdata|Class|{128} |Production Cost : 103|Selling Price : 257.5|"' 
        '''    <Summary>
        '''     '''    Object Name :             Public  Class Initializor_mdtdata
        '''    Author Information :      David Shaw Informatique Sàrl|saadry.dunkel@ds-informatique.ch|https://www.ds-informatique.ch
        '''    Contributor Information : ||
        '''    Creation Date :           2019/07/16 23h23:699
        '''    |Schema|
        '''    |ID| |ObjectType |{Quantity}||UnitPrice||Total
        '''    |00| |Importation|{0}||1| |0
        '''    |01| |Properties |{120}||0.8| |96
        '''    |02| |Enumeration|{0}||0.4| |0
        '''    |03| |Structure  |{0}||0.4| |0
        '''    |04| |Sub        |{1}||1.2| |1.2
        '''    |05| |Function   |{1}||1.6| |1.6
        '''    |06| |Runtime    |{4}||0.4| |1.6
        '''    |07| |Loader     |{2}||0.8| |1.6
        '''    |08| |Class      |{0}||2| |0
        '''    |09| |Constante  |{0}||0.4| |0
        '''    |10| |Event      |{0}||1.2| |0
        '''    |11| |Members    |{0}||0.5| |0
        '''    |12| |Parameter  |{2}||0.5| |1
        '''    |Production Cost             |103
        '''    |Selling Price without VAT   |257.5
        '''    |Total TVA                   |19.83
        '''    |Grand Total                 |277.33
        '''    |/Schema|
        '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
        '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
        '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
        '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:429 </Published>
        '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
        '''    </Summary>
        Public Class Initializor_mdtdata
#Region "<1> [Property]{120}"
#Region "[On] |2019/07/16 23h23:700| <01.00.00> <Property> <Virtualized Properties> |.MDT_ARTICLE()|MDT_ARTICLE|"' (Set|Get) 
            Private _MDT_ARTICLE As MDT_ARTICLE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:434 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_ARTICLE() As MDT_ARTICLE
                Get
                    Return _MDT_ARTICLE
                End Get
                Set(ByVal Value As MDT_ARTICLE)
                    _MDT_ARTICLE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:721| <01.00.01> <Property> <List> |.List_MDT_ARTICLE()|List(Of MDT_ARTICLE)|"' (Set|Get) 
            Private _List_MDT_ARTICLE As List(Of MDT_ARTICLE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:434 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_ARTICLE() As List(Of MDT_ARTICLE)
                Get
                    Return _List_MDT_ARTICLE
                End Get
                Set(ByVal Value As List(Of MDT_ARTICLE))
                    _List_MDT_ARTICLE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:726| <01.00.02> <Property> <Virtualized Properties> |.MDT_BUDGET()|MDT_BUDGET|"' (Set|Get) 
            Private _MDT_BUDGET As MDT_BUDGET
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:435 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_BUDGET() As MDT_BUDGET
                Get
                    Return _MDT_BUDGET
                End Get
                Set(ByVal Value As MDT_BUDGET)
                    _MDT_BUDGET = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:732| <01.00.03> <Property> <List> |.List_MDT_BUDGET()|List(Of MDT_BUDGET)|"' (Set|Get) 
            Private _List_MDT_BUDGET As List(Of MDT_BUDGET)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:435 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_BUDGET() As List(Of MDT_BUDGET)
                Get
                    Return _List_MDT_BUDGET
                End Get
                Set(ByVal Value As List(Of MDT_BUDGET))
                    _List_MDT_BUDGET = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:770| <01.00.04> <Property> <Virtualized Properties> |.MDT_BUDGET_ETAPE()|MDT_BUDGET_ETAPE|"' (Set|Get) 
            Private _MDT_BUDGET_ETAPE As MDT_BUDGET_ETAPE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:436 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_BUDGET_ETAPE() As MDT_BUDGET_ETAPE
                Get
                    Return _MDT_BUDGET_ETAPE
                End Get
                Set(ByVal Value As MDT_BUDGET_ETAPE)
                    _MDT_BUDGET_ETAPE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:776| <01.00.05> <Property> <List> |.List_MDT_BUDGET_ETAPE()|List(Of MDT_BUDGET_ETAPE)|"' (Set|Get) 
            Private _List_MDT_BUDGET_ETAPE As List(Of MDT_BUDGET_ETAPE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:437 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_BUDGET_ETAPE() As List(Of MDT_BUDGET_ETAPE)
                Get
                    Return _List_MDT_BUDGET_ETAPE
                End Get
                Set(ByVal Value As List(Of MDT_BUDGET_ETAPE))
                    _List_MDT_BUDGET_ETAPE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:782| <01.00.06> <Property> <Virtualized Properties> |.MDT_BUREAU()|MDT_BUREAU|"' (Set|Get) 
            Private _MDT_BUREAU As MDT_BUREAU
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:437 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_BUREAU() As MDT_BUREAU
                Get
                    Return _MDT_BUREAU
                End Get
                Set(ByVal Value As MDT_BUREAU)
                    _MDT_BUREAU = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:787| <01.00.07> <Property> <List> |.List_MDT_BUREAU()|List(Of MDT_BUREAU)|"' (Set|Get) 
            Private _List_MDT_BUREAU As List(Of MDT_BUREAU)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:437 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_BUREAU() As List(Of MDT_BUREAU)
                Get
                    Return _List_MDT_BUREAU
                End Get
                Set(ByVal Value As List(Of MDT_BUREAU))
                    _List_MDT_BUREAU = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:793| <01.00.08> <Property> <Virtualized Properties> |.MDT_CATEGORIE()|MDT_CATEGORIE|"' (Set|Get) 
            Private _MDT_CATEGORIE As MDT_CATEGORIE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:437 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_CATEGORIE() As MDT_CATEGORIE
                Get
                    Return _MDT_CATEGORIE
                End Get
                Set(ByVal Value As MDT_CATEGORIE)
                    _MDT_CATEGORIE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:798| <01.00.09> <Property> <List> |.List_MDT_CATEGORIE()|List(Of MDT_CATEGORIE)|"' (Set|Get) 
            Private _List_MDT_CATEGORIE As List(Of MDT_CATEGORIE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:440 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_CATEGORIE() As List(Of MDT_CATEGORIE)
                Get
                    Return _List_MDT_CATEGORIE
                End Get
                Set(ByVal Value As List(Of MDT_CATEGORIE))
                    _List_MDT_CATEGORIE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:803| <01.00.10> <Property> <Virtualized Properties> |.MDT_CLIENT()|MDT_CLIENT|"' (Set|Get) 
            Private _MDT_CLIENT As MDT_CLIENT
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:440 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_CLIENT() As MDT_CLIENT
                Get
                    Return _MDT_CLIENT
                End Get
                Set(ByVal Value As MDT_CLIENT)
                    _MDT_CLIENT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:809| <01.00.11> <Property> <List> |.List_MDT_CLIENT()|List(Of MDT_CLIENT)|"' (Set|Get) 
            Private _List_MDT_CLIENT As List(Of MDT_CLIENT)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:441 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_CLIENT() As List(Of MDT_CLIENT)
                Get
                    Return _List_MDT_CLIENT
                End Get
                Set(ByVal Value As List(Of MDT_CLIENT))
                    _List_MDT_CLIENT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:815| <01.00.12> <Property> <Virtualized Properties> |.MDT_CODE()|MDT_CODE|"' (Set|Get) 
            Private _MDT_CODE As MDT_CODE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:441 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_CODE() As MDT_CODE
                Get
                    Return _MDT_CODE
                End Get
                Set(ByVal Value As MDT_CODE)
                    _MDT_CODE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:822| <01.00.13> <Property> <List> |.List_MDT_CODE()|List(Of MDT_CODE)|"' (Set|Get) 
            Private _List_MDT_CODE As List(Of MDT_CODE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:441 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_CODE() As List(Of MDT_CODE)
                Get
                    Return _List_MDT_CODE
                End Get
                Set(ByVal Value As List(Of MDT_CODE))
                    _List_MDT_CODE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:830| <01.00.14> <Property> <Virtualized Properties> |.MDT_COLLABO_ANNEE()|MDT_COLLABO_ANNEE|"' (Set|Get) 
            Private _MDT_COLLABO_ANNEE As MDT_COLLABO_ANNEE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:442 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_COLLABO_ANNEE() As MDT_COLLABO_ANNEE
                Get
                    Return _MDT_COLLABO_ANNEE
                End Get
                Set(ByVal Value As MDT_COLLABO_ANNEE)
                    _MDT_COLLABO_ANNEE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:836| <01.00.15> <Property> <List> |.List_MDT_COLLABO_ANNEE()|List(Of MDT_COLLABO_ANNEE)|"' (Set|Get) 
            Private _List_MDT_COLLABO_ANNEE As List(Of MDT_COLLABO_ANNEE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:442 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_COLLABO_ANNEE() As List(Of MDT_COLLABO_ANNEE)
                Get
                    Return _List_MDT_COLLABO_ANNEE
                End Get
                Set(ByVal Value As List(Of MDT_COLLABO_ANNEE))
                    _List_MDT_COLLABO_ANNEE = Value
                End Set
            End Property
#End Region '(Set|Get) 



#Region "[On] |2019/07/16 23h23:853| <01.00.18> <Property> <Virtualized Properties> |.MDT_COLLABO_SALAIRE()|MDT_COLLABO_SALAIRE|"' (Set|Get) 
            Private _MDT_COLLABO_SALAIRE As MDT_COLLABO_SALAIRE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:445 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_COLLABO_SALAIRE() As MDT_COLLABO_SALAIRE
                Get
                    Return _MDT_COLLABO_SALAIRE
                End Get
                Set(ByVal Value As MDT_COLLABO_SALAIRE)
                    _MDT_COLLABO_SALAIRE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:859| <01.00.19> <Property> <List> |.List_MDT_COLLABO_SALAIRE()|List(Of MDT_COLLABO_SALAIRE)|"' (Set|Get) 
            Private _List_MDT_COLLABO_SALAIRE As List(Of MDT_COLLABO_SALAIRE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:445 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_COLLABO_SALAIRE() As List(Of MDT_COLLABO_SALAIRE)
                Get
                    Return _List_MDT_COLLABO_SALAIRE
                End Get
                Set(ByVal Value As List(Of MDT_COLLABO_SALAIRE))
                    _List_MDT_COLLABO_SALAIRE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:866| <01.00.20> <Property> <Virtualized Properties> |.MDT_COLLABORATEUR()|MDT_COLLABORATEUR|"' (Set|Get) 
            Private _MDT_COLLABORATEUR As MDT_COLLABORATEUR
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:445 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_COLLABORATEUR() As MDT_COLLABORATEUR
                Get
                    Return _MDT_COLLABORATEUR
                End Get
                Set(ByVal Value As MDT_COLLABORATEUR)
                    _MDT_COLLABORATEUR = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:872| <01.00.21> <Property> <List> |.List_MDT_COLLABORATEUR()|List(Of MDT_COLLABORATEUR)|"' (Set|Get) 
            Private _List_MDT_COLLABORATEUR As List(Of MDT_COLLABORATEUR)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:445 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_COLLABORATEUR() As List(Of MDT_COLLABORATEUR)
                Get
                    Return _List_MDT_COLLABORATEUR
                End Get
                Set(ByVal Value As List(Of MDT_COLLABORATEUR))
                    _List_MDT_COLLABORATEUR = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:879| <01.00.22> <Property> <Virtualized Properties> |.MDT_COMPTE_CG()|MDT_COMPTE_CG|"' (Set|Get) 
            Private _MDT_COMPTE_CG As MDT_COMPTE_CG
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:445 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_COMPTE_CG() As MDT_COMPTE_CG
                Get
                    Return _MDT_COMPTE_CG
                End Get
                Set(ByVal Value As MDT_COMPTE_CG)
                    _MDT_COMPTE_CG = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:885| <01.00.23> <Property> <List> |.List_MDT_COMPTE_CG()|List(Of MDT_COMPTE_CG)|"' (Set|Get) 
            Private _List_MDT_COMPTE_CG As List(Of MDT_COMPTE_CG)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:446 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_COMPTE_CG() As List(Of MDT_COMPTE_CG)
                Get
                    Return _List_MDT_COMPTE_CG
                End Get
                Set(ByVal Value As List(Of MDT_COMPTE_CG))
                    _List_MDT_COMPTE_CG = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:891| <01.00.24> <Property> <Virtualized Properties> |.MDT_CONGE()|MDT_CONGE|"' (Set|Get) 
            Private _MDT_CONGE As MDT_CONGE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:446 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_CONGE() As MDT_CONGE
                Get
                    Return _MDT_CONGE
                End Get
                Set(ByVal Value As MDT_CONGE)
                    _MDT_CONGE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:898| <01.00.25> <Property> <List> |.List_MDT_CONGE()|List(Of MDT_CONGE)|"' (Set|Get) 
            Private _List_MDT_CONGE As List(Of MDT_CONGE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:446 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_CONGE() As List(Of MDT_CONGE)
                Get
                    Return _List_MDT_CONGE
                End Get
                Set(ByVal Value As List(Of MDT_CONGE))
                    _List_MDT_CONGE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:904| <01.00.26> <Property> <Virtualized Properties> |.MDT_DOCUMENT()|MDT_DOCUMENT|"' (Set|Get) 
            Private _MDT_DOCUMENT As MDT_DOCUMENT
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:449 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_DOCUMENT() As MDT_DOCUMENT
                Get
                    Return _MDT_DOCUMENT
                End Get
                Set(ByVal Value As MDT_DOCUMENT)
                    _MDT_DOCUMENT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:927| <01.00.27> <Property> <List> |.List_MDT_DOCUMENT()|List(Of MDT_DOCUMENT)|"' (Set|Get) 
            Private _List_MDT_DOCUMENT As List(Of MDT_DOCUMENT)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:449 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_DOCUMENT() As List(Of MDT_DOCUMENT)
                Get
                    Return _List_MDT_DOCUMENT
                End Get
                Set(ByVal Value As List(Of MDT_DOCUMENT))
                    _List_MDT_DOCUMENT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:936| <01.00.28> <Property> <Virtualized Properties> |.MDT_DOCUMENT_FACTURE()|MDT_DOCUMENT_FACTURE|"' (Set|Get) 
            Private _MDT_DOCUMENT_FACTURE As MDT_DOCUMENT_FACTURE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:449 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_DOCUMENT_FACTURE() As MDT_DOCUMENT_FACTURE
                Get
                    Return _MDT_DOCUMENT_FACTURE
                End Get
                Set(ByVal Value As MDT_DOCUMENT_FACTURE)
                    _MDT_DOCUMENT_FACTURE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:943| <01.00.29> <Property> <List> |.List_MDT_DOCUMENT_FACTURE()|List(Of MDT_DOCUMENT_FACTURE)|"' (Set|Get) 
            Private _List_MDT_DOCUMENT_FACTURE As List(Of MDT_DOCUMENT_FACTURE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:449 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_DOCUMENT_FACTURE() As List(Of MDT_DOCUMENT_FACTURE)
                Get
                    Return _List_MDT_DOCUMENT_FACTURE
                End Get
                Set(ByVal Value As List(Of MDT_DOCUMENT_FACTURE))
                    _List_MDT_DOCUMENT_FACTURE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:950| <01.00.30> <Property> <Virtualized Properties> |.MDT_DOCUMENT_FACTURE_LIGNE()|MDT_DOCUMENT_FACTURE_LIGNE|"' (Set|Get) 
            Private _MDT_DOCUMENT_FACTURE_LIGNE As MDT_DOCUMENT_FACTURE_LIGNE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:449 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_DOCUMENT_FACTURE_LIGNE() As MDT_DOCUMENT_FACTURE_LIGNE
                Get
                    Return _MDT_DOCUMENT_FACTURE_LIGNE
                End Get
                Set(ByVal Value As MDT_DOCUMENT_FACTURE_LIGNE)
                    _MDT_DOCUMENT_FACTURE_LIGNE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:956| <01.00.31> <Property> <List> |.List_MDT_DOCUMENT_FACTURE_LIGNE()|List(Of MDT_DOCUMENT_FACTURE_LIGNE)|"' (Set|Get) 
            Private _List_MDT_DOCUMENT_FACTURE_LIGNE As List(Of MDT_DOCUMENT_FACTURE_LIGNE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:450 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_DOCUMENT_FACTURE_LIGNE() As List(Of MDT_DOCUMENT_FACTURE_LIGNE)
                Get
                    Return _List_MDT_DOCUMENT_FACTURE_LIGNE
                End Get
                Set(ByVal Value As List(Of MDT_DOCUMENT_FACTURE_LIGNE))
                    _List_MDT_DOCUMENT_FACTURE_LIGNE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:962| <01.00.32> <Property> <Virtualized Properties> |.MDT_DOCUMENT_UTILISATEUR()|MDT_DOCUMENT_UTILISATEUR|"' (Set|Get) 
            Private _MDT_DOCUMENT_UTILISATEUR As MDT_DOCUMENT_UTILISATEUR
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:450 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_DOCUMENT_UTILISATEUR() As MDT_DOCUMENT_UTILISATEUR
                Get
                    Return _MDT_DOCUMENT_UTILISATEUR
                End Get
                Set(ByVal Value As MDT_DOCUMENT_UTILISATEUR)
                    _MDT_DOCUMENT_UTILISATEUR = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:969| <01.00.33> <Property> <List> |.List_MDT_DOCUMENT_UTILISATEUR()|List(Of MDT_DOCUMENT_UTILISATEUR)|"' (Set|Get) 
            Private _List_MDT_DOCUMENT_UTILISATEUR As List(Of MDT_DOCUMENT_UTILISATEUR)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:450 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_DOCUMENT_UTILISATEUR() As List(Of MDT_DOCUMENT_UTILISATEUR)
                Get
                    Return _List_MDT_DOCUMENT_UTILISATEUR
                End Get
                Set(ByVal Value As List(Of MDT_DOCUMENT_UTILISATEUR))
                    _List_MDT_DOCUMENT_UTILISATEUR = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:975| <01.00.34> <Property> <Virtualized Properties> |.MDT_ENREGISTREMENT_FACTURES()|MDT_ENREGISTREMENT_FACTURES|"' (Set|Get) 
            Private _MDT_ENREGISTREMENT_FACTURES As MDT_ENREGISTREMENT_FACTURES
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:450 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_ENREGISTREMENT_FACTURES() As MDT_ENREGISTREMENT_FACTURES
                Get
                    Return _MDT_ENREGISTREMENT_FACTURES
                End Get
                Set(ByVal Value As MDT_ENREGISTREMENT_FACTURES)
                    _MDT_ENREGISTREMENT_FACTURES = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:983| <01.00.35> <Property> <List> |.List_MDT_ENREGISTREMENT_FACTURES()|List(Of MDT_ENREGISTREMENT_FACTURES)|"' (Set|Get) 
            Private _List_MDT_ENREGISTREMENT_FACTURES As List(Of MDT_ENREGISTREMENT_FACTURES)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:453 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_ENREGISTREMENT_FACTURES() As List(Of MDT_ENREGISTREMENT_FACTURES)
                Get
                    Return _List_MDT_ENREGISTREMENT_FACTURES
                End Get
                Set(ByVal Value As List(Of MDT_ENREGISTREMENT_FACTURES))
                    _List_MDT_ENREGISTREMENT_FACTURES = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:990| <01.00.36> <Property> <Virtualized Properties> |.MDT_ETAPE()|MDT_ETAPE|"' (Set|Get) 
            Private _MDT_ETAPE As MDT_ETAPE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:453 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_ETAPE() As MDT_ETAPE
                Get
                    Return _MDT_ETAPE
                End Get
                Set(ByVal Value As MDT_ETAPE)
                    _MDT_ETAPE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:997| <01.00.37> <Property> <List> |.List_MDT_ETAPE()|List(Of MDT_ETAPE)|"' (Set|Get) 
            Private _List_MDT_ETAPE As List(Of MDT_ETAPE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:453 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_ETAPE() As List(Of MDT_ETAPE)
                Get
                    Return _List_MDT_ETAPE
                End Get
                Set(ByVal Value As List(Of MDT_ETAPE))
                    _List_MDT_ETAPE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:003| <01.00.38> <Property> <Virtualized Properties> |.MDT_ETAT()|MDT_ETAT|"' (Set|Get) 
            Private _MDT_ETAT As MDT_ETAT
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:453 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_ETAT() As MDT_ETAT
                Get
                    Return _MDT_ETAT
                End Get
                Set(ByVal Value As MDT_ETAT)
                    _MDT_ETAT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:009| <01.00.39> <Property> <List> |.List_MDT_ETAT()|List(Of MDT_ETAT)|"' (Set|Get) 
            Private _List_MDT_ETAT As List(Of MDT_ETAT)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:454 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_ETAT() As List(Of MDT_ETAT)
                Get
                    Return _List_MDT_ETAT
                End Get
                Set(ByVal Value As List(Of MDT_ETAT))
                    _List_MDT_ETAT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:018| <01.00.40> <Property> <Virtualized Properties> |.MDT_GEFI_TRANSFERT_ETA()|MDT_GEFI_TRANSFERT_ETA|"' (Set|Get) 
            Private _MDT_GEFI_TRANSFERT_ETA As MDT_GEFI_TRANSFERT_ETA
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:457 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_GEFI_TRANSFERT_ETA() As MDT_GEFI_TRANSFERT_ETA
                Get
                    Return _MDT_GEFI_TRANSFERT_ETA
                End Get
                Set(ByVal Value As MDT_GEFI_TRANSFERT_ETA)
                    _MDT_GEFI_TRANSFERT_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:025| <01.00.41> <Property> <List> |.List_MDT_GEFI_TRANSFERT_ETA()|List(Of MDT_GEFI_TRANSFERT_ETA)|"' (Set|Get) 
            Private _List_MDT_GEFI_TRANSFERT_ETA As List(Of MDT_GEFI_TRANSFERT_ETA)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:458 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_GEFI_TRANSFERT_ETA() As List(Of MDT_GEFI_TRANSFERT_ETA)
                Get
                    Return _List_MDT_GEFI_TRANSFERT_ETA
                End Get
                Set(ByVal Value As List(Of MDT_GEFI_TRANSFERT_ETA))
                    _List_MDT_GEFI_TRANSFERT_ETA = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:032| <01.00.42> <Property> <Virtualized Properties> |.MDT_GENRE_PRESTATION()|MDT_GENRE_PRESTATION|"' (Set|Get) 
            Private _MDT_GENRE_PRESTATION As MDT_GENRE_PRESTATION
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:458 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_GENRE_PRESTATION() As MDT_GENRE_PRESTATION
                Get
                    Return _MDT_GENRE_PRESTATION
                End Get
                Set(ByVal Value As MDT_GENRE_PRESTATION)
                    _MDT_GENRE_PRESTATION = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:040| <01.00.43> <Property> <List> |.List_MDT_GENRE_PRESTATION()|List(Of MDT_GENRE_PRESTATION)|"' (Set|Get) 
            Private _List_MDT_GENRE_PRESTATION As List(Of MDT_GENRE_PRESTATION)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:461 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_GENRE_PRESTATION() As List(Of MDT_GENRE_PRESTATION)
                Get
                    Return _List_MDT_GENRE_PRESTATION
                End Get
                Set(ByVal Value As List(Of MDT_GENRE_PRESTATION))
                    _List_MDT_GENRE_PRESTATION = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:047| <01.00.44> <Property> <Virtualized Properties> |.MDT_GROUPE()|MDT_GROUPE|"' (Set|Get) 
            Private _MDT_GROUPE As MDT_GROUPE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:461 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_GROUPE() As MDT_GROUPE
                Get
                    Return _MDT_GROUPE
                End Get
                Set(ByVal Value As MDT_GROUPE)
                    _MDT_GROUPE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:054| <01.00.45> <Property> <List> |.List_MDT_GROUPE()|List(Of MDT_GROUPE)|"' (Set|Get) 
            Private _List_MDT_GROUPE As List(Of MDT_GROUPE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:461 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_GROUPE() As List(Of MDT_GROUPE)
                Get
                    Return _List_MDT_GROUPE
                End Get
                Set(ByVal Value As List(Of MDT_GROUPE))
                    _List_MDT_GROUPE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:060| <01.00.46> <Property> <Virtualized Properties> |.MDT_GROUPE_ACCES()|MDT_GROUPE_ACCES|"' (Set|Get) 
            Private _MDT_GROUPE_ACCES As MDT_GROUPE_ACCES
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:462 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_GROUPE_ACCES() As MDT_GROUPE_ACCES
                Get
                    Return _MDT_GROUPE_ACCES
                End Get
                Set(ByVal Value As MDT_GROUPE_ACCES)
                    _MDT_GROUPE_ACCES = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:084| <01.00.47> <Property> <List> |.List_MDT_GROUPE_ACCES()|List(Of MDT_GROUPE_ACCES)|"' (Set|Get) 
            Private _List_MDT_GROUPE_ACCES As List(Of MDT_GROUPE_ACCES)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:462 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_GROUPE_ACCES() As List(Of MDT_GROUPE_ACCES)
                Get
                    Return _List_MDT_GROUPE_ACCES
                End Get
                Set(ByVal Value As List(Of MDT_GROUPE_ACCES))
                    _List_MDT_GROUPE_ACCES = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:093| <01.00.48> <Property> <Virtualized Properties> |.MDT_GROUPE_ETAT()|MDT_GROUPE_ETAT|"' (Set|Get) 
            Private _MDT_GROUPE_ETAT As MDT_GROUPE_ETAT
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:462 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_GROUPE_ETAT() As MDT_GROUPE_ETAT
                Get
                    Return _MDT_GROUPE_ETAT
                End Get
                Set(ByVal Value As MDT_GROUPE_ETAT)
                    _MDT_GROUPE_ETAT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:102| <01.00.49> <Property> <List> |.List_MDT_GROUPE_ETAT()|List(Of MDT_GROUPE_ETAT)|"' (Set|Get) 
            Private _List_MDT_GROUPE_ETAT As List(Of MDT_GROUPE_ETAT)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:462 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_GROUPE_ETAT() As List(Of MDT_GROUPE_ETAT)
                Get
                    Return _List_MDT_GROUPE_ETAT
                End Get
                Set(ByVal Value As List(Of MDT_GROUPE_ETAT))
                    _List_MDT_GROUPE_ETAT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:111| <01.00.50> <Property> <Virtualized Properties> |.MDT_HISTORIQUE_OPERATION()|MDT_HISTORIQUE_OPERATION|"' (Set|Get) 
            Private _MDT_HISTORIQUE_OPERATION As MDT_HISTORIQUE_OPERATION
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:463 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_HISTORIQUE_OPERATION() As MDT_HISTORIQUE_OPERATION
                Get
                    Return _MDT_HISTORIQUE_OPERATION
                End Get
                Set(ByVal Value As MDT_HISTORIQUE_OPERATION)
                    _MDT_HISTORIQUE_OPERATION = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:118| <01.00.51> <Property> <List> |.List_MDT_HISTORIQUE_OPERATION()|List(Of MDT_HISTORIQUE_OPERATION)|"' (Set|Get) 
            Private _List_MDT_HISTORIQUE_OPERATION As List(Of MDT_HISTORIQUE_OPERATION)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:463 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_HISTORIQUE_OPERATION() As List(Of MDT_HISTORIQUE_OPERATION)
                Get
                    Return _List_MDT_HISTORIQUE_OPERATION
                End Get
                Set(ByVal Value As List(Of MDT_HISTORIQUE_OPERATION))
                    _List_MDT_HISTORIQUE_OPERATION = Value
                End Set
            End Property
#End Region '(Set|Get) 



#Region "[On] |2019/07/16 23h23:140| <01.00.54> <Property> <Virtualized Properties> |.MDT_IMPORT()|MDT_IMPORT|"' (Set|Get) 
            Private _MDT_IMPORT As MDT_IMPORT
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:466 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_IMPORT() As MDT_IMPORT
                Get
                    Return _MDT_IMPORT
                End Get
                Set(ByVal Value As MDT_IMPORT)
                    _MDT_IMPORT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:149| <01.00.55> <Property> <List> |.List_MDT_IMPORT()|List(Of MDT_IMPORT)|"' (Set|Get) 
            Private _List_MDT_IMPORT As List(Of MDT_IMPORT)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:466 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_IMPORT() As List(Of MDT_IMPORT)
                Get
                    Return _List_MDT_IMPORT
                End Get
                Set(ByVal Value As List(Of MDT_IMPORT))
                    _List_MDT_IMPORT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:156| <01.00.56> <Property> <Virtualized Properties> |.MDT_MAJORATION()|MDT_MAJORATION|"' (Set|Get) 
            Private _MDT_MAJORATION As MDT_MAJORATION
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:467 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_MAJORATION() As MDT_MAJORATION
                Get
                    Return _MDT_MAJORATION
                End Get
                Set(ByVal Value As MDT_MAJORATION)
                    _MDT_MAJORATION = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:164| <01.00.57> <Property> <List> |.List_MDT_MAJORATION()|List(Of MDT_MAJORATION)|"' (Set|Get) 
            Private _List_MDT_MAJORATION As List(Of MDT_MAJORATION)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:467 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_MAJORATION() As List(Of MDT_MAJORATION)
                Get
                    Return _List_MDT_MAJORATION
                End Get
                Set(ByVal Value As List(Of MDT_MAJORATION))
                    _List_MDT_MAJORATION = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:171| <01.00.58> <Property> <Virtualized Properties> |.MDT_MANDAT()|MDT_MANDAT|"' (Set|Get) 
            Private _MDT_MANDAT As MDT_MANDAT
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:467 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_MANDAT() As MDT_MANDAT
                Get
                    Return _MDT_MANDAT
                End Get
                Set(ByVal Value As MDT_MANDAT)
                    _MDT_MANDAT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:180| <01.00.59> <Property> <List> |.List_MDT_MANDAT()|List(Of MDT_MANDAT)|"' (Set|Get) 
            Private _List_MDT_MANDAT As List(Of MDT_MANDAT)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:467 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_MANDAT() As List(Of MDT_MANDAT)
                Get
                    Return _List_MDT_MANDAT
                End Get
                Set(ByVal Value As List(Of MDT_MANDAT))
                    _List_MDT_MANDAT = Value
                End Set
            End Property
#End Region '(Set|Get) 



#Region "[On] |2019/07/16 23h23:202| <01.00.62> <Property> <Virtualized Properties> |.MDT_MODELE_ETAPE()|MDT_MODELE_ETAPE|"' (Set|Get) 
            Private _MDT_MODELE_ETAPE As MDT_MODELE_ETAPE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:471 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_MODELE_ETAPE() As MDT_MODELE_ETAPE
                Get
                    Return _MDT_MODELE_ETAPE
                End Get
                Set(ByVal Value As MDT_MODELE_ETAPE)
                    _MDT_MODELE_ETAPE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:210| <01.00.63> <Property> <List> |.List_MDT_MODELE_ETAPE()|List(Of MDT_MODELE_ETAPE)|"' (Set|Get) 
            Private _List_MDT_MODELE_ETAPE As List(Of MDT_MODELE_ETAPE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:471 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_MODELE_ETAPE() As List(Of MDT_MODELE_ETAPE)
                Get
                    Return _List_MDT_MODELE_ETAPE
                End Get
                Set(ByVal Value As List(Of MDT_MODELE_ETAPE))
                    _List_MDT_MODELE_ETAPE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:218| <01.00.64> <Property> <Virtualized Properties> |.MDT_MODELE_SEMAINE()|MDT_MODELE_SEMAINE|"' (Set|Get) 
            Private _MDT_MODELE_SEMAINE As MDT_MODELE_SEMAINE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:472 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_MODELE_SEMAINE() As MDT_MODELE_SEMAINE
                Get
                    Return _MDT_MODELE_SEMAINE
                End Get
                Set(ByVal Value As MDT_MODELE_SEMAINE)
                    _MDT_MODELE_SEMAINE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:242| <01.00.65> <Property> <List> |.List_MDT_MODELE_SEMAINE()|List(Of MDT_MODELE_SEMAINE)|"' (Set|Get) 
            Private _List_MDT_MODELE_SEMAINE As List(Of MDT_MODELE_SEMAINE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:472 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_MODELE_SEMAINE() As List(Of MDT_MODELE_SEMAINE)
                Get
                    Return _List_MDT_MODELE_SEMAINE
                End Get
                Set(ByVal Value As List(Of MDT_MODELE_SEMAINE))
                    _List_MDT_MODELE_SEMAINE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:252| <01.00.66> <Property> <Virtualized Properties> |.MDT_NOM_MODELE_ETAPE()|MDT_NOM_MODELE_ETAPE|"' (Set|Get) 
            Private _MDT_NOM_MODELE_ETAPE As MDT_NOM_MODELE_ETAPE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:472 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_NOM_MODELE_ETAPE() As MDT_NOM_MODELE_ETAPE
                Get
                    Return _MDT_NOM_MODELE_ETAPE
                End Get
                Set(ByVal Value As MDT_NOM_MODELE_ETAPE)
                    _MDT_NOM_MODELE_ETAPE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:261| <01.00.67> <Property> <List> |.List_MDT_NOM_MODELE_ETAPE()|List(Of MDT_NOM_MODELE_ETAPE)|"' (Set|Get) 
            Private _List_MDT_NOM_MODELE_ETAPE As List(Of MDT_NOM_MODELE_ETAPE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:472 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_NOM_MODELE_ETAPE() As List(Of MDT_NOM_MODELE_ETAPE)
                Get
                    Return _List_MDT_NOM_MODELE_ETAPE
                End Get
                Set(ByVal Value As List(Of MDT_NOM_MODELE_ETAPE))
                    _List_MDT_NOM_MODELE_ETAPE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:270| <01.00.68> <Property> <Virtualized Properties> |.MDT_NUMERO_UTILISATEUR()|MDT_NUMERO_UTILISATEUR|"' (Set|Get) 
            Private _MDT_NUMERO_UTILISATEUR As MDT_NUMERO_UTILISATEUR
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:473 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_NUMERO_UTILISATEUR() As MDT_NUMERO_UTILISATEUR
                Get
                    Return _MDT_NUMERO_UTILISATEUR
                End Get
                Set(ByVal Value As MDT_NUMERO_UTILISATEUR)
                    _MDT_NUMERO_UTILISATEUR = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:279| <01.00.69> <Property> <List> |.List_MDT_NUMERO_UTILISATEUR()|List(Of MDT_NUMERO_UTILISATEUR)|"' (Set|Get) 
            Private _List_MDT_NUMERO_UTILISATEUR As List(Of MDT_NUMERO_UTILISATEUR)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:473 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_NUMERO_UTILISATEUR() As List(Of MDT_NUMERO_UTILISATEUR)
                Get
                    Return _List_MDT_NUMERO_UTILISATEUR
                End Get
                Set(ByVal Value As List(Of MDT_NUMERO_UTILISATEUR))
                    _List_MDT_NUMERO_UTILISATEUR = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:288| <01.00.70> <Property> <Virtualized Properties> |.MDT_OPERATION()|MDT_OPERATION|"' (Set|Get) 
            Private _MDT_OPERATION As MDT_OPERATION
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:473 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_OPERATION() As MDT_OPERATION
                Get
                    Return _MDT_OPERATION
                End Get
                Set(ByVal Value As MDT_OPERATION)
                    _MDT_OPERATION = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:296| <01.00.71> <Property> <List> |.List_MDT_OPERATION()|List(Of MDT_OPERATION)|"' (Set|Get) 
            Private _List_MDT_OPERATION As List(Of MDT_OPERATION)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:476 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_OPERATION() As List(Of MDT_OPERATION)
                Get
                    Return _List_MDT_OPERATION
                End Get
                Set(ByVal Value As List(Of MDT_OPERATION))
                    _List_MDT_OPERATION = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:304| <01.00.72> <Property> <Virtualized Properties> |.MDT_ORTHOGRAPHE()|MDT_ORTHOGRAPHE|"' (Set|Get) 
            Private _MDT_ORTHOGRAPHE As MDT_ORTHOGRAPHE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:476 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_ORTHOGRAPHE() As MDT_ORTHOGRAPHE
                Get
                    Return _MDT_ORTHOGRAPHE
                End Get
                Set(ByVal Value As MDT_ORTHOGRAPHE)
                    _MDT_ORTHOGRAPHE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:313| <01.00.73> <Property> <List> |.List_MDT_ORTHOGRAPHE()|List(Of MDT_ORTHOGRAPHE)|"' (Set|Get) 
            Private _List_MDT_ORTHOGRAPHE As List(Of MDT_ORTHOGRAPHE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:476 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_ORTHOGRAPHE() As List(Of MDT_ORTHOGRAPHE)
                Get
                    Return _List_MDT_ORTHOGRAPHE
                End Get
                Set(ByVal Value As List(Of MDT_ORTHOGRAPHE))
                    _List_MDT_ORTHOGRAPHE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:321| <01.00.74> <Property> <Virtualized Properties> |.MDT_RECAPITULATION()|MDT_RECAPITULATION|"' (Set|Get) 
            Private _MDT_RECAPITULATION As MDT_RECAPITULATION
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:477 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_RECAPITULATION() As MDT_RECAPITULATION
                Get
                    Return _MDT_RECAPITULATION
                End Get
                Set(ByVal Value As MDT_RECAPITULATION)
                    _MDT_RECAPITULATION = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:331| <01.00.75> <Property> <List> |.List_MDT_RECAPITULATION()|List(Of MDT_RECAPITULATION)|"' (Set|Get) 
            Private _List_MDT_RECAPITULATION As List(Of MDT_RECAPITULATION)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:477 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_RECAPITULATION() As List(Of MDT_RECAPITULATION)
                Get
                    Return _List_MDT_RECAPITULATION
                End Get
                Set(ByVal Value As List(Of MDT_RECAPITULATION))
                    _List_MDT_RECAPITULATION = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:339| <01.00.76> <Property> <Virtualized Properties> |.MDT_SELECTION_MDT()|MDT_SELECTION_MDT|"' (Set|Get) 
            Private _MDT_SELECTION_MDT As MDT_SELECTION_MDT
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:477 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_SELECTION_MDT() As MDT_SELECTION_MDT
                Get
                    Return _MDT_SELECTION_MDT
                End Get
                Set(ByVal Value As MDT_SELECTION_MDT)
                    _MDT_SELECTION_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:348| <01.00.77> <Property> <List> |.List_MDT_SELECTION_MDT()|List(Of MDT_SELECTION_MDT)|"' (Set|Get) 
            Private _List_MDT_SELECTION_MDT As List(Of MDT_SELECTION_MDT)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:478 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_SELECTION_MDT() As List(Of MDT_SELECTION_MDT)
                Get
                    Return _List_MDT_SELECTION_MDT
                End Get
                Set(ByVal Value As List(Of MDT_SELECTION_MDT))
                    _List_MDT_SELECTION_MDT = Value
                End Set
            End Property
#End Region '(Set|Get) 





#Region "[On] |2019/07/16 23h23:414| <01.00.82> <Property> <Virtualized Properties> |.MDT_TACHE_COLLABO()|MDT_TACHE_COLLABO|"' (Set|Get) 
            Private _MDT_TACHE_COLLABO As MDT_TACHE_COLLABO
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:481 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_TACHE_COLLABO() As MDT_TACHE_COLLABO
                Get
                    Return _MDT_TACHE_COLLABO
                End Get
                Set(ByVal Value As MDT_TACHE_COLLABO)
                    _MDT_TACHE_COLLABO = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:424| <01.00.83> <Property> <List> |.List_MDT_TACHE_COLLABO()|List(Of MDT_TACHE_COLLABO)|"' (Set|Get) 
            Private _List_MDT_TACHE_COLLABO As List(Of MDT_TACHE_COLLABO)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:482 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_TACHE_COLLABO() As List(Of MDT_TACHE_COLLABO)
                Get
                    Return _List_MDT_TACHE_COLLABO
                End Get
                Set(ByVal Value As List(Of MDT_TACHE_COLLABO))
                    _List_MDT_TACHE_COLLABO = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:434| <01.00.84> <Property> <Virtualized Properties> |.MDT_TACHE_REP_COLLABO()|MDT_TACHE_REP_COLLABO|"' (Set|Get) 
            Private _MDT_TACHE_REP_COLLABO As MDT_TACHE_REP_COLLABO
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:482 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_TACHE_REP_COLLABO() As MDT_TACHE_REP_COLLABO
                Get
                    Return _MDT_TACHE_REP_COLLABO
                End Get
                Set(ByVal Value As MDT_TACHE_REP_COLLABO)
                    _MDT_TACHE_REP_COLLABO = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:443| <01.00.85> <Property> <List> |.List_MDT_TACHE_REP_COLLABO()|List(Of MDT_TACHE_REP_COLLABO)|"' (Set|Get) 
            Private _List_MDT_TACHE_REP_COLLABO As List(Of MDT_TACHE_REP_COLLABO)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:482 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_TACHE_REP_COLLABO() As List(Of MDT_TACHE_REP_COLLABO)
                Get
                    Return _List_MDT_TACHE_REP_COLLABO
                End Get
                Set(ByVal Value As List(Of MDT_TACHE_REP_COLLABO))
                    _List_MDT_TACHE_REP_COLLABO = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:453| <01.00.86> <Property> <Virtualized Properties> |.MDT_TACHE_REPETITIVE()|MDT_TACHE_REPETITIVE|"' (Set|Get) 
            Private _MDT_TACHE_REPETITIVE As MDT_TACHE_REPETITIVE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:483 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_TACHE_REPETITIVE() As MDT_TACHE_REPETITIVE
                Get
                    Return _MDT_TACHE_REPETITIVE
                End Get
                Set(ByVal Value As MDT_TACHE_REPETITIVE)
                    _MDT_TACHE_REPETITIVE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:462| <01.00.87> <Property> <List> |.List_MDT_TACHE_REPETITIVE()|List(Of MDT_TACHE_REPETITIVE)|"' (Set|Get) 
            Private _List_MDT_TACHE_REPETITIVE As List(Of MDT_TACHE_REPETITIVE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:483 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_TACHE_REPETITIVE() As List(Of MDT_TACHE_REPETITIVE)
                Get
                    Return _List_MDT_TACHE_REPETITIVE
                End Get
                Set(ByVal Value As List(Of MDT_TACHE_REPETITIVE))
                    _List_MDT_TACHE_REPETITIVE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:471| <01.00.88> <Property> <Virtualized Properties> |.MDT_TARIF_HORAIRE()|MDT_TARIF_HORAIRE|"' (Set|Get) 
            Private _MDT_TARIF_HORAIRE As MDT_TARIF_HORAIRE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:483 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_TARIF_HORAIRE() As MDT_TARIF_HORAIRE
                Get
                    Return _MDT_TARIF_HORAIRE
                End Get
                Set(ByVal Value As MDT_TARIF_HORAIRE)
                    _MDT_TARIF_HORAIRE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:480| <01.00.89> <Property> <List> |.List_MDT_TARIF_HORAIRE()|List(Of MDT_TARIF_HORAIRE)|"' (Set|Get) 
            Private _List_MDT_TARIF_HORAIRE As List(Of MDT_TARIF_HORAIRE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:489 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_TARIF_HORAIRE() As List(Of MDT_TARIF_HORAIRE)
                Get
                    Return _List_MDT_TARIF_HORAIRE
                End Get
                Set(ByVal Value As List(Of MDT_TARIF_HORAIRE))
                    _List_MDT_TARIF_HORAIRE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:491| <01.00.90> <Property> <Virtualized Properties> |.MDT_TAUX_TVA()|MDT_TAUX_TVA|"' (Set|Get) 
            Private _MDT_TAUX_TVA As MDT_TAUX_TVA
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:490 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_TAUX_TVA() As MDT_TAUX_TVA
                Get
                    Return _MDT_TAUX_TVA
                End Get
                Set(ByVal Value As MDT_TAUX_TVA)
                    _MDT_TAUX_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:503| <01.00.91> <Property> <List> |.List_MDT_TAUX_TVA()|List(Of MDT_TAUX_TVA)|"' (Set|Get) 
            Private _List_MDT_TAUX_TVA As List(Of MDT_TAUX_TVA)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:490 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_TAUX_TVA() As List(Of MDT_TAUX_TVA)
                Get
                    Return _List_MDT_TAUX_TVA
                End Get
                Set(ByVal Value As List(Of MDT_TAUX_TVA))
                    _List_MDT_TAUX_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:512| <01.00.92> <Property> <Virtualized Properties> |.MDT_TRAJET()|MDT_TRAJET|"' (Set|Get) 
            Private _MDT_TRAJET As MDT_TRAJET
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:490 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_TRAJET() As MDT_TRAJET
                Get
                    Return _MDT_TRAJET
                End Get
                Set(ByVal Value As MDT_TRAJET)
                    _MDT_TRAJET = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:523| <01.00.93> <Property> <List> |.List_MDT_TRAJET()|List(Of MDT_TRAJET)|"' (Set|Get) 
            Private _List_MDT_TRAJET As List(Of MDT_TRAJET)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:491 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_TRAJET() As List(Of MDT_TRAJET)
                Get
                    Return _List_MDT_TRAJET
                End Get
                Set(ByVal Value As List(Of MDT_TRAJET))
                    _List_MDT_TRAJET = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:532| <01.00.94> <Property> <Virtualized Properties> |.MDT_TYPE_HORAIRE()|MDT_TYPE_HORAIRE|"' (Set|Get) 
            Private _MDT_TYPE_HORAIRE As MDT_TYPE_HORAIRE
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:491 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_TYPE_HORAIRE() As MDT_TYPE_HORAIRE
                Get
                    Return _MDT_TYPE_HORAIRE
                End Get
                Set(ByVal Value As MDT_TYPE_HORAIRE)
                    _MDT_TYPE_HORAIRE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:542| <01.00.95> <Property> <List> |.List_MDT_TYPE_HORAIRE()|List(Of MDT_TYPE_HORAIRE)|"' (Set|Get) 
            Private _List_MDT_TYPE_HORAIRE As List(Of MDT_TYPE_HORAIRE)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:491 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_TYPE_HORAIRE() As List(Of MDT_TYPE_HORAIRE)
                Get
                    Return _List_MDT_TYPE_HORAIRE
                End Get
                Set(ByVal Value As List(Of MDT_TYPE_HORAIRE))
                    _List_MDT_TYPE_HORAIRE = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:553| <01.00.96> <Property> <Virtualized Properties> |.MDT_TYPE_TARIF()|MDT_TYPE_TARIF|"' (Set|Get) 
            Private _MDT_TYPE_TARIF As MDT_TYPE_TARIF
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:492 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_TYPE_TARIF() As MDT_TYPE_TARIF
                Get
                    Return _MDT_TYPE_TARIF
                End Get
                Set(ByVal Value As MDT_TYPE_TARIF)
                    _MDT_TYPE_TARIF = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:571| <01.00.97> <Property> <List> |.List_MDT_TYPE_TARIF()|List(Of MDT_TYPE_TARIF)|"' (Set|Get) 
            Private _List_MDT_TYPE_TARIF As List(Of MDT_TYPE_TARIF)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:492 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_TYPE_TARIF() As List(Of MDT_TYPE_TARIF)
                Get
                    Return _List_MDT_TYPE_TARIF
                End Get
                Set(ByVal Value As List(Of MDT_TYPE_TARIF))
                    _List_MDT_TYPE_TARIF = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:589| <01.00.98> <Property> <Virtualized Properties> |.MDT_TYPE_TVA()|MDT_TYPE_TVA|"' (Set|Get) 
            Private _MDT_TYPE_TVA As MDT_TYPE_TVA
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:495 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_TYPE_TVA() As MDT_TYPE_TVA
                Get
                    Return _MDT_TYPE_TVA
                End Get
                Set(ByVal Value As MDT_TYPE_TVA)
                    _MDT_TYPE_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:600| <01.00.99> <Property> <List> |.List_MDT_TYPE_TVA()|List(Of MDT_TYPE_TVA)|"' (Set|Get) 
            Private _List_MDT_TYPE_TVA As List(Of MDT_TYPE_TVA)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:495 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_TYPE_TVA() As List(Of MDT_TYPE_TVA)
                Get
                    Return _List_MDT_TYPE_TVA
                End Get
                Set(ByVal Value As List(Of MDT_TYPE_TVA))
                    _List_MDT_TYPE_TVA = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:610| <01.00.100> <Property> <Virtualized Properties> |.MDT_UTILISATEUR()|MDT_UTILISATEUR|"' (Set|Get) 
            Private _MDT_UTILISATEUR As MDT_UTILISATEUR
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:495 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property MDT_UTILISATEUR() As MDT_UTILISATEUR
                Get
                    Return _MDT_UTILISATEUR
                End Get
                Set(ByVal Value As MDT_UTILISATEUR)
                    _MDT_UTILISATEUR = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:620| <01.00.101> <Property> <List> |.List_MDT_UTILISATEUR()|List(Of MDT_UTILISATEUR)|"' (Set|Get) 
            Private _List_MDT_UTILISATEUR As List(Of MDT_UTILISATEUR)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:496 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_MDT_UTILISATEUR() As List(Of MDT_UTILISATEUR)
                Get
                    Return _List_MDT_UTILISATEUR
                End Get
                Set(ByVal Value As List(Of MDT_UTILISATEUR))
                    _List_MDT_UTILISATEUR = Value
                End Set
            End Property
#End Region '(Set|Get) 





#Region "[On] |2019/07/16 23h23:673| <01.00.106> <Property> <Virtualized Properties> |.Pcompta()|Pcompta|"' (Set|Get) 
            Private _Pcompta As Pcompta
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:497 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Virtualized Properties"), Description("(Set|Get) ")>
            Public Property Pcompta() As Pcompta
                Get
                    Return _Pcompta
                End Get
                Set(ByVal Value As Pcompta)
                    _Pcompta = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:684| <01.00.107> <Property> <List> |.List_Pcompta()|List(Of Pcompta)|"' (Set|Get) 
            Private _List_Pcompta As List(Of Pcompta)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:501 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("List"), Description("(Set|Get) ")>
            Public Property List_Pcompta() As List(Of Pcompta)
                Get
                    Return _List_Pcompta
                End Get
                Set(ByVal Value As List(Of Pcompta))
                    _List_Pcompta = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:832| <01.00.118> <Property> <Portfolio> |.Portfolio()|List(Of Object)|"' (Set|Get) 
            Private Shared _Portfolio As List(Of Object)
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:507 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("Portfolio"), Description("(Set|Get) ")>
            Public Shared Property Portfolio() As List(Of Object)
                Get
                    Return _Portfolio
                End Get
                Set(ByVal Value As List(Of Object))
                    _Portfolio = Value
                End Set
            End Property
#End Region '(Set|Get) 

#Region "[On] |2019/07/16 23h23:843| <01.00.119> <Property> <DataBase> |.DataBase()|SmartCoder.M_FileManager.DataBase|"' (Set|Get) 
            Private Shared _DataBase As SmartCoder.M_FileManager.DataBase
            '''    <Summary>
            '''     (Set|Get) 
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:508 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), CategoryAttribute("DataBase"), Description("(Set|Get) ")>
            Public Shared Property DataBase() As SmartCoder.M_FileManager.DataBase
                Get
                    Return _DataBase
                End Get
                Set(ByVal Value As SmartCoder.M_FileManager.DataBase)
                    _DataBase = Value
                End Set
            End Property
#End Region '(Set|Get) 

#End Region
#Region "<4> [Sub]{1}"
#Region "[On] |2019/07/16 23h23:855| <04.00.00> <Sub> <> |.Clear()|Sub}|"' (Set|Get) This will reinitialize the class properties element.
            '''    <Summary>
            '''     (Set|Get) This will reinitialize the class properties element.
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:508 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) This will reinitialize the class properties element.")>
            Public Sub Clear()
                With Me
                    .MDT_ARTICLE = New MDT_ARTICLE
                    .List_MDT_ARTICLE = New List(Of MDT_ARTICLE)
                    .MDT_BUDGET = New MDT_BUDGET
                    .List_MDT_BUDGET = New List(Of MDT_BUDGET)
                    .MDT_BUDGET_ETAPE = New MDT_BUDGET_ETAPE
                    .List_MDT_BUDGET_ETAPE = New List(Of MDT_BUDGET_ETAPE)
                    .MDT_BUREAU = New MDT_BUREAU
                    .List_MDT_BUREAU = New List(Of MDT_BUREAU)
                    .MDT_CATEGORIE = New MDT_CATEGORIE
                    .List_MDT_CATEGORIE = New List(Of MDT_CATEGORIE)
                    .MDT_CLIENT = New MDT_CLIENT
                    .List_MDT_CLIENT = New List(Of MDT_CLIENT)
                    .MDT_CODE = New MDT_CODE
                    .List_MDT_CODE = New List(Of MDT_CODE)
                    .MDT_COLLABO_ANNEE = New MDT_COLLABO_ANNEE
                    .List_MDT_COLLABO_ANNEE = New List(Of MDT_COLLABO_ANNEE)
                    .MDT_COLLABO_SALAIRE = New MDT_COLLABO_SALAIRE
                    .List_MDT_COLLABO_SALAIRE = New List(Of MDT_COLLABO_SALAIRE)
                    .MDT_COLLABORATEUR = New MDT_COLLABORATEUR
                    .List_MDT_COLLABORATEUR = New List(Of MDT_COLLABORATEUR)
                    .MDT_COMPTE_CG = New MDT_COMPTE_CG
                    .List_MDT_COMPTE_CG = New List(Of MDT_COMPTE_CG)
                    .MDT_CONGE = New MDT_CONGE
                    .List_MDT_CONGE = New List(Of MDT_CONGE)
                    .MDT_DOCUMENT = New MDT_DOCUMENT
                    .List_MDT_DOCUMENT = New List(Of MDT_DOCUMENT)
                    .MDT_DOCUMENT_FACTURE = New MDT_DOCUMENT_FACTURE
                    .List_MDT_DOCUMENT_FACTURE = New List(Of MDT_DOCUMENT_FACTURE)
                    .MDT_DOCUMENT_FACTURE_LIGNE = New MDT_DOCUMENT_FACTURE_LIGNE
                    .List_MDT_DOCUMENT_FACTURE_LIGNE = New List(Of MDT_DOCUMENT_FACTURE_LIGNE)
                    .MDT_DOCUMENT_UTILISATEUR = New MDT_DOCUMENT_UTILISATEUR
                    .List_MDT_DOCUMENT_UTILISATEUR = New List(Of MDT_DOCUMENT_UTILISATEUR)
                    .MDT_ENREGISTREMENT_FACTURES = New MDT_ENREGISTREMENT_FACTURES
                    .List_MDT_ENREGISTREMENT_FACTURES = New List(Of MDT_ENREGISTREMENT_FACTURES)
                    .MDT_ETAPE = New MDT_ETAPE
                    .List_MDT_ETAPE = New List(Of MDT_ETAPE)
                    .MDT_ETAT = New MDT_ETAT
                    .List_MDT_ETAT = New List(Of MDT_ETAT)
                    .MDT_GEFI_TRANSFERT_ETA = New MDT_GEFI_TRANSFERT_ETA
                    .List_MDT_GEFI_TRANSFERT_ETA = New List(Of MDT_GEFI_TRANSFERT_ETA)
                    .MDT_GENRE_PRESTATION = New MDT_GENRE_PRESTATION
                    .List_MDT_GENRE_PRESTATION = New List(Of MDT_GENRE_PRESTATION)
                    .MDT_GROUPE = New MDT_GROUPE
                    .List_MDT_GROUPE = New List(Of MDT_GROUPE)
                    .MDT_GROUPE_ACCES = New MDT_GROUPE_ACCES
                    .List_MDT_GROUPE_ACCES = New List(Of MDT_GROUPE_ACCES)
                    .MDT_GROUPE_ETAT = New MDT_GROUPE_ETAT
                    .List_MDT_GROUPE_ETAT = New List(Of MDT_GROUPE_ETAT)
                    .MDT_HISTORIQUE_OPERATION = New MDT_HISTORIQUE_OPERATION
                    .List_MDT_HISTORIQUE_OPERATION = New List(Of MDT_HISTORIQUE_OPERATION)
                    .MDT_IMPORT = New MDT_IMPORT
                    .List_MDT_IMPORT = New List(Of MDT_IMPORT)
                    .MDT_MAJORATION = New MDT_MAJORATION
                    .List_MDT_MAJORATION = New List(Of MDT_MAJORATION)
                    .MDT_MANDAT = New MDT_MANDAT
                    .List_MDT_MANDAT = New List(Of MDT_MANDAT)
                    .MDT_MODELE_ETAPE = New MDT_MODELE_ETAPE
                    .List_MDT_MODELE_ETAPE = New List(Of MDT_MODELE_ETAPE)
                    .MDT_MODELE_SEMAINE = New MDT_MODELE_SEMAINE
                    .List_MDT_MODELE_SEMAINE = New List(Of MDT_MODELE_SEMAINE)
                    .MDT_NOM_MODELE_ETAPE = New MDT_NOM_MODELE_ETAPE
                    .List_MDT_NOM_MODELE_ETAPE = New List(Of MDT_NOM_MODELE_ETAPE)
                    .MDT_NUMERO_UTILISATEUR = New MDT_NUMERO_UTILISATEUR
                    .List_MDT_NUMERO_UTILISATEUR = New List(Of MDT_NUMERO_UTILISATEUR)
                    .MDT_OPERATION = New MDT_OPERATION
                    .List_MDT_OPERATION = New List(Of MDT_OPERATION)
                    .MDT_ORTHOGRAPHE = New MDT_ORTHOGRAPHE
                    .List_MDT_ORTHOGRAPHE = New List(Of MDT_ORTHOGRAPHE)
                    .MDT_RECAPITULATION = New MDT_RECAPITULATION
                    .List_MDT_RECAPITULATION = New List(Of MDT_RECAPITULATION)
                    .MDT_SELECTION_MDT = New MDT_SELECTION_MDT
                    .List_MDT_SELECTION_MDT = New List(Of MDT_SELECTION_MDT)
                    .MDT_TACHE_COLLABO = New MDT_TACHE_COLLABO
                    .List_MDT_TACHE_COLLABO = New List(Of MDT_TACHE_COLLABO)
                    .MDT_TACHE_REP_COLLABO = New MDT_TACHE_REP_COLLABO
                    .List_MDT_TACHE_REP_COLLABO = New List(Of MDT_TACHE_REP_COLLABO)
                    .MDT_TACHE_REPETITIVE = New MDT_TACHE_REPETITIVE
                    .List_MDT_TACHE_REPETITIVE = New List(Of MDT_TACHE_REPETITIVE)
                    .MDT_TARIF_HORAIRE = New MDT_TARIF_HORAIRE
                    .List_MDT_TARIF_HORAIRE = New List(Of MDT_TARIF_HORAIRE)
                    .MDT_TAUX_TVA = New MDT_TAUX_TVA
                    .List_MDT_TAUX_TVA = New List(Of MDT_TAUX_TVA)
                    .MDT_TRAJET = New MDT_TRAJET
                    .List_MDT_TRAJET = New List(Of MDT_TRAJET)
                    .MDT_TYPE_HORAIRE = New MDT_TYPE_HORAIRE
                    .List_MDT_TYPE_HORAIRE = New List(Of MDT_TYPE_HORAIRE)
                    .MDT_TYPE_TARIF = New MDT_TYPE_TARIF
                    .List_MDT_TYPE_TARIF = New List(Of MDT_TYPE_TARIF)
                    .MDT_TYPE_TVA = New MDT_TYPE_TVA
                    .List_MDT_TYPE_TVA = New List(Of MDT_TYPE_TVA)
                    .MDT_UTILISATEUR = New MDT_UTILISATEUR
                    .List_MDT_UTILISATEUR = New List(Of MDT_UTILISATEUR)
                    .Pcompta = New Pcompta
                    .List_Pcompta = New List(Of Pcompta)
                    Portfolio = New List(Of Object)
                    DataBase = New SmartCoder.M_FileManager.DataBase
                End With
            End Sub
#End Region '(Set|Get) This will reinitialize the class properties element.

#End Region
#Region "<5> [Function]{1}"
#Region "[On] |2019/07/16 23h23:866| <05.00.00> <Function> <> |.CheckConnection()|Boolean}|"' (Set|Get) Evaluate the connection to the DataBase
            '''    <Summary>
            '''     (Set|Get) Evaluate the connection to the DataBase
            '''    <AuthorEmail>saadry.dunkel@outlook.com</AuthorEmail>
            '''    <AuthorName>Saadry Dunkel</AuthorName>
            '''    <AuthorUri>https://www.saadry-dunkel.com</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:509 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) Evaluate the connection to the DataBase")>
            Public Function CheckConnection() As Boolean
                ' Prepare Variables 
#Region "Prepare Variables"
                Dim Test_1 As Boolean = False ' Evaluate if the FilePath is Empty.
                Dim Test_2 As Boolean = False ' Evaluate if the File Exist.
                Dim Test_3 As Boolean = False ' Evaluate if the Directory Exist.
                Dim Test_4 As Boolean = False ' Evaluate if the Drive is Connected.
                Dim Test_5 As Boolean = False ' Evaluate if there is a Password.
                Dim Test_6 As Boolean = False ' Evaluate if Connector is nothing.
                Dim Test_7 As Boolean = False ' Evaluate if Connector Line is not empty.
                Dim Test_8 As Boolean = False ' Evaluate if the Connection is valid.
                Dim General_Status As Boolean = False ' Return the General result.
                Dim Message As String = Nothing ' Stores the process logic.
#End Region
#Region "Test 1 | Evaluate if the FilePath is Empty."
                If Not IsNothing(FilePath) Then
                    Test_1 = True
                    Message += "Test 1 <Result> |OK| The variable FilePath is not nothing."
                Else
                    Test_1 = False
                    Message += "Test 1 <Result> |PB| The variable FilePath is nothing."
                    FilePath = Nothing
                End If
#End Region
#Region "Test 2 | Evaluate if the File Exist."
                If IO.File.Exists(FilePath) Then
                    Test_2 = True
                    Message += "Test 2 <Result> |OK| The FilePath is a recognize as a File."
                Else
                    Test_2 = False
                    Message += "Test 2 <Result> |PB| The FilePath is a recognize as a File."
                End If
#End Region
#Region "Test 3 | Evaluate if the Directory Exist."
                If IO.Directory.Exists(IO.Path.GetDirectoryName(FilePath)) Then
                    Test_3 = True
                    Message += "Test 3 <Result> |OK| The Directory Exist."
                Else
                    Test_3 = False
                    Message += "Test 3 <Result> |PB| The Directory does not Exist."
                End If
#End Region
#Region "Test 4 | Evaluate if the Drive is Connected."
                Dim D As New DriveInfo(IO.Path.GetPathRoot(FilePath))
                If D.IsReady Then
                    Test_4 = True
                    Message += "Test 4 <Result> |OK| The Drive is Online."
                Else
                    Test_4 = False
                    Message += "Test 4 <Result> |PB| The Drive is Offline or Disconnected."
                End If
#End Region
#Region "Test 5 | Evaluate if there is a Password."
                If Not IsDBNull(Password) Then
                    Test_5 = True
                    Message += "Test 5 <Result> |OK| The password has been Recorded."
                Else
                    Test_5 = False
                    Message += "Test 5 <Result> |PB| No password has been stored."
                End If
#End Region
#Region "Test 6 | Evaluate if Connector is nothing."
                If Not IsNothing(Connector) Then
                    Me.Line = Me.Connector.Line
                    Test_6 = True
                    Message += "Test 6 <Result> |OK| The Connector has been initialized before."
                Else
                    Test_6 = False
                    Message += "Test 6 <Result> |PB| The Connector has not been initialized before."
                    If Test_2 = True Then
                        Me.Connector = New LineInfo(FilePath, Password)
                        Me.Line = Me.Connector.Line
                        Message += "Test 6 <Result> |Initialize Connector|"
                    End If
                End If
#End Region
#Region "Test 7 | Evaluate if Connector Line is not empty."
                If Not IsDBNull(Me.Connector.Line) Then
                    Test_7 = True
                Else
                    Test_7 = False
                End If
#End Region
#Region "Test 8 | Evaluate if the Connection is valid."
                If Test_7 = True Then
                    Dim Con As New OleDb.OleDbConnection(Me.Line)
                    Try
                        Con.Open()
                        Test_8 = True
                        Message += "Test 8 <Result> |OK| The Connection is valid."
                    Catch ex As Exception
                        Test_8 = False
                        Message += "Test 8 <Result> |PB| The Connection is not valid. Check Password."
                    Finally
                        Con.Close()
                        Con.Dispose()
                    End Try
                End If
#End Region
                If Test_7 = True And Test_8 = True Then
                    General_Status = True
                Else
                    General_Status = False
                End If
                Return General_Status

            End Function
#End Region '(Set|Get) Evaluate the connection to the DataBase

#End Region
#Region "<6> [Runtime]{4}"
#Region "[On] |2019/07/16 23h23:885| <15.00.00> <Runtime> <> |.Line()|String"' (Set|Get) The Connection String To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connection String To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:510 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connection String To the Table.")>
            Public Line As String
#End Region '(Set|Get) The Connection String To the Table.

#Region "[On] |2019/07/16 23h23:899| <15.00.01> <Runtime> <> |.FilePath()|String"' (Set|Get) The FilePath To the Table.
            '''    <Summary>
            '''     (Set|Get) The FilePath To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:510 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The FilePath To the Table.")>
            Public FilePath As String
#End Region '(Set|Get) The FilePath To the Table.

#Region "[On] |2019/07/16 23h23:913| <15.00.02> <Runtime> <> |.Password()|String"' (Set|Get) The Password To the Table.
            '''    <Summary>
            '''     (Set|Get) The Password To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:510 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Password To the Table.")>
            Public Password As String
#End Region '(Set|Get) The Password To the Table.

#Region "[On] |2019/07/16 23h23:923| <15.00.03> <Runtime> <> |.Connector()|LineInfo"' (Set|Get) The Connector To the Table.
            '''    <Summary>
            '''     (Set|Get) The Connector To the Table.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:510 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The Connector To the Table.")>
            Public Connector As LineInfo
#End Region '(Set|Get) The Connector To the Table.

#End Region
#Region "<7> [Loader]{2}"
#Region "[On] |2019/07/16 23h23:934| <06.00.00> <Loader> <> |.Empty()|Function}|"' (Set|Get) The sub Empty.
            '''    <Summary>
            '''     (Set|Get) The sub Empty.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:511 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>
            <Browsable(True), Description("(Set|Get) The sub Empty.")>
            Public Sub New()
                Clear
            End Sub
#End Region '(Set|Get) The sub Empty.

#Region "[On] |2019/07/16 23h23:939| <06.00.01> <Loader> <> |.Filled()|Function}|"' (Set|Get) The sub Filled.
            '''    <Summary>
            '''     (Set|Get) The sub Filled.
            '''    <AuthorEmail>saadry.dunkel@ds-informatique.ch</AuthorEmail>
            '''    <AuthorName>David Shaw Informatique Sàrl</AuthorName>
            '''    <AuthorUri>https://www.ds-informatique.ch</AuthorUri>
            '''    <Published>MASTER From MASTER\Saadry | Time : 2019/07/16 23h24:514 </Published>
            '''    <Updated>[Created=][Status=NotTested][Tested On]1/01/01 00h00:000[/Tested On]</Updated>
            '''    </Summary>    ''' <param name="FilePath">The initial File Path</param>
            ''' <param name="Password">The password</param>

            <Browsable(True), Description("(Set|Get) The sub Filled.")>
            Public Sub New(ByVal FilePath As String,
Optional ByVal Password As String = """")
                With Me
                    Clear()
                    .MDT_ARTICLE = New MDT_ARTICLE
                    .List_MDT_ARTICLE = New List(Of MDT_ARTICLE)
                    .MDT_BUDGET = New MDT_BUDGET
                    .List_MDT_BUDGET = New List(Of MDT_BUDGET)
                    .MDT_BUDGET_ETAPE = New MDT_BUDGET_ETAPE
                    .List_MDT_BUDGET_ETAPE = New List(Of MDT_BUDGET_ETAPE)
                    .MDT_BUREAU = New MDT_BUREAU
                    .List_MDT_BUREAU = New List(Of MDT_BUREAU)
                    .MDT_CATEGORIE = New MDT_CATEGORIE
                    .List_MDT_CATEGORIE = New List(Of MDT_CATEGORIE)
                    .MDT_CLIENT = New MDT_CLIENT
                    .List_MDT_CLIENT = New List(Of MDT_CLIENT)
                    .MDT_CODE = New MDT_CODE
                    .List_MDT_CODE = New List(Of MDT_CODE)
                    .MDT_COLLABO_ANNEE = New MDT_COLLABO_ANNEE
                    .List_MDT_COLLABO_ANNEE = New List(Of MDT_COLLABO_ANNEE)
                    .MDT_COLLABO_SALAIRE = New MDT_COLLABO_SALAIRE
                    .List_MDT_COLLABO_SALAIRE = New List(Of MDT_COLLABO_SALAIRE)
                    .MDT_COLLABORATEUR = New MDT_COLLABORATEUR
                    .List_MDT_COLLABORATEUR = New List(Of MDT_COLLABORATEUR)
                    .MDT_COMPTE_CG = New MDT_COMPTE_CG
                    .List_MDT_COMPTE_CG = New List(Of MDT_COMPTE_CG)
                    .MDT_CONGE = New MDT_CONGE
                    .List_MDT_CONGE = New List(Of MDT_CONGE)
                    .MDT_DOCUMENT = New MDT_DOCUMENT
                    .List_MDT_DOCUMENT = New List(Of MDT_DOCUMENT)
                    .MDT_DOCUMENT_FACTURE = New MDT_DOCUMENT_FACTURE
                    .List_MDT_DOCUMENT_FACTURE = New List(Of MDT_DOCUMENT_FACTURE)
                    .MDT_DOCUMENT_FACTURE_LIGNE = New MDT_DOCUMENT_FACTURE_LIGNE
                    .List_MDT_DOCUMENT_FACTURE_LIGNE = New List(Of MDT_DOCUMENT_FACTURE_LIGNE)
                    .MDT_DOCUMENT_UTILISATEUR = New MDT_DOCUMENT_UTILISATEUR
                    .List_MDT_DOCUMENT_UTILISATEUR = New List(Of MDT_DOCUMENT_UTILISATEUR)
                    .MDT_ENREGISTREMENT_FACTURES = New MDT_ENREGISTREMENT_FACTURES
                    .List_MDT_ENREGISTREMENT_FACTURES = New List(Of MDT_ENREGISTREMENT_FACTURES)
                    .MDT_ETAPE = New MDT_ETAPE
                    .List_MDT_ETAPE = New List(Of MDT_ETAPE)
                    .MDT_ETAT = New MDT_ETAT
                    .List_MDT_ETAT = New List(Of MDT_ETAT)
                    .MDT_GEFI_TRANSFERT_ETA = New MDT_GEFI_TRANSFERT_ETA
                    .List_MDT_GEFI_TRANSFERT_ETA = New List(Of MDT_GEFI_TRANSFERT_ETA)
                    .MDT_GENRE_PRESTATION = New MDT_GENRE_PRESTATION
                    .List_MDT_GENRE_PRESTATION = New List(Of MDT_GENRE_PRESTATION)
                    .MDT_GROUPE = New MDT_GROUPE
                    .List_MDT_GROUPE = New List(Of MDT_GROUPE)
                    .MDT_GROUPE_ACCES = New MDT_GROUPE_ACCES
                    .List_MDT_GROUPE_ACCES = New List(Of MDT_GROUPE_ACCES)
                    .MDT_GROUPE_ETAT = New MDT_GROUPE_ETAT
                    .List_MDT_GROUPE_ETAT = New List(Of MDT_GROUPE_ETAT)
                    .MDT_HISTORIQUE_OPERATION = New MDT_HISTORIQUE_OPERATION
                    .List_MDT_HISTORIQUE_OPERATION = New List(Of MDT_HISTORIQUE_OPERATION)
                    .MDT_IMPORT = New MDT_IMPORT
                    .List_MDT_IMPORT = New List(Of MDT_IMPORT)
                    .MDT_MAJORATION = New MDT_MAJORATION
                    .List_MDT_MAJORATION = New List(Of MDT_MAJORATION)
                    .MDT_MANDAT = New MDT_MANDAT
                    .List_MDT_MANDAT = New List(Of MDT_MANDAT)
                    .MDT_MODELE_ETAPE = New MDT_MODELE_ETAPE
                    .List_MDT_MODELE_ETAPE = New List(Of MDT_MODELE_ETAPE)
                    .MDT_MODELE_SEMAINE = New MDT_MODELE_SEMAINE
                    .List_MDT_MODELE_SEMAINE = New List(Of MDT_MODELE_SEMAINE)
                    .MDT_NOM_MODELE_ETAPE = New MDT_NOM_MODELE_ETAPE
                    .List_MDT_NOM_MODELE_ETAPE = New List(Of MDT_NOM_MODELE_ETAPE)
                    .MDT_NUMERO_UTILISATEUR = New MDT_NUMERO_UTILISATEUR
                    .List_MDT_NUMERO_UTILISATEUR = New List(Of MDT_NUMERO_UTILISATEUR)
                    .MDT_OPERATION = New MDT_OPERATION
                    .List_MDT_OPERATION = New List(Of MDT_OPERATION)
                    .MDT_ORTHOGRAPHE = New MDT_ORTHOGRAPHE
                    .List_MDT_ORTHOGRAPHE = New List(Of MDT_ORTHOGRAPHE)
                    .MDT_RECAPITULATION = New MDT_RECAPITULATION
                    .List_MDT_RECAPITULATION = New List(Of MDT_RECAPITULATION)
                    .MDT_SELECTION_MDT = New MDT_SELECTION_MDT
                    .List_MDT_SELECTION_MDT = New List(Of MDT_SELECTION_MDT)
                    .MDT_TACHE_COLLABO = New MDT_TACHE_COLLABO
                    .List_MDT_TACHE_COLLABO = New List(Of MDT_TACHE_COLLABO)
                    .MDT_TACHE_REP_COLLABO = New MDT_TACHE_REP_COLLABO
                    .List_MDT_TACHE_REP_COLLABO = New List(Of MDT_TACHE_REP_COLLABO)
                    .MDT_TACHE_REPETITIVE = New MDT_TACHE_REPETITIVE
                    .List_MDT_TACHE_REPETITIVE = New List(Of MDT_TACHE_REPETITIVE)
                    .MDT_TARIF_HORAIRE = New MDT_TARIF_HORAIRE
                    .List_MDT_TARIF_HORAIRE = New List(Of MDT_TARIF_HORAIRE)
                    .MDT_TAUX_TVA = New MDT_TAUX_TVA
                    .List_MDT_TAUX_TVA = New List(Of MDT_TAUX_TVA)
                    .MDT_TRAJET = New MDT_TRAJET
                    .List_MDT_TRAJET = New List(Of MDT_TRAJET)
                    .MDT_TYPE_HORAIRE = New MDT_TYPE_HORAIRE
                    .List_MDT_TYPE_HORAIRE = New List(Of MDT_TYPE_HORAIRE)
                    .MDT_TYPE_TARIF = New MDT_TYPE_TARIF
                    .List_MDT_TYPE_TARIF = New List(Of MDT_TYPE_TARIF)
                    .MDT_TYPE_TVA = New MDT_TYPE_TVA
                    .List_MDT_TYPE_TVA = New List(Of MDT_TYPE_TVA)
                    .MDT_UTILISATEUR = New MDT_UTILISATEUR
                    .List_MDT_UTILISATEUR = New List(Of MDT_UTILISATEUR)
                    .Pcompta = New Pcompta
                    .List_Pcompta = New List(Of Pcompta)
                    Portfolio = New List(Of Object)
                    DataBase = New SmartCoder.M_FileManager.DataBase
                End With
                Portfolio = New List(Of Object)
                FilePath = FilePath
                Password = Password
                Line = Line
                Dim M As New LineInfo(FilePath, Password)
                My.Settings.Db_mdtdata_FilePath = FilePath
                My.Settings.Db_mdtdata_Password = Password
                My.Settings.Db_mdtdata_Line = Line
                My.Settings.Save
                With MDT_ARTICLE
                    .Reset(M)
                End With
                List_MDT_ARTICLE = New List(Of MDT_ARTICLE)
                List_MDT_ARTICLE = MDT_ARTICLE.List()
                With MDT_BUDGET
                    .Reset(M)
                End With
                List_MDT_BUDGET = New List(Of MDT_BUDGET)
                List_MDT_BUDGET = MDT_BUDGET.List()
                With MDT_BUDGET_ETAPE
                    .Reset(M)
                End With
                List_MDT_BUDGET_ETAPE = New List(Of MDT_BUDGET_ETAPE)
                List_MDT_BUDGET_ETAPE = MDT_BUDGET_ETAPE.List()
                With MDT_BUREAU
                    .Reset(M)
                End With
                List_MDT_BUREAU = New List(Of MDT_BUREAU)
                List_MDT_BUREAU = MDT_BUREAU.List()
                With MDT_CATEGORIE
                    .Reset(M)
                End With
                List_MDT_CATEGORIE = New List(Of MDT_CATEGORIE)
                List_MDT_CATEGORIE = MDT_CATEGORIE.List()
                With MDT_CLIENT
                    .Reset(M)
                End With
                List_MDT_CLIENT = New List(Of MDT_CLIENT)
                List_MDT_CLIENT = MDT_CLIENT.List()
                With MDT_CODE
                    .Reset(M)
                End With
                List_MDT_CODE = New List(Of MDT_CODE)
                List_MDT_CODE = MDT_CODE.List()
                With MDT_COLLABO_ANNEE
                    .Reset(M)
                End With
                List_MDT_COLLABO_ANNEE = New List(Of MDT_COLLABO_ANNEE)
                List_MDT_COLLABO_ANNEE = MDT_COLLABO_ANNEE.List()
                With MDT_COLLABO_SALAIRE
                    .Reset(M)
                End With
                List_MDT_COLLABO_SALAIRE = New List(Of MDT_COLLABO_SALAIRE)
                List_MDT_COLLABO_SALAIRE = MDT_COLLABO_SALAIRE.List()
                With MDT_COLLABORATEUR
                    .Reset(M)
                End With
                List_MDT_COLLABORATEUR = New List(Of MDT_COLLABORATEUR)
                List_MDT_COLLABORATEUR = MDT_COLLABORATEUR.List()
                With MDT_COMPTE_CG
                    .Reset(M)
                End With
                List_MDT_COMPTE_CG = New List(Of MDT_COMPTE_CG)
                List_MDT_COMPTE_CG = MDT_COMPTE_CG.List()
                With MDT_CONGE
                    .Reset(M)
                End With
                List_MDT_CONGE = New List(Of MDT_CONGE)
                List_MDT_CONGE = MDT_CONGE.List()
                With MDT_DOCUMENT
                    .Reset(M)
                End With
                List_MDT_DOCUMENT = New List(Of MDT_DOCUMENT)
                List_MDT_DOCUMENT = MDT_DOCUMENT.List()
                With MDT_DOCUMENT_FACTURE
                    .Reset(M)
                End With
                List_MDT_DOCUMENT_FACTURE = New List(Of MDT_DOCUMENT_FACTURE)
                List_MDT_DOCUMENT_FACTURE = MDT_DOCUMENT_FACTURE.List()
                With MDT_DOCUMENT_FACTURE_LIGNE
                    .Reset(M)
                End With
                List_MDT_DOCUMENT_FACTURE_LIGNE = New List(Of MDT_DOCUMENT_FACTURE_LIGNE)
                List_MDT_DOCUMENT_FACTURE_LIGNE = MDT_DOCUMENT_FACTURE_LIGNE.List()
                With MDT_DOCUMENT_UTILISATEUR
                    .Reset(M)
                End With
                List_MDT_DOCUMENT_UTILISATEUR = New List(Of MDT_DOCUMENT_UTILISATEUR)
                List_MDT_DOCUMENT_UTILISATEUR = MDT_DOCUMENT_UTILISATEUR.List()
                With MDT_ENREGISTREMENT_FACTURES
                    .Reset(M)
                End With
                List_MDT_ENREGISTREMENT_FACTURES = New List(Of MDT_ENREGISTREMENT_FACTURES)
                List_MDT_ENREGISTREMENT_FACTURES = MDT_ENREGISTREMENT_FACTURES.List()
                With MDT_ETAPE
                    .Reset(M)
                End With
                List_MDT_ETAPE = New List(Of MDT_ETAPE)
                List_MDT_ETAPE = MDT_ETAPE.List()
                With MDT_ETAT
                    .Reset(M)
                End With
                List_MDT_ETAT = New List(Of MDT_ETAT)
                List_MDT_ETAT = MDT_ETAT.List()
                With MDT_GEFI_TRANSFERT_ETA
                    .Reset(M)
                End With
                List_MDT_GEFI_TRANSFERT_ETA = New List(Of MDT_GEFI_TRANSFERT_ETA)
                List_MDT_GEFI_TRANSFERT_ETA = MDT_GEFI_TRANSFERT_ETA.List()
                With MDT_GENRE_PRESTATION
                    .Reset(M)
                End With
                List_MDT_GENRE_PRESTATION = New List(Of MDT_GENRE_PRESTATION)
                List_MDT_GENRE_PRESTATION = MDT_GENRE_PRESTATION.List()
                With MDT_GROUPE
                    .Reset(M)
                End With
                List_MDT_GROUPE = New List(Of MDT_GROUPE)
                List_MDT_GROUPE = MDT_GROUPE.List()
                With MDT_GROUPE_ACCES
                    .Reset(M)
                End With
                List_MDT_GROUPE_ACCES = New List(Of MDT_GROUPE_ACCES)
                List_MDT_GROUPE_ACCES = MDT_GROUPE_ACCES.List()
                With MDT_GROUPE_ETAT
                    .Reset(M)
                End With
                List_MDT_GROUPE_ETAT = New List(Of MDT_GROUPE_ETAT)
                List_MDT_GROUPE_ETAT = MDT_GROUPE_ETAT.List()
                With MDT_HISTORIQUE_OPERATION
                    .Reset(M)
                End With
                List_MDT_HISTORIQUE_OPERATION = New List(Of MDT_HISTORIQUE_OPERATION)
                List_MDT_HISTORIQUE_OPERATION = MDT_HISTORIQUE_OPERATION.List()
                With MDT_IMPORT
                    .Reset(M)
                End With
                List_MDT_IMPORT = New List(Of MDT_IMPORT)
                List_MDT_IMPORT = MDT_IMPORT.List()
                With MDT_MAJORATION
                    .Reset(M)
                End With
                List_MDT_MAJORATION = New List(Of MDT_MAJORATION)
                List_MDT_MAJORATION = MDT_MAJORATION.List()
                With MDT_MANDAT
                    .Reset(M)
                End With
                List_MDT_MANDAT = New List(Of MDT_MANDAT)
                List_MDT_MANDAT = MDT_MANDAT.List()
                With MDT_MODELE_ETAPE
                    .Reset(M)
                End With
                List_MDT_MODELE_ETAPE = New List(Of MDT_MODELE_ETAPE)
                List_MDT_MODELE_ETAPE = MDT_MODELE_ETAPE.List()
                With MDT_MODELE_SEMAINE
                    .Reset(M)
                End With
                List_MDT_MODELE_SEMAINE = New List(Of MDT_MODELE_SEMAINE)
                List_MDT_MODELE_SEMAINE = MDT_MODELE_SEMAINE.List()
                With MDT_NOM_MODELE_ETAPE
                    .Reset(M)
                End With
                List_MDT_NOM_MODELE_ETAPE = New List(Of MDT_NOM_MODELE_ETAPE)
                List_MDT_NOM_MODELE_ETAPE = MDT_NOM_MODELE_ETAPE.List()
                With MDT_NUMERO_UTILISATEUR
                    .Reset(M)
                End With
                List_MDT_NUMERO_UTILISATEUR = New List(Of MDT_NUMERO_UTILISATEUR)
                List_MDT_NUMERO_UTILISATEUR = MDT_NUMERO_UTILISATEUR.List()
                With MDT_OPERATION
                    .Reset(M)
                End With
                List_MDT_OPERATION = New List(Of MDT_OPERATION)
                List_MDT_OPERATION = MDT_OPERATION.List()
                With MDT_ORTHOGRAPHE
                    .Reset(M)
                End With
                List_MDT_ORTHOGRAPHE = New List(Of MDT_ORTHOGRAPHE)
                List_MDT_ORTHOGRAPHE = MDT_ORTHOGRAPHE.List()
                With MDT_RECAPITULATION
                    .Reset(M)
                End With
                List_MDT_RECAPITULATION = New List(Of MDT_RECAPITULATION)
                List_MDT_RECAPITULATION = MDT_RECAPITULATION.List()
                With MDT_SELECTION_MDT
                    .Reset(M)
                End With
                List_MDT_SELECTION_MDT = New List(Of MDT_SELECTION_MDT)
                List_MDT_SELECTION_MDT = MDT_SELECTION_MDT.List()


                With MDT_TACHE_COLLABO
                    .Reset(M)
                End With
                List_MDT_TACHE_COLLABO = New List(Of MDT_TACHE_COLLABO)
                List_MDT_TACHE_COLLABO = MDT_TACHE_COLLABO.List()
                With MDT_TACHE_REP_COLLABO
                    .Reset(M)
                End With
                List_MDT_TACHE_REP_COLLABO = New List(Of MDT_TACHE_REP_COLLABO)
                List_MDT_TACHE_REP_COLLABO = MDT_TACHE_REP_COLLABO.List()
                With MDT_TACHE_REPETITIVE
                    .Reset(M)
                End With
                List_MDT_TACHE_REPETITIVE = New List(Of MDT_TACHE_REPETITIVE)
                List_MDT_TACHE_REPETITIVE = MDT_TACHE_REPETITIVE.List()
                With MDT_TARIF_HORAIRE
                    .Reset(M)
                End With
                List_MDT_TARIF_HORAIRE = New List(Of MDT_TARIF_HORAIRE)
                List_MDT_TARIF_HORAIRE = MDT_TARIF_HORAIRE.List()
                With MDT_TAUX_TVA
                    .Reset(M)
                End With
                List_MDT_TAUX_TVA = New List(Of MDT_TAUX_TVA)
                List_MDT_TAUX_TVA = MDT_TAUX_TVA.List()
                With MDT_TRAJET
                    .Reset(M)
                End With
                List_MDT_TRAJET = New List(Of MDT_TRAJET)
                List_MDT_TRAJET = MDT_TRAJET.List()
                With MDT_TYPE_HORAIRE
                    .Reset(M)
                End With
                List_MDT_TYPE_HORAIRE = New List(Of MDT_TYPE_HORAIRE)
                List_MDT_TYPE_HORAIRE = MDT_TYPE_HORAIRE.List()
                With MDT_TYPE_TARIF
                    .Reset(M)
                End With
                List_MDT_TYPE_TARIF = New List(Of MDT_TYPE_TARIF)
                List_MDT_TYPE_TARIF = MDT_TYPE_TARIF.List()
                With MDT_TYPE_TVA
                    .Reset(M)
                End With
                List_MDT_TYPE_TVA = New List(Of MDT_TYPE_TVA)
                List_MDT_TYPE_TVA = MDT_TYPE_TVA.List()
                With MDT_UTILISATEUR
                    .Reset(M)
                End With
                List_MDT_UTILISATEUR = New List(Of MDT_UTILISATEUR)
                List_MDT_UTILISATEUR = MDT_UTILISATEUR.List()


                With Pcompta
                    .Reset(M)
                End With
                List_Pcompta = New List(Of Pcompta)
                List_Pcompta = Pcompta.List()


            End Sub
#End Region '(Set|Get) The sub Filled.

#End Region
        End Class
#End Region

#End Region
    End Class
#End Region


End Module
